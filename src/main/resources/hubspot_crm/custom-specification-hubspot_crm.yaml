{
  "openapi": "3.0.3",
  "info": {
    "title": "CRM API",
    "description": "Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.",
    "version": "v3"
  },
  "servers": [
    {
      "url": "https://api.hubapi.com/"
    }
  ],
  "tags": [
    {
      "name": "Cards",
      "description": "Definitions and configuration for the CRM cards your app can display."
    },
    {
      "name": "SampleResponse",
      "description": "Operations related to card detail responses sent to HubSpot by an app."
    },
    {
      "name": "Associations"
    },
    {
      "name": "Basic"
    },
    {
      "name": "Batch"
    },
    {
      "name": "Search"
    },
    {
      "name": "Public_Object"
    },
    {
      "name": "Pipeline Stages"
    },
    {
      "name": "Pipelines"
    },
    {
      "name": "Pipeline Audits"
    },
    {
      "name": "Pipeline Stage Audits"
    },
    {
      "name": "Settings",
      "description": "Operations to interact with URL settings for an external accounting system."
    },
    {
      "name": "Callbacks",
      "description": "Endpoints that an external accounting system should call when it has finished performing a task requested by HubSpot.\n_Note that all responses to the callback endpoints should contain a `\"@result\"` field, that has a value of either `\"OK\"` or `\"ERR'`, which indicates if the response represents a success or failure of the requested task._\n"
    },
    {
      "name": "UserAccounts",
      "description": "Operations to inform HubSpot about some required account details for users in an external accounting system."
    },
    {
      "name": "Sync",
      "description": "Operations to synchronize external accounting system contacts and products with HubSpot."
    },
    {
      "name": "Invoice"
    },
    {
      "name": "Core"
    },
    {
      "name": "Public_Imports"
    },
    {
      "name": "Public_Object_Schemas"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Types"
    },
    {
      "name": "Owners"
    },
    {
      "name": "Templates",
      "description": "Definitions and configuration for timeline events."
    },
    {
      "name": "Tokens",
      "description": "Specific tokens that map to CRM properties and can be used by timeline events. This is how you can use property stamping to create full CRM objects."
    },
    {
      "name": "Events",
      "description": "Events shown on a CRM object's timeline."
    },
    {
      "name": "GDPR"
    }
  ],
  "paths": {
    "/crm/v3/extensions/cards/sample-response": {
      "get": {
        "tags": [
            "SampleResponse"
        ],
        "summary": "Get sample card detail response",
        "description": "Returns an example card detail response. This is the payload with displayed details for a card that will be shown to a user. An app should send this in response to the data fetch request.",
        "operationId": "get-/crm/v3/extensions/cards/sample-response_getCardsSampleResponse",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratorCardPayloadResponse"
                },
                "example": {
                  "responseVersion": "v3",
                  "cardLabel": "Tickets",
                  "allItemsLinkUrl": "https://example.com/all-items-link-url",
                  "totalCount": 1,
                  "topLevelActions": {
                    "secondary": [
                      {
                        "type": "IFRAME",
                        "width": 640,
                        "height": 480,
                        "url": "https://example.com/secondary-iframe",
                        "label": "test_label_secondary",
                        "propertyNamesIncluded": []
                      }
                    ],
                    "settings": {
                      "propertyNamesIncluded": [
                          "some_crm_property"
                      ],
                      "width": 640,
                      "label": "Edit",
                      "type": "IFRAME",
                      "url": "https://example.com/iframe-contents",
                      "height": 480
                    },
                    "primary": {
                      "propertyNamesIncluded": [],
                      "width": 640,
                      "label": "test_label_primary",
                      "type": "IFRAME",
                      "url": "https://example.com/primary-iframe",
                      "height": 480
                    }
                  },
                  "sections": [
                    {
                      "id": "123",
                      "title": "API-22: APIs working too fast",
                      "linkUrl": "http://example.com/1",
                      "tokens": [
                        {
                          "name": "created",
                          "label": "test_label",
                          "dataType": "DATE",
                          "value": "2016-08-04"
                        }
                      ],
                      "actions": [
                        {
                          "type": "ACTION_HOOK",
                          "httpMethod": "POST",
                          "url": "https://example.com/action-hook-frame",
                          "label": "action-hook-label",
                          "propertyNamesIncluded": [
                              "email",
                              "firstName"
                          ]
                        },
                        {
                          "type": "ACTION_HOOK",
                          "confirmation": {
                            "prompt": "action-confirmation-body-prompt",
                            "confirmButtonLabel": "Continue",
                            "cancelButtonLabel": "Cancel"
                          },
                          "httpMethod": "POST",
                          "url": "https://example.com/confirmation-action-hook",
                          "label": "confirmation-hook-label",
                          "propertyNamesIncluded": []
                        },
                        {
                          "type": "IFRAME",
                          "width": 640,
                          "height": 480,
                          "url": "https://example.com/iframe-action-label",
                          "label": "iframe-action-label",
                          "propertyNamesIncluded": [
                              "property1",
                              "property2",
                              "property3"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/extensions/cards/{appId}": {
      "get": {
        "tags": [
            "Cards"
        ],
        "summary": "Get all cards",
        "description": "Returns a list of cards for a given app.",
        "operationId": "get-/crm/v3/extensions/cards/{appId}_getAll",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardListResponse"
                },
                "example": {
                  "results": [
                    {
                      "id": "123",
                      "createdAt": "2020-02-26T18:30:53.451Z",
                      "updatedAt": "2020-02-26T18:30:53.451Z",
                      "title": "PetSpot",
                      "fetch": {
                        "targetUrl": "https://www.example.com/hubspot/target",
                        "objectTypes": [
                          {
                            "name": "contacts",
                            "propertiesToSend": [
                                "email",
                                "firstname"
                            ]
                          }
                        ]
                      },
                      "display": {
                        "properties": [
                          {
                            "name": "pet_name",
                            "label": "Pets Name",
                            "dataType": "STRING"
                          }
                        ]
                      },
                      "actions": {
                        "baseUrls": [
                            "https://www.example.com/hubspot"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "post": {
        "tags": [
            "Cards"
        ],
        "summary": "Create a new card",
        "description": "Defines a new card that will become active on an account when this app is installed.",
        "operationId": "post-/crm/v3/extensions/cards/{appId}_create",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new card definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "createdAt": "2019-10-30T03:30:17.883Z",
                  "fetch": {
                    "objectTypes": [
                      {
                        "name": "contacts",
                        "propertiesToSend": [
                            "email",
                            "firstname"
                        ]
                      }
                    ],
                    "targetUrl": "https://www.example.com/hubspot/target"
                  },
                  "display": {
                    "properties": [
                      {
                        "name": "pet_name",
                        "label": "Pet's Name",
                        "dataType": "STRING"
                      }
                    ]
                  },
                  "title": "PetSpot",
                  "actions": {
                    "baseUrls": [
                        "https://www.example.com/hubspot"
                    ]
                  },
                  "updatedAt": "2019-11-30T03:30:17.883Z"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/crm/v3/extensions/cards/{appId}/{cardId}": {
      "get": {
        "tags": [
            "Cards"
        ],
        "summary": "Get a card.",
        "description": "Returns the definition for a card with the given ID.",
        "operationId": "get-/crm/v3/extensions/cards/{appId}/{cardId}_getById",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "description": "The ID of the target card.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "createdAt": "2019-10-30T03:30:17.883Z",
                  "fetch": {
                    "objectTypes": [
                      {
                        "name": "contacts",
                        "propertiesToSend": [
                            "email",
                            "firstname"
                        ]
                      }
                    ],
                    "targetUrl": "https://www.example.com/hubspot/target"
                  },
                  "display": {
                    "properties": [
                      {
                        "name": "pet_name",
                        "label": "Pets Name",
                        "dataType": "STRING"
                      }
                    ]
                  },
                  "title": "PetSpot",
                  "actions": {
                    "baseUrls": [
                        "https://www.example.com/hubspot"
                    ]
                  },
                  "updatedAt": "2019-11-30T03:30:17.883Z"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "delete": {
        "tags": [
            "Cards"
        ],
        "summary": "Delete a card",
        "description": "Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.",
        "operationId": "delete-/crm/v3/extensions/cards/{appId}/{cardId}_archive",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "description": "The ID of the card to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "patch": {
        "tags": [
            "Cards"
        ],
        "summary": "Update a card",
        "description": "Update a card definition with new details.",
        "operationId": "patch-/crm/v3/extensions/cards/{appId}/{cardId}_update",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "description": "The ID of the card to update.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Card definition fields to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "createdAt": "2019-10-30T03:30:17.883Z",
                  "fetch": {
                    "objectTypes": [
                      {
                        "name": "contacts",
                        "propertiesToSend": [
                            "email",
                            "firstname"
                        ]
                      }
                    ],
                    "targetUrl": "https://www.example.com/hubspot/target"
                  },
                  "display": {
                    "properties": [
                      {
                        "name": "pet_name",
                        "label": "Pets Name",
                        "dataType": "STRING"
                      }
                    ]
                  },
                  "title": "PetSpot",
                  "actions": {
                    "baseUrls": [
                        "https://www.example.com/hubspot"
                    ]
                  },
                  "updatedAt": "2019-11-30T03:30:17.883Z"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/crm/v3/objects/products": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of products. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/products_getPage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.",
        "operationId": "post-/crm/v3/objects/products_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of products by ID",
        "operationId": "post-/crm/v3/objects/products/batch/archive_archive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of products",
        "operationId": "post-/crm/v3/objects/products/batch/create_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of products by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/products/batch/read_read",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of products",
        "operationId": "post-/crm/v3/objects/products/batch/update_update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two products with same type",
        "operationId": "post-/crm/v3/objects/products/merge_merge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/products/search_doSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/products/{productId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{productId}`. `{productId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/products/{productId}_getById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{productId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/products/{productId}_archive",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{productId}`. `{productId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/products/{productId}_update",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/{productId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of a product by type",
        "operationId": "get-/crm/v3/objects/products/{productId}/associations/{toObjectType}_getAll",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/products/{productId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate a product with another object",
        "operationId": "put-/crm/v3/objects/products/{productId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two products",
        "operationId": "delete-/crm/v3/objects/products/{productId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/pipelines/{objectType}": {
      "get": {
        "tags": [
            "Pipelines"
        ],
        "summary": "Retrieve all pipelines",
        "description": "Return all pipelines for the object type specified by `{objectType}`.",
        "operationId": "get-/crm/v3/pipelines/{objectType}_getAll",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePipelineNoPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Pipelines"
        ],
        "summary": "Create a pipeline",
        "description": "Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.",
        "operationId": "post-/crm/v3/pipelines/{objectType}_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/pipelines/{objectType}/{pipelineId}": {
      "get": {
        "tags": [
            "Pipelines"
        ],
        "summary": "Return a pipeline by ID",
        "description": "Return a single pipeline object identified by its unique `{pipelineId}`.",
        "operationId": "get-/crm/v3/pipelines/{objectType}/{pipelineId}_getById",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
            "Pipelines"
        ],
        "summary": "Replace a pipeline",
        "description": "Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.",
        "operationId": "put-/crm/v3/pipelines/{objectType}/{pipelineId}_replace",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validateReferencesBeforeDelete",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Pipelines"
        ],
        "summary": "Delete a pipeline",
        "description": "Delete the pipeline identified by `{pipelineId}`.",
        "operationId": "delete-/crm/v3/pipelines/{objectType}/{pipelineId}_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validateReferencesBeforeDelete",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Pipelines"
        ],
        "summary": "Update a pipeline",
        "description": "Perform a partial update of the pipeline identified by `{pipelineId}`. The updated pipeline will be returned in the response.",
        "operationId": "patch-/crm/v3/pipelines/{objectType}/{pipelineId}_update",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validateReferencesBeforeDelete",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelinePatchInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/pipelines/{objectType}/{pipelineId}/audit": {
      "get": {
        "tags": [
            "Pipeline Audits"
        ],
        "summary": "Return an audit of all changes to the pipeline",
        "description": "Return a reverse chronological list of all mutations that have occurred on the pipeline identified by `{pipelineId}`.",
        "operationId": "get-/crm/v3/pipelines/{objectType}/{pipelineId}/audit_getAudit",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePublicAuditInfoNoPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/pipelines/{objectType}/{pipelineId}/stages": {
      "get": {
        "tags": [
            "Pipeline Stages"
        ],
        "summary": "Return all stages of a pipeline",
        "description": "Return all the stages associated with the pipeline identified by `{pipelineId}`.",
        "operationId": "get-/crm/v3/pipelines/{objectType}/{pipelineId}/stages_getAll",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePipelineStageNoPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Pipeline Stages"
        ],
        "summary": "Create a pipeline stage",
        "description": "Create a new stage associated with the pipeline identified by `{pipelineId}`. The entire stage object, including its unique ID, will be returned in the response.",
        "operationId": "post-/crm/v3/pipelines/{objectType}/{pipelineId}/stages_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineStageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineStage"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}": {
      "get": {
        "tags": [
            "Pipeline Stages"
        ],
        "summary": "Return a pipeline stage by ID",
        "description": "Return the stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`.",
        "operationId": "get-/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}_getById",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineStage"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
            "Pipeline Stages"
        ],
        "summary": "Replace a pipeline stage",
        "description": "Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.",
        "operationId": "put-/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}_replace",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineStageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineStage"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Pipeline Stages"
        ],
        "summary": "Delete a pipeline stage",
        "description": "Delete the pipeline stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`.",
        "operationId": "delete-/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Pipeline Stages"
        ],
        "summary": "Update a pipeline stage",
        "description": "Perform a partial update of the pipeline stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.",
        "operationId": "patch-/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}_update",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineStagePatchInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineStage"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}/audit": {
      "get": {
        "tags": [
            "Pipeline Stage Audits"
        ],
        "summary": "Return an audit of all changes to the pipeline stage",
        "description": "Return a reverse chronological list of all mutations that have occurred on the pipeline stage identified by `{stageId}`.",
        "operationId": "get-/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}/audit_getAudit",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePublicAuditInfoNoPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/customer-create/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for customer creation response",
        "description": "Call this endpoint with the response to a customer creation request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/customer-create/{requestId}_createCustomer",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ID of the created customer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResultIdAccountingResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/customer-search/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for customer search response",
        "description": "Call this endpoint with the response to a customer search request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/customer-search/{requestId}_doCustomerSearch",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The result of the customer search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSearchResponseExternal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/exchange-rate/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for exchange rate response",
        "description": "Call this endpoint with the response to an exchange rate request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/exchange-rate/{requestId}_createExchangeRate",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The result of the exchange rate request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeRateResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/invoice-create/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for invoice creation response",
        "description": "Call this endpoint with the response to a invoice creation request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/invoice-create/{requestId}_createInvoice",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ID of the created invoice.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResultIdAccountingResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/invoice-pdf/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for PDF content of invoice",
        "description": "Call this endpoint with the PDF content of a requested invoice.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/invoice-pdf/{requestId}_invoicePdf",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The bytes of the invoice PDF.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoicePdfResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/invoice-search/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for invoice search response",
        "description": "Call this endpoint with the response to a invoice search request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/invoice-search/{requestId}_doInvoiceSearch",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The result of the invoice search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceSearchResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/invoices/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for invoice get-by-id response",
        "description": "Call this endpoint with the response to a invoice get-by-id request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/invoices/{requestId}_getById",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The result of the invoice request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoicesResponseExternal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/product-search/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for product search response",
        "description": "Call this endpoint with the response to a product search request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/product-search/{requestId}_doProductSearch",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The result of the product search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSearchResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/tax-search/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for taxes search response",
        "description": "Call this endpoint with the response to a taxes search request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/tax-search/{requestId}_doTaxSearch",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The result of the taxes search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxSearchResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/callback/terms/{requestId}": {
      "post": {
        "tags": [
            "Callbacks"
        ],
        "summary": "Endpoint for terms search response",
        "description": "Call this endpoint with the response to a terms search request.",
        "operationId": "post-/crm/v3/extensions/accounting/callback/terms/{requestId}_createTerm",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of the request that this response is for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The result of the terms search",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TermsResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/invoice/{invoiceId}": {
      "get": {
        "tags": [
            "Invoice"
        ],
        "summary": "Get invoice data",
        "description": "Returns invoice data for an Accounting account from the specified ID",
        "operationId": "get-/crm/v3/extensions/accounting/invoice/{invoiceId}_getById",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "The ID of the invoice. This is the invoice ID from the external accounting system.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "The ID of the account that the invoice belongs to. This is the account ID from the external accounting system.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceReadResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Invoice"
        ],
        "summary": "Update an invoice",
        "description": "Updates an Invoice by the given ID.",
        "operationId": "patch-/crm/v3/extensions/accounting/invoice/{invoiceId}_update",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "The ID of the invoice. This is the invoice ID from the external accounting system.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "The ID of the account that the invoice belongs to. This is the account ID from the external accounting system.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The invoice data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceUpdateResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/invoice/{invoiceId}/payment": {
      "post": {
        "tags": [
            "Invoice"
        ],
        "summary": "Records an invoice payment",
        "description": "Records an payment against an invoice.",
        "operationId": "post-/crm/v3/extensions/accounting/invoice/{invoiceId}/payment_createPayment",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "The ID of the invoice. This is the invoice ID from the external accounting system.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "The ID of the account that the invoice belongs to. This is the account ID from the external accounting system.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payment information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreatePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceUpdateResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/settings/{appId}": {
      "get": {
        "tags": [
            "Settings"
        ],
        "summary": "Get URL settings",
        "description": "Returns the URL settings for an accounting app with the specified ID.",
        "operationId": "get-/crm/v3/extensions/accounting/settings/{appId}_getById",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingAppSettings"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "put": {
        "tags": [
            "Settings"
        ],
        "summary": "Add/Update URL Settings",
        "description": "Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the `https` protocol.",
        "operationId": "put-/crm/v3/extensions/accounting/settings/{appId}_replace",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountingAppSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/extensions/accounting/sync/{appId}/contacts": {
      "post": {
        "tags": [
            "Sync"
        ],
        "summary": "Import contacts",
        "description": "Imports contacts' properties from an external accounting system to HubSpot. Import details, including property mappings, must be configured previously in HubSpot infrastructure.",
        "operationId": "post-/crm/v3/extensions/accounting/sync/{appId}/contacts_createContact",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncContactsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/sync/{appId}/products": {
      "post": {
        "tags": [
            "Sync"
        ],
        "summary": "Import products",
        "description": "Imports products' properties from an external accounting system to HubSpot. Import details, including property mappings, must be configured previously in HubSpot infrastructure.",
        "operationId": "post-/crm/v3/extensions/accounting/sync/{appId}/products_createProduct",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncProductsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/user-accounts": {
      "put": {
        "tags": [
            "UserAccounts"
        ],
        "summary": "Create a user account",
        "description": "Creates an account which contains the information about the account in the external accounting system.  This *must* be called after a user connects their HubSpot account to the external accounting system, as there is no other way for HubSpot to obtain the external account details.",
        "operationId": "put-/crm/v3/extensions/accounting/user-accounts_replace",
        "requestBody": {
          "description": "The external accounting system user account information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserAccountRequestExternal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/accounting/user-accounts/{accountId}": {
      "delete": {
        "tags": [
            "UserAccounts"
        ],
        "summary": "Delete user account",
        "description": "Deletes a user account from HubSpot, meaning that HubSpot will no longer send requests to the external accounting system for this user.",
        "operationId": "delete-/crm/v3/extensions/accounting/user-accounts/{accountId}_archive",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The ID of the user account to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "accounting"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of companies. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/companies_getPage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.",
        "operationId": "post-/crm/v3/objects/companies_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of companies by ID",
        "operationId": "post-/crm/v3/objects/companies/batch/archive_archive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of companies",
        "operationId": "post-/crm/v3/objects/companies/batch/create_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject1"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of companies by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/companies/batch/read_read",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject1"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of companies",
        "operationId": "post-/crm/v3/objects/companies/batch/update_update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject1"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two companies with same type",
        "operationId": "post-/crm/v3/objects/companies/merge_merge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/companies/search_doSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/companies/{companyId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{companyId}`. `{companyId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/companies/{companyId}_getById",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{companyId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/companies/{companyId}_archive",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{companyId}`. `{companyId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/companies/{companyId}_update",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/{companyId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of a company by type",
        "operationId": "get-/crm/v3/objects/companies/{companyId}/associations/{toObjectType}_getAll",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/companies/{companyId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate a company with another object",
        "operationId": "put-/crm/v3/objects/companies/{companyId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two companies",
        "operationId": "delete-/crm/v3/objects/companies/{companyId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/calling/{appId}/settings": {
      "get": {
        "tags": [
            "Settings"
        ],
        "summary": "Get calling settings",
        "description": "Returns the calling extension settings configured for your app.",
        "operationId": "get-/crm/v3/extensions/calling/{appId}/settings_getById",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsResponse"
                },
                "example": {
                  "createdAt": "2019-10-30T03:30:17.883Z",
                  "supportsCustomObjects": true,
                  "isReady": true,
                  "name": "HubPhone",
                  "width": 200,
                  "url": "https://www.example.com/hubspot/iframe",
                  "height": 350,
                  "updatedAt": "2019-11-30T03:30:17.883Z"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "post": {
        "tags": [
            "Settings"
        ],
        "summary": "Configure a calling extension",
        "description": "Used to set the menu label, target iframe URL, and dimensions for your calling extension.",
        "operationId": "post-/crm/v3/extensions/calling/{appId}/settings_create",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Settings state to create with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsResponse"
                },
                "example": {
                  "createdAt": "2019-10-30T03:30:17.883Z",
                  "supportsCustomObjects": true,
                  "isReady": true,
                  "name": "HubPhone",
                  "width": 200,
                  "url": "https://www.example.com/hubspot/iframe",
                  "height": 350,
                  "updatedAt": "2019-11-30T03:30:17.883Z"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "delete": {
        "tags": [
            "Settings"
        ],
        "summary": "Delete calling settings",
        "description": "Deletes this calling extension. This will remove your service as an option for all connected accounts.",
        "operationId": "delete-/crm/v3/extensions/calling/{appId}/settings_archive",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "patch": {
        "tags": [
            "Settings"
        ],
        "summary": "Update settings",
        "description": "Updates existing calling extension settings.",
        "operationId": "patch-/crm/v3/extensions/calling/{appId}/settings_update",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Updated details for the settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsResponse"
                },
                "example": {
                  "createdAt": "2019-10-30T03:30:17.883Z",
                  "supportsCustomObjects": true,
                  "isReady": true,
                  "name": "HubPhone",
                  "width": 200,
                  "url": "https://www.example.com/hubspot/iframe",
                  "height": 350,
                  "updatedAt": "2019-11-30T03:30:17.883Z"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/crm/v3/objects/quotes": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of quotes. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/quotes_getPage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a quote with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard quotes is provided.",
        "operationId": "post-/crm/v3/objects/quotes_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of quotes by ID",
        "operationId": "post-/crm/v3/objects/quotes/batch/archive_archive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of quotes",
        "operationId": "post-/crm/v3/objects/quotes/batch/create_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject2"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of quotes by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/quotes/batch/read_read",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject2"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of quotes",
        "operationId": "post-/crm/v3/objects/quotes/batch/update_update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject2"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two quotes with same type",
        "operationId": "post-/crm/v3/objects/quotes/merge_merge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/quotes/search_doSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/quotes/{quoteId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{quoteId}`. `{quoteId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/quotes/{quoteId}_getById",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{quoteId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/quotes/{quoteId}_archive",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{quoteId}`. `{quoteId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/quotes/{quoteId}_update",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/{quoteId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of a quote by type",
        "operationId": "get-/crm/v3/objects/quotes/{quoteId}/associations/{toObjectType}_getAll",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/quotes/{quoteId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate a quote with another object",
        "operationId": "put-/crm/v3/objects/quotes/{quoteId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two quotes",
        "operationId": "delete-/crm/v3/objects/quotes/{quoteId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of deals. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/deals_getPage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.",
        "operationId": "post-/crm/v3/objects/deals_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of deals by ID",
        "operationId": "post-/crm/v3/objects/deals/batch/archive_archive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of deals",
        "operationId": "post-/crm/v3/objects/deals/batch/create_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject3"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of deals by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/deals/batch/read_read",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject3"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of deals",
        "operationId": "post-/crm/v3/objects/deals/batch/update_update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject3"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two deals with same type",
        "operationId": "post-/crm/v3/objects/deals/merge_merge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/deals/search_doSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/deals/{dealId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{dealId}`. `{dealId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/deals/{dealId}_getById",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{dealId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/deals/{dealId}_archive",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{dealId}`. `{dealId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/deals/{dealId}_update",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/{dealId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of a deal by type",
        "operationId": "get-/crm/v3/objects/deals/{dealId}/associations/{toObjectType}_getAll",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/deals/{dealId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate a deal with another object",
        "operationId": "put-/crm/v3/objects/deals/{dealId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two deals",
        "operationId": "delete-/crm/v3/objects/deals/{dealId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/imports/": {
      "get": {
        "tags": [
            "Core"
        ],
        "summary": "Get active imports",
        "description": "Returns a paged list of active imports for this account.",
        "operationId": "get-/crm/v3/imports/_getPage",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePublicImportResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "post": {
        "tags": [
            "Core"
        ],
        "summary": "Start a new import",
        "description": "Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.",
        "operationId": "post-/crm/v3/imports/_create",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "files": {
                    "type": "string",
                    "description": "A list of files containing the data to import",
                    "format": "binary"
                  },
                  "importRequest": {
                    "type": "string",
                    "description": "JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicImportResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.import"
            ]
          }
        ]
      }
    },
    "/crm/v3/imports/{importId}": {
      "get": {
        "tags": [
            "Core"
        ],
        "summary": "Get the information on any import",
        "description": "A complete summary of an import record, including any updates.",
        "operationId": "get-/crm/v3/imports/{importId}_getById",
        "parameters": [
          {
            "name": "importId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicImportResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/imports/{importId}/cancel": {
      "post": {
        "tags": [
            "Core"
        ],
        "summary": "Cancel an active import",
        "description": "This allows a developer to cancel an active import.",
        "operationId": "post-/crm/v3/imports/{importId}/cancel_cancel",
        "parameters": [
          {
            "name": "importId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.import"
            ]
          }
        ]
      }
    },
    "/crm/v3/imports/{importId}/errors": {
      "get": {
        "tags": [
            "Public_Imports"
        ],
        "operationId": "get-/crm/v3/imports/{importId}/errors_getErrors",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "importId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePublicImportErrorForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/schemas": {
      "get": {
        "tags": [
            "Core"
        ],
        "summary": "Get all schemas",
        "description": "Returns all object schemas that have been defined for your account.",
        "operationId": "get-/crm-object-schemas/v3/schemas_getAll",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseObjectSchemaNoPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Core"
        ],
        "summary": "Create a new schema",
        "description": "Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.",
        "operationId": "post-/crm-object-schemas/v3/schemas_create",
        "requestBody": {
          "description": "Object schema definition, including properties and associations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectSchemaEgg"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/schemas/{objectType}": {
      "get": {
        "tags": [
            "Core"
        ],
        "summary": "Get an existing schema",
        "description": "Returns an existing object schema.",
        "operationId": "get-/crm-object-schemas/v3/schemas/{objectType}_getById",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Fully qualified name or object type ID of your schema.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSchema"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Core"
        ],
        "summary": "Delete a schema",
        "description": "Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.",
        "operationId": "delete-/crm-object-schemas/v3/schemas/{objectType}_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Fully qualified name or object type ID of your schema.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "patch": {
        "tags": [
            "Core"
        ],
        "summary": "Update a schema",
        "description": "Update the details for an existing object schema.",
        "operationId": "patch-/crm-object-schemas/v3/schemas/{objectType}_update",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Fully qualified name or object type ID of your schema.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attributes to update in your schema.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectTypeDefinitionPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectTypeDefinition"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/schemas/{objectType}/associations": {
      "post": {
        "tags": [
            "Core"
        ],
        "summary": "Create an association",
        "description": "Defines a new association between the primary schema's object type and other object types.",
        "operationId": "post-/crm-object-schemas/v3/schemas/{objectType}/associations_createAssociation",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Fully qualified name or object type ID of your schema.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attributes that define the association.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationDefinitionEgg"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationDefinition"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/schemas/{objectType}/associations/{associationIdentifier}": {
      "delete": {
        "tags": [
            "Core"
        ],
        "summary": "Remove an association",
        "description": "Removes an existing association from a schema.",
        "operationId": "delete-/crm-object-schemas/v3/schemas/{objectType}/associations/{associationIdentifier}_archiveAssociation",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Fully qualified name or object type ID of your schema.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationIdentifier",
            "in": "path",
            "description": "Unique ID of the association to remove.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/schemas/{objectType}/purge": {
      "delete": {
        "tags": [
            "Public_Object_Schemas"
        ],
        "operationId": "delete-/crm-object-schemas/v3/schemas/{objectType}/purge_purge",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "deprecated": true,
        "security": []
      }
    },
    "/crm/v3/properties/{objectType}": {
      "get": {
        "tags": [
            "Core"
        ],
        "summary": "Read all properties",
        "description": "Read all existing properties for the specified object type and HubSpot account.",
        "operationId": "get-/crm/v3/properties/{objectType}_getAll",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseProperty"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Core"
        ],
        "summary": "Create a property",
        "description": "Create and return a copy of a new property for the specified object type.",
        "operationId": "post-/crm/v3/properties/{objectType}_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/properties/{objectType}/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of properties",
        "description": "Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).",
        "operationId": "post-/crm/v3/properties/{objectType}/batch/archive_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputPropertyName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/properties/{objectType}/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of properties",
        "description": "Create a batch of properties using the same rules as when creating an individual property.",
        "operationId": "post-/crm/v3/properties/{objectType}/batch/create_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputPropertyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseProperty"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseProperty"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/properties/{objectType}/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of properties",
        "description": "Read a provided list of properties.",
        "operationId": "post-/crm/v3/properties/{objectType}/batch/read_read",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputPropertyName"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseProperty"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseProperty"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/properties/{objectType}/groups": {
      "get": {
        "tags": [
            "Groups"
        ],
        "summary": "Read all property groups",
        "description": "Read all existing property groups for the specified object type and HubSpot account.",
        "operationId": "get-/crm/v3/properties/{objectType}/groups_getAll",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePropertyGroup"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Groups"
        ],
        "summary": "Create a property group",
        "description": "Create and return a copy of a new property group.",
        "operationId": "post-/crm/v3/properties/{objectType}/groups_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyGroupCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyGroup"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/properties/{objectType}/groups/{groupName}": {
      "get": {
        "tags": [
            "Groups"
        ],
        "summary": "Read a property group",
        "description": "Read a property group identified by {groupName}.",
        "operationId": "get-/crm/v3/properties/{objectType}/groups/{groupName}_getByName",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyGroup"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Groups"
        ],
        "summary": "Archive a property group",
        "description": "Move a property group identified by {groupName} to the recycling bin.",
        "operationId": "delete-/crm/v3/properties/{objectType}/groups/{groupName}_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Groups"
        ],
        "summary": "Update a property group",
        "description": "Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.",
        "operationId": "patch-/crm/v3/properties/{objectType}/groups/{groupName}_update",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyGroupUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyGroup"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/properties/{objectType}/{propertyName}": {
      "get": {
        "tags": [
            "Core"
        ],
        "summary": "Read a property",
        "description": "Read a property identified by {propertyName}.",
        "operationId": "get-/crm/v3/properties/{objectType}/{propertyName}_getByName",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.schemas.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.schemas.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.quotes.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.read"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.read"
            ]
          },
          {
            "oauth2_legacy": [
                "timeline"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.line_items.read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Core"
        ],
        "summary": "Archive a property",
        "description": "Move a property identified by {propertyName} to the recycling bin.",
        "operationId": "delete-/crm/v3/properties/{objectType}/{propertyName}_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Core"
        ],
        "summary": "Update a property",
        "description": "Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.",
        "operationId": "patch-/crm/v3/properties/{objectType}/{propertyName}_update",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property1"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.deals.write"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.schemas.companies.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of associations",
        "description": "Remove the associations between all pairs of objects identified in the request body.",
        "operationId": "post-/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/archive_archive",
        "parameters": [
          {
            "name": "fromObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputPublicAssociation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of associations",
        "description": "Associate all pairs of objects identified in the request body.",
        "operationId": "post-/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/create_create",
        "parameters": [
          {
            "name": "fromObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputPublicAssociation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponsePublicAssociation"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponsePublicAssociation"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of associations",
        "description": "Get the IDs of all `{toObjectType}` objects associated with those specified in the request body.",
        "operationId": "post-/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/read_read",
        "parameters": [
          {
            "name": "fromObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputPublicObjectId"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponsePublicAssociationMulti"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponsePublicAssociationMulti"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/associations/{fromObjectType}/{toObjectType}/types": {
      "get": {
        "tags": [
            "Types"
        ],
        "summary": "List association types",
        "description": "List all the valid association types available between two object types",
        "operationId": "get-/crm/v3/associations/{fromObjectType}/{toObjectType}/types_getAll",
        "parameters": [
          {
            "name": "fromObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePublicAssociationDefiniton"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/owners/": {
      "get": {
        "tags": [
            "Owners"
        ],
        "summary": "Get a page of owners",
        "operationId": "get-/crm/v3/owners/_getPage",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Filter by email address (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponsePublicOwnerForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.owners.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/owners/{ownerId}": {
      "get": {
        "tags": [
            "Owners"
        ],
        "summary": "Read an owner by given `id` or `userId`",
        "operationId": "get-/crm/v3/owners/{ownerId}_getById",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                  "id",
                  "userId"
              ]
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicOwner"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2": [
                "crm.objects.owners.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/timeline/events": {
      "post": {
        "tags": [
            "Events"
        ],
        "summary": "Create a single event",
        "description": "Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via `objectPropertyName`, this call will also attempt to updates those properties, or add them if they don't exist.",
        "operationId": "post-/integrators/timeline/v3/events_create",
        "requestBody": {
          "description": "The timeline event definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimelineEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventResponse"
                },
                "example": {
                  "objectType": "contacts",
                  "id": "petspot:1001298:art3mis-pup@petspot.com-004",
                  "eventTemplateId": "1001298",
                  "email": "art3mis-pup@petspot.com",
                  "objectId": "28001",
                  "timestamp": "2020-01-30T17:42:10.276Z",
                  "tokens": {
                    "petName": "Art3mis",
                    "petColor": "black",
                    "petAge": "3"
                  },
                  "extraData": {
                    "questions": [
                      {
                        "question": "Who's a good girl?",
                        "answer": "Bark!"
                      },
                      {
                        "question": "Do you wanna go on a walk?",
                        "answer": "Woof!"
                      }
                    ]
                  },
                  "timelineIFrame": {
                    "linkLabel": "View Art3mis",
                    "headerLabel": "Art3mis dog",
                    "url": "https://my.petspot.com/pets/Art3mis",
                    "width": 600,
                    "height": 400
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts",
                "timeline",
                "tickets"
            ]
          }
        ]
      }
    },
    "/crm/v3/timeline/events/batch/create": {
      "post": {
        "tags": [
            "Events"
        ],
        "summary": "Creates multiple events",
        "description": "Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via `objectPropertyName`, this call will also attempt to updates those properties, or add them if they don't exist.",
        "operationId": "post-/integrators/timeline/v3/events/batch/create_createBatch",
        "requestBody": {
          "description": "The timeline event definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputTimelineEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseTimelineEventResponse"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseTimelineEventResponseWithErrors"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts",
                "timeline",
                "tickets"
            ]
          }
        ]
      }
    },
    "/crm/v3/timeline/events/{eventTemplateId}/{eventId}": {
      "get": {
        "tags": [
            "Events"
        ],
        "summary": "Gets the event",
        "description": "This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.",
        "operationId": "get-/integrators/timeline/v3/events/{eventTemplateId}/{eventId}_getById",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts",
                "timeline",
                "tickets"
            ]
          }
        ]
      }
    },
    "/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail": {
      "get": {
        "tags": [
            "Events"
        ],
        "summary": "Gets the detailTemplate as rendered",
        "description": "This will take the `detailTemplate` from the event template and return an object rendering the specified event. If the template references `extraData` that isn't found in the event, it will be ignored and we'll render without it.",
        "operationId": "get-/integrators/timeline/v3/events/{eventTemplateId}/{eventId}/detail_getDetailById",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetail"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts",
                "timeline",
                "tickets"
            ]
          }
        ]
      }
    },
    "/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render": {
      "get": {
        "tags": [
            "Events"
        ],
        "summary": "Renders the header or detail as HTML",
        "description": "This will take either the `headerTemplate` or `detailTemplate` from the event template and render for the specified event as HTML. If the template references `extraData` that isn't found in the event, it will be ignored and we'll render without it.",
        "operationId": "get-/integrators/timeline/v3/events/{eventTemplateId}/{eventId}/render_getRenderById",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail",
            "in": "query",
            "description": "Set to 'true', we want to render the `detailTemplate` instead of the `headerTemplate`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "contacts",
                "timeline",
                "tickets"
            ]
          }
        ]
      }
    },
    "/crm/v3/timeline/{appId}/event-templates": {
      "get": {
        "tags": [
            "Templates"
        ],
        "summary": "List all event templates for your app",
        "description": "Use this to list all event templates owned by your app.",
        "operationId": "get-/integrators/timeline/v3/{appId}/event-templates_getAll",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseTimelineEventTemplateNoPaging"
                },
                "example": {
                  "results": [
                    {
                      "id": "15758",
                      "objectType": "companies",
                      "name": "company test",
                      "headerTemplate": "abcde",
                      "tokens": []
                    },
                    {
                      "id": "1000151",
                      "objectType": "deals",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "name": "deal test",
                      "headerTemplate": "deal",
                      "detailTemplate": "Deal occurred at {{#formatDate timestamp}}{{/formatDate}}\n\ntest",
                      "tokens": [
                        {
                          "name": "test",
                          "type": "string",
                          "createdAt": "2020-02-12T20:58:26Z",
                          "updatedAt": "2020-02-12T20:58:26Z",
                          "label": "test",
                          "objectPropertyName": "test",
                          "options": []
                        }
                      ]
                    },
                    {
                      "id": "1001298",
                      "objectType": "contacts",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "name": "PetSpot Registration",
                      "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
                      "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}\n\nEDIT",
                      "tokens": [
                        {
                          "name": "petAge",
                          "type": "number",
                          "createdAt": "2020-02-12T20:58:26Z",
                          "updatedAt": "2020-02-12T20:58:26Z",
                          "label": "Pet Age",
                          "options": []
                        },
                        {
                          "name": "petColor",
                          "type": "enumeration",
                          "createdAt": "2020-02-12T20:58:26Z",
                          "updatedAt": "2020-02-12T20:58:26Z",
                          "label": "Pet Color",
                          "options": [
                            {
                              "value": "black",
                              "label": "Black"
                            },
                            {
                              "value": "brown",
                              "label": "Brown"
                            },
                            {
                              "value": "other",
                              "label": "Other"
                            },
                            {
                              "value": "white",
                              "label": "White"
                            },
                            {
                              "value": "yellow",
                              "label": "Yellow"
                            }
                          ]
                        },
                        {
                          "name": "petName",
                          "type": "string",
                          "createdAt": "2020-02-12T20:58:26Z",
                          "updatedAt": "2020-02-12T20:58:26Z",
                          "label": "Pet Name",
                          "options": []
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "post": {
        "tags": [
            "Templates"
        ],
        "summary": "Create an event template for your app",
        "description": "Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.\n\nEvent templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.\n\nEach event template contains its own set of tokens and `Markdown` templates. These tokens can be associated with any CRM object properties via the `objectPropertyName` field to fully build out CRM objects.\n\nYou must create an event template before you can create events.",
        "operationId": "post-/integrators/timeline/v3/{appId}/event-templates_create",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new event template definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimelineEventTemplateCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventTemplate"
                },
                "example": {
                  "id": "1001298",
                  "objectType": "contacts",
                  "createdAt": "2020-02-12T20:58:26Z",
                  "updatedAt": "2020-02-12T20:58:26Z",
                  "name": "PetSpot Registration",
                  "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
                  "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}",
                  "tokens": [
                    {
                      "name": "petName",
                      "type": "string",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Name",
                      "options": []
                    },
                    {
                      "name": "petAge",
                      "type": "number",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Age",
                      "options": []
                    },
                    {
                      "name": "petColor",
                      "type": "enumeration",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Color",
                      "options": [
                        {
                          "value": "white",
                          "label": "White"
                        },
                        {
                          "value": "black",
                          "label": "Black"
                        },
                        {
                          "value": "brown",
                          "label": "Brown"
                        },
                        {
                          "value": "other",
                          "label": "Other"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}": {
      "get": {
        "tags": [
            "Templates"
        ],
        "summary": "Gets a specific event template for your app",
        "description": "View the current state of a specific template and its tokens.",
        "operationId": "get-/integrators/timeline/v3/{appId}/event-templates/{eventTemplateId}_getById",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventTemplate"
                },
                "example": {
                  "id": "1001298",
                  "objectType": "contacts",
                  "createdAt": "2020-02-12T20:58:26Z",
                  "updatedAt": "2020-02-12T20:58:26Z",
                  "name": "PetSpot Registration",
                  "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
                  "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}\n\nEDIT",
                  "tokens": [
                    {
                      "name": "petAge",
                      "type": "number",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Age",
                      "options": []
                    },
                    {
                      "name": "petColor",
                      "type": "enumeration",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Color",
                      "options": [
                        {
                          "value": "black",
                          "label": "Black"
                        },
                        {
                          "value": "brown",
                          "label": "Brown"
                        },
                        {
                          "value": "other",
                          "label": "Other"
                        },
                        {
                          "value": "white",
                          "label": "White"
                        },
                        {
                          "value": "yellow",
                          "label": "Yellow"
                        }
                      ]
                    },
                    {
                      "name": "petName",
                      "type": "string",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Name",
                      "options": []
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "put": {
        "tags": [
            "Templates"
        ],
        "summary": "Update an existing event template",
        "description": "Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.\n\nYou can also update or replace all the tokens in the template here instead of doing individual API calls on the `/tokens` endpoint.",
        "operationId": "put-/integrators/timeline/v3/{appId}/event-templates/{eventTemplateId}_update",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated event template definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimelineEventTemplateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventTemplate"
                },
                "example": {
                  "id": "1001298",
                  "objectType": "contacts",
                  "createdAt": "2020-02-12T20:58:26Z",
                  "updatedAt": "2020-02-12T20:58:26Z",
                  "name": "PetSpot Registration",
                  "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
                  "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}\n\nEDIT",
                  "tokens": [
                    {
                      "name": "petAge",
                      "type": "number",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Age",
                      "options": []
                    },
                    {
                      "name": "petColor",
                      "type": "enumeration",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Color",
                      "options": [
                        {
                          "value": "white",
                          "label": "White"
                        },
                        {
                          "value": "black",
                          "label": "Black"
                        },
                        {
                          "value": "brown",
                          "label": "Brown"
                        },
                        {
                          "value": "yellow",
                          "label": "Yellow"
                        },
                        {
                          "value": "other",
                          "label": "Other"
                        }
                      ]
                    },
                    {
                      "name": "petName",
                      "type": "string",
                      "createdAt": "2020-02-12T20:58:26Z",
                      "updatedAt": "2020-02-12T20:58:26Z",
                      "label": "Pet Name",
                      "objectPropertyName": "firstname",
                      "options": []
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "delete": {
        "tags": [
            "Templates"
        ],
        "summary": "Deletes an event template for the app",
        "description": "This will delete the event template. All associated events will be removed from search results and the timeline UI.\n\nThis action can't be undone, so it's highly recommended that you stop using any associated events before deleting a template.",
        "operationId": "delete-/integrators/timeline/v3/{appId}/event-templates/{eventTemplateId}_archive",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens": {
      "post": {
        "tags": [
            "Tokens"
        ],
        "summary": "Adds a token to an existing event template",
        "description": "Once you've defined an event template, it's likely that you'll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.\n\nEvent type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.\n\nYou can also use `objectPropertyName` to associate any CRM object properties. This will allow you to fully build out CRM objects.\n\nToken names should be unique across the template.",
        "operationId": "post-/integrators/timeline/v3/{appId}/event-templates/{eventTemplateId}/tokens_create",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new token definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimelineEventTemplateToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventTemplateToken"
                },
                "example": {
                  "name": "petType",
                  "type": "enumeration",
                  "createdAt": "2020-02-12T20:58:26Z",
                  "updatedAt": "2020-02-12T20:58:26Z",
                  "label": "Pet Type",
                  "options": [
                    {
                      "value": "dog",
                      "label": "Dog"
                    },
                    {
                      "value": "cat",
                      "label": "Cat"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}": {
      "put": {
        "tags": [
            "Tokens"
        ],
        "summary": "Updates an existing token on an event template",
        "description": "This will update the existing token on an event template. Name and type can't be changed on existing tokens.",
        "operationId": "put-/integrators/timeline/v3/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}_update",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenName",
            "in": "path",
            "description": "The token name.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated token definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimelineEventTemplateTokenUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventTemplateToken"
                },
                "example": {
                  "name": "petType",
                  "type": "enumeration",
                  "createdAt": "2020-02-12T20:58:26Z",
                  "updatedAt": "2020-02-12T20:58:26Z",
                  "label": "Pet Type",
                  "options": [
                    {
                      "value": "dog",
                      "label": "Dog"
                    },
                    {
                      "value": "cat",
                      "label": "Cat"
                    },
                    {
                      "value": "bird",
                      "label": "Bird"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "delete": {
        "tags": [
            "Tokens"
        ],
        "summary": "Removes a token from the event template",
        "description": "This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.\n\nThe timeline will still display this property for older CRM objects if it's still referenced in the template `Markdown`. New events will not.\n\nAny lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.",
        "operationId": "delete-/integrators/timeline/v3/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}_archive",
        "parameters": [
          {
            "name": "eventTemplateId",
            "in": "path",
            "description": "The event template ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenName",
            "in": "path",
            "description": "The token name.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the target app.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/crm/v3/objects/contacts": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of contacts. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/contacts_getPage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.",
        "operationId": "post-/crm/v3/objects/contacts_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of contacts by ID",
        "operationId": "post-/crm/v3/objects/contacts/batch/archive_archive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of contacts",
        "operationId": "post-/crm/v3/objects/contacts/batch/create_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject4"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of contacts by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/contacts/batch/read_read",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject4"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of contacts",
        "operationId": "post-/crm/v3/objects/contacts/batch/update_update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject4"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/gdpr-delete": {
      "post": {
        "tags": [
            "GDPR"
        ],
        "summary": "GDPR DELETE",
        "description": "Permanently delete a contact and all associated content to follow GDPR. Use optional property 'idProperty' set to 'email' to identify contact by email address. If email address is not found, the email address will be added to a blocklist and prevent it from being used in the future.",
        "operationId": "post-/crm/v3/objects/contacts/gdpr-delete_purge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicGdprDeleteInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two contacts with same type",
        "operationId": "post-/crm/v3/objects/contacts/merge_merge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/contacts/search_doSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging2"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/contacts/{contactId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/contacts/{contactId}_getById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{contactId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/contacts/{contactId}_archive",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/contacts/{contactId}_update",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of a contact by type",
        "operationId": "get-/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}_getAll",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate a contact with another object",
        "operationId": "put-/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two contacts",
        "operationId": "delete-/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/feedback_submissions": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of feedback submissions. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/feedback-submissions_getPage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a feedback submission with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard feedback submissions is provided.",
        "operationId": "post-/crm/v3/objects/feedback-submissions_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput5"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of feedback submissions by ID",
        "operationId": "post-/crm/v3/objects/feedback-submissions/batch/archive_archive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of feedback submissions",
        "operationId": "post-/crm/v3/objects/feedback-submissions/batch/create_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput5"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject5"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of feedback submissions by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/feedback-submissions/batch/read_read",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject5"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of feedback submissions",
        "operationId": "post-/crm/v3/objects/feedback-submissions/batch/update_update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput5"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject5"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two feedback submissions with same type",
        "operationId": "post-/crm/v3/objects/feedback-submissions/merge_merge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/feedback-submissions/search_doSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging3"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/feedback_submissions/{feedbackSubmissionId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{feedbackSubmissionId}`. `{feedbackSubmissionId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/feedback-submissions/{feedbackSubmissionId}_getById",
        "parameters": [
          {
            "name": "feedbackSubmissionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{feedbackSubmissionId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/feedback-submissions/{feedbackSubmissionId}_archive",
        "parameters": [
          {
            "name": "feedbackSubmissionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{feedbackSubmissionId}`. `{feedbackSubmissionId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/feedback-submissions/{feedbackSubmissionId}_update",
        "parameters": [
          {
            "name": "feedbackSubmissionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput5"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/{feedbackSubmissionId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of a feedback submission by type",
        "operationId": "get-/crm/v3/objects/feedback-submissions/{feedbackSubmissionId}/associations/{toObjectType}_getPage",
        "parameters": [
          {
            "name": "feedbackSubmissionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/feedback_submissions/{feedbackSubmissionId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate a feedback submission with another object",
        "operationId": "put-/crm/v3/objects/feedback-submissions/{feedbackSubmissionId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "feedbackSubmissionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two feedback submissions",
        "operationId": "delete-/crm/v3/objects/feedback-submissions/{feedbackSubmissionId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "feedbackSubmissionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/{objectType}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of objects. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/{objectType}_getPage",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.",
        "operationId": "post-/crm/v3/objects/{objectType}_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput6"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of objects by ID",
        "operationId": "post-/crm/v3/objects/{objectType}/batch/archive_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of objects",
        "operationId": "post-/crm/v3/objects/{objectType}/batch/create_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput6"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject6"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of objects by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/{objectType}/batch/read_read",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject6"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of objects",
        "operationId": "post-/crm/v3/objects/{objectType}/batch/update_update",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput6"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject6"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/gdpr-delete": {
      "post": {
        "tags": [
            "GDPR"
        ],
        "summary": "GDPR DELETE",
        "description": "Permanently delete a contact and all associated content to follow GDPR. Use optional property 'idProperty' set to 'email' to identify contact by email address. If email address is not found, the email address will be added to a blocklist and prevent it from being used in the future.",
        "operationId": "post-/crm/v3/objects/{objectType}/gdpr-delete_purge",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicGdprDeleteInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two objects with same type",
        "operationId": "post-/crm/v3/objects/{objectType}/merge_merge",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/{objectType}/search_doSearch",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging4"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/{objectType}/{objectId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{objectId}`. `{objectId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/{objectType}/{objectId}_getById",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{objectId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/{objectType}/{objectId}_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{objectId}`. `{objectId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/{objectType}/{objectId}_update",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput6"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of an object by type",
        "operationId": "get-/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}_getAll",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate an object with another object",
        "operationId": "put-/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two objects",
        "operationId": "delete-/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.quotes.write"
            ]
          },
          {
            "oauth2_legacy": [
                "tickets"
            ]
          },
          {
            "oauth2_legacy": [
                "media_bridge.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.contacts.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.read"
            ]
          },
          {
            "oauth2": [
                "crm.objects.deals.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.quotes.read"
            ]
          },
          {
            "oauth2_legacy": [
                "contacts"
            ]
          },
          {
            "oauth2_legacy": [
                "crm.objects.custom.write"
            ]
          },
          {
            "oauth2": [
                "crm.objects.companies.write"
            ]
          }
        ]
      }
    },
    "/crm/v3/extensions/videoconferencing/settings/{appId}": {
      "get": {
        "tags": [
            "Settings"
        ],
        "summary": "Get settings",
        "description": "Return the settings for a video conference application with the specified ID.",
        "operationId": "get-/crm/v3/extensions/videoconferencing/settings/{appId}_getById",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalSettings"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "put": {
        "tags": [
            "Settings"
        ],
        "summary": "Update settings",
        "description": "Updates the settings for a video conference application with the specified ID.",
        "operationId": "put-/crm/v3/extensions/videoconferencing/settings/{appId}_replace",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalSettings"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
            "Settings"
        ],
        "summary": "Delete settings",
        "description": "Deletes the settings for a video conference application with the specified ID.",
        "operationId": "delete-/crm/v3/extensions/videoconferencing/settings/{appId}_archive",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": []
      }
    },
    "/crm/v3/objects/line_items": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "List",
        "description": "Read a page of line items. Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/line-items_getPage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging7"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create",
        "description": "Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.",
        "operationId": "post-/crm/v3/objects/line-items_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject7"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/batch/archive": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Archive a batch of line items by ID",
        "operationId": "post-/crm/v3/objects/line-items/batch/archive_archive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/batch/create": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create a batch of line items",
        "operationId": "post-/crm/v3/objects/line-items/batch/create_create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectInput7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject7"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/batch/read": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Read a batch of line items by internal ID, or unique property values",
        "operationId": "post-/crm/v3/objects/line-items/batch/read_read",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject7"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/batch/update": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Update a batch of line items",
        "operationId": "post-/crm/v3/objects/line-items/batch/update_update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputSimplePublicObjectBatchInput7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObject7"
                }
              }
            }
          },
          "207": {
            "description": "multiple statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseSimplePublicObjectWithErrors6"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/merge": {
      "post": {
        "tags": [
            "Public_Object"
        ],
        "summary": "Merge two line items with same type",
        "operationId": "post-/crm/v3/objects/line-items/merge_merge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicMergeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject7"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/search": {
      "post": {
        "tags": [
            "Search"
        ],
        "operationId": "post-/crm/v3/objects/line-items/search_doSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "ten-secondly"
        ]
      }
    },
    "/crm/v3/objects/line_items/{lineItemId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Read",
        "description": "Read an Object identified by `{lineItemId}`. `{lineItemId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId": "get-/crm/v3/objects/line-items/{lineItemId}_getById",
        "parameters": [
          {
            "name": "lineItemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "propertiesWithHistory",
            "in": "query",
            "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associations",
            "in": "query",
            "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Whether to return only results that have been archived.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations7"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Archive",
        "description": "Move an Object identified by `{lineItemId}` to the recycling bin.",
        "operationId": "delete-/crm/v3/objects/line-items/{lineItemId}_archive",
        "parameters": [
          {
            "name": "lineItemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update",
        "description": "Perform a partial update of an Object identified by `{lineItemId}`. `{lineItemId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId": "patch-/crm/v3/objects/line-items/{lineItemId}_update",
        "parameters": [
          {
            "name": "lineItemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idProperty",
            "in": "query",
            "description": "The name of a property whose values are unique for this object type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplePublicObjectInput7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObject7"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}": {
      "get": {
        "tags": [
            "Associations"
        ],
        "summary": "List associations of a line item by type",
        "operationId": "get-/crm/v3/objects/line-items/{lineItemId}/associations/{toObjectType}_getAll",
        "parameters": [
          {
            "name": "lineItemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to display per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseAssociatedIdForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          },
          {
            "oauth2": [
                "crm.objects.line_items.read"
            ]
          }
        ]
      }
    },
    "/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}/{toObjectId}/{associationType}": {
      "put": {
        "tags": [
            "Associations"
        ],
        "summary": "Associate a line item with another object",
        "operationId": "put-/crm/v3/objects/line-items/{lineItemId}/associations/{toObjectType}/{toObjectId}/{associationType}_create",
        "parameters": [
          {
            "name": "lineItemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePublicObjectWithAssociations7"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Associations"
        ],
        "summary": "Remove an association between two line items",
        "operationId": "delete-/crm/v3/objects/line-items/{lineItemId}/associations/{toObjectType}/{toObjectId}/{associationType}_archive",
        "parameters": [
          {
            "name": "lineItemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toObjectId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationType",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2": [
                "crm.objects.line_items.write"
            ]
          },
          {
            "oauth2_legacy": [
                "e-commerce"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActionConfirmationBody": {
        "required": [
            "cancelButtonLabel",
            "confirmButtonLabel",
            "prompt"
        ],
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string"
          },
          "confirmButtonLabel": {
            "type": "string"
          },
          "cancelButtonLabel": {
            "type": "string"
          }
        }
      },
      "ActionHookActionBody": {
        "title": "ACTION_HOOK",
        "required": [
            "httpMethod",
            "propertyNamesIncluded",
            "type",
            "url"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "ACTION_HOOK",
            "enum": [
                "ACTION_HOOK"
            ]
          },
          "confirmation": {
            "$ref": "#/components/schemas/ActionConfirmationBody"
          },
          "httpMethod": {
            "type": "string",
            "enum": [
                "CONNECT",
                "DELETE",
                "GET",
                "HEAD",
                "OPTIONS",
                "PATCH",
                "POST",
                "PUT",
                "TRACE"
            ]
          },
          "url": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "propertyNamesIncluded": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CardActions": {
        "required": [
            "baseUrls"
        ],
        "type": "object",
        "properties": {
          "baseUrls": {
            "type": "array",
            "description": "A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Configuration for custom user actions on cards.",
        "example": {
          "baseUrls": [
              "https://www.example.com/hubspot"
          ]
        }
      },
      "CardCreateRequest": {
        "required": [
            "actions",
            "display",
            "fetch",
            "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The top-level title for this card. Displayed to users in the CRM UI."
          },
          "fetch": {
            "$ref": "#/components/schemas/CardFetchBody"
          },
          "display": {
            "$ref": "#/components/schemas/CardDisplayBody"
          },
          "actions": {
            "$ref": "#/components/schemas/CardActions"
          }
        },
        "description": "State of card definition to be created",
        "example": {
          "fetch": {
            "objectTypes": [
              {
                "name": "contacts",
                "propertiesToSend": [
                    "email",
                    "firstname"
                ]
              }
            ],
            "targetUrl": "https://www.example.com/hubspot/target"
          },
          "display": {
            "properties": {
              "dataType": "STRING",
              "name": "pet_name",
              "label": "Pets Name"
            }
          },
          "title": "PetSpot",
          "actions": {
            "baseUrls": [
                "https://www.example.com/hubspot"
            ]
          }
        }
      },
      "CardDisplayBody": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Card display properties. These will will be rendered as \"label : value\" pairs in the card UI. See the [example card](#) in the overview docs for more details.",
            "items": {
              "$ref": "#/components/schemas/CardDisplayProperty"
            }
          }
        },
        "description": "Configuration for displayed info on a card"
      },
      "CardDisplayProperty": {
        "required": [
            "dataType",
            "label",
            "name",
            "options"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "An internal identifier for this property. This value must be unique TODO."
          },
          "label": {
            "type": "string",
            "description": "The label for this property as you'd like it displayed to users."
          },
          "dataType": {
            "type": "string",
            "description": "Type of data represented by this property.",
            "enum": [
                "BOOLEAN",
                "CURRENCY",
                "DATE",
                "DATETIME",
                "EMAIL",
                "LINK",
                "NUMERIC",
                "STRING",
                "STATUS"
            ]
          },
          "options": {
            "type": "array",
            "description": "An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.",
            "items": {
              "$ref": "#/components/schemas/DisplayOption"
            }
          }
        },
        "description": "Definition for a card display property."
      },
      "CardFetchBody": {
        "required": [
            "objectTypes",
            "targetUrl"
        ],
        "type": "object",
        "properties": {
          "targetUrl": {
            "type": "string",
            "description": "URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed."
          },
          "objectTypes": {
            "type": "array",
            "description": "An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here.",
            "items": {
              "$ref": "#/components/schemas/CardObjectTypeBody"
            }
          }
        },
        "description": "Configuration for this card's data fetch request."
      },
      "CardFetchBodyPatch": {
        "required": [
            "objectTypes"
        ],
        "type": "object",
        "properties": {
          "targetUrl": {
            "type": "string",
            "description": "URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed."
          },
          "objectTypes": {
            "type": "array",
            "description": "An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.",
            "items": {
              "$ref": "#/components/schemas/CardObjectTypeBody"
            }
          }
        },
        "description": "Variant of CardFetchBody with fields as optional for patches"
      },
      "CardListResponse": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "List of card definitions",
            "items": {
              "$ref": "#/components/schemas/CardResponse"
            }
          }
        },
        "description": "List of card definitions"
      },
      "CardObjectTypeBody": {
        "required": [
            "name",
            "propertiesToSend"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A CRM object type where this card should be displayed.",
            "enum": [
                "contacts",
                "deals",
                "companies",
                "tickets"
            ]
          },
          "propertiesToSend": {
            "type": "array",
            "description": "An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CardPatchRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The top-level title for this card. Displayed to users in the CRM UI."
          },
          "fetch": {
            "$ref": "#/components/schemas/CardFetchBodyPatch"
          },
          "display": {
            "$ref": "#/components/schemas/CardDisplayBody"
          },
          "actions": {
            "$ref": "#/components/schemas/CardActions"
          }
        },
        "description": "Body for a patch with optional fields",
        "example": {
          "fetch": {
            "objectTypes": [
              {
                "name": "contacts",
                "propertiesToSend": [
                    "email",
                    "firstname"
                ]
              }
            ],
            "targetUrl": "https://www.example.com/hubspot/target"
          },
          "display": {
            "properties": {
              "dataType": "STRING",
              "name": "pet_name",
              "label": "Pets Name"
            }
          },
          "title": "PetSpot",
          "actions": {
            "baseUrls": [
                "https://www.example.com/hubspot"
            ]
          }
        }
      },
      "CardResponse": {
        "required": [
            "actions",
            "display",
            "fetch",
            "id",
            "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Generated unique ID for card."
          },
          "createdAt": {
            "type": "string",
            "description": "When this card was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last time this card was updated.",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "description": "Displayed title of this card."
          },
          "fetch": {
            "$ref": "#/components/schemas/CardFetchBody"
          },
          "display": {
            "$ref": "#/components/schemas/CardDisplayBody"
          },
          "actions": {
            "$ref": "#/components/schemas/CardActions"
          }
        },
        "description": "Current state of Card Definition"
      },
      "DisplayOption": {
        "required": [
            "label",
            "name",
            "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "JSON-friendly unique name for option."
          },
          "label": {
            "type": "string",
            "description": "The text that will be displayed to users for this option."
          },
          "type": {
            "type": "string",
            "description": "The type of status.",
            "enum": [
                "DEFAULT",
                "SUCCESS",
                "WARNING",
                "DANGER",
                "INFO"
            ]
          }
        },
        "description": "Option definition for STATUS dataTypes."
      },
      "Error": {
        "required": [
            "category",
            "correlationId",
            "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human readable message describing the error along with remediation steps where appropriate",
            "example": "An error occurred"
          },
          "correlationId": {
            "type": "string",
            "description": "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format": "uuid",
            "example": "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "category": {
            "type": "string",
            "description": "The error category"
          },
          "subCategory": {
            "type": "string",
            "description": "A specific category that contains more specific detail about the error"
          },
          "errors": {
            "type": "array",
            "description": "further information about the error",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Context about the error condition",
            "example": {
              "invalidPropertyName": [
                  "propertyValue"
              ],
              "missingScopes": [
                  "scope1",
                  "scope2"
              ]
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of link names to associated URIs containing documentation about the error or recommended remediation steps"
          }
        },
        "example": {
          "message": "Invalid input (details will vary based on the error)",
          "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category": "VALIDATION_ERROR",
          "links": {
            "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "ErrorDetail": {
        "required": [
            "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human readable message describing the error along with remediation steps where appropriate"
          },
          "in": {
            "type": "string",
            "description": "The name of the field or parameter in which the error was found."
          },
          "code": {
            "type": "string",
            "description": "The status code associated with the error detail"
          },
          "subCategory": {
            "type": "string",
            "description": "A specific category that contains more specific detail about the error"
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Context about the error condition",
            "example": {
              "missingScopes": [
                  "scope1",
                  "scope2"
              ]
            }
          }
        }
      },
      "IFrameActionBody": {
        "title": "IFRAME",
        "required": [
            "height",
            "propertyNamesIncluded",
            "type",
            "url",
            "width"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "IFRAME",
            "enum": [
                "IFRAME"
            ]
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "propertyNamesIncluded": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IntegratorCardPayloadResponse": {
        "required": [
            "totalCount"
        ],
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The total number of card properties that will be sent in this response.",
            "format": "int32"
          },
          "allItemsLinkUrl": {
            "type": "string",
            "description": "URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`."
          },
          "cardLabel": {
            "type": "string",
            "description": "The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title."
          },
          "topLevelActions": {
            "$ref": "#/components/schemas/TopLevelActions"
          },
          "sections": {
            "type": "array",
            "description": "A list of up to five valid card sub categories.",
            "items": {
              "$ref": "#/components/schemas/IntegratorObjectResult"
            }
          },
          "responseVersion": {
            "type": "string",
            "enum": [
                "v1",
                "v3"
            ]
          }
        },
        "description": "The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page."
      },
      "IntegratorObjectResult": {
        "required": [
            "actions",
            "id",
            "title",
            "tokens"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "linkUrl": {
            "type": "string"
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectToken"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ActionHookActionBody"
                },
                {
                  "$ref": "#/components/schemas/IFrameActionBody"
                }
              ]
            }
          }
        }
      },
      "ObjectToken": {
        "required": [
            "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "dataType": {
            "type": "string",
            "enum": [
                "BOOLEAN",
                "CURRENCY",
                "DATE",
                "DATETIME",
                "EMAIL",
                "LINK",
                "NUMERIC",
                "STRING",
                "STATUS"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "TopLevelActions": {
        "required": [
            "secondary"
        ],
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/IFrameActionBody"
          },
          "primary": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActionHookActionBody"
              },
              {
                "$ref": "#/components/schemas/IFrameActionBody"
              }
            ]
          },
          "secondary": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ActionHookActionBody"
                },
                {
                  "$ref": "#/components/schemas/IFrameActionBody"
                }
              ]
            }
          }
        }
      },
      "AssociatedId": {
        "required": [
            "id",
            "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "BatchInputSimplePublicObjectBatchInput": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectId": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectId"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput"
            }
          }
        }
      },
      "BatchReadInputSimplePublicObjectId": {
        "required": [
            "inputs",
            "properties",
            "propertiesWithHistory"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "idProperty": {
            "type": "string"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectId"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject1"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseAssociatedId": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedId"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "CollectionResponseAssociatedIdForwardPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedId"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "CollectionResponseWithTotalSimplePublicObjectForwardPaging": {
        "required": [
            "results",
            "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject2"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "ErrorCategory": {
        "required": [
            "httpStatus",
            "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "httpStatus": {
            "type": "string",
            "enum": [
                "CONTINUE",
                "SWITCHING_PROTOCOLS",
                "PROCESSING",
                "OK",
                "CREATED",
                "ACCEPTED",
                "NON_AUTHORITATIVE_INFORMATION",
                "NO_CONTENT",
                "RESET_CONTENT",
                "PARTIAL_CONTENT",
                "MULTI_STATUS",
                "ALREADY_REPORTED",
                "IM_USED",
                "MULTIPLE_CHOICES",
                "MOVED_PERMANENTLY",
                "FOUND",
                "SEE_OTHER",
                "NOT_MODIFIED",
                "USE_PROXY",
                "TEMPORARY_REDIRECT",
                "PERMANENT_REDIRECT",
                "BAD_REQUEST",
                "UNAUTHORIZED",
                "PAYMENT_REQUIRED",
                "FORBIDDEN",
                "NOT_FOUND",
                "METHOD_NOT_ALLOWED",
                "NOT_ACCEPTABLE",
                "PROXY_AUTHENTICATION_REQUIRED",
                "REQUEST_TIMEOUT",
                "CONFLICT",
                "GONE",
                "LENGTH_REQUIRED",
                "PRECONDITION_FAILED",
                "REQUEST_ENTITY_TOO_LARGE",
                "REQUEST_URI_TOO_LONG",
                "UNSUPPORTED_MEDIA_TYPE",
                "REQUESTED_RANGE_NOT_SATISFIABLE",
                "EXPECTATION_FAILED",
                "IM_A_TEAPOT",
                "MISDIRECTED_REQUEST",
                "UNPROCESSABLE_ENTITY",
                "LOCKED",
                "FAILED_DEPENDENCY",
                "UPGRADE_REQUIRED",
                "PRECONDITION_REQUIRED",
                "TOO_MANY_REQUESTS",
                "REQUEST_HEADERS_FIELDS_TOO_LARGE",
                "INTERNAL_STALE_SERVICE_DISCOVERY",
                "UNAVAILABLE_FOR_LEGAL_REASONS",
                "MIGRATION_IN_PROGRESS",
                "INTERNAL_SERVER_ERROR",
                "NOT_IMPLEMENTED",
                "BAD_GATEWAY",
                "SERVICE_UNAVAILABLE",
                "GATEWAY_TIMEOUT",
                "HTTP_VERSION_NOT_SUPPORTED",
                "VARIANT_ALSO_NEGOTIATES",
                "INSUFFICIENT_STORAGE",
                "LOOP_DETECTED",
                "NOT_EXTENDED",
                "NETWORK_AUTHENTICATION_REQUIRED"
            ]
          }
        }
      },
      "Filter": {
        "required": [
            "operator",
            "propertyName"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyName": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "description": "null",
            "enum": [
                "EQ",
                "NEQ",
                "LT",
                "LTE",
                "GT",
                "GTE",
                "BETWEEN",
                "IN",
                "NOT_IN",
                "HAS_PROPERTY",
                "NOT_HAS_PROPERTY",
                "CONTAINS_TOKEN",
                "NOT_CONTAINS_TOKEN"
            ]
          }
        }
      },
      "FilterGroup": {
        "required": [
            "filters"
        ],
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        }
      },
      "ForwardPaging": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NextPage"
          }
        }
      },
      "NextPage": {
        "required": [
            "after"
        ],
        "type": "object",
        "properties": {
          "after": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "example": {
          "after": "NTI1Cg%3D%3D",
          "link": "?after=NTI1Cg%3D%3D"
        }
      },
      "Paging": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NextPage"
          },
          "prev": {
            "$ref": "#/components/schemas/PreviousPage"
          }
        }
      },
      "PreviousPage": {
        "required": [
            "before"
        ],
        "type": "object",
        "properties": {
          "before": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "PublicMergeInput": {
        "required": [
            "objectIdToMerge",
            "primaryObjectId"
        ],
        "type": "object",
        "properties": {
          "primaryObjectId": {
            "type": "string"
          },
          "objectIdToMerge": {
            "type": "string"
          }
        }
      },
      "PublicObjectSearchRequest": {
        "required": [
            "after",
            "filterGroups",
            "limit",
            "properties",
            "sorts"
        ],
        "type": "object",
        "properties": {
          "filterGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterGroup"
            }
          },
          "sorts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "query": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "after": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimplePublicObject": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "createdate": "2019-10-30T03:30:17.883Z",
            "description": "Onboarding service for data product",
            "hs_cost_of_goods_sold": "600.00",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "hs_recurring_billing_period": "12",
            "hs_sku": "191902",
            "name": "Implementation Service ",
            "price": "6000.00"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "id": "1",
          "properties": {
            "description": "Onboarding service for data product",
            "hs_cost_of_goods_sold": "600.00",
            "hs_recurring_billing_period": "12",
            "hs_sku": "191902",
            "name": "Implementation Service ",
            "price": "6000.00"
          }
        }
      },
      "SimplePublicObjectId": {
        "required": [
            "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "SimplePublicObjectInput": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "description": "Onboarding service for data product",
            "hs_cost_of_goods_sold": "600.00",
            "hs_recurring_billing_period": "12",
            "hs_sku": "191902",
            "name": "Implementation Service ",
            "price": "6000.00"
          }
        }
      },
      "SimplePublicObjectWithAssociations": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId"
            }
          }
        },
        "example": {
          "properties": {
            "createdate": "2019-10-30T03:30:17.883Z",
            "description": "Onboarding service for data product",
            "hs_cost_of_goods_sold": "600.00",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "hs_recurring_billing_period": "12",
            "hs_sku": "191902",
            "name": "Implementation Service ",
            "price": "6000.00"
          }
        }
      },
      "StandardError": {
        "required": [
            "category",
            "context",
            "errors",
            "links",
            "message",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ErrorCategory"
          },
          "subCategory": {
            "type": "object",
            "properties": {}
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ValueWithTimestamp": {
        "required": [
            "sourceType",
            "timestamp",
            "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "sourceType": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "sourceLabel": {
            "type": "string"
          },
          "updatedByUserId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CollectionResponsePipelineNoPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pipeline"
            }
          }
        }
      },
      "CollectionResponsePipelineStageNoPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineStage"
            }
          }
        }
      },
      "CollectionResponsePublicAuditInfoNoPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicAuditInfo"
            }
          }
        }
      },
      "Pipeline": {
        "required": [
            "archived",
            "createdAt",
            "displayOrder",
            "id",
            "label",
            "stages",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A unique label used to organize pipelines in HubSpot's UI"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline."
          },
          "stages": {
            "type": "array",
            "description": "The stages associated with the pipeline. They can be retrieved and updated via the pipeline stages endpoints.",
            "items": {
              "$ref": "#/components/schemas/PipelineStage"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "The date the pipeline was created. The default pipelines will have createdAt = 0.",
            "format": "date-time"
          },
          "archivedAt": {
            "type": "string",
            "description": "The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the pipeline was last updated.",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the pipeline is archived."
          }
        },
        "description": "A pipeline definition.",
        "example": {
          "label": "My ticket pipeline",
          "displayOrder": 0,
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false,
          "id": "812723471",
          "stages": [
            {
              "label": "In Progress",
              "displayOrder": 0,
              "metadata": {
                "ticketState": "OPEN"
              },
              "createdAt": "2019-10-30T03:30:17.883Z",
              "updatedAt": "2019-12-07T16:50:06.678Z",
              "archived": false,
              "id": "1234912"
            },
            {
              "label": "Done",
              "displayOrder": 0,
              "metadata": {
                "ticketState": "CLOSED"
              },
              "createdAt": "2019-10-30T03:30:17.883Z",
              "updatedAt": "2019-12-07T16:50:06.678Z",
              "archived": false,
              "id": "1234914"
            }
          ]
        }
      },
      "PipelineInput": {
        "required": [
            "displayOrder",
            "label",
            "stages"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A unique label used to organize pipelines in HubSpot's UI"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.",
            "format": "int32"
          },
          "stages": {
            "type": "array",
            "description": "Pipeline stage inputs used to create the new or replacement pipeline.",
            "items": {
              "$ref": "#/components/schemas/PipelineStageInput"
            }
          }
        },
        "description": "An input used to create or replace a pipeline's definition.",
        "example": {
          "label": "My replaced pipeline",
          "displayOrder": 0,
          "stages": [
            {
              "label": "In Progress",
              "displayOrder": 0,
              "metadata": {
                "ticketState": "OPEN"
              }
            },
            {
              "label": "Done",
              "displayOrder": 1,
              "metadata": {
                "ticketState": "CLOSED"
              }
            }
          ]
        }
      },
      "PipelinePatchInput": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A unique label used to organize pipelines in HubSpot's UI"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.",
            "format": "int32"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the pipeline is archived. This property should only be provided when restoring an archived pipeline. If it's provided in any other call, the request will fail and a `400 Bad Request` will be returned."
          }
        },
        "description": "An input used to update some properties on a pipeline definition.",
        "example": {
          "label": "My updated pipeline",
          "displayOrder": 0
        }
      },
      "PipelineStage": {
        "required": [
            "archived",
            "createdAt",
            "displayOrder",
            "id",
            "label",
            "metadata",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline."
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.",
            "format": "int32"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A JSON object containing properties that are not present on all object pipelines.\n\nFor `deals` pipelines, the `probability` field is required (`{ \"probability\": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.\n\nFor `tickets` pipelines, the `ticketState` field is optional (`{ \"ticketState\": \"OPEN\" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`."
          },
          "id": {
            "type": "string",
            "description": "A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline stage."
          },
          "createdAt": {
            "type": "string",
            "description": "The date the pipeline stage was created. The stages on default pipelines will have createdAt = 0.",
            "format": "date-time"
          },
          "archivedAt": {
            "type": "string",
            "description": "The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the pipeline stage was last updated.",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the pipeline is archived."
          }
        },
        "description": "A pipeline stage definition.",
        "example": {
          "label": "In Progress",
          "displayOrder": 0,
          "metadata": {
            "ticketState": "OPEN"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false,
          "id": "1234912"
        }
      },
      "PipelineStageInput": {
        "required": [
            "displayOrder",
            "label",
            "metadata"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline."
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.",
            "format": "int32"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A JSON object containing properties that are not present on all object pipelines.\n\nFor `deals` pipelines, the `probability` field is required (`{ \"probability\": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.\n\nFor `tickets` pipelines, the `ticketState` field is optional (`{ \"ticketState\": \"OPEN\" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`."
          }
        },
        "description": "An input used to create or replace a pipeline stage's definition.",
        "example": {
          "label": "Done",
          "displayOrder": 1,
          "metadata": {
            "ticketState": "CLOSED"
          }
        }
      },
      "PipelineStagePatchInput": {
        "required": [
            "metadata"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline."
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the pipeline is archived."
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.",
            "format": "int32"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A JSON object containing properties that are not present on all object pipelines.\n\nFor `deals` pipelines, the `probability` field is required (`{ \"probability\": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.\n\nFor `tickets` pipelines, the `ticketState` field is optional (`{ \"ticketState\": \"OPEN\" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`."
          }
        },
        "description": "An input used to update some properties on a pipeline definition.",
        "example": {
          "label": "Done",
          "displayOrder": 1,
          "metadata": {
            "ticketState": "CLOSED"
          }
        }
      },
      "PublicAuditInfo": {
        "required": [
            "action",
            "identifier",
            "portalId"
        ],
        "type": "object",
        "properties": {
          "portalId": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "rawObject": {
            "type": "object",
            "properties": {}
          },
          "fromUserId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AccountingAppSettings": {
        "required": [
            "appId",
            "urls"
        ],
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer",
            "description": "The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.",
            "format": "int32"
          },
          "urls": {
            "$ref": "#/components/schemas/AccountingAppUrls"
          },
          "features": {
            "$ref": "#/components/schemas/AccountingFeatures"
          }
        },
        "description": "The URL Settings, which defines the URL endpoints that HubSpot will send requests to an external accounting application for certain actions."
      },
      "AccountingAppUrls": {
        "required": [
            "customerUrlTemplate",
            "getInvoicePdfUrl",
            "getInvoiceUrl",
            "invoiceUrlTemplate",
            "productUrlTemplate",
            "searchCustomerUrl"
        ],
        "type": "object",
        "properties": {
          "getInvoiceUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where invoices can be retrieved."
          },
          "searchCustomerUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where a customer search can be performed."
          },
          "getInvoicePdfUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where an invoice PDF can be retrieved."
          },
          "customerUrlTemplate": {
            "type": "string",
            "description": "A template URL that indicates the endpoint where a customer can be fetched by ID. Note that ${CUSTOMER_ID} in this URL will be replaced by the actual customer ID. For example: https://myapp.com/api/customers/${CUSTOMER_ID}"
          },
          "productUrlTemplate": {
            "type": "string",
            "description": "A template URL that indicates the endpoint where a product can be fetched by ID. Note that ${PRODUCT_ID} in this URL will be replaced by the actual product ID. For example: https://myapp.com/api/products/${PRODUCT_ID}"
          },
          "invoiceUrlTemplate": {
            "type": "string",
            "description": "A template URL that indicates the endpoint where an invoice can be fetched by ID. Note that ${INVOICE_ID} in this URL will be replaced by the actual invoice ID. For example: https://myapp.com/api/invoices/${INVOICE_ID}"
          },
          "createInvoiceUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where an invoices can be created."
          },
          "searchInvoiceUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where an invoice search can be performed."
          },
          "searchProductUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where a product search can be performed."
          },
          "getTermsUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where payment terms can be retrieved."
          },
          "createCustomerUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where a new customer can be created."
          },
          "searchTaxUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where a tax search can be performed."
          },
          "exchangeRateUrl": {
            "type": "string",
            "description": "A URL that specifies the endpoint where exchange rates can be queried."
          },
          "searchUrl": {
            "type": "string"
          },
          "searchCountUrl": {
            "type": "string"
          }
        },
        "description": "The URL endpoints that HubSpot will send requests to an external accounting system for certain actions."
      },
      "AccountingExtensionCustomer": {
        "required": [
            "id",
            "name"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "The customer's email address",
            "example": "johnsmith@example.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's full name",
            "example": "John Smith"
          },
          "id": {
            "type": "string",
            "description": "The ID of the customer in the external accounting system.",
            "example": "js-1"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the currency the customer should be billed in.",
            "example": "USD"
          }
        },
        "description": "Representation of a customer in the external accounting system."
      },
      "AccountingExtensionInvoice": {
        "required": [
            "amountDue",
            "currency",
            "customerName",
            "dueDate",
            "invoiceLink",
            "status"
        ],
        "type": "object",
        "properties": {
          "amountDue": {
            "type": "number",
            "description": "The total amount due.",
            "example": 100.5
          },
          "balance": {
            "type": "number",
            "description": "The remaining outstanding balance due.",
            "example": 50
          },
          "dueDate": {
            "type": "string",
            "description": "The due date for payment of the invoice, in ISO-8601 date format (yyyy-MM-dd)",
            "format": "date"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "The invoice number",
            "example": "INV-123"
          },
          "customerId": {
            "type": "string",
            "description": "The ID of the customer that this invoice is for.",
            "example": "cust-123"
          },
          "currency": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the currency of this invoice.",
            "example": "USD"
          },
          "invoiceLink": {
            "type": "string",
            "description": "A link to the invoice in the external accounting system.",
            "example": "https://myapp.com/invoices/1243a2"
          },
          "customerName": {
            "type": "string",
            "description": "The name of the customer that this invoice is for.",
            "example": "John Smith"
          },
          "status": {
            "type": "string",
            "description": "The currency status of the invoice.",
            "example": "OVERDUE",
            "enum": [
                "CREATED",
                "SENT",
                "PAID",
                "CLOSED",
                "OVERDUE",
                "VOIDED"
            ]
          }
        },
        "description": "Representation of an invoice in the external accounting system."
      },
      "AccountingExtensionTerm": {
        "required": [
            "id",
            "name"
        ],
        "type": "object",
        "properties": {
          "dueDate": {
            "type": "string",
            "description": "The due date for payment of the invoice, in ISO-8601 date format (yyyy-MM-dd)",
            "format": "date"
          },
          "name": {
            "type": "string",
            "description": "The display name of the payment terms.",
            "example": "Net 30"
          },
          "id": {
            "type": "string",
            "description": "The ID of the payment terms in the external accounting system.",
            "example": "net-30"
          },
          "dueDays": {
            "type": "integer",
            "description": "The number of days that these payment terms represent.",
            "format": "int32",
            "example": 30
          }
        },
        "description": "Representation of payment terms that are defined in the external accounting system. One of 'dueDays' or 'dueDate' is required."
      },
      "AccountingFeatures": {
        "required": [
            "createInvoice",
            "importInvoice",
            "sync"
        ],
        "type": "object",
        "properties": {
          "createInvoice": {
            "$ref": "#/components/schemas/CreateInvoiceFeature"
          },
          "importInvoice": {
            "$ref": "#/components/schemas/ImportInvoiceFeature"
          },
          "sync": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectSyncFeature"
            },
            "description": "Indicates if syncing objects from the external account system into HubSpot is supported for the integration.\nThis is a map, where the key is one of `CONTACT` or `PRODUCT`, to indicate which type of object you do or don't support syncing.\nFor example:\n```\n  \"sync\": {\n    \"CONTACT\": {\n      \"toHubSpot\": true\n    },\n    \"PRODUCT\": {\n      \"toHubSpot\": true\n    }\n  }\n```\n"
          }
        },
        "description": "Outlines the features that are supported by the external accounting system."
      },
      "ActionResponse": {
        "required": [
            "completedAt",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "The country of the address.",
            "example": "United States"
          },
          "countrySubDivisionCode": {
            "type": "string",
            "description": "A region of the county of the address.  May represent county, state etc.",
            "example": "NY"
          },
          "city": {
            "type": "string",
            "description": "The city of the address.",
            "example": "New York"
          },
          "postalCode": {
            "type": "string",
            "description": "The postcode/zipcode of the address.",
            "example": "10001"
          },
          "lineOne": {
            "type": "string",
            "description": "The first line of the address.",
            "example": "1 Example Way"
          }
        },
        "description": "Represents an address of a customer"
      },
      "CreateInvoiceFeature": {
        "required": [
            "enabled",
            "subFeatures"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if creating invoices in HubSpot is supported for the integration."
          },
          "subFeatures": {
            "$ref": "#/components/schemas/CreateInvoiceSubFeatures"
          }
        },
        "description": "Indicates what elements of creating invoices in HubSpot is supported for the integration."
      },
      "CreateInvoiceSubFeatures": {
        "required": [
            "createCustomer",
            "exchangeRates",
            "invoiceComments",
            "invoiceDiscounts",
            "taxes",
            "terms"
        ],
        "type": "object",
        "properties": {
          "createCustomer": {
            "type": "boolean",
            "description": "Indicates if a new customer can be created in the external accounting system."
          },
          "taxes": {
            "type": "boolean",
            "description": "Indicates if taxes can be specified by the HubSpot user for line items."
          },
          "exchangeRates": {
            "type": "boolean",
            "description": "Indicates if the external accounting system supports fetching exchange rates when create an invoice in HubSpot for a customer billed in a different currency."
          },
          "terms": {
            "type": "boolean",
            "description": "Indicates if the external accounting system supports fetching payment terms."
          },
          "invoiceComments": {
            "type": "boolean",
            "description": "Indicates if a visible comment can be added to invoices."
          },
          "invoiceDiscounts": {
            "type": "boolean",
            "description": "Indicates if invoice-level discounts can be added to invoices."
          }
        },
        "description": "Lists the individual aspects of creating invoices that are enabled for the integration, as part of the create invoice flow in HubSpot."
      },
      "CreateUserAccountRequestExternal": {
        "required": [
            "accountId",
            "accountName",
            "currencyCode"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The id of the account in your system."
          },
          "accountName": {
            "type": "string",
            "description": "The name of the account in your system. This is normally the name visible to your users."
          },
          "currencyCode": {
            "type": "string",
            "description": "The default currency that this account uses."
          }
        },
        "description": "Information about the account in your external account system."
      },
      "CustomerSearchResponseExternal": {
        "required": [
            "@result",
            "customers"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "customers": {
            "type": "array",
            "description": "The list of customers that matched the search criteria.",
            "items": {
              "$ref": "#/components/schemas/AccountingExtensionCustomer"
            }
          }
        },
        "description": "A response to a search for customers."
      },
      "ExchangeRateResponse": {
        "required": [
            "@result",
            "exchangeRate",
            "sourceCurrencyCode",
            "targetCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the 2 currencies",
            "example": 1.003
          },
          "sourceCurrencyCode": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the source currency of the exchange rate.",
            "example": "JPY"
          },
          "targetCurrencyCode": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the target currency of the exchange rate.",
            "example": "USD"
          }
        },
        "description": "A response to the request for an exchange rate value. It represents the exchange rate from the source currency to the target currency."
      },
      "ImportInvoiceFeature": {
        "required": [
            "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if importing invoices from the external account system into HubSpot."
          }
        },
        "description": "Indicates if importing invoices from the external account system into HubSpot is supported for the integration."
      },
      "InvoiceCreatePaymentRequest": {
        "required": [
            "amountPaid",
            "currencyCode",
            "externalPaymentId",
            "paymentDateTime"
        ],
        "type": "object",
        "properties": {
          "amountPaid": {
            "type": "number",
            "description": "The amount that this payment is for."
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the currency of the payment."
          },
          "paymentDateTime": {
            "type": "string",
            "description": "The datetime that this payment was received.",
            "format": "date-time"
          },
          "externalPaymentId": {
            "type": "string",
            "description": "The id of this payment in the external accounting system."
          }
        }
      },
      "InvoicePdfResponse": {
        "required": [
            "invoice"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "invoice": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The bytes of the invoice PDF.",
            "format": "byte"
          }
        },
        "description": "A response that contains the PDF of an invoice"
      },
      "InvoiceReadResponse": {
        "required": [
            "archived",
            "balanceDue",
            "createdAt",
            "currencyCode",
            "dueDate",
            "externalAccountId",
            "externalRecipientId",
            "id",
            "invoiceStatus",
            "isVoided",
            "totalAmountBilled",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "externalInvoiceNumber": {
            "type": "string",
            "description": "The invoice number. Note that this is _not_ the ID of the invoice, but the number that the billed customer will see."
          },
          "totalAmountBilled": {
            "type": "number",
            "description": "The total amount that this invoice is for."
          },
          "balanceDue": {
            "type": "number",
            "description": "The remaining balance due for the invoice."
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the currency of the invoice."
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the invoice",
            "format": "date"
          },
          "externalRecipientId": {
            "type": "string",
            "description": "The id of the customer in the external accounting system that the invoice was sent to."
          },
          "receivedByRecipientDate": {
            "type": "integer",
            "description": "The datetime that that invoice was sent to the customer.",
            "format": "int64"
          },
          "externalCreateDateTime": {
            "type": "integer",
            "description": "The datetime that the invoice was created in the external accounting system.",
            "format": "int64"
          },
          "isVoided": {
            "type": "boolean",
            "description": "Indicated is the invoice has been voided or not."
          },
          "createdAt": {
            "type": "string",
            "description": "The datetime that the invoice was created in HubSpot.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The datetime that the invoice was last updated in HubSpot.",
            "format": "date-time"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "externalAccountId": {
            "type": "string",
            "description": "The id of the account in the external accounting system that this invoice is related to."
          },
          "invoiceStatus": {
            "type": "string",
            "description": "The status of the invoice",
            "enum": [
                "CREATED",
                "SENT",
                "PAID",
                "CLOSED",
                "OVERDUE",
                "VOIDED",
                "NONE",
                "UNPAID"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of this invoice in the external accounting system."
          }
        },
        "description": "The invoice data stored in HubSpot"
      },
      "InvoiceSearchResponse": {
        "required": [
            "invoices"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "invoices": {
            "type": "array",
            "description": "The list of invoices that matched the search criteria.",
            "items": {
              "$ref": "#/components/schemas/AccountingExtensionInvoice"
            }
          }
        },
        "description": "A response to a search for invoices."
      },
      "InvoiceUpdateRequest": {
        "type": "object",
        "properties": {
          "externalInvoiceNumber": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the currency used in the invoice to bill the recipient",
            "example": "USD"
          },
          "dueDate": {
            "type": "string",
            "description": "The ISO-8601 due date of the invoice.",
            "format": "date"
          },
          "externalRecipientId": {
            "type": "string",
            "description": "The ID of the invoice recipient. This is the recipient ID from the external accounting system.",
            "example": "152"
          },
          "receivedByRecipientDate": {
            "type": "integer",
            "format": "int64"
          },
          "isVoided": {
            "type": "boolean",
            "description": "States if the invoice is voided or not."
          },
          "receivedByCustomerDate": {
            "type": "string",
            "description": "The ISO-8601 datetime of when the customer received the invoice.",
            "example": "2020-04-01T13:14:15.678Z"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "The number / name of the invoice.",
            "example": "Joe Bloggs #42"
          }
        },
        "description": "The invoice data to update in HubSpot"
      },
      "InvoiceUpdateResponse": {
        "required": [
            "archived",
            "balanceDue",
            "createdAt",
            "currencyCode",
            "dueDate",
            "externalAccountId",
            "externalRecipientId",
            "id",
            "invoiceStatus",
            "isVoided",
            "totalAmountBilled",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "externalInvoiceNumber": {
            "type": "string"
          },
          "totalAmountBilled": {
            "type": "number"
          },
          "balanceDue": {
            "type": "number"
          },
          "currencyCode": {
            "type": "string"
          },
          "dueDate": {
            "type": "string",
            "format": "date"
          },
          "externalRecipientId": {
            "type": "string"
          },
          "receivedByRecipientDate": {
            "type": "integer",
            "format": "int64"
          },
          "externalCreateDateTime": {
            "type": "integer",
            "format": "int64"
          },
          "isVoided": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "externalAccountId": {
            "type": "string"
          },
          "invoiceStatus": {
            "type": "string",
            "enum": [
                "CREATED",
                "SENT",
                "PAID",
                "CLOSED",
                "OVERDUE",
                "VOIDED",
                "NONE",
                "UNPAID"
            ]
          },
          "id": {
            "type": "string"
          }
        }
      },
      "InvoicesResponseExternal": {
        "required": [
            "invoices"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "invoices": {
            "type": "array",
            "description": "The list of invoices that were found for the request.",
            "items": {
              "$ref": "#/components/schemas/AccountingExtensionInvoice"
            }
          }
        },
        "description": "A response to a request for invoices."
      },
      "ObjectSyncFeature": {
        "required": [
            "toHubSpot"
        ],
        "type": "object",
        "properties": {
          "toHubSpot": {
            "type": "boolean",
            "description": "Indicates if syncing the object type from the external accounting system into HubSpot is supported."
          }
        }
      },
      "Product": {
        "required": [
            "id",
            "name",
            "taxExempt",
            "unitPrice"
        ],
        "type": "object",
        "properties": {
          "unitPrice": {
            "$ref": "#/components/schemas/UnitPrice"
          },
          "taxExempt": {
            "type": "boolean",
            "description": "Identifies if the product is tax exempt or not."
          },
          "salesTaxType": {
            "$ref": "#/components/schemas/TaxType"
          },
          "name": {
            "type": "string",
            "description": "The display name of the product.",
            "example": "Marketing Services"
          },
          "description": {
            "type": "string",
            "description": "The description of the product.",
            "example": "Website design, Online advertising and SEO."
          },
          "id": {
            "type": "string",
            "description": "The ID of the product in the external accounting system.",
            "example": "prod-123"
          }
        },
        "description": "Representation of a product in the external accounting system."
      },
      "ProductSearchResponse": {
        "required": [
            "products"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "products": {
            "type": "array",
            "description": "The list of products that matched the search criteria.",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "description": "A response to a search for products."
      },
      "ResultIdAccountingResponse": {
        "required": [
            "@result",
            "id"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "id": {
            "type": "string",
            "description": "The ID of created entity.",
            "example": "js-1"
          }
        },
        "description": "A response to the creation of an entity (eg. invoice, customer)."
      },
      "SyncContactsRequest": {
        "required": [
            "accountId",
            "contacts"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The ID of the account in the external accounting system. This is the value that will be passed as `accountId` for all outbound calls for the user from HubSpot to the external accounting system.",
            "example": "acct-app-123"
          },
          "contacts": {
            "type": "array",
            "description": "A list of contacts to be imported.",
            "items": {
              "$ref": "#/components/schemas/UpdatedContact"
            }
          }
        },
        "description": "A request to import external accounting contact properties in HubSpot"
      },
      "SyncProductsRequest": {
        "required": [
            "accountId",
            "products"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The ID of the account in the external accounting system. This is the value that will be passed as `accountId` for all outbound calls for the user from HubSpot to the external accounting system."
          },
          "products": {
            "type": "array",
            "description": "A list of products to be imported.",
            "items": {
              "$ref": "#/components/schemas/UpdatedProduct"
            }
          }
        },
        "description": "A request to import external accounting product properties in HubSpot"
      },
      "Tax": {
        "required": [
            "code",
            "name",
            "percentage"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code/ID of the tax in the external accounting system.",
            "example": "tax-1"
          },
          "percentage": {
            "type": "number",
            "description": "The tax percentage.  For example, 8.05 represents a 8.05% tax rate.",
            "example": 8.05
          },
          "name": {
            "type": "string",
            "description": "The display name of the tax.",
            "example": "Local Sales Tax"
          }
        },
        "description": "Representation of a tax defined in the external accounting system."
      },
      "TaxSearchResponse": {
        "required": [
            "taxes"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "taxes": {
            "type": "array",
            "description": "The list of taxes that matched the search criteria",
            "items": {
              "$ref": "#/components/schemas/Tax"
            }
          }
        },
        "description": "A response to a search for taxes."
      },
      "TaxType": {
        "required": [
            "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code/ID of the tax in the external accounting system.",
            "example": "tax-1"
          },
          "name": {
            "type": "string",
            "description": "The display name of the tax.",
            "example": "Local Sales Tax"
          }
        },
        "description": "Represents a tax in the external accounting system."
      },
      "TermsResponse": {
        "required": [
            "terms"
        ],
        "type": "object",
        "properties": {
          "@result": {
            "type": "string",
            "description": "Designates if the response is a success ('OK') or failure ('ERR').",
            "example": "OK",
            "enum": [
                "OK",
                "ERR"
            ]
          },
          "terms": {
            "type": "array",
            "description": "The list of payment terms that matched the search criteria.",
            "items": {
              "$ref": "#/components/schemas/AccountingExtensionTerm"
            }
          }
        },
        "description": "A response to a search for payment terms."
      },
      "UnitPrice": {
        "required": [
            "taxIncluded"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The actual unit price amount.",
            "example": 10.99
          },
          "taxIncluded": {
            "type": "boolean",
            "description": "Indicates if the unit price amount already includes taxes."
          }
        },
        "description": "Represents a unit price"
      },
      "UpdatedContact": {
        "required": [
            "emailAddress",
            "id",
            "syncAction",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "syncAction": {
            "type": "string",
            "description": "The operation to be performed.",
            "example": "UPDATE",
            "enum": [
                "CREATE",
                "UPDATE",
                "DELETE"
            ]
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp (ISO8601 format) when the customer was updated in the external accounting system.",
            "format": "date-time"
          },
          "emailAddress": {
            "type": "string",
            "description": "The customer's email address",
            "example": "johndoe@company.com"
          },
          "id": {
            "type": "string",
            "description": "The ID of the customer in the external accounting system.",
            "example": "acct-app-123"
          },
          "customerType": {
            "type": "string",
            "description": "Designates the type of the customer object.",
            "example": "CONTACT",
            "enum": [
                "CONTACT",
                "COMPANY"
            ]
          }
        },
        "description": "A request to import external accounting contact properties in HubSpot"
      },
      "UpdatedProduct": {
        "required": [
            "id",
            "price",
            "properties",
            "syncAction",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "syncAction": {
            "type": "string",
            "description": "The operation to be performed.",
            "enum": [
                "CREATE",
                "UPDATE",
                "DELETE"
            ]
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp (ISO8601 format) when the product was updated in the external accounting system.",
            "format": "date-time"
          },
          "price": {
            "type": "number",
            "description": "The price of the product."
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO 4217 currency code that represents the currency of the product price."
          },
          "id": {
            "type": "string",
            "description": "The ID of the product in the external accounting system."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of key-value product properties to be imported."
          }
        },
        "description": "A request to import external accounting product properties in HubSpot"
      },
      "BatchInputSimplePublicObjectBatchInput1": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput1"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput1": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput1"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject1": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject1"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging1": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations1"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "SimplePublicObject1": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "city": "Cambridge",
            "createdate": "2019-10-30T03:30:17.883Z",
            "domain": "biglytics.net",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "industry": "Technology",
            "name": "Biglytics",
            "phone": "(877) 929-0687",
            "state": "Massachusetts"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput1": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "id": "1",
          "properties": {
            "city": "Cambridge",
            "domain": "biglytics.net",
            "industry": "Technology",
            "name": "Biglytics",
            "phone": "(877) 929-0687",
            "state": "Massachusetts"
          }
        }
      },
      "SimplePublicObjectInput1": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "city": "Cambridge",
            "domain": "biglytics.net",
            "industry": "Technology",
            "name": "Biglytics",
            "phone": "(877) 929-0687",
            "state": "Massachusetts"
          }
        }
      },
      "SimplePublicObjectWithAssociations1": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId"
            }
          }
        },
        "example": {
          "properties": {
            "city": "Cambridge",
            "createdate": "2019-10-30T03:30:17.883Z",
            "domain": "biglytics.net",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "industry": "Technology",
            "name": "Biglytics",
            "phone": "(877) 929-0687",
            "state": "Massachusetts"
          }
        }
      },
      "SettingsPatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of your calling service to display to users."
          },
          "url": {
            "type": "string",
            "description": "The URL to your phone/calling UI, built with the [Calling SDK](#)."
          },
          "height": {
            "type": "integer",
            "description": "The target height of the iframe that will contain your phone/calling UI.",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "description": "The target width of the iframe that will contain your phone/calling UI.",
            "format": "int32"
          },
          "isReady": {
            "type": "boolean",
            "description": "When true, your service will appear as an option under the *Call* action in contact records of connected accounts."
          },
          "supportsCustomObjects": {
            "type": "boolean",
            "description": "When true, you are indicating that your service is compatible with engagement v2 service and can be used with custom objects."
          }
        },
        "description": "Settings update request"
      },
      "SettingsRequest": {
        "required": [
            "name",
            "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of your calling service to display to users."
          },
          "url": {
            "type": "string",
            "description": "The URL to your phone/calling UI, built with the [Calling SDK](#)."
          },
          "height": {
            "type": "integer",
            "description": "The target height of the iframe that will contain your phone/calling UI.",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "description": "The target width of the iframe that will contain your phone/calling UI.",
            "format": "int32"
          },
          "isReady": {
            "type": "boolean",
            "description": "When true, your service will appear as an option under the *Call* action in contact records of connected accounts."
          },
          "supportsCustomObjects": {
            "type": "boolean",
            "description": "When true, you are indicating that your service is compatible with engagement v2 service and can be used with custom objects."
          }
        },
        "description": "Settings create request",
        "example": {
          "supportsCustomObjects": true,
          "isReady": true,
          "name": "HubPhone",
          "width": 200,
          "url": "https://www.example.com/hubspot/iframe",
          "height": 350
        }
      },
      "SettingsResponse": {
        "required": [
            "createdAt",
            "height",
            "isReady",
            "name",
            "supportsCustomObjects",
            "updatedAt",
            "url",
            "width"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of your calling service to display to users."
          },
          "url": {
            "type": "string",
            "description": "The URL to your phone/calling UI, built with the [Calling SDK](#)."
          },
          "height": {
            "type": "integer",
            "description": "The target height of the iframe that will contain your phone/calling UI.",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "description": "The target width of the iframe that will contain your phone/calling UI.",
            "format": "int32"
          },
          "isReady": {
            "type": "boolean",
            "description": "When true, your service will appear as an option under the *Call* action in contact records of connected accounts."
          },
          "supportsCustomObjects": {
            "type": "boolean",
            "description": "When true, you are indicating that your service is compatible with engagement v2 service and can be used with custom objects."
          },
          "createdAt": {
            "type": "string",
            "description": "When this calling extension was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last time the settings for this calling extension were modified.",
            "format": "date-time"
          }
        },
        "description": "Current settings state"
      },
      "BatchInputSimplePublicObjectBatchInput2": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput2"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput2": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput2"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject2": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject2"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors1": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject2"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging2": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations2"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "SimplePublicObject2": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "hs_createdate": "2019-10-30T03:30:17.883Z",
            "hs_expiration_date": "2020-09-06T02:43:14.491Z",
            "hs_quote_amount": "3000.00",
            "hs_quote_number": "20200916-092813983",
            "hs_status": "PENDING_APPROVAL",
            "hs_terms": "discount provided, two year term with customer",
            "hs_title": "Services Proposal",
            "hubspot_owner_id": "910901"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput2": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SimplePublicObjectInput2": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "property_string": "value",
            "property_number": "17",
            "property_date": "1572480000000",
            "property_radio": "option_1",
            "property_dropdown": "choice_b",
            "property_checkbox": "false",
            "property_multiple_checkboxes": "chocolate;strawberry"
          }
        }
      },
      "SimplePublicObjectWithAssociations2": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId"
            }
          }
        },
        "example": {
          "properties": {
            "hs_createdate": "2019-10-30T03:30:17.883Z",
            "hs_expiration_date": "2020-09-06T02:43:14.491Z",
            "hs_quote_amount": "3000.00",
            "hs_quote_number": "20200916-092813983",
            "hs_status": "PENDING_APPROVAL",
            "hs_terms": "discount provided, two year term with customer",
            "hs_title": "Services Proposal",
            "hubspot_owner_id": "910901"
          }
        }
      },
      "BatchInputSimplePublicObjectBatchInput3": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput3"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput3": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput3"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject3": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject3"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors2": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject3"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging3": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations3"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "CollectionResponseWithTotalSimplePublicObjectForwardPaging1": {
        "required": [
            "results",
            "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject3"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "SimplePublicObject3": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "amount": "1500.00",
            "closedate": "2019-12-07T16:50:06.678Z",
            "createdate": "2019-10-30T03:30:17.883Z",
            "dealname": "Custom data integrations",
            "dealstage": "presentationscheduled",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "hubspot_owner_id": "910901",
            "pipeline": "default"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput3": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "id": "1",
          "properties": {
            "amount": "1500.00",
            "closedate": "2019-12-07T16:50:06.678Z",
            "dealname": "Custom data integrations",
            "dealstage": "presentationscheduled",
            "hubspot_owner_id": "910901",
            "pipeline": "default"
          }
        }
      },
      "SimplePublicObjectInput3": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "amount": "1500.00",
            "closedate": "2019-12-07T16:50:06.678Z",
            "dealname": "Custom data integrations",
            "dealstage": "presentationscheduled",
            "hubspot_owner_id": "910901",
            "pipeline": "default"
          }
        }
      },
      "SimplePublicObjectWithAssociations3": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId"
            }
          }
        },
        "example": {
          "properties": {
            "amount": "1500.00",
            "closedate": "2019-12-07T16:50:06.678Z",
            "createdate": "2019-10-30T03:30:17.883Z",
            "dealname": "Custom data integrations",
            "dealstage": "presentationscheduled",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "hubspot_owner_id": "910901",
            "pipeline": "default"
          }
        }
      },
      "CollectionResponsePublicImportErrorForwardPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicImportError"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging1"
          }
        }
      },
      "CollectionResponsePublicImportResponse": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicImportResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "ForwardPaging1": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NextPage1"
          }
        }
      },
      "ImportRowCore": {
        "required": [
            "fileId",
            "lineNumber"
        ],
        "type": "object",
        "properties": {
          "fileId": {
            "type": "integer",
            "format": "int32"
          },
          "pageName": {
            "type": "string"
          },
          "lineNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NextPage1": {
        "required": [
            "after"
        ],
        "type": "object",
        "properties": {
          "after": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "PublicImportError": {
        "required": [
            "createdAt",
            "errorType",
            "id",
            "knownColumnNumber",
            "sourceData"
        ],
        "type": "object",
        "properties": {
          "errorType": {
            "type": "string",
            "enum": [
                "INCORRECT_NUMBER_OF_COLUMNS",
                "INVALID_OBJECT_ID",
                "INVALID_ASSOCIATION_IDENTIFIER",
                "NO_OBJECT_ID_FROM_ASSOCIATION_IDENTIFIER",
                "MULTIPLE_COMPANIES_WITH_THIS_DOMAIN",
                "PROPERTY_DEFINITION_NOT_FOUND",
                "PROPERTY_VALUE_NOT_FOUND",
                "COULD_NOT_FIND_OWNER",
                "MULTIPLE_OWNERS_FOUND",
                "COULD_NOT_PARSE_NUMBER",
                "COULD_NOT_PARSE_DATE",
                "COULD_NOT_PARSE_TERM",
                "OUTSIDE_VALID_TIME_RANGE",
                "OUTSIDE_VALID_TERM_RANGE",
                "COULD_NOT_PARSE_ROW",
                "INVALID_ENUMERATION_OPTION",
                "AMBIGUOUS_ENUMERATION_OPTION",
                "FAILED_VALIDATION",
                "FAILED_TO_CREATE_ASSOCIATION",
                "FILE_NOT_FOUND",
                "INVALID_COLUMN_CONFIGURATION",
                "INVALID_FILE_TYPE",
                "INVALID_SPREADSHEET",
                "INVALID_SHEET_COUNT",
                "FAILED_TO_PROCESS_OBJECT_WITH_EMPTY_PROPERTY_VALUES",
                "UNKNOWN_BAD_REQUEST",
                "GDPR_BLACKLISTED_EMAIL",
                "DUPLICATE_ASSOCIATION_ID",
                "LIMIT_EXCEEDED",
                "INVALID_ALTERNATE_ID",
                "INVALID_EMAIL",
                "INVALID_DOMAIN",
                "DUPLICATE_ROW_CONTENT",
                "INVALID_NUMBER_SIZE",
                "UNKNOWN_ERROR",
                "FAILED_TO_OPT_OUT_CONTACT",
                "INVALID_REQUIRED_PROPERTY",
                "DUPLICATE_ALTERNATE_ID",
                "DUPLICATE_OBJECT_ID",
                "DUPLICATE_UNIQUE_PROPERTY_VALUE"
            ]
          },
          "objectType": {
            "type": "string",
            "enum": [
                "CONTACT",
                "COMPANY",
                "DEAL",
                "ENGAGEMENT",
                "TICKET",
                "OWNER",
                "PRODUCT",
                "LINE_ITEM",
                "BET_DELIVERABLE_SERVICE",
                "CONTENT",
                "CONVERSATION",
                "BET_ALERT",
                "PORTAL",
                "QUOTE",
                "FORM_SUBMISSION_INBOUNDDB",
                "QUOTA",
                "UNSUBSCRIBE",
                "COMMUNICATION",
                "FEEDBACK_SUBMISSION",
                "ATTRIBUTION",
                "SALESFORCE_SYNC_ERROR",
                "RESTORABLE_CRM_OBJECT",
                "HUB",
                "LANDING_PAGE",
                "PRODUCT_OR_FOLDER",
                "TASK",
                "FORM",
                "MARKETING_EMAIL",
                "AD_ACCOUNT",
                "AD_CAMPAIGN",
                "AD_GROUP",
                "AD",
                "KEYWORD",
                "CAMPAIGN",
                "SOCIAL_CHANNEL",
                "SOCIAL_POST",
                "SITE_PAGE",
                "BLOG_POST",
                "IMPORT",
                "EXPORT",
                "CTA",
                "TASK_TEMPLATE",
                "AUTOMATION_PLATFORM_FLOW",
                "OBJECT_LIST",
                "NOTE",
                "MEETING_EVENT",
                "CALL",
                "EMAIL",
                "PUBLISHING_TASK",
                "CONVERSATION_SESSION",
                "CONTACT_CREATE_ATTRIBUTION",
                "INVOICE",
                "MARKETING_EVENT",
                "CONVERSATION_INBOX",
                "CHATFLOW",
                "MEDIA_BRIDGE",
                "SEQUENCE",
                "SEQUENCE_STEP",
                "FORECAST",
                "SNIPPET",
                "TEMPLATE",
                "DEAL_CREATE_ATTRIBUTION",
                "QUOTE_TEMPLATE",
                "QUOTE_MODULE",
                "QUOTE_MODULE_FIELD",
                "QUOTE_FIELD",
                "SEQUENCE_ENROLLMENT",
                "SUBSCRIPTION",
                "ACCEPTANCE_TEST",
                "SOCIAL_BROADCAST",
                "DEAL_SPLIT",
                "DEAL_REGISTRATION",
                "GOAL_TARGET",
                "GOAL_TARGET_GROUP",
                "PORTAL_OBJECT_SYNC_MESSAGE",
                "FILE_MANAGER_FILE",
                "FILE_MANAGER_FOLDER",
                "SEQUENCE_STEP_ENROLLMENT",
                "APPROVAL",
                "APPROVAL_STEP",
                "CTA_VARIANT",
                "UNKNOWN"
            ]
          },
          "invalidValue": {
            "type": "string"
          },
          "extraContext": {
            "type": "string"
          },
          "objectTypeId": {
            "type": "string"
          },
          "knownColumnNumber": {
            "type": "integer",
            "format": "int32"
          },
          "sourceData": {
            "$ref": "#/components/schemas/ImportRowCore"
          },
          "createdAt": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "PublicImportMetadata": {
        "required": [
            "counters",
            "fileIds",
            "objectLists"
        ],
        "type": "object",
        "properties": {
          "objectLists": {
            "type": "array",
            "description": "The lists containing the imported objects.",
            "items": {
              "$ref": "#/components/schemas/PublicObjectListRecord"
            }
          },
          "counters": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Summarized outcomes of each row a developer attempted to import into HubSpot."
          },
          "fileIds": {
            "type": "array",
            "description": "The IDs of files uploaded in the File Manager API.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "An object detailing a summary of the import record outputs",
        "example": {
          "counters": {
            "PROPERTY_VALUES_EMITTED": 2,
            "TOTAL_ROWS": 2,
            "UPDATED_OBJECTS": 1,
            "UNIQUE_OBJECTS_WRITTEN": 2,
            "CREATED_OBJECTS": 1
          },
          "fileIds": [
              "3579849"
          ],
          "objectLists": [
            {
              "objectType": "contacts",
              "listId": "3"
            }
          ]
        }
      },
      "PublicImportResponse": {
        "required": [
            "createdAt",
            "id",
            "metadata",
            "optOutImport",
            "state",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The status of the import.",
            "enum": [
                "STARTED",
                "PROCESSING",
                "DONE",
                "FAILED",
                "CANCELED",
                "DEFERRED"
            ]
          },
          "importRequestJson": {
            "type": "object",
            "properties": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "$ref": "#/components/schemas/PublicImportMetadata"
          },
          "importName": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "optOutImport": {
            "type": "boolean",
            "description": "Whether or not the import is a list of people disqualified from receiving emails."
          },
          "id": {
            "type": "string"
          }
        },
        "description": "A current summary of the import, whether complete or not.",
        "example": {
          "createdAt": "2020-01-14T22:45:00.153Z",
          "metadata": {
            "counters": {
              "PROPERTY_VALUES_EMITTED": 1000,
              "TOTAL_ROWS": 1000,
              "UNIQUE_OBJECTS_WRITTEN": 1000,
              "CREATED_OBJECTS": 1000
            },
            "fileIds": [
                "32938649"
            ],
            "objectLists": [
              {
                "objectType": "contacts",
                "listId": "3"
              }
            ]
          },
          "id": "1471",
          "state": "DONE",
          "optOutImport": false,
          "updatedAt": "2020-01-14T22:45:00.153Z"
        }
      },
      "PublicObjectListRecord": {
        "required": [
            "listId",
            "objectType"
        ],
        "type": "object",
        "properties": {
          "listId": {
            "type": "string",
            "description": "The ID of the list containing the imported objects."
          },
          "objectType": {
            "type": "string",
            "description": "The type of object contained in the list."
          }
        },
        "description": "A summary detailing which list contains the imported objects.",
        "example": {
          "listId": "3",
          "objectType": "contacts"
        }
      },
      "AssociationDefinition": {
        "required": [
            "fromObjectTypeId",
            "id",
            "toObjectTypeId"
        ],
        "type": "object",
        "properties": {
          "fromObjectTypeId": {
            "type": "string",
            "description": "ID of the primary object type to link from."
          },
          "toObjectTypeId": {
            "type": "string",
            "description": "ID of the target object type ID to link to."
          },
          "name": {
            "type": "string",
            "description": "A unique name for this association."
          },
          "id": {
            "type": "string",
            "description": "A unique ID for this association."
          },
          "createdAt": {
            "type": "string",
            "description": "When the association was defined.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "When the association was last updated.",
            "format": "date-time"
          }
        },
        "description": "Defines an association between two object types.",
        "example": {
          "id": "105",
          "fromObjectTypeId": "2-123456",
          "toObjectTypeId": "0-1",
          "name": "my_object_to_contact"
        }
      },
      "AssociationDefinitionEgg": {
        "required": [
            "fromObjectTypeId",
            "toObjectTypeId"
        ],
        "type": "object",
        "properties": {
          "fromObjectTypeId": {
            "type": "string",
            "description": "ID of the primary object type to link from."
          },
          "toObjectTypeId": {
            "type": "string",
            "description": "ID of the target object type ID to link to."
          },
          "name": {
            "type": "string",
            "description": "A unique name for this association."
          }
        },
        "description": "Defines an association between two object types.",
        "example": {
          "fromObjectTypeId": "2-123456",
          "toObjectTypeId": "contact",
          "name": "my_object_to_contact"
        }
      },
      "CollectionResponseObjectSchemaNoPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectSchema"
            }
          }
        }
      },
      "ObjectSchema": {
        "required": [
            "archived",
            "associations",
            "fullyQualifiedName",
            "id",
            "labels",
            "name",
            "objectTypeId",
            "properties",
            "requiredProperties",
            "searchableProperties",
            "secondaryDisplayProperties"
        ],
        "type": "object",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/ObjectTypeDefinitionLabels"
          },
          "requiredProperties": {
            "type": "array",
            "description": "The names of properties that should be **required** when creating an object of this type.",
            "items": {
              "type": "string"
            }
          },
          "searchableProperties": {
            "type": "array",
            "description": "Names of properties that will be indexed for this object type in by HubSpot's product search.",
            "items": {
              "type": "string"
            }
          },
          "primaryDisplayProperty": {
            "type": "string",
            "description": "The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type."
          },
          "secondaryDisplayProperties": {
            "type": "array",
            "description": "The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.",
            "items": {
              "type": "string"
            }
          },
          "archived": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "A unique ID for this schema's object type. Will be defined as {meta-type}-{unique ID}."
          },
          "fullyQualifiedName": {
            "type": "string",
            "description": "An assigned unique ID for the object, including portal ID and object name."
          },
          "createdAt": {
            "type": "string",
            "description": "When the object schema was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "When the object schema was last updated.",
            "format": "date-time"
          },
          "objectTypeId": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "description": "Properties defined for this object type.",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "associations": {
            "type": "array",
            "description": "Associations defined for a given object type.",
            "items": {
              "$ref": "#/components/schemas/AssociationDefinition"
            }
          },
          "name": {
            "type": "string",
            "description": "A unique name for the schema's object type."
          }
        },
        "description": "Defines an object schema, including its properties and associations.",
        "example": {
          "id": "123456",
          "createdAt": "2020-02-20T18:07:11.390Z",
          "updatedAt": "2020-02-20T18:09:07.555Z",
          "properties": [
            {
              "updatedAt": "2020-02-20T18:07:11.802Z",
              "createdAt": "2020-02-20T18:07:11.802Z",
              "name": "my_object_property",
              "label": "My object property",
              "type": "string",
              "fieldType": "text",
              "groupName": "my_object_information",
              "displayOrder": -1,
              "calculated": false,
              "externalOptions": false,
              "archived": false,
              "hasUniqueValue": false
            }
          ],
          "associations": [
            {
              "id": "123",
              "fromObjectTypeId": "2-123456",
              "toObjectTypeId": "0-1",
              "name": "my_object_to_contact"
            }
          ],
          "labels": {
            "singular": "My object",
            "plural": "My objects"
          },
          "requiredProperties": [
              "my_object_property"
          ],
          "searchableProperties": [
              "my_object_property"
          ],
          "primaryDisplayProperty": "my_object_property",
          "metaType": "PORTAL_SPECIFIC",
          "fullyQualifiedName": "p7878787_my_object\"",
          "name": "my_object"
        }
      },
      "ObjectSchemaEgg": {
        "required": [
            "associatedObjects",
            "labels",
            "name",
            "properties",
            "requiredProperties",
            "searchableProperties",
            "secondaryDisplayProperties"
        ],
        "type": "object",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/ObjectTypeDefinitionLabels"
          },
          "requiredProperties": {
            "type": "array",
            "description": "The names of properties that should be **required** when creating an object of this type.",
            "items": {
              "type": "string"
            }
          },
          "searchableProperties": {
            "type": "array",
            "description": "Names of properties that will be indexed for this object type in by HubSpot's product search.",
            "items": {
              "type": "string"
            }
          },
          "primaryDisplayProperty": {
            "type": "string",
            "description": "The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type."
          },
          "secondaryDisplayProperties": {
            "type": "array",
            "description": "The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "array",
            "description": "Properties defined for this object type.",
            "items": {
              "$ref": "#/components/schemas/ObjectTypePropertyCreate"
            }
          },
          "associatedObjects": {
            "type": "array",
            "description": "Associations defined for this object type.",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "A unique name for this object. For internal use only."
          }
        },
        "description": "Defines a new object type, its properties, and associations.",
        "example": {
          "name": "my_object",
          "labels": {
            "singular": "My object",
            "plural": "My objects"
          },
          "primaryDisplayProperty": "my_object_property",
          "requiredProperties": [
              "my_object_property"
          ],
          "properties": [
            {
              "name": "my_object_property",
              "label": "My object property",
              "isPrimaryDisplayLabel": true
            }
          ],
          "associatedObjects": [
              "CONTACT"
          ],
          "metaType": "PORTAL_SPECIFIC"
        }
      },
      "ObjectTypeDefinition": {
        "required": [
            "archived",
            "fullyQualifiedName",
            "id",
            "labels",
            "name",
            "objectTypeId",
            "requiredProperties",
            "searchableProperties",
            "secondaryDisplayProperties"
        ],
        "type": "object",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/ObjectTypeDefinitionLabels"
          },
          "requiredProperties": {
            "type": "array",
            "description": "The names of properties that should be **required** when creating an object of this type.",
            "items": {
              "type": "string"
            }
          },
          "searchableProperties": {
            "type": "array",
            "description": "Names of properties that will be indexed for this object type in by HubSpot's product search.",
            "items": {
              "type": "string"
            }
          },
          "primaryDisplayProperty": {
            "type": "string",
            "description": "The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type."
          },
          "secondaryDisplayProperties": {
            "type": "array",
            "description": "The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.",
            "items": {
              "type": "string"
            }
          },
          "archived": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "A unique ID for this object type. Will be defined as {meta-type}-{unique ID}."
          },
          "fullyQualifiedName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "description": "When the object type was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "When the object type was last updated.",
            "format": "date-time"
          },
          "objectTypeId": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "A unique name for this object. For internal use only."
          },
          "portalId": {
            "type": "integer",
            "description": "The ID of the account that this object type is specific to.",
            "format": "int32"
          }
        },
        "description": "Defines an object type.",
        "example": {
          "id": "123456",
          "createdAt": "2020-02-20T18:07:11.390Z",
          "updatedAt": "2020-02-21T14:13:28.818002Z",
          "labels": {
            "singular": "My object",
            "plural": "My objects"
          },
          "requiredProperties": [
              "my_object_property"
          ],
          "searchableProperties": [
              "my_object_property"
          ],
          "primaryDisplayProperty": "my_object_property",
          "portalId": 12345678,
          "metaType": "PORTAL_SPECIFIC",
          "name": "my_object"
        }
      },
      "ObjectTypeDefinitionLabels": {
        "type": "object",
        "properties": {
          "singular": {
            "type": "string",
            "description": "The word for one object. (There’s no way to change this later.)"
          },
          "plural": {
            "type": "string",
            "description": "The word for multiple objects. (There’s no way to change this later.)"
          }
        },
        "description": "Singular and plural labels for the object. Used in CRM display.",
        "example": {
          "singular": "My object",
          "plural": "My objects"
        }
      },
      "ObjectTypeDefinitionPatch": {
        "type": "object",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/ObjectTypeDefinitionLabels"
          },
          "requiredProperties": {
            "type": "array",
            "description": "The names of properties that should be **required** when creating an object of this type.",
            "items": {
              "type": "string"
            }
          },
          "searchableProperties": {
            "type": "array",
            "description": "Names of properties that will be indexed for this object type in by HubSpot's product search.",
            "items": {
              "type": "string"
            }
          },
          "primaryDisplayProperty": {
            "type": "string",
            "description": "The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type."
          },
          "secondaryDisplayProperties": {
            "type": "array",
            "description": "The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.",
            "items": {
              "type": "string"
            }
          },
          "restorable": {
            "type": "boolean"
          }
        },
        "description": "Defines attributes to update on an object type.",
        "example": {
          "primaryDisplayProperty": "my_object_property",
          "requiredProperties": [
              "my_object_property"
          ],
          "searchableProperties": [
              "my_object_property"
          ]
        }
      },
      "ObjectTypePropertyCreate": {
        "required": [
            "fieldType",
            "label",
            "name",
            "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The internal property name, which must be used when referencing the property from the API."
          },
          "label": {
            "type": "string",
            "description": "A human-readable property label that will be shown in HubSpot."
          },
          "groupName": {
            "type": "string",
            "description": "The name of the group this property belongs to."
          },
          "description": {
            "type": "string",
            "description": "A description of the property that will be shown as help text in HubSpot."
          },
          "options": {
            "type": "array",
            "description": "A list of available options for the property. This field is only required for enumerated properties.",
            "items": {
              "$ref": "#/components/schemas/OptionInput"
            }
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order that this property should be displayed in the HubSpot UI relative to other properties for this object type. Properties are displayed in order starting with the lowest positive integer value. A value of -1 will cause the property to be displayed **after** any positive values.",
            "format": "int32"
          },
          "hasUniqueValue": {
            "type": "boolean",
            "description": "Whether or not the property's value must be unique. Once set, this can't be changed."
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "description": "The data type of the property.",
            "enum": [
                "string",
                "number",
                "date",
                "datetime",
                "enumeration",
                "bool"
            ]
          },
          "fieldType": {
            "type": "string",
            "description": "Controls how the property appears in HubSpot."
          }
        },
        "description": "Defines a property to create.",
        "example": {
          "label": "My object property",
          "type": "enumeration",
          "fieldType": "select",
          "groupName": "my_object_information",
          "displayOrder": 2,
          "hasUniqueValue": false,
          "options": [
            {
              "label": "Option A",
              "description": "Choice number one",
              "value": "A",
              "displayOrder": 1
            },
            {
              "label": "Option B",
              "description": "Choice number two",
              "value": "B",
              "displayOrder": 2
            }
          ]
        }
      },
      "Option": {
        "required": [
            "hidden",
            "label",
            "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A human-readable option label that will be shown in HubSpot."
          },
          "value": {
            "type": "string",
            "description": "The internal value of the option, which must be used when setting the property value through the API."
          },
          "description": {
            "type": "string",
            "description": "A description of the option."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Options are displayed in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.",
            "format": "int32"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden options will not be displayed in HubSpot."
          }
        },
        "description": "The options available when a property is an enumeration",
        "example": {
          "label": "Option A",
          "description": "Choice number one",
          "value": "A",
          "displayOrder": 1,
          "hidden": false
        }
      },
      "OptionInput": {
        "required": [
            "displayOrder",
            "hidden",
            "label",
            "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A human-readable option label that will be shown in HubSpot."
          },
          "value": {
            "type": "string",
            "description": "The internal value of the option, which must be used when setting the property value through the API."
          },
          "description": {
            "type": "string",
            "description": "A description of the option."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Options are shown in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.",
            "format": "int32"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden options won't be shown in HubSpot."
          }
        },
        "description": "Defines a enumeration property option",
        "example": {
          "label": "Option A",
          "description": "Choice number one",
          "value": "A",
          "displayOrder": 1,
          "hidden": false
        }
      },
      "Property": {
        "required": [
            "description",
            "fieldType",
            "groupName",
            "label",
            "name",
            "options",
            "type"
        ],
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "When the property was created",
            "format": "date-time"
          },
          "archivedAt": {
            "type": "string",
            "description": "When the property was archived.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The internal property name, which must be used when referencing the property via the API."
          },
          "label": {
            "type": "string",
            "description": "A human-readable property label that will be shown in HubSpot."
          },
          "type": {
            "type": "string",
            "description": "The property data type."
          },
          "fieldType": {
            "type": "string",
            "description": "Controls how the property appears in HubSpot."
          },
          "description": {
            "type": "string",
            "description": "A description of the property that will be shown as help text in HubSpot."
          },
          "groupName": {
            "type": "string",
            "description": "The name of the property group the property belongs to."
          },
          "options": {
            "type": "array",
            "description": "A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.",
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          },
          "createdUserId": {
            "type": "string",
            "description": "The internal ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot."
          },
          "updatedUserId": {
            "type": "string",
            "description": "The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot."
          },
          "referencedObjectType": {
            "type": "string",
            "description": "If this property is related to other object(s), they'll be listed here."
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order that this property should be displayed in the HubSpot UI relative to other properties for this object type. Properties are displayed in order starting with the lowest positive integer value. A value of -1 will cause the property to be displayed **after** any positive values.",
            "format": "int32"
          },
          "calculated": {
            "type": "boolean",
            "description": "For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties."
          },
          "externalOptions": {
            "type": "boolean",
            "description": "For default properties, true indicates that the options are stored externally to the property settings."
          },
          "archived": {
            "type": "boolean",
            "description": "Whether or not the property is archived."
          },
          "hasUniqueValue": {
            "type": "boolean",
            "description": "Whether or not the property's value must be unique. Once set, this can't be changed."
          },
          "hidden": {
            "type": "boolean"
          },
          "hubspotDefined": {
            "type": "boolean",
            "description": "This will be true for default object properties built into HubSpot."
          },
          "showCurrencySymbol": {
            "type": "boolean",
            "description": "Whether the property will display the currency symbol set in the account settings."
          },
          "modificationMetadata": {
            "$ref": "#/components/schemas/PropertyModificationMetadata"
          },
          "formField": {
            "type": "boolean",
            "description": "Whether or not the property can be used in a HubSpot form."
          }
        },
        "description": "Defines a property",
        "example": {
          "name": "my_object_property",
          "label": "My object property",
          "type": "enumeration",
          "fieldType": "select",
          "groupName": "my_object_information",
          "displayOrder": 2,
          "hasUniqueValue": false,
          "modificationMetadata": {
            "readOnlyOptions": false,
            "readOnlyValue": false,
            "readOnlyDefinition": false,
            "archivable": true
          },
          "options": [
            {
              "label": "Option A",
              "description": "Choice number one",
              "value": "A",
              "displayOrder": 1,
              "hidden": false
            },
            {
              "label": "Option B",
              "description": "Choice number two",
              "value": "B",
              "displayOrder": 2,
              "hidden": false
            }
          ]
        }
      },
      "PropertyModificationMetadata": {
        "required": [
            "archivable",
            "readOnlyDefinition",
            "readOnlyValue"
        ],
        "type": "object",
        "properties": {
          "archivable": {
            "type": "boolean"
          },
          "readOnlyDefinition": {
            "type": "boolean"
          },
          "readOnlyOptions": {
            "type": "boolean"
          },
          "readOnlyValue": {
            "type": "boolean"
          }
        }
      },
      "BatchInputPropertyCreate": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyCreate"
            }
          }
        }
      },
      "BatchInputPropertyName": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyName"
            }
          }
        }
      },
      "BatchReadInputPropertyName": {
        "required": [
            "archived",
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyName"
            }
          },
          "archived": {
            "type": "boolean"
          }
        }
      },
      "BatchResponseProperty": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property1"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError1"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseProperty": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property1"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/Paging1"
          }
        }
      },
      "CollectionResponsePropertyGroup": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyGroup"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/Paging1"
          }
        }
      },
      "ErrorCategory1": {
        "required": [
            "httpStatus",
            "name"
        ],
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "string",
            "enum": [
                "CONTINUE",
                "SWITCHING_PROTOCOLS",
                "PROCESSING",
                "OK",
                "CREATED",
                "ACCEPTED",
                "NON_AUTHORITATIVE_INFORMATION",
                "NO_CONTENT",
                "RESET_CONTENT",
                "PARTIAL_CONTENT",
                "MULTI_STATUS",
                "ALREADY_REPORTED",
                "IM_USED",
                "MULTIPLE_CHOICES",
                "MOVED_PERMANENTLY",
                "FOUND",
                "SEE_OTHER",
                "NOT_MODIFIED",
                "USE_PROXY",
                "TEMPORARY_REDIRECT",
                "PERMANENT_REDIRECT",
                "BAD_REQUEST",
                "UNAUTHORIZED",
                "PAYMENT_REQUIRED",
                "FORBIDDEN",
                "NOT_FOUND",
                "METHOD_NOT_ALLOWED",
                "NOT_ACCEPTABLE",
                "PROXY_AUTHENTICATION_REQUIRED",
                "REQUEST_TIMEOUT",
                "CONFLICT",
                "GONE",
                "LENGTH_REQUIRED",
                "PRECONDITION_FAILED",
                "REQUEST_ENTITY_TOO_LARGE",
                "REQUEST_URI_TOO_LONG",
                "UNSUPPORTED_MEDIA_TYPE",
                "REQUESTED_RANGE_NOT_SATISFIABLE",
                "EXPECTATION_FAILED",
                "IM_A_TEAPOT",
                "MISDIRECTED_REQUEST",
                "UNPROCESSABLE_ENTITY",
                "LOCKED",
                "FAILED_DEPENDENCY",
                "UPGRADE_REQUIRED",
                "PRECONDITION_REQUIRED",
                "TOO_MANY_REQUESTS",
                "REQUEST_HEADERS_FIELDS_TOO_LARGE",
                "INTERNAL_STALE_SERVICE_DISCOVERY",
                "UNAVAILABLE_FOR_LEGAL_REASONS",
                "INTERNAL_SERVER_ERROR",
                "NOT_IMPLEMENTED",
                "BAD_GATEWAY",
                "SERVICE_UNAVAILABLE",
                "GATEWAY_TIMEOUT",
                "HTTP_VERSION_NOT_SUPPORTED",
                "VARIANT_ALSO_NEGOTIATES",
                "INSUFFICIENT_STORAGE",
                "LOOP_DETECTED",
                "NOT_EXTENDED",
                "NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NextPage2": {
        "required": [
            "after"
        ],
        "type": "object",
        "properties": {
          "after": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "Option1": {
        "required": [
            "hidden",
            "label",
            "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A human-readable option label that will be shown in HubSpot."
          },
          "value": {
            "type": "string",
            "description": "The internal value of the option, which must be used when setting the property value through the API."
          },
          "description": {
            "type": "string",
            "description": "A description of the option."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Options are displayed in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.",
            "format": "int32"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden options will not be displayed in HubSpot."
          }
        },
        "example": {
          "hidden": false,
          "displayOrder": 1,
          "description": "Choice number one",
          "label": "Option A",
          "value": "A"
        }
      },
      "OptionInput1": {
        "required": [
            "hidden",
            "label",
            "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A human-readable option label that will be shown in HubSpot."
          },
          "value": {
            "type": "string",
            "description": "The internal value of the option, which must be used when setting the property value through the API."
          },
          "description": {
            "type": "string",
            "description": "A description of the option."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Options are shown in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.",
            "format": "int32"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden options won't be shown in HubSpot."
          }
        },
        "example": {
          "hidden": false,
          "displayOrder": 1,
          "description": "Choice number one",
          "label": "Option A",
          "value": "A"
        }
      },
      "Paging1": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NextPage2"
          }
        }
      },
      "Property1": {
        "required": [
            "description",
            "fieldType",
            "groupName",
            "label",
            "name",
            "options",
            "type"
        ],
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "archivedAt": {
            "type": "string",
            "description": "When the property was archived.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The internal property name, which must be used when referencing the property via the API."
          },
          "label": {
            "type": "string",
            "description": "A human-readable property label that will be shown in HubSpot."
          },
          "type": {
            "type": "string",
            "description": "The property data type."
          },
          "fieldType": {
            "type": "string",
            "description": "Controls how the property appears in HubSpot."
          },
          "description": {
            "type": "string",
            "description": "A description of the property that will be shown as help text in HubSpot."
          },
          "groupName": {
            "type": "string",
            "description": "The name of the property group the property belongs to."
          },
          "options": {
            "type": "array",
            "description": "A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.",
            "items": {
              "$ref": "#/components/schemas/Option1"
            }
          },
          "createdUserId": {
            "type": "string",
            "description": "The internal user ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot."
          },
          "updatedUserId": {
            "type": "string",
            "description": "The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot."
          },
          "referencedObjectType": {
            "type": "string",
            "description": "If this property is related to other object(s), they'll be listed here."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Properties are shown in order, starting with the lowest positive integer value.",
            "format": "int32"
          },
          "calculated": {
            "type": "boolean",
            "description": "For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties."
          },
          "externalOptions": {
            "type": "boolean",
            "description": "For default properties, true indicates that the options are stored externally to the property settings."
          },
          "archived": {
            "type": "boolean",
            "description": "Whether or not the property is archived."
          },
          "hasUniqueValue": {
            "type": "boolean",
            "description": "Whether or not the property's value must be unique. Once set, this can't be changed."
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether or not the property will be hidden from the HubSpot UI. It's recommended this be set to false for custom properties."
          },
          "hubspotDefined": {
            "type": "boolean",
            "description": "This will be true for default object properties built into HubSpot."
          },
          "showCurrencySymbol": {
            "type": "boolean",
            "description": "Whether or not the property will display the currency symbol set in the account settings."
          },
          "modificationMetadata": {
            "$ref": "#/components/schemas/PropertyModificationMetadata"
          },
          "formField": {
            "type": "boolean",
            "description": "Whether or not the property can be used in a HubSpot form."
          }
        },
        "example": {
          "groupName": "contactinformation",
          "hidden": false,
          "modificationMetadata": {
            "readOnlyOptions": false,
            "readOnlyValue": false,
            "readOnlyDefinition": false,
            "archivable": true
          },
          "name": "my_contact_property",
          "displayOrder": 2,
          "options": [
            {
              "label": "Option A",
              "description": "Choice number one",
              "value": "A",
              "displayOrder": 1,
              "hidden": false
            },
            {
              "label": "Option B",
              "description": "Choice number two",
              "value": "B",
              "displayOrder": 2,
              "hidden": false
            }
          ],
          "label": "My Contact Property",
          "hasUniqueValue": false,
          "type": "enumeration",
          "fieldType": "select",
          "formField": true
        }
      },
      "PropertyCreate": {
        "required": [
            "fieldType",
            "groupName",
            "label",
            "name",
            "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The internal property name, which must be used when referencing the property via the API."
          },
          "label": {
            "type": "string",
            "description": "A human-readable property label that will be shown in HubSpot."
          },
          "type": {
            "type": "string",
            "description": "The data type of the property.",
            "enum": [
                "string",
                "number",
                "date",
                "datetime",
                "enumeration"
            ]
          },
          "fieldType": {
            "type": "string",
            "description": "Controls how the property appears in HubSpot.",
            "enum": [
                "textarea",
                "text",
                "date",
                "file",
                "number",
                "select",
                "radio",
                "checkbox",
                "booleancheckbox"
            ]
          },
          "groupName": {
            "type": "string",
            "description": "The name of the property group the property belongs to."
          },
          "description": {
            "type": "string",
            "description": "A description of the property that will be shown as help text in HubSpot."
          },
          "options": {
            "type": "array",
            "description": "A list of valid options for the property. This field is required for enumerated properties.",
            "items": {
              "$ref": "#/components/schemas/OptionInput1"
            }
          },
          "displayOrder": {
            "type": "integer",
            "description": "Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property to be displayed after any positive values.",
            "format": "int32"
          },
          "hasUniqueValue": {
            "type": "boolean",
            "description": "Whether or not the property's value must be unique. Once set, this can't be changed."
          },
          "hidden": {
            "type": "boolean",
            "description": "If true, the property won't be visible and can't be used in HubSpot."
          },
          "formField": {
            "type": "boolean",
            "description": "Whether or not the property can be used in a HubSpot form."
          }
        },
        "example": {
          "groupName": "contactinformation",
          "hidden": false,
          "displayOrder": 2,
          "options": [
            {
              "label": "Option A",
              "description": "Choice number one",
              "value": "A",
              "displayOrder": 1,
              "hidden": false
            },
            {
              "label": "Option B",
              "description": "Choice number two",
              "value": "B",
              "displayOrder": 2,
              "hidden": false
            }
          ],
          "label": "My Contact Property",
          "hasUniqueValue": false,
          "type": "enumeration",
          "fieldType": "select",
          "formField": true
        }
      },
      "PropertyGroup": {
        "required": [
            "archived",
            "displayOrder",
            "label",
            "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The internal property group name, which must be used when referencing the property group via the API."
          },
          "label": {
            "type": "string",
            "description": "A human-readable label that will be shown in HubSpot."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.",
            "format": "int32"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "description": "An ID for a group of properties",
        "example": {
          "name": "mypropertygroup",
          "displayOrder": -1,
          "label": "My Property Group"
        }
      },
      "PropertyGroupCreate": {
        "required": [
            "label",
            "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The internal property group name, which must be used when referencing the property group via the API."
          },
          "label": {
            "type": "string",
            "description": "A human-readable label that will be shown in HubSpot."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.",
            "format": "int32"
          }
        },
        "example": {
          "name": "mypropertygroup",
          "displayOrder": -1,
          "label": "My Property Group"
        }
      },
      "PropertyGroupUpdate": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A human-readable label that will be shown in HubSpot."
          },
          "displayOrder": {
            "type": "integer",
            "description": "Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.",
            "format": "int32"
          }
        },
        "example": {
          "displayOrder": -1,
          "label": "My Property Group"
        }
      },
      "PropertyName": {
        "required": [
            "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the property to read or modify."
          }
        },
        "example": {
          "name": "my_custom_property"
        }
      },
      "PropertyUpdate": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A human-readable property label that will be shown in HubSpot."
          },
          "type": {
            "type": "string",
            "description": "The data type of the property.",
            "enum": [
                "string",
                "number",
                "date",
                "datetime",
                "enumeration"
            ]
          },
          "fieldType": {
            "type": "string",
            "description": "Controls how the property appears in HubSpot.",
            "enum": [
                "textarea",
                "text",
                "date",
                "file",
                "number",
                "select",
                "radio",
                "checkbox",
                "booleancheckbox"
            ]
          },
          "groupName": {
            "type": "string",
            "description": "The name of the property group the property belongs to."
          },
          "description": {
            "type": "string",
            "description": "A description of the property that will be shown as help text in HubSpot."
          },
          "options": {
            "type": "array",
            "description": "A list of valid options for the property.",
            "items": {
              "$ref": "#/components/schemas/OptionInput1"
            }
          },
          "displayOrder": {
            "type": "integer",
            "description": "Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the Property to be displayed after any positive values.",
            "format": "int32"
          },
          "hidden": {
            "type": "boolean",
            "description": "If true, the property won't be visible and can't be used in HubSpot."
          },
          "formField": {
            "type": "boolean",
            "description": "Whether or not the property can be used in a HubSpot form."
          }
        },
        "example": {
          "groupName": "contactinformation",
          "hidden": false,
          "displayOrder": 2,
          "options": [
            {
              "label": "Option A",
              "description": "Choice number one",
              "value": "A",
              "displayOrder": 1,
              "hidden": false
            },
            {
              "label": "Option B",
              "description": "Choice number two",
              "value": "B",
              "displayOrder": 2,
              "hidden": false
            }
          ],
          "label": "My Contact Property",
          "type": "enumeration",
          "fieldType": "select",
          "formField": true
        }
      },
      "StandardError1": {
        "required": [
            "category",
            "context",
            "errors",
            "links",
            "message",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ErrorCategory1"
          },
          "subCategory": {
            "type": "object",
            "properties": {}
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AssociatedId1": {
        "required": [
            "id",
            "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "example": {
          "id": "172859",
          "type": "contact_to_company"
        }
      },
      "BatchInputPublicAssociation": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicAssociation"
            }
          }
        }
      },
      "BatchInputPublicObjectId": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicObjectId"
            }
          }
        }
      },
      "BatchResponsePublicAssociation": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicAssociation"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError2"
            }
          },
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BatchResponsePublicAssociationMulti": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicAssociationMulti"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError2"
            }
          },
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CollectionResponsePublicAssociationDefiniton": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicAssociationDefiniton"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/Paging2"
          }
        }
      },
      "ErrorCategory2": {
        "required": [
            "httpStatus",
            "name"
        ],
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "string",
            "enum": [
                "CONTINUE",
                "SWITCHING_PROTOCOLS",
                "PROCESSING",
                "OK",
                "CREATED",
                "ACCEPTED",
                "NON_AUTHORITATIVE_INFORMATION",
                "NO_CONTENT",
                "RESET_CONTENT",
                "PARTIAL_CONTENT",
                "MULTI_STATUS",
                "ALREADY_REPORTED",
                "IM_USED",
                "MULTIPLE_CHOICES",
                "MOVED_PERMANENTLY",
                "FOUND",
                "SEE_OTHER",
                "NOT_MODIFIED",
                "USE_PROXY",
                "TEMPORARY_REDIRECT",
                "PERMANENT_REDIRECT",
                "BAD_REQUEST",
                "UNAUTHORIZED",
                "PAYMENT_REQUIRED",
                "FORBIDDEN",
                "NOT_FOUND",
                "METHOD_NOT_ALLOWED",
                "NOT_ACCEPTABLE",
                "PROXY_AUTHENTICATION_REQUIRED",
                "REQUEST_TIMEOUT",
                "CONFLICT",
                "GONE",
                "LENGTH_REQUIRED",
                "PRECONDITION_FAILED",
                "REQUEST_ENTITY_TOO_LARGE",
                "REQUEST_URI_TOO_LONG",
                "UNSUPPORTED_MEDIA_TYPE",
                "REQUESTED_RANGE_NOT_SATISFIABLE",
                "EXPECTATION_FAILED",
                "IM_A_TEAPOT",
                "MISDIRECTED_REQUEST",
                "UNPROCESSABLE_ENTITY",
                "LOCKED",
                "FAILED_DEPENDENCY",
                "UPGRADE_REQUIRED",
                "PRECONDITION_REQUIRED",
                "TOO_MANY_REQUESTS",
                "REQUEST_HEADERS_FIELDS_TOO_LARGE",
                "INTERNAL_STALE_SERVICE_DISCOVERY",
                "UNAVAILABLE_FOR_LEGAL_REASONS",
                "INTERNAL_SERVER_ERROR",
                "NOT_IMPLEMENTED",
                "BAD_GATEWAY",
                "SERVICE_UNAVAILABLE",
                "GATEWAY_TIMEOUT",
                "HTTP_VERSION_NOT_SUPPORTED",
                "VARIANT_ALSO_NEGOTIATES",
                "INSUFFICIENT_STORAGE",
                "LOOP_DETECTED",
                "NOT_EXTENDED",
                "NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NextPage3": {
        "required": [
            "after"
        ],
        "type": "object",
        "properties": {
          "after": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "Paging2": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NextPage3"
          }
        }
      },
      "PublicAssociation": {
        "required": [
            "from",
            "to",
            "type"
        ],
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/PublicObjectId"
          },
          "to": {
            "$ref": "#/components/schemas/PublicObjectId"
          },
          "type": {
            "type": "string"
          }
        },
        "example": {
          "from": {
            "id": "53628"
          },
          "to": {
            "id": "12726"
          },
          "type": "contact_to_company"
        }
      },
      "PublicAssociationDefiniton": {
        "required": [
            "id",
            "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PublicAssociationMulti": {
        "required": [
            "from",
            "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/PublicObjectId"
          },
          "to": {
            "type": "array",
            "description": "The IDs of objects that are associated with the object identified by the ID in 'from'.",
            "items": {
              "$ref": "#/components/schemas/AssociatedId1"
            }
          }
        },
        "example": {
          "from": {
            "id": "53628"
          },
          "to": [
            {
              "id": "12726",
              "type": "contact_to_company"
            },
            {
              "id": "61352",
              "type": "contact_to_company"
            }
          ]
        }
      },
      "PublicObjectId": {
        "required": [
            "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID that identifies an object."
          }
        },
        "example": {
          "id": "37295"
        }
      },
      "StandardError2": {
        "required": [
            "category",
            "context",
            "errors",
            "links",
            "message",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ErrorCategory2"
          },
          "subCategory": {
            "type": "object",
            "properties": {}
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponsePublicOwnerForwardPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicOwner"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging2"
          }
        }
      },
      "ForwardPaging2": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NextPage4"
          }
        }
      },
      "NextPage4": {
        "required": [
            "after"
        ],
        "type": "object",
        "properties": {
          "after": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "PublicOwner": {
        "required": [
            "archived",
            "createdAt",
            "id",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicTeam"
            }
          }
        },
        "example": {
          "id": "6166860",
          "email": "jsmith@example.com",
          "firstName": "John",
          "lastName": "Smith",
          "userId": 1296619,
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false,
          "teams": [
            {
              "id": "178588",
              "name": "West Coast Sales",
              "primary": true
            },
            {
              "id": "178590",
              "name": "California Sales",
              "primary": false
            }
          ]
        }
      },
      "PublicTeam": {
        "required": [
            "id",
            "name",
            "primary"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          }
        }
      },
      "BatchInputTimelineEvent": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "description": "A collection of timeline events we want to create.",
            "items": {
              "$ref": "#/components/schemas/TimelineEvent"
            }
          }
        },
        "description": "Used to create timeline events in batches.",
        "example": {
          "inputs": [
            {
              "eventTemplateId": "1001298",
              "email": "art3mis-pup@petspot.com",
              "tokens": {
                "petName": "Art3mis",
                "petAge": 3,
                "petColor": "black"
              },
              "extraData": {
                "questions": [
                  {
                    "question": "Who's a good girl?",
                    "answer": "Bark!"
                  },
                  {
                    "question": "Do you wanna go on a walk?",
                    "answer": "Woof!"
                  }
                ]
              },
              "timelineIFrame": {
                "linkLabel": "View Art3mis",
                "headerLabel": "Art3mis dog",
                "url": "https://my.petspot.com/pets/Art3mis",
                "width": 600,
                "height": 400
              }
            },
            {
              "eventTemplateId": "1001298",
              "email": "pocket-tiger@petspot.com",
              "tokens": {
                "petName": "Pocket",
                "petAge": 3,
                "petColor": "yellow"
              },
              "extraData": {
                "questions": [
                  {
                    "question": "Who's a good kitty?",
                    "answer": "Purr..."
                  },
                  {
                    "question": "Will you stop playing with that?",
                    "answer": "Meow!"
                  }
                ]
              },
              "timelineIFrame": {
                "linkLabel": "View Pocket",
                "headerLabel": "Pocket Tiger",
                "url": "https://my.petspot.com/pets/Pocket",
                "width": 600,
                "height": 400
              }
            }
          ]
        }
      },
      "BatchResponseTimelineEventResponse": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the batch response. Should always be COMPLETED if processed.",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "description": "Successfully created events.",
            "items": {
              "$ref": "#/components/schemas/TimelineEventResponse"
            }
          },
          "requestedAt": {
            "type": "string",
            "description": "The time the request occurred.",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "description": "The time the request began processing.",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "description": "The time the request was completed.",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "The state of the batch event request.",
        "example": {
          "results": [
            {
              "objectType": "contacts",
              "id": "petspot:1001298:art3mis-pup@petspot.com-6edaa73d-d734-404d-908f-74774d58ac2b",
              "eventTemplateId": "1001298",
              "email": "art3mis-pup@petspot.com",
              "objectId": "28001",
              "timestamp": "2020-01-30T18:13:25.665Z",
              "tokens": {
                "petName": "Art3mis",
                "petColor": "black",
                "petAge": "3"
              },
              "extraData": {
                "questions": [
                  {
                    "question": "Who's a good girl?",
                    "answer": "Bark!"
                  },
                  {
                    "question": "Do you wanna go on a walk?",
                    "answer": "Woof!"
                  }
                ]
              },
              "timelineIFrame": {
                "linkLabel": "View Art3mis",
                "headerLabel": "Art3mis dog",
                "url": "https://my.petspot.com/pets/Art3mis",
                "width": 600,
                "height": 400
              }
            },
            {
              "objectType": "contacts",
              "id": "petspot:1001298:pocket-tiger@petspot.com-0df6277b-6eba-4d1f-8c19-1994cbfaa4ca",
              "eventTemplateId": "1001298",
              "email": "pocket-tiger@petspot.com",
              "objectId": "28651",
              "timestamp": "2020-01-30T18:13:25.665Z",
              "tokens": {
                "petName": "Pocket",
                "petColor": "yellow",
                "petAge": "3"
              },
              "extraData": {
                "questions": [
                  {
                    "question": "Who's a good kitty?",
                    "answer": "Purr..."
                  },
                  {
                    "question": "Will you stop playing with that?",
                    "answer": "Meow!"
                  }
                ]
              },
              "timelineIFrame": {
                "linkLabel": "View Pocket",
                "headerLabel": "Pocket Tiger",
                "url": "https://my.petspot.com/pets/Pocket",
                "width": 600,
                "height": 400
              }
            }
          ],
          "status": "COMPLETE",
          "startedAt": "2020-01-30T18:13:24.974023Z",
          "completedAt": "2020-01-30T18:13:26.227559Z"
        }
      },
      "BatchResponseTimelineEventResponseWithErrors": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineEventResponse"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseTimelineEventTemplateNoPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineEventTemplate"
            }
          }
        }
      },
      "EventDetail": {
        "required": [
            "details"
        ],
        "type": "object",
        "properties": {
          "details": {
            "type": "string",
            "description": "The details Markdown rendered as HTML."
          }
        },
        "description": "The details Markdown rendered as HTML.",
        "example": {
          "details": "<p>Registration occurred at Jan 30, 2020, 1:13:25 PM</p><h4>Questions</h4><p><strong>Who&#x27;s a good kitty?</strong>: Purr...</p><p><strong>Will you stop playing with that?</strong>: Meow!</p><p>EDIT</p>"
        }
      },
      "TimelineEvent": {
        "required": [
            "eventTemplateId",
            "tokens"
        ],
        "type": "object",
        "properties": {
          "eventTemplateId": {
            "type": "string",
            "description": "The event template ID."
          },
          "email": {
            "type": "string",
            "description": "The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the `objectId`)."
          },
          "objectId": {
            "type": "string",
            "description": "The CRM object identifier. This is required for every event other than contacts (where utk or email can be used)."
          },
          "utk": {
            "type": "string",
            "description": "Use the `utk` parameter to associate an event with a contact by `usertoken`. This is recommended if you don't know a user's email, but have an identifying user token in your cookie."
          },
          "domain": {
            "type": "string",
            "description": "The event domain (often paired with utk)."
          },
          "timestamp": {
            "type": "string",
            "description": "The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object's timeline.",
            "format": "date-time"
          },
          "tokens": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A collection of token keys and values associated with the template tokens."
          },
          "extraData": {
            "type": "object",
            "properties": {},
            "description": "Additional event-specific data that can be interpreted by the template's markdown."
          },
          "timelineIFrame": {
            "$ref": "#/components/schemas/TimelineEventIFrame"
          },
          "id": {
            "type": "string",
            "description": "Identifier for the event. This is optional, and we recommend you do not pass this in. We will create one for you if you omit this. You can also use `{{uuid}}` anywhere in the ID to generate a unique string, guaranteeing uniqueness."
          }
        },
        "description": "The state of the timeline event.",
        "example": {
          "eventTemplateId": "1001298",
          "email": "art3mis-pup@petspot.com",
          "tokens": {
            "petName": "Art3mis",
            "petAge": 3,
            "petColor": "black"
          },
          "extraData": {
            "questions": [
              {
                "question": "Who's a good girl?",
                "answer": "Bark!"
              },
              {
                "question": "Do you wanna go on a walk?",
                "answer": "Woof!"
              }
            ]
          },
          "timelineIFrame": {
            "linkLabel": "View Art3mis",
            "headerLabel": "Art3mis dog",
            "url": "https://my.petspot.com/pets/Art3mis",
            "width": 600,
            "height": 400
          }
        }
      },
      "TimelineEventIFrame": {
        "required": [
            "headerLabel",
            "height",
            "linkLabel",
            "url",
            "width"
        ],
        "type": "object",
        "properties": {
          "linkLabel": {
            "type": "string",
            "description": "The text displaying the link that will display the iframe."
          },
          "headerLabel": {
            "type": "string",
            "description": "The label of the modal window that displays the iframe contents."
          },
          "url": {
            "type": "string",
            "description": "The URI of the iframe contents."
          },
          "width": {
            "type": "integer",
            "description": "The width of the modal window in pixels.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "The height of the modal window in pixels.",
            "format": "int32"
          }
        },
        "example": {
          "linkLabel": "View Art3mis",
          "headerLabel": "Art3mis dog",
          "url": "https://my.petspot.com/pets/Art3mis",
          "width": 600,
          "height": 400
        }
      },
      "TimelineEventResponse": {
        "required": [
            "eventTemplateId",
            "id",
            "objectType",
            "tokens"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for the event. This should be unique to the app and event template. If you use the same ID for different CRM objects, the last to be processed will win and the first will not have a record. You can also use `{{uuid}}` anywhere in the ID to generate a unique string, guaranteeing uniqueness."
          },
          "eventTemplateId": {
            "type": "string",
            "description": "The event template ID."
          },
          "email": {
            "type": "string",
            "description": "The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the `objectId`)."
          },
          "objectId": {
            "type": "string",
            "description": "The CRM object identifier. This is required for every event other than contacts (where utk or email can be used)."
          },
          "utk": {
            "type": "string",
            "description": "Use the `utk` parameter to associate an event with a contact by `usertoken`. This is recommended if you don't know a user's email, but have an identifying user token in your cookie."
          },
          "domain": {
            "type": "string",
            "description": "The event domain (often paired with utk)."
          },
          "timestamp": {
            "type": "string",
            "description": "The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object's timeline.",
            "format": "date-time"
          },
          "tokens": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A collection of token keys and values associated with the template tokens."
          },
          "extraData": {
            "type": "object",
            "properties": {},
            "description": "Additional event-specific data that can be interpreted by the template's markdown."
          },
          "timelineIFrame": {
            "$ref": "#/components/schemas/TimelineEventIFrame"
          },
          "objectType": {
            "type": "string",
            "description": "The ObjectType associated with the EventTemplate."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The current state of the timeline event.",
        "example": {
          "objectType": "contacts",
          "id": "petspot:1001298:art3mis-pup@petspot.com-004-invalid",
          "eventTemplateId": "1001298",
          "email": "art3mis-pup@petspot.com",
          "objectId": "28001",
          "timestamp": "2020-01-30T18:37:15.569Z",
          "tokens": {
            "petName": "Art3mis",
            "petColor": "black",
            "petAge": "3"
          },
          "extraData": {
            "questions": [
              {
                "question": "Who's a good girl?",
                "answer": "Bark!"
              },
              {
                "question": "Do you wanna go on a walk?",
                "answer": "Woof!"
              }
            ]
          },
          "timelineIFrame": {
            "linkLabel": "View Art3mis",
            "headerLabel": "Art3mis dog",
            "url": "https://my.petspot.com/pets/Art3mis",
            "width": 600,
            "height": 400
          }
        }
      },
      "TimelineEventTemplate": {
        "required": [
            "id",
            "name",
            "objectType",
            "tokens"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The template name."
          },
          "headerTemplate": {
            "type": "string",
            "description": "This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header."
          },
          "detailTemplate": {
            "type": "string",
            "description": "This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details."
          },
          "tokens": {
            "type": "array",
            "description": "A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.",
            "items": {
              "$ref": "#/components/schemas/TimelineEventTemplateToken"
            }
          },
          "id": {
            "type": "string",
            "description": "The template ID."
          },
          "objectType": {
            "type": "string",
            "description": "The type of CRM object this template is for. [Contacts, companies, tickets, and deals] are supported."
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time that the Event Template was created, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time that the Event Template was last updated, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.",
            "format": "date-time"
          }
        },
        "description": "The current state of the template definition."
      },
      "TimelineEventTemplateCreateRequest": {
        "required": [
            "name",
            "objectType",
            "tokens"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The template name."
          },
          "headerTemplate": {
            "type": "string",
            "description": "This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header."
          },
          "detailTemplate": {
            "type": "string",
            "description": "This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details."
          },
          "tokens": {
            "type": "array",
            "description": "A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.",
            "items": {
              "$ref": "#/components/schemas/TimelineEventTemplateToken"
            }
          },
          "objectType": {
            "type": "string",
            "description": "The type of CRM object this template is for. [Contacts, companies, tickets, and deals] are supported."
          }
        },
        "description": "State of the template definition being created.",
        "example": {
          "name": "PetSpot Registration",
          "objectType": "contacts",
          "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
          "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}",
          "tokens": [
            {
              "name": "petName",
              "label": "Pet Name",
              "type": "string"
            },
            {
              "name": "petAge",
              "label": "Pet Age",
              "type": "number"
            },
            {
              "name": "petColor",
              "label": "Pet Color",
              "type": "enumeration",
              "options": [
                {
                  "value": "white",
                  "label": "White"
                },
                {
                  "value": "black",
                  "label": "Black"
                },
                {
                  "value": "brown",
                  "label": "Brown"
                },
                {
                  "value": "other",
                  "label": "Other"
                }
              ]
            }
          ]
        }
      },
      "TimelineEventTemplateToken": {
        "required": [
            "label",
            "name",
            "options",
            "type"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Used for list segmentation and reporting."
          },
          "objectPropertyName": {
            "type": "string",
            "description": "The name of the CRM object property. This will populate the CRM object property associated with the event. With enough of these, you can fully build CRM objects via the Timeline API."
          },
          "options": {
            "type": "array",
            "description": "If type is `enumeration`, we should have a list of options to choose from.",
            "items": {
              "$ref": "#/components/schemas/TimelineEventTemplateTokenOption"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the token referenced in the templates. This must be unique for the specific template. It may only contain alphanumeric characters, periods, dashes, or underscores (. - _)."
          },
          "type": {
            "type": "string",
            "description": "The data type of the token. You can currently choose from [string, number, date, enumeration].",
            "enum": [
                "date",
                "enumeration",
                "number",
                "string"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time that the Event Template Token was created, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time that the Event Template Token was last updated, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.",
            "format": "date-time"
          }
        },
        "description": "State of the token definition.",
        "example": {
          "name": "petType",
          "label": "Pet Type",
          "type": "enumeration",
          "createdAt": "2020-02-12T20:58:26Z",
          "updatedAt": "2020-02-12T20:58:26Z",
          "objectPropertyName": "customPropertyPetType",
          "options": [
            {
              "value": "dog",
              "label": "Dog"
            },
            {
              "value": "cat",
              "label": "Cat"
            }
          ]
        }
      },
      "TimelineEventTemplateTokenOption": {
        "required": [
            "label",
            "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "TimelineEventTemplateTokenUpdateRequest": {
        "required": [
            "label",
            "options"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Used for list segmentation and reporting."
          },
          "objectPropertyName": {
            "type": "string",
            "description": "The name of the CRM object property. This will populate the CRM object property associated with the event. With enough of these, you can fully build CRM objects via the Timeline API."
          },
          "options": {
            "type": "array",
            "description": "If type is `enumeration`, we should have a list of options to choose from.",
            "items": {
              "$ref": "#/components/schemas/TimelineEventTemplateTokenOption"
            }
          }
        },
        "description": "State of the token definition for update requests.",
        "example": {
          "label": "petType edit",
          "options": [
            {
              "value": "dog",
              "label": "Dog"
            },
            {
              "value": "cat",
              "label": "Cat"
            },
            {
              "value": "bird",
              "label": "Bird"
            }
          ]
        }
      },
      "TimelineEventTemplateUpdateRequest": {
        "required": [
            "id",
            "name",
            "tokens"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The template name."
          },
          "headerTemplate": {
            "type": "string",
            "description": "This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header."
          },
          "detailTemplate": {
            "type": "string",
            "description": "This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details."
          },
          "tokens": {
            "type": "array",
            "description": "A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.",
            "items": {
              "$ref": "#/components/schemas/TimelineEventTemplateToken"
            }
          },
          "id": {
            "type": "string",
            "description": "The template ID."
          }
        },
        "description": "State of the template definition being updated.",
        "example": {
          "id": "1001298",
          "name": "PetSpot Registration",
          "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
          "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}\n\nEDIT",
          "tokens": [
            {
              "name": "petName",
              "label": "Pet Name",
              "type": "string",
              "objectPropertyName": "firstname"
            },
            {
              "name": "petAge",
              "label": "Pet Age",
              "type": "number"
            },
            {
              "name": "petColor",
              "label": "Pet Color",
              "type": "enumeration",
              "options": [
                {
                  "value": "white",
                  "label": "White"
                },
                {
                  "value": "black",
                  "label": "Black"
                },
                {
                  "value": "brown",
                  "label": "Brown"
                },
                {
                  "value": "yellow",
                  "label": "Yellow"
                },
                {
                  "value": "other",
                  "label": "Other"
                }
              ]
            }
          ]
        }
      },
      "BatchInputSimplePublicObjectBatchInput4": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput4"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput4": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput4"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject4": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject4"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors3": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject4"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseAssociatedId1": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedId"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging4": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations4"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "CollectionResponseWithTotalSimplePublicObjectForwardPaging2": {
        "required": [
            "results",
            "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject4"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "PublicGdprDeleteInput": {
        "required": [
            "objectId"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "string"
          },
          "idProperty": {
            "type": "string"
          }
        }
      },
      "SimplePublicObject4": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "company": "Biglytics",
            "createdate": "2019-10-30T03:30:17.883Z",
            "email": "bcooper@biglytics.net",
            "firstname": "Bryan",
            "lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "lastname": "Cooper",
            "phone": "(877) 929-0687",
            "website": "biglytics.net"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput4": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "id": "1",
          "properties": {
            "company": "Biglytics",
            "email": "bcooper@biglytics.net",
            "firstname": "Bryan",
            "lastname": "Cooper",
            "phone": "(877) 929-0687",
            "website": "biglytics.net"
          }
        }
      },
      "SimplePublicObjectInput4": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "company": "Biglytics",
            "email": "bcooper@biglytics.net",
            "firstname": "Bryan",
            "lastname": "Cooper",
            "phone": "(877) 929-0687",
            "website": "biglytics.net"
          }
        }
      },
      "SimplePublicObjectWithAssociations4": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId1"
            }
          }
        },
        "example": {
          "properties": {
            "company": "Biglytics",
            "createdate": "2019-10-30T03:30:17.883Z",
            "email": "bcooper@biglytics.net",
            "firstname": "Bryan",
            "lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "lastname": "Cooper",
            "phone": "(877) 929-0687",
            "website": "biglytics.net"
          }
        }
      },
      "BatchInputSimplePublicObjectBatchInput5": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput5"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput5": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput5"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject5": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject5"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors4": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject5"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging5": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations5"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "CollectionResponseWithTotalSimplePublicObjectForwardPaging3": {
        "required": [
            "results",
            "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject5"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "SimplePublicObject5": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "hs_content": "What a great product!",
            "hs_ingestion_id": "fd61286d-102b-4fcc-b486-3486b4ceafc2",
            "hs_response_group": "PROMOTER",
            "hs_submission_name": "Customer Satisfaction Survey - bcooper@biglytics.net",
            "hs_survey_channel": "EMAIL",
            "hs_survey_id": "5",
            "hs_survey_name": "Customer Satisfaction Survey",
            "hs_survey_type": "CSAT",
            "hs_value": "2"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput5": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SimplePublicObjectInput5": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "property_string": "value",
            "property_number": "17",
            "property_date": "1572480000000",
            "property_radio": "option_1",
            "property_dropdown": "choice_b",
            "property_checkbox": "false",
            "property_multiple_checkboxes": "chocolate;strawberry"
          }
        }
      },
      "SimplePublicObjectWithAssociations5": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId"
            }
          }
        },
        "example": {
          "properties": {
            "hs_content": "What a great product!",
            "hs_ingestion_id": "fd61286d-102b-4fcc-b486-3486b4ceafc2",
            "hs_response_group": "PROMOTER",
            "hs_submission_name": "Customer Satisfaction Survey - bcooper@biglytics.net",
            "hs_survey_channel": "EMAIL",
            "hs_survey_id": "5",
            "hs_survey_name": "Customer Satisfaction Survey",
            "hs_survey_type": "CSAT",
            "hs_value": "2"
          }
        }
      },
      "BatchInputSimplePublicObjectBatchInput6": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput6"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput6": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput6"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject6": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject6"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors5": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject6"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging6": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations6"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "CollectionResponseWithTotalSimplePublicObjectForwardPaging4": {
        "required": [
            "results",
            "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject6"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "SimplePublicObject6": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "property_string": "value",
            "property_number": "17",
            "property_date": "1572480000000",
            "property_radio": "option_1",
            "property_dropdown": "choice_b",
            "property_checkbox": "false",
            "property_multiple_checkboxes": "chocolate;strawberry"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput6": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SimplePublicObjectInput6": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "property_string": "value",
            "property_number": "17",
            "property_date": "1572480000000",
            "property_radio": "option_1",
            "property_dropdown": "choice_b",
            "property_checkbox": "false",
            "property_multiple_checkboxes": "chocolate;strawberry"
          }
        }
      },
      "SimplePublicObjectWithAssociations6": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId"
            }
          }
        }
      },
      "ExternalSettings": {
        "required": [
            "createMeetingUrl"
        ],
        "type": "object",
        "properties": {
          "createMeetingUrl": {
            "type": "string",
            "description": "The URL that HubSpot will send requests to create a new video conference."
          },
          "updateMeetingUrl": {
            "type": "string",
            "description": "The URL that HubSpot will send updates to existing meetings. Typically called when the user changes the topic or times of a meeting."
          },
          "deleteMeetingUrl": {
            "type": "string",
            "description": "The URL that HubSpot will send notifications of meetings that have been deleted in HubSpot."
          },
          "userVerifyUrl": {
            "type": "string",
            "description": "The URL that HubSpot will use to verify that a user exists in the video conference application."
          }
        },
        "description": "The URLs of the various actions provided by the video conferencing application. All URLs must use the `https` protocol.",
        "example": {
          "createMeetingUrl": "https://example.com/create-meeting",
          "updateMeetingUrl": "https://example.com/update-meeting",
          "deleteMeetingUrl": "https://example.com/delete-meeting",
          "userVerifyUrl": "https://example.com/user-verify"
        }
      },
      "BatchInputSimplePublicObjectBatchInput7": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectBatchInput7"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInput7": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectInput7"
            }
          }
        }
      },
      "BatchResponseSimplePublicObject7": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject7"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors6": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject7"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging7": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObjectWithAssociations7"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "CollectionResponseWithTotalSimplePublicObjectForwardPaging5": {
        "required": [
            "results",
            "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePublicObject7"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "SimplePublicObject7": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "id": "512",
          "properties": {
            "createdate": "2019-10-30T03:30:17.883Z",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "hs_product_id": "191902",
            "hs_recurring_billing_period": "24",
            "name": "1 year implementation consultation",
            "price": "6000.00",
            "quantity": "2",
            "recurringbillingfrequency": "monthly"
          },
          "createdAt": "2019-10-30T03:30:17.883Z",
          "updatedAt": "2019-12-07T16:50:06.678Z",
          "archived": false
        }
      },
      "SimplePublicObjectBatchInput7": {
        "required": [
            "id",
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "id": "1",
          "properties": {
            "name": "1 year implementation consultation",
            "hs_product_id": "191902",
            "hs_recurring_billing_period": "24",
            "recurringbillingfrequency": "monthly",
            "quantity": "2",
            "price": "6000.00"
          }
        }
      },
      "SimplePublicObjectInput7": {
        "required": [
            "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "properties": {
            "name": "1 year implementation consultation",
            "hs_product_id": "191902",
            "hs_recurring_billing_period": "24",
            "recurringbillingfrequency": "monthly",
            "quantity": "2",
            "price": "6000.00"
          }
        }
      },
      "SimplePublicObjectWithAssociations7": {
        "required": [
            "createdAt",
            "id",
            "properties",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "propertiesWithHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CollectionResponseAssociatedId"
            }
          }
        },
        "example": {
          "properties": {
            "createdate": "2019-10-30T03:30:17.883Z",
            "hs_lastmodifieddate": "2019-12-07T16:50:06.678Z",
            "hs_product_id": "191902",
            "hs_recurring_billing_period": "24",
            "name": "1 year implementation consultation",
            "price": "6000.00",
            "quantity": "2",
            "recurringbillingfrequency": "monthly"
          }
        }
      }
    },
    "responses": {
      "Error": {
        "description": "An error occurred.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "developer_hapikey": {
        "type": "apiKey",
        "name": "hapikey",
        "in": "query"
      }
    }
  },
  "x-hubspot-available-client-libraries": [
      "PHP",
      "Node",
      "Python",
      "Ruby"
  ]
}
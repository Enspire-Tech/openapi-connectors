{
  "openapi": "3.0.3",
  "info": {
    "title": "Zoom Contact Center API",
    "description": "The [Zoom Contact Center](https://support.zoom.us/hc/en-us/categories/4423802887949-Zoom-Contact-Center-Support) Open API allows developers to access information from Zoom. Use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.",
    "contact": {
      "name": "Zoom Developers",
      "url": "https://developer.zoom.us/"
    },
    "version": "2.0.0",
    "termsOfService": "https://zoom.us/docs/en-us/zoom_api_license_and_tou.html"
  },
  "servers": [
    {
      "url": "https://api.zoom.us/v2"
    }
  ],
  "tags": [
    {
      "name": "Address Books",
      "description": "Address book operations."
    },
    {
      "name": "Dispositions",
      "description": "Disposition operations."
    },
    {
      "name": "Notes",
      "description": "Note operations."
    },
    {
      "name": "Preferences",
      "description": "Preference operations."
    },
    {
      "name": "Queues",
      "description": "Task queue operations."
    },
    {
      "name": "Recordings",
      "description": "Recording operations."
    },
    {
      "name": "Reports",
      "description": "Report operations."
    },
    {
      "name": "Roles",
      "description": "User role operations."
    },
    {
      "name": "Tasks",
      "description": "Task operations."
    },
    {
      "name": "Skills",
      "description": "Skill operations."
    },
    {
      "name": "Users",
      "description": "User operations."
    }
  ],
  "paths": {
    "/contact_center/skills": {
      "post": {
        "summary": "Create a skill",
        "description": "Create a [skill](https://support.zoom.us/hc/en-us/articles/4423986613261) for skill-based routing. Skills are agent traits that ensure they are the right person to handle a customer interaction. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "skillCreate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Information about the new skill.",
                "properties": {
                  "skill_category_id": {
                    "type": "string",
                    "description": "The skill category ID to assign the skill to.",
                    "example": "OyQQjWiZQTaBX7RwSK6iRw"
                  },
                  "skill_name": {
                    "type": "string",
                    "description": "The skill's name.",
                    "example": "French"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nSkills created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSkill"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request. \n\n**Error Code:** `1502` <br>\nSkill name already exists. You must select a different name."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "get": {
        "summary": "List skills",
        "description": "Return a list of a skills or a skill category's assigned skills. \n\n **Scopes:** `contact_center_skill:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Skills"
        ],
        "operationId": "listSkills",
        "parameters": [
          {
            "in": "query",
            "name": "skill_category_id",
            "description": "The skill category's ID.",
            "schema": {
              "type": "string",
              "example": "Mu_IEZZHQZGMY9avK74kwA"
            }
          },
          {
            "in": "query",
            "name": "skill_id",
            "description": "The skill's ID.",
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          },
          {
            "in": "query",
            "name": "skill_type",
            "description": "The skill category's type.",
            "schema": {
              "type": "string",
              "example": "text",
              "description": "The skill category's type: \n* 'text' — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
              "enum": [
                "text",
                "proficiency"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nSkills list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSkills"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/skills/{skillId}": {
      "delete": {
        "summary": "Delete a skill",
        "description": "Delete a skill. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "skillDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SkillId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `<br>\nSkill deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a skill",
        "description": "Use this API to update a skill's name. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "skillNameUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/SkillId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SkillName"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nSkill updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "get": {
        "summary": "Get a skill",
        "description": "Return a skill's information and its usage. \n\n **Scopes:** `contact_center_skill:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "getSkill",
        "parameters": [
          {
            "$ref": "#/components/parameters/SkillId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nSkill usage information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Skill"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/skills/categories": {
      "post": {
        "summary": "Create a skill category",
        "description": "Create a new skill category. Skill categories let you assign several similar skills to a category, such as language skills. You can then route French-speaking callers to contact center agents that have the highest proficiency with French. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "SkillCategoryCreate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSkillCategory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nSkill category created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSkillCategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request. \n\n**Error Code:** `1502` <br>\nThe skill category highest proficiency level is \"5\", and the lowest level is \"1\"."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "get": {
        "summary": "List skill categories",
        "description": "List all available skill categories and their information. \n\n **Scopes:** `contact_center_skill:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Skills"
        ],
        "operationId": "listSkillCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nSkill categories list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSkillCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/skills/categories/{skillCategoryId}": {
      "delete": {
        "summary": "Delete a skill category",
        "description": "Delete an existing skill category. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "SkillCategoryDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SkillCategoryId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nSkill category deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a skill category",
        "description": "Update a skill category. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "SkillCategoryUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/SkillCategoryId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSkillCategory"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nSkill category updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request. \n\n**Error Code:** `1502` <br>\nThe skill category highest proficiency level is \"5\", and the lowest level is \"1\"."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "get": {
        "summary": "Get a skill category",
        "description": "Return information about a specific skill category. \n\n **Scopes:** `contact_center_skill:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "getSkillCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/SkillCategoryId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nSkill category returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSkillCategory"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues": {
      "post": {
        "summary": "Create a queue",
        "description": "Use this API to create a [queue](https://support.zoom.us/hc/en-us/articles/4423986595085). Queues determine the agents that calls are routed to. Queues also link to an existing routing profile to determine how calls are routed. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Queues"
        ],
        "operationId": "queueCreate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQueue"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nQueue created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateQueueResponse"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          }
        }
      },
      "get": {
        "summary": "List queues",
        "description": "Use this API to get information about all available queues. \n\n **Scopes:** `contact_center_queue:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Queues"
        ],
        "operationId": "listQueues",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Queues list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListQueues"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues/{queueId}": {
      "delete": {
        "summary": "Delete a queue",
        "description": "Use this API to delete a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Queues"
        ],
        "operationId": "queueDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nQueue does not exist: $queueId"
          }
        }
      },
      "patch": {
        "summary": "Update a queue",
        "description": "Use this API to update a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Queues"
        ],
        "operationId": "queueUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueue"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found <br>\n**Error Code:** `1201` <br>\nQueue does not exist: $queueId"
          }
        }
      },
      "get": {
        "summary": "Get a queue",
        "description": "Use this API to get information about a queue. \n\n **Scopes:** `contact_center_queue:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Queues"
        ],
        "operationId": "getAQueue",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nQueue returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nQueue does not exist: $queueId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues/{queueId}/agents": {
      "post": {
        "summary": "Assign queue agents",
        "description": "Use this API to add agents to a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Queues"
        ],
        "operationId": "assignQueueAgents",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignQueueUsers"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nQueue agents assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agents": {
                      "type": "array",
                      "description": "Information about the agents.",
                      "items": {
                        "$ref": "#/components/schemas/QueueAgent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` </br>\nBad Request"
          }
        }
      },
      "get": {
        "summary": "List queue agents",
        "description": "Use this API to return a list of a queue's assigned agents. \n\n **Scopes:** `contact_center_queue:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Queues"
        ],
        "operationId": "getQueueAgents",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nQueue agents list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListQueueAgents"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues/{queueId}/supervisors": {
      "post": {
        "summary": "Assign queue supervisors",
        "description": "Use this API to add supervisors to a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Queues"
        ],
        "operationId": "assignQueueSupervisors",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignQueueUsers"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nQueue supervisors assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supervisors": {
                      "type": "array",
                      "description": "Information about the supervisors.",
                      "items": {
                        "$ref": "#/components/schemas/QueueSupervisor"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` </br>\nBad Request"
          }
        }
      },
      "get": {
        "summary": "List queue supervisors",
        "description": "Use this API to return a list of a queue's assigned supervisors. \n\n **Scopes:** `contact_center_queue:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Queues"
        ],
        "operationId": "getQueueSupervisors",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nQueue supervisors list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListQueueSupervisors"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues/{queueId}/agents/{userId}": {
      "patch": {
        "summary": "Update a queue agent",
        "description": "Use this API to update a queue's agent. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Queues"
        ],
        "operationId": "updateQueueAgent",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          },
          {
            "$ref": "#/components/parameters/QueueUserId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueueAgent"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue agent updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request <br>\n**Error Code:** `1010` <br>\nThe agent must be in available state (Ready) to opt-in for the queue. \n\n **Error Code:** `1011` <br>\n The agent not be allow to opt in or out of their assigned queues."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found <br>\n**Error Code:** `1001` <br>\nUser does not exist: $userId. \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId."
          }
        }
      },
      "delete": {
        "summary": "Unassign a queue agent",
        "description": "Use this API to unassign a queue agent. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Queues"
        ],
        "operationId": "deleteQueueAgent",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          },
          {
            "$ref": "#/components/parameters/QueueUserId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue agent removed."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nQueue agent does not exist: $userId"
          }
        }
      }
    },
    "/contact_center/queues/{queueId}/supervisors/{userId}": {
      "delete": {
        "summary": "Unassign a queue supervisor",
        "description": "Use this API to unassign a queue supervisor. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Queues"
        ],
        "operationId": "deleteQueueSupervisor",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueueId"
          },
          {
            "$ref": "#/components/parameters/QueueUserId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue supervisor removed."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nQueue supervisor does not exist: $userId"
          }
        }
      }
    },
    "/contact_center/queues/{queueId}/dispositions": {
      "post": {
        "summary": "Assign queue dispositions",
        "description": "Use this API to add dispositions to a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "assignQueueDispositions",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1queues~1%7BqueueId%7D~1dispositions/get/parameters/0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignQueueDispositions"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nQueue dispositions assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the dispositions",
                      "items": {
                        "$ref": "#/components/schemas/ListQueueDispositions/properties/dispositions/items"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` </br>\nBad Request"
          }
        }
      },
      "get": {
        "summary": "List queue dispositions",
        "description": "Use this API to return a list of queue's dispositions. \n\n **Scopes:** `contact_center_queue:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "getQueueDispositions",
        "parameters": [
          {
            "in": "path",
            "name": "queueId",
            "description": "The task queue's ID.",
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nQueue dispositions list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListQueueDispositions"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues/{queueId}/dispositions/{dispositionId}": {
      "delete": {
        "summary": "Unassign a queue disposition",
        "description": "Use this API to delete a disposition from a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "deleteQueueDisposition",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1queues~1%7BqueueId%7D~1dispositions/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/QueueDispositionId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue disposition deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nQueue disposition does not exist: $dispositionId"
          }
        }
      }
    },
    "/contact_center/queues/{queueId}/dispositions/sets": {
      "post": {
        "summary": "Assign a queue disposition set",
        "description": "Use this API to add disposition sets to a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "assignQueueDispositionSets",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1queues~1%7BqueueId%7D~1dispositions/get/parameters/0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignQueueDispositionSets"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nQueue disposition sets assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disposition_sets": {
                      "type": "array",
                      "description": "Information about the queue's disposition sets",
                      "items": {
                        "$ref": "#/components/schemas/ListQueueDispositionSets/properties/disposition_sets/items"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` </br>\nBad Request"
          }
        }
      },
      "get": {
        "summary": "List queue disposition sets",
        "description": "Use this API to return a list of queue's disposition sets(https://support.zoom.us/hc/en-us/articles/4470153057549-Managing-dispositions). \n\n **Scopes:** `contact_center_queue:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "getQueueDispositionSets",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1queues~1%7BqueueId%7D~1dispositions/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nQueue disposition sets list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListQueueDispositionSets"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues/{queueId}/dispositions/sets/{dispositionSetId}": {
      "delete": {
        "summary": "Unassign a queue disposition set",
        "description": "Use this API to delete a disposition set from a queue. \n\n **Scopes:** `contact_center_queue:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "deleteQueueDispositionSet",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1queues~1%7BqueueId%7D~1dispositions/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/QueueDispositionSetId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue disposition set deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nQueue disposition set does not exist: $dispositionSetId"
          }
        }
      }
    },
    "/contact_center/roles": {
      "post": {
        "summary": "Create a role",
        "description": "Use this API to create a new [role](https://support.zoom.us/hc/en-us/articles/4471054202253-Using-role-management). Admins can use the role management feature to control access to features and settings in the Zoom web portal. \n\n **Scopes:** `contact_center_role:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Roles"
        ],
        "operationId": "createRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nRole created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2203`<br>\nThe role name already exists; please change to a new one."
          }
        }
      },
      "get": {
        "summary": "List roles",
        "description": "Use this API to return a list of roles. \n\n **Scopes:** `contact_center_role:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Roles"
        ],
        "operationId": "listRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nRole list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRoles"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/roles/{roleId}": {
      "delete": {
        "summary": "Delete a role",
        "description": "Use this API to delete a role. \n\n **Scopes:** `contact_center_role:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Roles"
        ],
        "operationId": "deleteRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/RoleId"
          },
          {
            "in": "query",
            "name": "transfer_role_id",
            "description": "The transfer role's ID. If you deleted the role, you will need to reassign the users associated to this role to a different role.",
            "schema": {
              "type": "string",
              "example": "YjXzeo_S2DeV1QTrpA65Ms"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nRole deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2102` <br>\nThe \"transfer_role_id\" field cannot be an empty value."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nRole does not exist: $roleId"
          }
        }
      },
      "patch": {
        "summary": "Update a role",
        "description": "Use this API to update a role. \n\n **Scopes:** `contact_center_role:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Roles"
        ],
        "operationId": "updateRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/RoleId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRole"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nRole updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2203`<br>\nThe role name already exists; please change to a new one.\n\n**Error Code:** `2204`<br>\n Administrator|Supervisor|Agent role name cannot be updated."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nRole does not exist: $roleId"
          }
        }
      },
      "get": {
        "summary": "Get a role",
        "description": "Use this API to get information about a role. \n\n **Scopes:** `contact_center_role:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Roles"
        ],
        "operationId": "getRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/RoleId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nRole returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nRole does not exist: $roleId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/roles/{roleId}/users": {
      "post": {
        "summary": "Assign a role",
        "description": "Use this API to assign users to a role. Roles have unique privileges that assigned users have access to. For example, an Administrator or Agent role. \n\n **Scopes:** `contact_center_role:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Roles"
        ],
        "operationId": "assignRoleUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/RoleId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignRoleUsers"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nRole assigned to user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          }
        }
      },
      "get": {
        "summary": "List users of a role",
        "description": "Use this API to get information about the users assigned to a specific role. \n\n **Scopes:** `contact_center_role:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Roles"
        ],
        "operationId": "getRoleUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/RoleId"
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nRole users list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRoleUsers"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/roles/{roleId}/users/{userId}": {
      "delete": {
        "summary": "Unassign a role",
        "description": "Use this API to unassign a user from a role. \n\n **Scopes:** `contact_center_role:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Roles"
        ],
        "operationId": "deleteRoleUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/RoleId"
          },
          {
            "$ref": "#/components/parameters/RoleUserId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nRole unassigned from user."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1201` <br>\nRole user does not exist: $userId"
          }
        }
      }
    },
    "/contact_center/users": {
      "get": {
        "summary": "List users' profiles",
        "description": "Returns a list of users and their information. \n\n **Scopes:** `contact_center_user:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Users"
        ],
        "operationId": "users",
        "parameters": [
          {
            "$ref": "#/components/parameters/SearchKey"
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nUser list returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsers"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a user's profile",
        "description": "Create a profile for a user. \n\n **Scopes:** `contact_center_user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Users"
        ],
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The user's ID.",
                    "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                  },
                  "user_email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address.",
                    "example": "jchill@example.com"
                  },
                  "role_id": {
                    "type": "string",
                    "description": "The user's role ID.",
                    "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                  },
                  "client_integration": {
                    "type": "string",
                    "description": "The contact center's client integration: \n* `Default` \n* `Salesforce`",
                    "enum": [
                      "Default",
                      "Salesforce"
                    ],
                    "example": "Salesforce"
                  },
                  "user_access": {
                    "type": "string",
                    "description": "The user's access status: \n* `active` — The user's role permissions allow them to access the Contact Center. \n* `inactive` — The user cannot access the Contact Center.",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "example": "active"
                  },
                  "channel_settings": {
                    "type": "object",
                    "description": "Information about the channel settings.",
                    "$ref": "#/components/schemas/UpdateUser/properties/channel_settings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nUser created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "The user's ID.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The user's name.",
                      "example": "Jill"
                    },
                    "user_email": {
                      "type": "string",
                      "format": "email",
                      "description": "The user's email address.",
                      "example": "jchill@example.com"
                    },
                    "role_id": {
                      "type": "string",
                      "description": "The user's role ID.",
                      "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                    },
                    "role_name": {
                      "type": "string",
                      "description": "The user's role name.",
                      "example": "Admin"
                    },
                    "client_integration": {
                      "type": "string",
                      "description": "The contact center's client integration: \n* `Default` \n* `Salesforce`",
                      "enum": [
                        "Default",
                        "Salesforce"
                      ],
                      "example": "Salesforce"
                    },
                    "status_id": {
                      "type": "string",
                      "description": "The user's availability status ID.",
                      "example": "1"
                    },
                    "status_name": {
                      "type": "string",
                      "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status): \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as \"Lunch\" or \"Away until Monday\".",
                      "enum": [
                        "Offline",
                        "Ready",
                        "Not Ready",
                        "Occupied"
                      ],
                      "example": "Offline"
                    },
                    "user_access": {
                      "type": "string",
                      "description": "The user's access status: \n* `active` — The user's role permissions allow them to access the Contact Center. \n* `inactive` — The user cannot access the Contact Center.",
                      "enum": [
                        "active",
                        "inactive"
                      ],
                      "example": "active"
                    },
                    "channel_settings": {
                      "type": "object",
                      "description": "Information about the channel settings.",
                      "$ref": "#/components/schemas/UpdateUser/properties/channel_settings"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1003` <br>\nUser creation failed. Try again later. \n\n**Error Code:** `1004` <br>\nInvalid user ID or user email: $email \n\n**Error Code:** `1007` <br>\n User already exists: $email \n\n**Error Code:** `1009` <br>\n User ID or user email cannot be empty at the same time"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1006` <br>\nThe account \"$client_integration\" client integration does not exist. Add it to the \"Integrations\" function module. \n\n**Error Code:** `2201` <br>\nRole does not exist: $role_id"
          }
        }
      }
    },
    "/contact_center/users/{userId}": {
      "get": {
        "summary": "Get a user's profile",
        "description": "Retrieve a user's profile information. \n\n **Scopes:** `contact_center_user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Users"
        ],
        "operationId": "userGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nUser profile returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "The user's ID.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The user's name.",
                      "example": "Jill"
                    },
                    "user_email": {
                      "type": "string",
                      "format": "email",
                      "description": "The user's email address.",
                      "example": "jchill@example.com"
                    },
                    "role_id": {
                      "type": "string",
                      "description": "The user's role ID.",
                      "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                    },
                    "role_name": {
                      "type": "string",
                      "description": "The user's role name.",
                      "example": "Admin"
                    },
                    "client_integration": {
                      "type": "string",
                      "description": "The contact center's client integration: \n* `Default` \n* `Salesforce`",
                      "enum": [
                        "Default",
                        "Salesforce"
                      ],
                      "example": "Salesforce"
                    },
                    "status_id": {
                      "type": "string",
                      "description": "The user's status ID.",
                      "example": "1"
                    },
                    "status_name": {
                      "type": "string",
                      "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status): \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as \"Lunch\" or \"Away until Monday\".",
                      "enum": [
                        "Offline",
                        "Ready",
                        "Not Ready",
                        "Occupied"
                      ],
                      "example": "Offline"
                    },
                    "user_access": {
                      "type": "string",
                      "description": "The user's access status: \n* `active` — The user's role permissions allow them to access the Contact Center. \n* `inactive` — The user cannot access the Contact Center.",
                      "enum": [
                        "active",
                        "inactive"
                      ],
                      "example": "active"
                    },
                    "channel_settings": {
                      "type": "object",
                      "description": "Information about the channel settings.",
                      "$ref": "#/components/schemas/UpdateUser/properties/channel_settings"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `300` <br>\nInvalid user ID"
          }
        }
      },
      "delete": {
        "summary": "Delete a user's profile",
        "description": "Delete the specified user's profile. \n\n **Scopes:** `contact_center_user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Users"
        ],
        "operationId": "userDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nUser profile deleted"
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1001` <br>\nUser does not exist: $userId"
          }
        }
      },
      "patch": {
        "summary": "Update a user's profile",
        "description": "Update the information in a user's profile. \n\n **Scopes:** `contact_center_user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Users"
        ],
        "operationId": "userUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nUser profile updated"
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `300` <br>\nValidation failed \n\n**Error Code:** `1001` <br>\nUser does not exist: $userId \n\n**Error Code:** `1101` <br>\nStatus does not exist: $status_id \n\n**Error Code:** `1006` <br>\nThe account \"$client_integration\" client integration does not exist. Add it to the \"Integrations\" function module. \n\n**Error Code:** `2201` <br>\nRole does not exist: $role_id"
          }
        }
      }
    },
    "/contact_center/users/{userId}/queues": {
      "get": {
        "summary": "List user's queues",
        "description": "Use this API to list a user's queues. \n\n **Scopes:** `contact_center_user:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Queues"
        ],
        "operationId": "listUserQueues",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nUser list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListQueueOfUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/system_statuses": {
      "get": {
        "summary": "List system statuses",
        "description": "Use this API to return a list of system statuses. Admins can create system statuses for users to select. For example, a system \"Lunch\" status. \n\n **Scopes:** `contact_center_preference:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Preferences"
        ],
        "operationId": "listSystemStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nSystem statuses returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/system_statuses/{statusId}": {
      "get": {
        "summary": "Get a system status",
        "description": "Use this API to return information about a system status. \n\n **Scopes:** `contact_center_preference:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Preferences"
        ],
        "operationId": "getAStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/StatusId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nSystem status returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1101` <br>\nStatus does not exist:: $statusId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/tasks": {
      "get": {
        "summary": "List tasks",
        "description": "Use this API to return a list of tasks. \n\n **Scopes:** `contact_center_task:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Tasks"
        ],
        "operationId": "listTasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/taskStatus"
          },
          {
            "in": "query",
            "name": "queue_id",
            "description": "The task's queue ID.",
            "schema": {
              "type": "string",
              "example": "Ql3qxUWXSHes4PmcOmzyOg"
            }
          },
          {
            "in": "query",
            "name": "engagement_id",
            "description": "The task's engagement ID.",
            "schema": {
              "type": "string",
              "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
            }
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nTasks list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTasks"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `300` <br>\n* Invalid parameter: assignment_status."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/tasks/{taskId}": {
      "get": {
        "summary": "Get a task",
        "description": "Use this API to return information about a task. \n\n **Scopes:** `contact_center_task:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Tasks"
        ],
        "operationId": "getATask",
        "parameters": [
          {
            "$ref": "#/components/parameters/TaskId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nTask returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1301` <br>\nTask does not exist: $taskId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a task",
        "description": "Use this API to: <br> 1) update a task's priority level or <br> 2) manually assign or unassign a task to an agent. \n\n **Scopes:** `contact_center_task:write:admin` \n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Tasks"
        ],
        "operationId": "taskUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/TaskId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nTask updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `300` <br>\n* Parameter `task_priority` or `assigned_user_id` is required."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1001` <br>\nUser does not exist: $assigned_user_id \n\n**Error Code:** `1301` <br>\nTask does not exist: $taskId \n\n**Error Code:** `1302` <br>\nCannot update task. \n\n**Error Code:** `1303` <br>\nTask is not yet manually assigned."
          }
        }
      }
    },
    "/contact_center/address_books/units": {
      "post": {
        "summary": "Create an address book unit",
        "description": "Use this API to create an [address book unit](https://support.zoom.us/hc/en-us/articles/4471495629837-Managing-address-book-units). Admins can use address book units to organize several [address books](https://support.zoom.us/hc/en-us/articles/4471544949389#:~:text=An%20address%20book%20is%20a%20collection%20of%20consumer%20information%20like%20display%20names%2C%20phone%20numbers%2C%20and%20locations.). \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "createUnit",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnit"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\n Unit created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUnitResponse"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request"
          }
        }
      },
      "get": {
        "summary": "List address book units",
        "description": "Use this API to return all address book units. \n\n **Scopes:** `contact_center_contact:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Address Books"
        ],
        "operationId": "listUnits",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Units list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUnits"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/address_books/units/{unitId}": {
      "delete": {
        "summary": "Delete an address book unit",
        "description": "Use this API to delete an address book unit. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "deleteUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/UnitId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\n Unit deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Unit does not exist: $unitId"
          }
        }
      },
      "patch": {
        "summary": "Update an address book unit",
        "description": "Use this API to update an address book unit. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "updateUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/UnitId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUnit"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\n Unit updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Unit does not exist: $unitId"
          }
        }
      },
      "get": {
        "summary": "Get an address book unit",
        "description": "Use this API to get information about an address book unit. \n\n **Scopes:** `contact_center_contact:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "getUnit",
        "parameters": [
          {
            "$ref": "#/components/parameters/UnitId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Unit returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Unit does not exist: $unitId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/address_books": {
      "post": {
        "summary": "Create an address book",
        "description": "Use this API to create an [address book](https://support.zoom.us/hc/en-us/articles/4471544949389). An address book is a collection of consumer information like display names, phone numbers, and locations. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "createAddressBook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressBook"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\n Address book created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAddressBookResponse"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1902` <br>\n The \"unit_id\" field cannot be an empty value. \n\n **Error Code:** `1903` <br>\n The \"address_book_name\" field cannot be an empty value."
          }
        }
      },
      "get": {
        "summary": "List address books",
        "description": "Use this API to return all address books. \n\n **Scopes:** `contact_center_contact:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Address Books"
        ],
        "operationId": "listAddressBooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/AddressBookUnitId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Address books list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAddressBooks"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1902` <br>\n The \"unit_id\" field cannot be an empty value."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/address_books/{addressBookId}": {
      "delete": {
        "summary": "Delete an address book",
        "description": "Use this API to delete an address book. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "deleteAddressBook",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressBookId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\n Address Book deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Address book does not exist: $addressBookId"
          }
        }
      },
      "patch": {
        "summary": "Update an address book",
        "description": "Use this API to update an address book's information. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "updateAddressBook",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressBookId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddressBook"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\n Address book updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Address book does not exist: $addressBookId"
          }
        }
      },
      "get": {
        "summary": "Get an address book",
        "description": "Use this API to get information about an address book. \n\n **Scopes:** `contact_center_contact:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "getAddressBook",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressBookId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Address book list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBook"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Address book does not exist: $addressBookId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/address_books/{addressBookId}/contacts": {
      "post": {
        "summary": "Create an address book contact",
        "description": "Use this API to create a new contact in an [address book](https://support.zoom.us/hc/en-us/articles/4471544949389). During an active engagement, the Zoom desktop client will display information from the address book if that customer is a contact in the address book. If the consumer is not in the address book, agents can add a new contact and choose which address book the contact belongs to. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "createContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressBookId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContact"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\n Contact created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n **Error Code:** `2102` <br>\n The \"email\" and/or \"phone_numbers\" field cannot be an empty value."
          }
        }
      },
      "get": {
        "summary": "List address book contacts",
        "description": "Use this API to return all contacts in an address book. \n\n **Scopes:** `contact_center_contact:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Address Books"
        ],
        "operationId": "listContacts",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/AddressBookId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Contacts list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListContacts"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/address_books/{addressBookId}/contacts/{contactId}": {
      "delete": {
        "summary": "Delete an address book contact",
        "description": "Use this API to delete an address book's contact. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "contactDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressBookId"
          },
          {
            "$ref": "#/components/parameters/ContactId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\n Contact deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Contact does not exist: $contactId"
          }
        }
      },
      "patch": {
        "summary": "Update an address book contact",
        "description": "Use this API to update an address book's contact. \n\n **Scopes:** `contact_center_contact:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "updateContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressBookId"
          },
          {
            "$ref": "#/components/parameters/ContactId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "AddressBook",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContact"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\n Contact updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Contact does not exist: $contactId"
          }
        }
      },
      "get": {
        "summary": "Get an address book contact",
        "description": "Use this API to get information about an address book's contact. \n\n **Scopes:** `contact_center_contact:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Address Books"
        ],
        "operationId": "getContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressBookId"
          },
          {
            "$ref": "#/components/parameters/ContactId"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Contact returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Contact does not exist: $contactId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/dispositions": {
      "get": {
        "summary": "List dispositions",
        "description": "Use this API to return a list of available dispositions. \n\n **Scopes:** `contact_center_disposition:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "listDispositions",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nDispositions returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDisposition"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a disposition",
        "description": "Use this API to create a new [disposition](https://support.zoom.us/hc/en-us/articles/4470153057549-Managing-dispositions). Dispositions allow agents to assign an outcome or topic to each engagement. After creating dispositions, you can add them to queues. \n\n **Scopes:** `contact_center_disposition:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "createDisposition",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Information about the new disposition.",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The active status of the disposition: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                    "enum": [
                      "inactive",
                      "active"
                    ],
                    "example": "inactive"
                  },
                  "disposition_name": {
                    "type": "string",
                    "description": "The disposition's name.",
                    "example": "Inquiry"
                  },
                  "disposition_description": {
                    "type": "string",
                    "description": "The disposition's description.",
                    "example": "Inquiry dispositions."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nDisposition created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about the disposition.",
                  "properties": {
                    "disposition_id": {
                      "type": "string",
                      "description": "The disposition's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "disposition_name": {
                      "type": "string",
                      "description": "The disposition's name.",
                      "example": "Inquiry"
                    },
                    "disposition_description": {
                      "type": "string",
                      "description": "The disposition's description.",
                      "example": "Inquiry dispositions."
                    },
                    "status": {
                      "type": "string",
                      "description": "The active status of the disposition: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                      "enum": [
                        "inactive",
                        "active"
                      ],
                      "example": "inactive"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time at which the disposition was last modified.",
                      "example": "2021-12-03T05:07:46Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the disposition.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2402` <br>\nThat disposition name already exists. Use a different name. \n\n**Error Code:** `2601` <br>\nInvalid status. The status value must be \"inactive\" or \"active\"."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/dispositions/{dispositionId}": {
      "get": {
        "summary": "Get a disposition",
        "description": "Use this API to get information about a disposition. \n\n **Scopes:** `contact_center_disposition:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "getDisposition",
        "parameters": [
          {
            "in": "path",
            "name": "dispositionId",
            "required": true,
            "description": "The disposition's ID.",
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`<br>\nDisposition returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDisposition/properties/dispositions/items"
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2401` <br>\nDisposition does not exist: $dispositionId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a disposition",
        "description": "Use this API to update an existing disposition. \n\n **Scopes:** `contact_center_disposition:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "updateDisposition",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1dispositions~1%7BdispositionId%7D/get/parameters/0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disposition_name": {
                    "type": "string",
                    "description": "The disposition's name.",
                    "example": "Inquiry"
                  },
                  "status": {
                    "type": "string",
                    "description": "The active status of the disposition: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                    "enum": [
                      "inactive",
                      "active"
                    ],
                    "example": "inactive"
                  },
                  "disposition_description": {
                    "type": "string",
                    "description": "The disposition's description.",
                    "example": "Inquiry dispositions."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nDisposition updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2402` <br>\nThat disposition name already exists. Use a different name. \n\n**Error Code:** `2601` <br>\nInvalid status. The status value must be \"inactive\" or \"active\"."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2401` <br>\nDisposition does not exist: $dispositionId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a disposition",
        "description": "Use this API to delete an existing disposition. \n\n **Scopes:** `contact_center_disposition:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "deleteDisposition",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1dispositions~1%7BdispositionId%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `<br>\nDisposition deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2401` <br>\nDisposition does not exist: $dispositionId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/dispositions/sets": {
      "get": {
        "summary": "List disposition sets",
        "description": "Use this API to return a list of available disposition sets. You can use sets to organize dispositions into groups. \n\n **Scopes:** `contact_center_disposition:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "listSets",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nDisposition sets returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "type": "integer",
                      "default": 30,
                      "maximum": 300,
                      "description": "The number of records returned within a single API call.",
                      "example": 1
                    },
                    "disposition_sets": {
                      "type": "array",
                      "description": "Information about the disposition set.",
                      "items": {
                        "type": "object",
                        "description": "Information about the disposition set.",
                        "properties": {
                          "disposition_set_id": {
                            "type": "string",
                            "description": "The set's ID.",
                            "example": "saaHWgVMGQU69soco456oNA"
                          },
                          "disposition_set_name": {
                            "type": "string",
                            "description": "The set's name.",
                            "example": "Lead created"
                          },
                          "disposition_set_description": {
                            "type": "string",
                            "description": "The set's description.",
                            "example": "New leads generated."
                          },
                          "status": {
                            "type": "string",
                            "description": "The active status of the set: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                            "enum": [
                              "inactive",
                              "active"
                            ],
                            "example": "inactive"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time at which the set was last modified.",
                            "example": "2021-12-03T05:07:46Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of the user who last modified the set.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "dispositions_count": {
                            "type": "integer",
                            "description": "The number of dispositions associated with the disposition set.",
                            "example": 0
                          },
                          "queues_count": {
                            "type": "integer",
                            "description": "The number of queues associated with the disposition sets.",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a disposition set",
        "description": "Use this API to create a new disposition set. \n\n **Scopes:** `contact_center_disposition:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "createSet",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Information about the created disposition set.",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The active status of the set: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                    "enum": [
                      "inactive",
                      "active"
                    ],
                    "example": "inactive"
                  },
                  "disposition_set_name": {
                    "type": "string",
                    "description": "The set's name.",
                    "example": "Lead created"
                  },
                  "disposition_set_description": {
                    "type": "string",
                    "description": "The set's description.",
                    "example": "New leads generated."
                  },
                  "disposition_ids": {
                    "type": "array",
                    "description": "Information about the set's assigned dispositions.",
                    "items": {
                      "type": "string",
                      "description": "The disposition's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nDisposition created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about the disposition set.",
                  "properties": {
                    "disposition_set_id": {
                      "type": "string",
                      "description": "The set's ID.",
                      "example": "saaHWgVMGQU69soco456oNA"
                    },
                    "disposition_set_name": {
                      "type": "string",
                      "description": "The set's name.",
                      "example": "Lead created"
                    },
                    "disposition_set_description": {
                      "type": "string",
                      "description": "The set's description.",
                      "example": "New leads generated."
                    },
                    "status": {
                      "type": "string",
                      "description": "The active status of the set: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                      "enum": [
                        "inactive",
                        "active"
                      ],
                      "example": "inactive"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time at which the set was last modified.",
                      "example": "2021-12-03T05:07:46Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the set.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the set's assigned dispositions.",
                      "items": {
                        "type": "object",
                        "description": "Information about the disposition set.",
                        "properties": {
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2502` <br>\nThat set name already exists. Use a different name. \n\n**Error Code:** `2601` <br>\nInvalid status. The status value must be \"inactive\" or \"active\"."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/dispositions/sets/{dispositionSetId}": {
      "get": {
        "summary": "Get a disposition set",
        "description": "Use this API to get information about a disposition set. \n\n **Scopes:** `contact_center_disposition:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "getSet",
        "parameters": [
          {
            "in": "path",
            "name": "dispositionSetId",
            "required": true,
            "description": "The set's ID.",
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`<br>\nSet returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about the disposition set.",
                  "properties": {
                    "disposition_set_id": {
                      "type": "string",
                      "description": "The set's ID.",
                      "example": "saaHWgVMGQU69soco456oNA"
                    },
                    "disposition_set_name": {
                      "type": "string",
                      "description": "The set's name.",
                      "example": "Lead created"
                    },
                    "disposition_set_description": {
                      "type": "string",
                      "description": "The set's description.",
                      "example": "New leads generated."
                    },
                    "status": {
                      "type": "string",
                      "description": "The active status of the set: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                      "enum": [
                        "inactive",
                        "active"
                      ],
                      "example": "inactive"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time at which the set was last modified.",
                      "example": "2021-12-03T05:07:46Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the set.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the set's assigned dispositions.",
                      "items": {
                        "$ref": "#/paths/~1contact_center~1dispositions~1sets/post/responses/201/content/application~1json/schema/properties/dispositions/items"
                      }
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the set's assigned queue.",
                      "items": {
                        "type": "object",
                        "description": "Information about the queue.",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "Sales"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2501` <br>\nSet does not exist: $setId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a disposition set",
        "description": "Use this API to update an existing disposition set. \n\n **Scopes:** `contact_center_disposition:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "updateSet",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1dispositions~1sets~1%7BdispositionSetId%7D/get/parameters/0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The disposition's name.",
                    "example": "Inquiry"
                  },
                  "status": {
                    "type": "string",
                    "description": "The active status of the disposition: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                    "enum": [
                      "inactive",
                      "active"
                    ],
                    "example": "inactive"
                  },
                  "description": {
                    "type": "string",
                    "description": "The disposition's description.",
                    "example": "Inquiry dispositions."
                  },
                  "disposition_ids": {
                    "type": "array",
                    "description": "A list of disposition IDs to add to the set.",
                    "items": {
                      "type": "string",
                      "description": "The disposition's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nSet updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2502` <br>\nThat set name already exists. Use a different name. \n\n**Error Code:** `2601` <br>\nInvalid status. The status value must be \"inactive\" or \"active\"."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2501` <br>\nSet does not exist: $setId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a disposition set",
        "description": "Use this API to delete a disposition set. \n\n **Scopes:** `contact_center_disposition:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Dispositions"
        ],
        "operationId": "deleteSet",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1dispositions~1sets~1%7BdispositionSetId%7D/get/parameters/0"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `<br>\nSet deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad Request"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2501` <br>\nSet does not exist: $setId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/recordings": {
      "get": {
        "summary": "List recordings",
        "description": "Return a list of available recordings. \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Recordings"
        ],
        "operationId": "listRecordings",
        "parameters": [
          {
            "in": "query",
            "name": "query_date_type",
            "description": "Query date type. \n* `recording_start_time` — The recording's start time \n* `recording_end_time` — The recording's end time",
            "schema": {
              "type": "string",
              "example": "recording_start_time",
              "default": "recording_start_time"
            }
          },
          {
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month maximum, as the response only includes one month's worth of data at once. If unspecified, this parameter returns data from the past 30 days.",
            "in": "query",
            "name": "from",
            "schema": {
              "format": "date",
              "type": "string",
              "example": "2022-05-01"
            }
          },
          {
            "description": "**Required** only when specifying the `from` parameter. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "in": "query",
            "name": "to",
            "schema": {
              "format": "date",
              "type": "string",
              "example": "2022-05-31"
            }
          },
          {
            "in": "query",
            "name": "recording_type",
            "description": "The recording's type. \n* `on_demand` — Manually trigger recording \n* `automatic` — Automatically trigger recording",
            "schema": {
              "type": "string",
              "enum": [
                "on_demand",
                "automatic"
              ],
              "example": "automatic"
            }
          },
          {
            "in": "query",
            "name": "owner_type",
            "description": "The recording's owner type. \n* `user` — This recording belongs to a user \n* `queue` — This recording belongs to a queue",
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "queue"
              ],
              "example": "queue"
            }
          },
          {
            "in": "query",
            "name": "channel_type",
            "description": "The recording's channel type. \n* `voice` — Voice recording",
            "schema": {
              "type": "string",
              "enum": [
                "voice"
              ],
              "example": "voice"
            }
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nRecordings returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "type": "integer",
                      "default": 30,
                      "maximum": 300,
                      "description": "The number of records returned in a single API call.",
                      "example": 30
                    },
                    "recordings": {
                      "type": "array",
                      "description": "Information about the recordings.",
                      "items": {
                        "type": "object",
                        "description": "Information about the recording.",
                        "properties": {
                          "recording_id": {
                            "type": "string",
                            "description": "The recording's unique ID.",
                            "example": "ghyetrjj_sdfsdgfkdjfl111"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's unique ID.",
                            "example": "ghyetrjj_2342353rsgfkdjfl"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "voice"
                          },
                          "recording_duration": {
                            "type": "integer",
                            "description": "The recording's duration in seconds.",
                            "example": 150
                          },
                          "download_url": {
                            "description": "The URL to download the recording. For security purposes, you **must** provide an OAuth access token in the Authorization header to download the recording file using this URL. Example:\n\n```curl --request GET \\\n  --url {download_url} \\\n  --header 'authorization: Bearer {access_token} \\\n  --header 'content-type: application/json'\n```",
                            "type": "string",
                            "example": "https://domain/recording/download/01bdb222-9984-4f41-8141-2f760cb398aa?type=voice"
                          },
                          "recording_start_time": {
                            "description": "The recording's start time.",
                            "format": "date-time",
                            "type": "string",
                            "example": "2022-05-16T14:15:57Z"
                          },
                          "recording_end_time": {
                            "description": "The recording's end time.",
                            "format": "date-time",
                            "type": "string",
                            "example": "2022-05-16T14:15:57Z"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Tom"
                          },
                          "recording_type": {
                            "type": "string",
                            "description": "The recording's type. \n* `on_demand` — Manually trigger recording \n* `automatic` — Automatically trigger recording",
                            "enum": [
                              "on_demand",
                              "automatic"
                            ],
                            "example": "automatic"
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` — Voice recording",
                            "enum": [
                              "voice"
                            ],
                            "example": "voice"
                          },
                          "direction": {
                            "description": "The recording's call direction. \n* `inbound` — Call in \n* `outbound` — Call out",
                            "enum": [
                              "inbound",
                              "outbound"
                            ],
                            "type": "string",
                            "example": "outbound"
                          },
                          "owner_id": {
                            "type": "string",
                            "description": "The recording's owner ID (queue ID or user ID.)",
                            "example": "auiketrjj_2342353fsewkdjfl"
                          },
                          "owner_name": {
                            "type": "string",
                            "description": "The recording's owner name (queue name or user name.)",
                            "example": "voice"
                          },
                          "owner_type": {
                            "type": "string",
                            "description": "The recording's owner type. \n* `user` — This recording belongs to an user \n* `queue` — This recording belongs to a queue",
                            "enum": [
                              "user",
                              "queue"
                            ],
                            "example": "queue"
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement event's unique ID.",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The recording's flow name.",
                            "example": "voice"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The recording's flow ID.",
                            "example": "fsdfsd4oippe0ffewcbhjk"
                          },
                          "consumer_name": {
                            "type": "string",
                            "description": "The customer's name.",
                            "example": "Jill"
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The customer's phone number.",
                            "example": "+12058945728"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/skills/{skillId}/users": {
      "get": {
        "summary": "List users of a skill",
        "description": "Use this API to list all users who have been assigned to a skill. \n\n **Scopes:** `contact_center_user:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Users"
        ],
        "operationId": "listSkillUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/SkillId"
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nSkill user list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsersUnderSkill"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/skills/{skillId}/users/{userId}": {
      "get": {
        "summary": "Get a skill's user.",
        "description": "Retrieve information for a user of a particular skill. \n\n **Scopes:** `contact_center_user:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          },
          {
            "$ref": "#/components/parameters/SkillId"
          }
        ],
        "responses": {
          "200": {
            "description": "\"**HTTP Status Code:** `200` <br>\\nUser information returned\"",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "The user's ID.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The user's name.",
                      "example": "Jill"
                    },
                    "user_email": {
                      "type": "string",
                      "format": "email",
                      "description": "The user's email address.",
                      "example": "jchill@example.com"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `300` <br>\nInvalid user or skill ID"
          }
        }
      }
    },
    "/contact_center/users/{userId}/skills": {
      "get": {
        "summary": "List user's skills",
        "description": "Get a list of skills assigned to a given user. \n\n **Scopes:** `contact_center_skill:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Skills"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          },
          {
            "$ref": "#/components/parameters/SkillCategoryIdQueryParam"
          },
          {
            "$ref": "#/paths/~1contact_center~1skills/get/parameters/2"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nUser's assigned skills returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "type": "integer",
                      "default": 30,
                      "maximum": 300,
                      "description": "The number of records returned within a single API call.",
                      "example": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "skills": {
                      "type": "array",
                      "description": "Information about the user's skills",
                      "items": {
                        "type": "object",
                        "properties": {
                          "skill_id": {
                            "type": "string",
                            "description": "The skill's ID.",
                            "example": "s51M536ZjSgi8o_rzmgQBrA"
                          },
                          "skill_name": {
                            "type": "string",
                            "description": "The skill's name.",
                            "example": "assign-skill6b6c864b-474a-4843-afed-81bd26b03952"
                          },
                          "skill_type": {
                            "type": "string",
                            "description": "The skill's type.",
                            "example": "proficiency"
                          },
                          "max_proficiency_level": {
                            "type": "integer",
                            "description": "The maximum proficiency level in a skill.",
                            "example": "5"
                          },
                          "user_proficiency_level": {
                            "type": "integer",
                            "description": "A user's proficiency level in a skill.",
                            "example": "3"
                          },
                          "skill_category_id": {
                            "type": "string",
                            "description": "The skill category's ID.",
                            "example": "s51M536ZjSgi8o_rzmgQBrA"
                          },
                          "skill_category_name": {
                            "type": "string",
                            "description": "The skill category's name.",
                            "example": "Language"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n"
          }
        }
      },
      "post": {
        "summary": "Assign skills",
        "description": "Assign [skills](https://support.zoom.us/hc/en-us/articles/4423986613261) to a user. Skills are user traits that ensure that a given agent is the best person to handle a given customer interaction. Proficiency ratings indicate the user's level of expertise or knowledge of that skill. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Skills"
        ],
        "operationId": "assignSkills",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "skills": {
                    "type": "array",
                    "description": "Information about the skills.",
                    "minItems": 1,
                    "maxItems": 20,
                    "items": {
                      "type": "object",
                      "properties": {
                        "skill_id": {
                          "type": "string",
                          "description": "The skill ID.",
                          "example": "1"
                        },
                        "max_proficiency_level": {
                          "type": "integer",
                          "description": "The skill's assigned proficiency level.",
                          "example": 5
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` <br>\nSkills assigned."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\nNot authorized."
          },
          "422": {
            "description": "**HTTP Status Code:** `422` <br>\nUnprocessable entity."
          }
        }
      }
    },
    "/contact_center/users/{userId}/skills/{skillId}": {
      "delete": {
        "summary": "Delete a user's assigned skill",
        "description": "Delete a skill assigned to a given user. \n\n **Scopes:** `contact_center_skill:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Skills"
        ],
        "operationId": "deleteASkill",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserId"
          },
          {
            "$ref": "#/components/parameters/SkillId"
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `<br>\nSkill deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId."
          }
        }
      }
    },
    "/contact_center/users/{userId}/recordings": {
      "get": {
        "summary": "List user's recordings",
        "description": "Get a user's recordings. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.  \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:read`, `contact_center_recording:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Recordings"
        ],
        "operationId": "listUserRecordings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user's ID.",
            "schema": {
              "type": "string",
              "example": "Rz06l1-PS0iSvSAVt1y-mw"
            },
            "required": true
          },
          {
            "$ref": "#/paths/~1contact_center~1recordings/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1contact_center~1recordings/get/parameters/2"
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nUser recordings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1contact_center~1recordings/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete user recordings",
        "description": "Delete all of a given user's recordings.  \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Recordings"
        ],
        "operationId": "deleteUserRecordings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user's ID",
            "schema": {
              "type": "string",
              "example": "Rz06l1-PS0iSvSAVt1y-mw"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "delete_all_recordings",
            "description": "Whether to delete all of this user's recordings. \n* `true` — Delete all of this user's recordings",
            "schema": {
              "type": "boolean",
              "enum": [
                "true"
              ],
              "default": true,
              "example": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue recordings deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `2804` <br>\nUser recordings does not exist: $userId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/recordings/{recordingId}": {
      "delete": {
        "summary": "Delete a recording",
        "description": "Delete a selected recording. \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Recordings"
        ],
        "operationId": "deleteRecording",
        "parameters": [
          {
            "in": "path",
            "name": "recordingId",
            "description": "The recording's ID.",
            "schema": {
              "type": "string",
              "example": "ghyetrjj_2342353rsgfkdjfl"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nRecording deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `2801` <br>\nRecording does not exist: $recordingId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/engagements/{engagementId}/recordings": {
      "get": {
        "summary": "List engagement recordings",
        "description": "Return a list of all recordings in an engagement. \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Recordings"
        ],
        "operationId": "listEngagementRecordings",
        "parameters": [
          {
            "in": "path",
            "name": "engagementId",
            "description": "The engagement event's unique ID.",
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nEngagement recordings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1contact_center~1recordings/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete engagement recordings",
        "description": "Delete all recordings in a given engagement.  \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Recordings"
        ],
        "operationId": "deleteEngagementRecordings",
        "parameters": [
          {
            "in": "path",
            "name": "engagementId",
            "description": "The engagement's ID.",
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "delete_all_recordings",
            "description": "Whether to delete all recordings in this engagement. \n* `true` — Delete all recordings in this engagement",
            "schema": {
              "type": "boolean",
              "enum": [
                "true"
              ],
              "default": true,
              "example": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nEngagement recordings deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `2805` <br>\nEngagement recordings does not exist: $engagementId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/queues/{queueId}/recordings": {
      "get": {
        "summary": "List queue recordings",
        "description": "Return a list of all recordings in a queue. \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Recordings"
        ],
        "operationId": "listQueueRecordings",
        "parameters": [
          {
            "in": "path",
            "name": "queueId",
            "description": "The queue's ID.",
            "schema": {
              "type": "string",
              "example": "1Bgv2rs7Tqaq5hFM95UjWw"
            },
            "required": true
          },
          {
            "$ref": "#/paths/~1contact_center~1recordings/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1contact_center~1recordings/get/parameters/2"
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nQueue recordings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1contact_center~1recordings/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete queue recordings",
        "description": "Delete all recordings in a queue. \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n **Scopes:** `contact_center_recording:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Recordings"
        ],
        "operationId": "deleteQueueRecordings",
        "parameters": [
          {
            "in": "path",
            "name": "queueId",
            "description": "The queue's ID.",
            "schema": {
              "type": "string",
              "example": "1Bgv2rs7Tqaq5hFM95UjWw"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "delete_all_recordings",
            "description": "Whether to delete all recordings in this queue. \n* `true` — Delete all recordings in this queue",
            "schema": {
              "type": "boolean",
              "enum": [
                "true"
              ],
              "default": true,
              "example": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nQueue recordings deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found. \n\n**Error Code:** `1201` <br>\nQueue does not exist: $queueId \n\n**Error Code:** `2803` <br>\nQueue recordings does not exist: $queueId."
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/engagements/notes": {
      "get": {
        "summary": "List notes",
        "description": "Return a list of notes. \n\n **Scopes:** `contact_center_note:read:admin`, `contact_center_note:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Notes"
        ],
        "operationId": "notes",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nNote list returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "type": "integer",
                      "default": 30,
                      "maximum": 300,
                      "description": "The number of records returned in a single API call.",
                      "example": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "notes": {
                      "type": "array",
                      "description": "Information about the notes.",
                      "items": {
                        "$ref": "#/paths/~1contact_center~1engagements~1%7BengagementId%7D~1notes~1%7BnoteId%7D/get/responses/200/content/application~1json/schema"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/engagements/{engagementId}/notes/{noteId}": {
      "get": {
        "summary": "Get a note",
        "description": "Retrieve a note. \n\n **Scopes:** `contact_center_note:read:admin`, `contact_center_note:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Notes"
        ],
        "operationId": "getNote",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1engagements~1%7BengagementId%7D~1notes/get/parameters/0"
          },
          {
            "in": "path",
            "name": "noteId",
            "description": "The note's ID.",
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nNote returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Information about the note.",
                  "properties": {
                    "note_id": {
                      "type": "string",
                      "description": "The note's unique ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "engagement_id": {
                      "type": "string",
                      "description": "The engagement event's unique ID.",
                      "example": "3XilEfOvQEKRIWMWhX1jDg"
                    },
                    "channel_type": {
                      "type": "string",
                      "description": "The channel's type: \n* voice \n* sms \n* chat \n* video",
                      "enum": [
                        "voice",
                        "sms",
                        "chat",
                        "video"
                      ],
                      "example": "voice"
                    },
                    "note": {
                      "type": "string",
                      "description": "The note's content.",
                      "example": "This is the content of the note."
                    },
                    "last_modified_time": {
                      "description": "The note's last modification time.",
                      "format": "date-time",
                      "type": "string",
                      "example": "2022-05-23T14:15:57Z"
                    },
                    "user_id": {
                      "description": "The ID of last user to modify the note.",
                      "type": "string",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request \n\n**Error Code:** `2704` <br>\nThe engagementId that matches this noteId is: $engagementId"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found \n\n**Error Code:** `2701` <br>\nNote does not exist: $noteId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a note",
        "description": "Update a note. \n\n **Scopes:** `contact_center_note:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "tags": [
          "Notes"
        ],
        "operationId": "noteUpdate",
        "parameters": [
          {
            "$ref": "#/paths/~1contact_center~1engagements~1%7BengagementId%7D~1notes/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1contact_center~1engagements~1%7BengagementId%7D~1notes~1%7BnoteId%7D/get/parameters/1"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "type": "string",
                    "description": "The note's content.",
                    "example": "This is the content of the note."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` <br>\nNote updated"
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\nBad request  \n\n**Error Code:** `2702` <br>\nNote can not be updated. You can only update the note that belongs to you. \n\n**Error Code:** `2704` <br>\nThe engagementId that matches this noteId is: $engagementId."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\nNot found \n\n**Error Code:** `2701` <br>\nNote does not exist: $noteId"
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/engagements/{engagementId}/notes": {
      "get": {
        "summary": "List engagement notes",
        "description": "Return a list of notes under an engagement. \n\n **Scopes:** `contact_center_note:read:admin`, `contact_center_note:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "tags": [
          "Notes"
        ],
        "operationId": "engagementNotes",
        "parameters": [
          {
            "in": "path",
            "name": "engagement_id",
            "description": "The engagement event's unique ID.",
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\nEngagement note list returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1contact_center~1engagements~1notes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/analytics/historical/voice/queues/metrics": {
      "get": {
        "summary": "List historical voice queue reports",
        "description": "Generate a list of historical voice queue reports. \n\n **Scopes:** `contact_center_report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`",
        "tags": [
          "Reports"
        ],
        "deprecated": true,
        "operationId": "AnalyticsHistoricalVoiceQueuesMetrics",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/5"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Historical voice queue reports list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/responses/200/content/application~1json/schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/analytics/historical/queues/metrics": {
      "get": {
        "summary": "List historical queue reports",
        "description": "Generate a list of historical queue reports. \n\n **Scopes:** `contact_center_report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`",
        "tags": [
          "Reports"
        ],
        "operationId": "listHistoricalQueueMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of items returned per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "maximum": 100,
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "timezone",
            "description": "The call's timezone.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Asia/Shanghai"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. The month defined should fall within the last six months. If no start date is specified, return data from the past 24 hours.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "**Required** only when the `from` parameters is specified. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "queue_ids",
            "description": "A comma-separated list of queue IDs to query, up to 20 queue IDs.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            },
            "required": false,
            "explode": false
          },
          {
            "in": "query",
            "name": "channel_type",
            "description": "The channel's type. Only the type `voice` is currently supported.",
            "style": "form",
            "schema": {
              "type": "string",
              "enum": [
                "voice"
              ],
              "example": "voice"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Historical queue reports list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through large result sets. A next page token returns whenever the set of available results exceeds the current page size.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "type": "integer",
                      "default": 10,
                      "maximum": 100,
                      "description": "The number of records returned within a single API call.",
                      "example": 1
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the queue reports.",
                      "items": {
                        "type": "object",
                        "description": "Information about the voice queue report.",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's ID.",
                            "example": "Ql3qxUWXSHes4PmcOmzyOg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "agentQueue"
                          },
                          "service_level": {
                            "type": "number",
                            "description": "The service level of queue.",
                            "format": "double",
                            "example": 0.85
                          },
                          "total_inbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of incoming calls.",
                            "example": 1
                          },
                          "total_completed_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of completed calls.",
                            "example": 1
                          },
                          "short_abandoned_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of short-duration abandoned calls, where the talking duration is less than the threshold value user specified.",
                            "example": 1
                          },
                          "long_abandoned_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of long-duration abandoned calls, where the talking duration is greater than the threshold value user specified.",
                            "example": 1
                          },
                          "hold_abandoned_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of on-hold abandoned calls where the agent placed the call on hold and then the customer abandoned the call.",
                            "example": 1
                          },
                          "total_missed_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of missed calls.",
                            "example": 1
                          },
                          "total_overflowed": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of overflowed calls.",
                            "example": 1
                          },
                          "total_transferred_in": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of transferred-in calls.",
                            "example": 1
                          },
                          "total_transferred_out": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of transferred-out calls.",
                            "example": 1
                          },
                          "upgraded_to_video_call": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of upgrade to video calls.",
                            "example": 1
                          },
                          "average_call_talking_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The average call duration, in seconds.",
                            "example": 11.8
                          },
                          "longest_call_talking_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The longest call duration, in seconds.",
                            "example": 11.8
                          },
                          "shortest_call_talking_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The shortest call duration, in seconds.",
                            "example": 1
                          },
                          "average_call_waiting_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The average waiting call, in seconds.",
                            "example": 11.8
                          },
                          "shortest_call_waiting_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The shortest waiting call, in seconds.",
                            "example": 1
                          },
                          "longest_call_waiting_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The longest waiting call, in seconds.",
                            "example": 1
                          },
                          "average_call_wrap_up_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The average wrap-up call, in seconds.",
                            "example": 11.8
                          },
                          "longest_call_wrap_up_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The longest wrap-up call, in seconds.",
                            "example": 11.8
                          },
                          "shortest_call_wrap_up_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The shortest wrap-up call, in seconds.",
                            "example": 11.8
                          },
                          "total_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of outbound calls.",
                            "example": 1
                          },
                          "hangup_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of hang-up outbound calls, where the talking duration is less than 10 seconds.",
                            "example": 1
                          },
                          "short_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of short outbound calls, where the talking duration is between 10 and 120 seconds.",
                            "example": 1
                          },
                          "long_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of long outbound calls, where the talking duration is greater than 120 seconds.",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/analytics/historical/details/metrics": {
      "get": {
        "summary": "List historical detail reports",
        "description": "Generate a list of historical detail reports. \n\n **Scopes:** `contact_center_report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`",
        "tags": [
          "Reports"
        ],
        "operationId": "listHistoricalDetailMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/5"
          },
          {
            "in": "query",
            "name": "user_id",
            "description": "The agent's ID.",
            "style": "form",
            "schema": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "consumer_number",
            "description": "The consumer's phone number.",
            "style": "form",
            "schema": {
              "type": "string",
              "example": "+12059300920"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "description": "The engagement's direction: \n* `inbound` \n* `outbound`",
            "style": "form",
            "schema": {
              "type": "string",
              "enum": [
                "inbound",
                "outbound"
              ],
              "example": "inbound"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "results",
            "description": "The engagement's results: \n* `completed` \n* `short_abandoned` \n* `long_abandoned` \n* `hold_abandoned` \n* `long_calls` \n* `short_calls` \n* `hang_up_calls`",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "completed"
              }
            },
            "required": false,
            "explode": false
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/6"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Historical voice detail reports list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "type": "integer",
                      "default": 10,
                      "maximum": 100,
                      "description": "The number of records returned within a single API call.",
                      "example": 1
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "details": {
                      "type": "array",
                      "description": "Information about the historical detail reports.",
                      "items": {
                        "type": "object",
                        "description": "Information about the historical detail report.",
                        "properties": {
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "direction": {
                            "type": "string",
                            "description": "The engagement's direction: `inbound` | `outbound`.",
                            "enum": [
                              "inbound",
                              "outbound"
                            ],
                            "example": "inbound"
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The consumer's phone number.",
                            "example": "+12059300920"
                          },
                          "start_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time when the engagement began.",
                            "example": "2020-02-10T21:39:50Z"
                          },
                          "result": {
                            "type": "string",
                            "description": "The engagement's result.",
                            "enum": [
                              "completed",
                              "short_abandoned",
                              "long_abandoned",
                              "hold_abandoned",
                              "long_calls",
                              "short_calls",
                              "hang_up_calls"
                            ],
                            "example": "completed"
                          },
                          "total_duration": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The engagement's maximum agent duration, in seconds.",
                            "example": 10
                          },
                          "ivr_duration": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The engagement's IVR duration, in seconds.",
                            "example": 5
                          },
                          "waiting_duration": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The engagement's waiting duration, in seconds.",
                            "example": 10
                          },
                          "talking_duration": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The engagement's talking duration, in seconds.",
                            "example": 20
                          },
                          "hold_duration": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The engagement's hold duration, in seconds.",
                            "example": 20
                          },
                          "wrap_up_duration": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The engagement's wrap-up duration, in seconds.",
                            "example": 10
                          },
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          },
                          "flows": {
                            "type": "array",
                            "description": "Information about the engagement's flows.",
                            "items": {
                              "type": "object",
                              "description": "Information about the flow.",
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "description": "The flow's ID.",
                                  "example": "zeYjXoDOS_eV1QmTpj63PQ"
                                },
                                "flow_name": {
                                  "type": "string",
                                  "description": "The flow's name.",
                                  "example": "Demo"
                                }
                              }
                            }
                          },
                          "queues": {
                            "type": "array",
                            "description": "Information about the engagement's queues.",
                            "items": {
                              "type": "object",
                              "description": "Information about the queue.",
                              "properties": {
                                "queue_id": {
                                  "type": "string",
                                  "description": "The queue's ID.",
                                  "example": "d95avl1eRJ-H162PZUJ-qg"
                                },
                                "queue_name": {
                                  "type": "string",
                                  "description": "The queue's name.",
                                  "example": "agentQueue"
                                }
                              }
                            }
                          },
                          "agents": {
                            "type": "array",
                            "description": "Information about the engagement's agents.",
                            "items": {
                              "type": "object",
                              "description": "Information about the queue.",
                              "properties": {
                                "user_id": {
                                  "type": "string",
                                  "description": "The agent's ID.",
                                  "example": "ukAAkZKfROKMSw1bj_RDFQ"
                                },
                                "display_name": {
                                  "type": "string",
                                  "description": "The agent's name.",
                                  "example": "Jilly"
                                }
                              }
                            }
                          },
                          "total_flow_duration": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total time of engagement's flows, in seconds.",
                            "example": 10
                          },
                          "queue_wait_type": {
                            "type": "string",
                            "description": "The queue's wait type.",
                            "enum": [
                              "live_waiting",
                              "callback"
                            ],
                            "example": "live_waiting"
                          },
                          "last_widget_name": {
                            "type": "string",
                            "description": "The last widget's name.",
                            "example": "PhoneEnQueue RouteTo"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/contact_center/analytics/historical/queues/{queueId}/agents/metrics": {
      "get": {
        "summary": "List historical queue's agents reports",
        "description": "Generate a list of historical queue's agents reports. \n\n **Scopes:** `contact_center_report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`",
        "tags": [
          "Reports"
        ],
        "operationId": "listQueueAgentMetric",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPageToken"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1contact_center~1analytics~1historical~1queues~1metrics/get/parameters/6"
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` <br>\n Historical queue’s agents report list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "type": "integer",
                      "default": 10,
                      "maximum": 100,
                      "description": "The number of records returned within a single API call.",
                      "example": 1
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "agents": {
                      "type": "array",
                      "description": "Information about the queue’s agents.",
                      "items": {
                        "type": "object",
                        "description": "Information about the queue report.",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The agent's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The agent's name.",
                            "example": "Jilly"
                          },
                          "total_inbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of incoming calls.",
                            "example": 1
                          },
                          "total_completed_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of completed calls.",
                            "example": 1
                          },
                          "total_transferred_in": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of transferred in calls.",
                            "example": 1
                          },
                          "total_transferred_out": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of transferred out calls.",
                            "example": 1
                          },
                          "upgraded_to_video_call": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of upgrade-to-video calls.",
                            "example": 1
                          },
                          "total_declined_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of declined calls.",
                            "example": 1
                          },
                          "total_missed_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of missed calls.",
                            "example": 1
                          },
                          "average_voice_call_talking_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The average voice call duration, in seconds.",
                            "example": 11.8
                          },
                          "longest_call_talking_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The longest call duration, in seconds.",
                            "example": 11.8
                          },
                          "shortest_call_talking_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The shortest call duration, in seconds.",
                            "example": 1
                          },
                          "average_call_wrap_up_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The average wrap-up call, in seconds.",
                            "example": 11.8
                          },
                          "longest_call_wrap_up_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The longest wrap-up call, in seconds.",
                            "example": 11.8
                          },
                          "shortest_call_wrap_up_duration": {
                            "type": "number",
                            "format": "double",
                            "description": "The shortest wrap-up call, in seconds.",
                            "example": 11.8
                          },
                          "total_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of outbound calls.",
                            "example": 1
                          },
                          "hangup_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of hang-up outbound calls, where the talking duration is less than 10 seconds.",
                            "example": 1
                          },
                          "short_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of short outbound calls, where the talking duration is between 10 and 120 seconds.",
                            "example": 1
                          },
                          "long_outbound_calls": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total number of long outbound calls, where the talking duration is more than 120 seconds.",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "PageSize": {
        "in": "query",
        "name": "page_size",
        "description": "The number of items returned per page.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 30,
          "maximum": 300,
          "example": 30
        }
      },
      "NextPageToken": {
        "in": "query",
        "name": "next_page_token",
        "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
        "schema": {
          "type": "string",
          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
        }
      },
      "SkillCategoryId": {
        "in": "path",
        "name": "skill_category_id",
        "description": "The skill category's ID.",
        "schema": {
          "type": "string",
          "example": "Mu_IEZZHQZGMY9avK74kwA"
        },
        "required": true
      },
      "SkillCategoryIdQueryParam": {
        "in": "query",
        "name": "skill_category_id",
        "description": "The skill category's ID.",
        "schema": {
          "type": "string",
          "example": "Mu_IEZZHQZGMY9avK74kwA"
        },
        "required": false
      },
      "SkillId": {
        "in": "path",
        "name": "skillId",
        "description": "The skill's ID.",
        "schema": {
          "type": "string",
          "example": "saaHWgVMGQU69soco456oNA"
        },
        "required": true
      },
      "QueueUserId": {
        "in": "path",
        "name": "userId",
        "description": "The queue user's ID.",
        "schema": {
          "type": "string",
          "example": "IGTRVt3gQ2i-WjoUIjeZxw"
        },
        "required": true
      },
      "QueueDispositionId": {
        "in": "path",
        "name": "dispositionId",
        "description": "The queue disposition's ID.",
        "schema": {
          "type": "string",
          "example": "p985PidGR5K72vAoTDJocA"
        },
        "required": true
      },
      "QueueDispositionSetId": {
        "in": "path",
        "name": "dispositionSetId",
        "description": "The queue disposition set's ID.",
        "schema": {
          "type": "string",
          "example": "sgdfghr_2454y5hdfgsfsgsdg"
        },
        "required": true
      },
      "QueueId": {
        "in": "path",
        "name": "queueId",
        "description": "The task queue's ID.",
        "schema": {
          "type": "string",
          "example": "zeYjXoDOS_eV1QmTpj63PQ"
        },
        "required": true
      },
      "RoleUserId": {
        "in": "path",
        "name": "userId",
        "description": "The role user's ID.",
        "schema": {
          "type": "string",
          "example": "aFjYXoDE1_eB2zmSpj6R61"
        },
        "required": true
      },
      "RoleId": {
        "in": "path",
        "name": "roleId",
        "description": "The role's ID.",
        "schema": {
          "type": "string",
          "example": "zeYjXoDOS_eV1QmTpj63PQ"
        },
        "required": true
      },
      "UserId": {
        "in": "path",
        "name": "userId",
        "description": "The user's ID.",
        "schema": {
          "type": "string",
          "example": "IGTRVt3gQ2i-WjoUIjeZxw"
        },
        "required": true
      },
      "SearchKey": {
        "in": "query",
        "name": "search_key",
        "description": "The user's email address or username.",
        "schema": {
          "type": "string",
          "example": "jchill@example.com"
        }
      },
      "StatusId": {
        "in": "path",
        "name": "statusId",
        "description": "The status ID.",
        "schema": {
          "type": "string",
          "example": "1"
        },
        "required": true
      },
      "taskStatus": {
        "in": "query",
        "name": "task_status",
        "description": "The task's status: \n* `pending` \n* `reserved` \n* `assigned` \n* `canceled` \n* `completed` \n* `wrapping`",
        "schema": {
          "type": "string",
          "enum": [
            "pending",
            "reserved",
            "assigned",
            "canceled",
            "completed",
            "wrapping"
          ],
          "example": "completed"
        }
      },
      "TaskId": {
        "in": "path",
        "name": "taskId",
        "description": "The task's ID.",
        "schema": {
          "type": "string",
          "example": "ZWT45A019B032F02E1BFC1F8BEACD789C75"
        },
        "required": true
      },
      "UnitId": {
        "in": "path",
        "name": "unitId",
        "description": "The address book unit's ID.",
        "schema": {
          "type": "string",
          "example": "zeYjXoDOS_eV1QmTpj63PQ"
        },
        "required": true
      },
      "AddressBookUnitId": {
        "in": "query",
        "name": "unit_id",
        "description": "The address book unit's ID.",
        "schema": {
          "type": "string",
          "example": "zeYjXoDOS_eV1QmTpj63PQ"
        },
        "required": true
      },
      "ContactId": {
        "in": "path",
        "name": "contactId",
        "description": "The contact's ID.",
        "schema": {
          "type": "string",
          "example": "zeYjXoDOS_eV1QmTpj63PQ"
        },
        "required": true
      },
      "AddressBookId": {
        "in": "path",
        "name": "addressBookId",
        "description": "The address book's ID.",
        "schema": {
          "type": "string",
          "example": "zeYjXoDOS_eV1QmTpj63PQ"
        },
        "required": true
      }
    },
    "schemas": {
      "AssignUsersResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "description": "Information about the users.",
            "items": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "The user's ID.",
                  "example": "ukAAkZKfROKMSw1bj_RDFQ"
                },
                "display_name": {
                  "type": "string",
                  "description": "The user's name.",
                  "example": "Jill Chill"
                },
                "user_email": {
                  "type": "string",
                  "format": "email",
                  "description": "The user's email address.",
                  "example": "jchill@example.com"
                }
              }
            }
          }
        }
      },
      "ListDisposition": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 1
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "dispositions": {
            "type": "array",
            "description": "Information about the disposition.",
            "items": {
              "type": "object",
              "description": "Information about the disposition.",
              "properties": {
                "disposition_id": {
                  "type": "string",
                  "description": "The disposition's ID.",
                  "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                },
                "disposition_name": {
                  "type": "string",
                  "description": "The disposition's name.",
                  "example": "Inquiry"
                },
                "disposition_description": {
                  "type": "string",
                  "description": "The disposition's description.",
                  "example": "Inquiry dispositions."
                },
                "status": {
                  "type": "string",
                  "description": "The active status of the disposition: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                  "enum": [
                    "inactive",
                    "active"
                  ],
                  "example": "inactive"
                },
                "queue_count": {
                  "type": "integer",
                  "description": "The number of queues associated with the disposition.",
                  "example": 0
                },
                "last_modified_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time at which the disposition was last modified.",
                  "example": "2021-12-03T05:07:46Z"
                },
                "modified_by": {
                  "type": "string",
                  "description": "The ID of the user who last modified the disposition.",
                  "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                }
              }
            }
          }
        }
      },
      "ListSkills": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 1
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "skills": {
            "type": "array",
            "description": "Information about the skills.",
            "items": {
              "$ref": "#/components/schemas/Skill"
            }
          }
        }
      },
      "CreateSkillCategoryResponse": {
        "type": "object",
        "description": "Information about the created skill category.",
        "properties": {
          "skill_category_id": {
            "type": "string",
            "description": "The skill category's ID.",
            "example": "Mu_IEZZHQZGMY9avK74kwA"
          },
          "skill_category_name": {
            "type": "string",
            "description": "The skill category's name.",
            "example": "Languages"
          },
          "skill_category_description": {
            "type": "string",
            "description": "The skill category's description.",
            "example": "Medium proficiency."
          },
          "skill_type": {
            "type": "string",
            "description": "The skill category's type: \n* 'text' — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
            "enum": [
              "text",
              "proficiency"
            ],
            "example": "text"
          },
          "max_proficiency_level": {
            "type": "integer",
            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 5
          },
          "modified_by": {
            "type": "string",
            "description": "The ID of the user who last modified the skill category.",
            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
          },
          "last_modified_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the skill category was last modified.",
            "example": "2022-02-15T09:27:15Z"
          }
        }
      },
      "Skill": {
        "type": "object",
        "description": "Information about the skill.",
        "properties": {
          "skill_id": {
            "type": "string",
            "description": "The skill's ID.",
            "example": "saaHWgVMGQU69soco456oNA"
          },
          "skill_name": {
            "type": "string",
            "description": "The skill's name.",
            "example": "French"
          },
          "skill_type": {
            "type": "string",
            "description": "The skill category's type: \n* 'text' — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
            "enum": [
              "text",
              "proficiency"
            ],
            "example": "text"
          },
          "max_proficiency_level": {
            "type": "integer",
            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 5
          },
          "skill_category_name": {
            "type": "string",
            "description": "The skill category's name.",
            "example": "Languages"
          },
          "skill_category_id": {
            "type": "string",
            "description": "The skill's category ID.",
            "example": "rvYVEioQQduHb5iHCj7-kg"
          },
          "total_users": {
            "type": "integer",
            "description": "The total users of the skill",
            "example": 5
          },
          "modified_by": {
            "type": "string",
            "description": "The ID of the user who last modified the skill.",
            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
          },
          "last_modified_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the skill was last modified.",
            "example": "2022-02-15T09:27:15Z"
          }
        }
      },
      "SkillName": {
        "type": "object",
        "description": "Information about the updated skill.",
        "properties": {
          "skill_name": {
            "type": "string",
            "description": "The skill's new name.",
            "example": "this is a skill name"
          }
        }
      },
      "ListSkillCategory": {
        "type": "object",
        "description": "Information about the available skill categories.",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "example": "H13iGyIFKCICxrYDlrppjJcDvN2jcBnRzD2"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 1
          },
          "skill_categories": {
            "type": "array",
            "description": "Information about the skill categories.",
            "items": {
              "$ref": "#/components/schemas/SkillCategories"
            }
          }
        }
      },
      "CreateSkill": {
        "type": "object",
        "description": "Information about the skill.",
        "properties": {
          "skill_id": {
            "type": "string",
            "description": "The skill's ID.",
            "example": "saaHWgVMGQU69soco456oNA"
          },
          "skill_name": {
            "type": "string",
            "description": "The skill's name.",
            "example": "French"
          },
          "skill_type": {
            "type": "string",
            "description": "The skill category's type: \n* 'text' — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
            "enum": [
              "text",
              "proficiency"
            ],
            "example": "text"
          },
          "max_proficiency_level": {
            "type": "integer",
            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 5
          },
          "skill_category_name": {
            "type": "string",
            "description": "The skill category's name.",
            "example": "Languages"
          },
          "skill_category_id": {
            "type": "string",
            "description": "The skill's category ID.",
            "example": "rvYVEioQQduHb5iHCj7-kg"
          },
          "modified_by": {
            "type": "string",
            "description": "The ID of the user who last modified the skill.",
            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
          },
          "last_modified_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the skill was last modified.",
            "example": "2022-02-15T09:27:15Z"
          }
        }
      },
      "UpdateSkillCategory": {
        "type": "object",
        "description": "Information about the new skill category.",
        "properties": {
          "max_proficiency_level": {
            "type": "integer",
            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 5
          },
          "skill_category_name": {
            "type": "string",
            "description": "The skill category's name.",
            "example": "Languages"
          },
          "skill_category_description": {
            "type": "string",
            "description": "The skill category's description.",
            "example": "Medium proficiency."
          }
        }
      },
      "GetSkill": {
        "type": "object",
        "description": "Information about a skill and its usage.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The skill's ID.",
            "example": "saaHWgVMGQU69soco456oNA"
          },
          "name": {
            "type": "string",
            "description": "The skill's name.",
            "example": "French"
          },
          "type": {
            "type": "integer",
            "description": "The skill category's type: \n* `0` — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* `1` — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
            "enum": [
              0,
              1
            ],
            "example": 1
          },
          "skill_category_id": {
            "type": "string",
            "description": "The skill's category ID.",
            "example": "OyQQjWiZQTaBX7RwSK6iRw"
          },
          "created_by": {
            "type": "string",
            "description": "The user who created the skill.",
            "example": "Tara Hill"
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "description": "The skill's creation date and time.",
            "example": "2021-11-24T02:39:57Z"
          },
          "skill_in_use": {
            "type": "boolean",
            "description": "Whether the skill is used: \n* `true` — The skill is in use. \n* `false` — The skill is not in use.",
            "example": false
          }
        }
      },
      "SkillCategories": {
        "type": "object",
        "description": "Information about the available skill categories.",
        "properties": {
          "skill_category_id": {
            "type": "string",
            "description": "The skill category's ID.",
            "example": "Mu_IEZZHQZGMY9avK74kwA"
          },
          "skill_category_name": {
            "type": "string",
            "description": "The skill category's name.",
            "example": "Languages"
          },
          "skill_category_description": {
            "type": "string",
            "description": "The skill category's description.",
            "example": "Medium proficiency."
          },
          "max_proficiency_level": {
            "type": "integer",
            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). This value only returns if the skill category's `type` value is `1` (a proficiency-based skill).",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 5
          },
          "total_agent_routing_profiles": {
            "type": "integer",
            "description": "The total agent routing profiles.",
            "example": 5
          },
          "skill_type": {
            "type": "string",
            "description": "The skill category's type: \n* 'text' — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
            "enum": [
              "text",
              "proficiency"
            ],
            "example": "text"
          },
          "modified_by": {
            "type": "string",
            "description": "The ID of the user who last modified the skill category.",
            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
          },
          "last_modified_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the skill category was last modified.",
            "example": "2022-02-15T09:27:15Z"
          }
        }
      },
      "CreateSkillCategory": {
        "type": "object",
        "description": "Information about the new skill category.",
        "properties": {
          "max_proficiency_level": {
            "type": "integer",
            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 5
          },
          "skill_category_name": {
            "type": "string",
            "description": "The skill category's name.",
            "example": "Languages"
          },
          "skill_category_description": {
            "type": "string",
            "description": "The skill category's description.",
            "example": "Medium proficiency."
          },
          "skill_type": {
            "type": "string",
            "description": "The skill category's type: \n* 'text' — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
            "enum": [
              "text",
              "proficiency"
            ],
            "example": "text"
          }
        }
      },
      "GetSkillCategory": {
        "type": "object",
        "description": "Information about the skill category.",
        "properties": {
          "skill_category_id": {
            "type": "string",
            "description": "The skill category's ID.",
            "example": "Mu_IEZZHQZGMY9avK74kwA"
          },
          "skill_category_name": {
            "type": "string",
            "description": "The skill category's name.",
            "example": "Languages"
          },
          "skill_category_description": {
            "type": "string",
            "description": "The skill category's description.",
            "example": "Medium proficiency."
          },
          "max_proficiency_level": {
            "type": "integer",
            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). This value only returns if the skill category's `type` value is `1` (a proficiency-based skill).",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 5
          },
          "skill_type": {
            "type": "string",
            "description": "The skill category's type: \n* 'text' — A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' — A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
            "enum": [
              "text",
              "proficiency"
            ],
            "example": "text"
          },
          "modified_by": {
            "type": "string",
            "description": "The ID of the user who last modified the skill category.",
            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
          },
          "last_modified_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the skill category was last modified.",
            "example": "2022-02-15T09:27:15Z"
          }
        }
      },
      "CreateQueueResponse": {
        "type": "object",
        "properties": {
          "queue_id": {
            "type": "string",
            "description": "The task queue's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "queue_name": {
            "type": "string",
            "description": "The task queue's name.",
            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
          },
          "queue_description": {
            "type": "string",
            "description": "The task queue's description.",
            "example": "This is a task queue."
          },
          "channel_types": {
            "type": "array",
            "description": "The task queue's channel types.",
            "items": {
              "type": "string",
              "enum": [
                "voice",
                "chat",
                "sms",
                "zoom_room",
                "video"
              ],
              "example": "voice"
            }
          }
        }
      },
      "ListQueueAgents": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "agents": {
            "type": "array",
            "description": "Information about the agents.",
            "items": {
              "$ref": "#/components/schemas/QueueAgent"
            }
          }
        }
      },
      "ListQueueSupervisors": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "supervisors": {
            "type": "array",
            "description": "Information about the supervisors.",
            "items": {
              "$ref": "#/components/schemas/QueueSupervisor"
            }
          }
        }
      },
      "ListQueueDispositions": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 1
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "dispositions": {
            "type": "array",
            "description": "Information about the task queue's dispositions.",
            "items": {
              "type": "object",
              "description": "Information about the task queue disposition.",
              "properties": {
                "disposition_id": {
                  "type": "string",
                  "description": "The disposition's ID.",
                  "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                },
                "disposition_name": {
                  "type": "string",
                  "description": "The disposition's name.",
                  "example": "Inquiry"
                },
                "disposition_description": {
                  "type": "string",
                  "description": "The information about the disposition.",
                  "example": "Inquiry dispositions."
                },
                "status": {
                  "type": "string",
                  "description": "The status of the disposition: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                  "enum": [
                    "inactive",
                    "active"
                  ],
                  "example": "inactive"
                },
                "last_modified_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time at which the disposition was last modified.",
                  "example": "2021-12-03T05:07:46Z"
                },
                "modified_by": {
                  "type": "string",
                  "description": "The ID of user that last modified the disposition.",
                  "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                }
              }
            }
          }
        }
      },
      "ListQueueDispositionSets": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 1
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "disposition_sets": {
            "type": "array",
            "description": "Information about the task queue's disposition sets.",
            "items": {
              "type": "object",
              "description": "Information about the task's queue disposition set.",
              "properties": {
                "disposition_set_id": {
                  "type": "string",
                  "description": "The disposition set's ID.",
                  "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                },
                "disposition_set_name": {
                  "type": "string",
                  "description": "The disposition set's name.",
                  "example": "Inquiry"
                },
                "disposition_set_description": {
                  "type": "string",
                  "description": "The information about the disposition set.",
                  "example": "Inquiry dispositions."
                },
                "status": {
                  "type": "string",
                  "description": "The status of the disposition set: \n* `inactive` — Deactivated. \n* `active` — Activated.",
                  "enum": [
                    "inactive",
                    "active"
                  ],
                  "example": "inactive"
                },
                "last_modified_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time at which the disposition set was last modified.",
                  "example": "2021-12-03T05:07:46Z"
                },
                "modified_by": {
                  "type": "string",
                  "description": "The ID of user that last modified the disposition set.",
                  "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                }
              }
            }
          }
        }
      },
      "ListQueues": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "queues": {
            "type": "array",
            "description": "Information about the task queues.",
            "items": {
              "$ref": "#/components/schemas/ListQueue"
            }
          }
        }
      },
      "ListQueue": {
        "type": "object",
        "properties": {
          "queue_id": {
            "type": "string",
            "description": "The task queue's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "queue_name": {
            "type": "string",
            "description": "The task queue's name.",
            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
          },
          "agents_count": {
            "type": "integer",
            "description": "The number of assigned agents.",
            "example": 1
          },
          "supervisors_count": {
            "type": "integer",
            "description": "The number of assigned supervisors.",
            "example": 1
          },
          "channel_types": {
            "type": "array",
            "description": "The task queue's channel types.",
            "items": {
              "type": "string",
              "enum": [
                "voice",
                "chat",
                "sms",
                "zoom_room",
                "video"
              ],
              "example": "voice"
            }
          },
          "modified_by": {
            "type": "string",
            "description": "The ID of user that last modified the asset.",
            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
          },
          "last_modified_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the asset was last modified.",
            "example": "2022-02-15T09:27:15Z"
          }
        }
      },
      "AssignQueueUsers": {
        "type": "object",
        "properties": {
          "user_ids": {
            "type": "array",
            "maxItems": 30,
            "description": "The users to assign to the queue. The value can be email or user ID. This request supports a maximum of 30 users per call.",
            "items": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            }
          }
        }
      },
      "AssignQueueDispositions": {
        "type": "object",
        "properties": {
          "disposition_ids": {
            "type": "array",
            "maxItems": 30,
            "description": "The dispositions to assign to the queue. This request supports a maximum of 30 dispositions per call.",
            "items": {
              "type": "string",
              "example": "sgdfghr_2454y5hdfgsfsgsdg"
            }
          }
        }
      },
      "AssignQueueDispositionSets": {
        "type": "object",
        "properties": {
          "disposition_set_ids": {
            "type": "array",
            "maxItems": 30,
            "description": "The IDs of the disposition sets to assign to the queue. This request supports a maximum of 30 dispositions per call.",
            "items": {
              "type": "string",
              "example": "sgdfghr_2454y5hdfgsfsgsdg"
            }
          }
        }
      },
      "QueueAgent": {
        "type": "object",
        "description": "Information about the task queue agent.",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The user's ID.",
            "example": "ukAAkZKfROKMSw1bj_RDFQ"
          },
          "display_name": {
            "type": "string",
            "description": "The user's name.",
            "example": "Jill Chill"
          },
          "user_email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address.",
            "example": "jchill@example.com"
          },
          "role_id": {
            "type": "string",
            "description": "The role's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "role_name": {
            "type": "string",
            "description": "The role's name.",
            "example": "Agent"
          },
          "status_id": {
            "type": "string",
            "description": "The user's availability status ID.",
            "example": "1"
          },
          "status_name": {
            "type": "string",
            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status): \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status. For example, \"Lunch\".",
            "enum": [
              "Offline",
              "Ready",
              "Not Ready",
              "Occupied"
            ],
            "example": "Offline"
          },
          "user_access": {
            "type": "string",
            "description": "The user's access status: \n* `active` — The user's role permissions allow them to access the Contact Center. \n* `inactive` — The user cannot access the Contact Center.",
            "enum": [
              "active",
              "inactive"
            ],
            "example": "active"
          },
          "opt_in_out_status": {
            "description": "Opt out status.\n`0`: Opted in by agent himself or supervisor.\n`1`: Opted out by supervisor or admin.\n`2`: Opted out by agent himself.",
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer",
            "example": 0
          }
        }
      },
      "QueueSupervisor": {
        "type": "object",
        "description": "Information about the task queue supervisor.",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The user's ID.",
            "example": "ukAAkZKfROKMSw1bj_RDFQ"
          },
          "display_name": {
            "type": "string",
            "description": "The user's name.",
            "example": "Jill Chill"
          },
          "user_email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address.",
            "example": "jchill@example.com"
          },
          "role_id": {
            "type": "string",
            "description": "The role's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "role_name": {
            "type": "string",
            "description": "The role's name.",
            "example": "Agent"
          },
          "status_id": {
            "type": "string",
            "description": "The user's availability status ID.",
            "example": "1"
          },
          "status_name": {
            "type": "string",
            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status): \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status. For example, \"Lunch\".",
            "enum": [
              "Offline",
              "Ready",
              "Not Ready",
              "Occupied"
            ],
            "example": "Offline"
          },
          "user_access": {
            "type": "string",
            "description": "The user's access status: \n* `active` — The user's role permissions allow them to access the Contact Center. \n* `inactive` — The user cannot access the Contact Center.",
            "enum": [
              "active",
              "inactive"
            ],
            "example": "active"
          }
        }
      },
      "CreateQueue": {
        "type": "object",
        "properties": {
          "queue_name": {
            "type": "string",
            "description": "The task queue's name.",
            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
          },
          "queue_description": {
            "type": "string",
            "description": "The task queue's description.",
            "example": "This is a task queue."
          },
          "channel_types": {
            "type": "array",
            "description": "The task queue's channel types.",
            "items": {
              "type": "string",
              "enum": [
                "voice",
                "chat",
                "sms",
                "zoom_room",
                "video"
              ],
              "example": "voice"
            }
          }
        }
      },
      "Queue": {
        "type": "object",
        "properties": {
          "queue_id": {
            "type": "string",
            "description": "The task queue's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "queue_name": {
            "type": "string",
            "description": "The task queue's name.",
            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
          },
          "queue_description": {
            "type": "string",
            "description": "The task queue's description.",
            "example": "This is a task queue."
          },
          "dispositions_count": {
            "type": "integer",
            "description": "The count of dispositions.",
            "example": 1
          },
          "disposition_sets_count": {
            "type": "integer",
            "description": "The count of disposition sets.",
            "example": 1
          },
          "channel_types": {
            "type": "array",
            "description": "The task queue's channel types.",
            "items": {
              "type": "string",
              "enum": [
                "voice",
                "chat",
                "sms",
                "zoom_room",
                "video"
              ],
              "example": "voice"
            }
          },
          "max_wait_time": {
            "type": "integer",
            "description": "The task queue's maximum wait time, in seconds.",
            "example": 50
          },
          "wrap_up_time": {
            "type": "integer",
            "description": "The task queue's wrap up time, in seconds.",
            "example": 50
          },
          "max_engagement_in_queue": {
            "type": "integer",
            "minimum": 1,
            "maximum": 3000,
            "description": "The task queue's maximum engagement in queue value.",
            "example": 50
          },
          "short_abandon": {
            "type": "object",
            "description": "Information about the task queue's [**Short Abandon**](https://support.zoom.us/hc/en-us/articles/4469989300493-Changing-queue-settings#:~:text=for%20this%20queue.-,Short%20Abandon,-(only%20available%20if) settings. This setting is only available if the queue's channel type is a Zoom Room, voice, or video.",
            "properties": {
              "enable": {
                "type": "boolean",
                "description": "Whether the **Enable short abandon** setting is enabled.",
                "example": false
              },
              "threshold": {
                "type": "integer",
                "description": "The task queue's short abandon threshold, in seconds.",
                "example": 50
              }
            }
          },
          "distribution_type": {
            "type": "integer",
            "description": "Use this option to distribute incoming engagements.",
            "enum": [
              "0 - Longest Idle",
              "1 - Sequential",
              "2 - Rotating",
              "3 - Simultaneous",
              "4 - Most Available",
              "5 - Manual"
            ],
            "example": 1
          },
          "distribution_duration_in_seconds": {
            "type": "integer",
            "description": "Notify duration for each queue user, in seconds",
            "example": 30
          },
          "connecting_media_id": {
            "type": "string",
            "description": "Media ID to use while users are being connected.\nChannel Type: Voice",
            "example": "connectingAudioMp3"
          },
          "connecting_media_name": {
            "type": "string",
            "description": "File name of the media in use while consumers are being connected.\nChannel Type: Voice",
            "example": "Connecting Audio"
          },
          "transferring_media_id": {
            "type": "string",
            "description": "Media ID to use while users are being transferred.\nChannel Type: Voice",
            "example": "transferringAudioMp3"
          },
          "transferring_media_name": {
            "type": "string",
            "description": "File name of the media to use while users are being transferred.\nChannel Type: Voice",
            "example": "Transferring Audio"
          },
          "holding_media_id": {
            "type": "string",
            "description": "Media ID to use while users are on hold.\nChannel Type: Voice",
            "example": "holdingAudioMp3"
          },
          "holding_media_name": {
            "type": "string",
            "description": "File name of the media to use while users are on hold.\nChannel Type: Voice",
            "example": "Holding Audio"
          },
          "waiting_room_name": {
            "type": "string",
            "description": "Name of the user's waiting room\nChannel Type: Video",
            "example": "User Waiting Room"
          },
          "waiting_room_id": {
            "type": "string",
            "description": "ID of the waiting room for users\nChannel Type: Video",
            "example": "vPtSZOzBSLWMiorssYWTZw"
          },
          "message_accept": {
            "type": "string",
            "description": "Option to accept a message manually or automatically\nChannel Type: Chat, SMS",
            "enum": [
              "manual",
              "auto"
            ],
            "example": "manual"
          }
        }
      },
      "UpdateQueue": {
        "type": "object",
        "properties": {
          "queue_name": {
            "type": "string",
            "description": "The task queue's name.",
            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
          },
          "queue_description": {
            "type": "string",
            "description": "The task queue's description.",
            "example": "This is a queue."
          },
          "max_wait_time": {
            "type": "integer",
            "description": "The task queue's maximum wait time, in seconds.",
            "example": 50
          },
          "wrap_up_time": {
            "type": "integer",
            "description": "The task queue's wrap up time, in seconds.",
            "example": 50
          },
          "max_engagement_in_queue": {
            "type": "integer",
            "description": "The task queue's max engagement in queue.Value must be between 1 and 3000.",
            "example": 50
          },
          "short_abandon": {
            "type": "object",
            "description": "Information about the task queue's [**Short Abandon**](https://support.zoom.us/hc/en-us/articles/4469989300493-Changing-queue-settings#:~:text=for%20this%20queue.-,Short%20Abandon,-(only%20available%20if) settings. This setting is only available if the queue's channel type is a Zoom Room, voice, or video.",
            "properties": {
              "enable": {
                "type": "boolean",
                "description": "Whether to enable the **Short Abandon** setting is enabled.",
                "example": false
              },
              "threshold": {
                "type": "integer",
                "description": "The task queue's **Short Abandon** threshold, in seconds.",
                "example": 50
              }
            }
          },
          "channel_types": {
            "type": "array",
            "description": "The task queue's channel types.",
            "items": {
              "type": "string",
              "enum": [
                "voice",
                "chat",
                "sms",
                "zoom_room",
                "video"
              ],
              "example": "voice"
            }
          },
          "distribution_type": {
            "type": "integer",
            "description": "Use this option to distribute incoming engagements.",
            "enum": [
              "0 - Longest Idle",
              "1 - Sequential",
              "2 - Rotating",
              "3 - Simultaneous",
              "4 - Most Available",
              "5 - Manual"
            ],
            "example": 1
          },
          "distribution_duration_in_seconds": {
            "type": "integer",
            "description": "Notify duration for each queue user, in seconds",
            "example": 30
          },
          "connecting_media_id": {
            "type": "string",
            "description": "Media ID to use while users are being connected.\nChannel Type: Voice",
            "example": "connectingAudioMp3",
            "default": "Passing an empty string will set this option to the default media."
          },
          "transferring_media_id": {
            "type": "string",
            "description": "Media ID to use while users are being transferred.\nChannel Type: Voice",
            "example": "transferringAudioMp3",
            "default": "Passing an empty string will set this option to the default media."
          },
          "holding_media_id": {
            "type": "string",
            "description": "Media ID to use while users are on hold.\nChannel Type: Voice",
            "example": "holdingAudioMp3",
            "default": "Passing an empty string will set this option to the default media."
          },
          "waiting_room_id": {
            "type": "string",
            "description": "ID of the waiting room for users\nChannel Type: Video",
            "example": "vPtSZOzBSLWMiorssYWTZw"
          },
          "message_accept": {
            "type": "string",
            "description": "Option to accept a message manually or automatically\nChannel Type: Chat, SMS",
            "enum": [
              "manual",
              "auto"
            ],
            "example": "manual"
          }
        }
      },
      "UpdateQueueAgent": {
        "type": "object",
        "properties": {
          "opt_in_out_status": {
            "description": "Opt out status.\n`0`: Opt in by agent himself or supervisor.\n`1`: Opt out by supervisor or admin.\n`2`: Opt out by agent himself.",
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer",
            "example": 0
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "string",
            "description": "The role's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "role_name": {
            "type": "string",
            "description": "The role's name.",
            "example": "Agent"
          },
          "role_description": {
            "type": "string",
            "description": "The role's description.",
            "example": "Agent role."
          },
          "total_users": {
            "type": "integer",
            "description": "Number of users with the role.",
            "example": 3
          },
          "modified_by": {
            "type": "string",
            "description": "The ID of the user who last modified the role.",
            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
          },
          "last_modified_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the role was last modified.",
            "example": "2022-03-03T05:07:46Z"
          }
        }
      },
      "CreateRoleResponse": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "string",
            "description": "The role's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "role_name": {
            "type": "string",
            "description": "The role's name.",
            "example": "Agent"
          },
          "role_description": {
            "type": "string",
            "description": "The role's description.",
            "example": "Agent role."
          }
        }
      },
      "UpdateRole": {
        "type": "object",
        "properties": {
          "role_name": {
            "type": "string",
            "description": "The role's name.",
            "example": "Agent"
          },
          "role_description": {
            "type": "string",
            "description": "The role's description. **Note:** The Admin, Agent, and Supervisor roles do not support modification.",
            "example": "Agent role."
          }
        }
      },
      "AssignRoleUsers": {
        "type": "object",
        "properties": {
          "user_ids": {
            "type": "array",
            "maxItems": 30,
            "description": "The users to assign to the role. The value can be email or user ID. This request supports a maximum of 30 users per call.",
            "items": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            }
          }
        }
      },
      "ListRoleUsers": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "users": {
            "type": "array",
            "description": "Information about the role's assigned users.",
            "items": {
              "$ref": "#/components/schemas/RoleUser"
            }
          }
        }
      },
      "ListRolePrivileges": {
        "type": "object",
        "properties": {
          "privileges": {
            "type": "array",
            "description": "Information about user role's assigned privileges.",
            "items": {
              "type": "string",
              "example": "VecAccountSetting:Read"
            }
          }
        }
      },
      "ListRoles": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "roles": {
            "type": "array",
            "description": "Information about user roles.",
            "items": {
              "type": "object",
              "properties": {
                "role_id": {
                  "type": "string",
                  "description": "The role's ID.",
                  "example": "-7uu_aUQRL-zXybozrSBWw"
                },
                "role_name": {
                  "type": "string",
                  "description": "The role's name.",
                  "example": "Agent"
                },
                "role_description": {
                  "type": "string",
                  "description": "The role's description.",
                  "example": "Agent role."
                },
                "total_users": {
                  "type": "integer",
                  "description": "Number of users with the role.",
                  "example": 3
                },
                "modified_by": {
                  "type": "string",
                  "description": "The ID of the user who last modified the role.",
                  "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                },
                "last_modified_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time at which the role was last modified.",
                  "example": "2022-03-03T05:07:46Z"
                }
              }
            }
          }
        }
      },
      "RoleUser": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The user's ID.",
            "example": "ukAAkZKfROKMSw1bj_RDFQ"
          },
          "display_name": {
            "type": "string",
            "description": "The user's name.",
            "example": "Jill Chill"
          },
          "user_email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address.",
            "example": "user@example.com"
          }
        }
      },
      "CreateRole": {
        "type": "object",
        "properties": {
          "role_name": {
            "type": "string",
            "description": "The user role's name.",
            "example": "Agent"
          },
          "role_description": {
            "type": "string",
            "description": "The role's description.",
            "example": "Agent role."
          }
        }
      },
      "Status": {
        "type": "object",
        "description": "Information about the user's status.",
        "properties": {
          "status_id": {
            "type": "string",
            "description": "The status ID.",
            "example": "1"
          },
          "status_name": {
            "type": "string",
            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status): \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status. For example, \"Lunch\".",
            "enum": [
              "Offline",
              "Ready",
              "Not Ready",
              "Occupied"
            ],
            "example": "Lunch"
          }
        }
      },
      "ListQueueOfUser": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "queues": {
            "type": "array",
            "description": "Information about the task queues.",
            "items": {
              "type": "object",
              "properties": {
                "queue_id": {
                  "type": "string",
                  "description": "The task queue's ID.",
                  "example": "Ql3qxUWXSHes4PmcOmzyOg"
                },
                "queue_name": {
                  "type": "string",
                  "description": "The task queue's name.",
                  "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                }
              }
            }
          }
        }
      },
      "ListUsers": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "users": {
            "type": "array",
            "description": "Information about the users.",
            "items": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "The user's ID.",
                  "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                },
                "display_name": {
                  "type": "string",
                  "description": "The user's name.",
                  "example": "Jill"
                },
                "user_email": {
                  "type": "string",
                  "format": "email",
                  "description": "The user's email address.",
                  "example": "jchill@example.com"
                },
                "role_id": {
                  "type": "string",
                  "description": "The user's role ID.",
                  "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                },
                "role_name": {
                  "type": "string",
                  "description": "The user's role name.",
                  "example": "Admin"
                },
                "client_integration": {
                  "type": "string",
                  "description": "The contact center's client integration: \n* `Default` \n* `Salesforce`",
                  "enum": [
                    "Default",
                    "Salesforce"
                  ],
                  "example": "Salesforce"
                },
                "status_id": {
                  "type": "string",
                  "description": "The user's status ID.",
                  "example": "1"
                },
                "status_name": {
                  "type": "string",
                  "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status): \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as \"Lunch\" or \"Away until Monday\"",
                  "enum": [
                    "Offline",
                    "Ready",
                    "Not Ready",
                    "Occupied"
                  ],
                  "example": "Offline"
                },
                "user_access": {
                  "type": "string",
                  "description": "The user's access status: \n* `active` — The user's role permissions allow them to access the Contact Center. \n* `inactive` — The user cannot access the Contact Center.",
                  "enum": [
                    "active",
                    "inactive"
                  ],
                  "example": "active"
                },
                "channel_settings": {
                  "type": "object",
                  "description": "Information about the channel settings.",
                  "$ref": "#/components/schemas/UpdateUser/properties/channel_settings"
                }
              }
            }
          }
        }
      },
      "ListUsersUnderSkill": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 30
          },
          "users": {
            "type": "array",
            "description": "Information about the skill users.",
            "items": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "The user's ID.",
                  "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                },
                "display_name": {
                  "type": "string",
                  "description": "The user's name.",
                  "example": "Jill"
                },
                "user_email": {
                  "type": "string",
                  "format": "email",
                  "description": "The user's email address.",
                  "example": "jchill@example.com"
                }
              }
            }
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "client_integration": {
            "type": "string",
            "description": "The contact center's client integration: \n* `Default` \n* `Salesforce`",
            "enum": [
              "Default",
              "Salesforce"
            ],
            "example": "Salesforce"
          },
          "role_id": {
            "type": "string",
            "description": "The user's role ID.",
            "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
          },
          "status_id": {
            "type": "string",
            "description": "The user's status ID.",
            "example": "1"
          },
          "user_access": {
            "type": "string",
            "description": "The user's access status: \n* `active` — The user's role permissions allow them to access the Contact Center. \n* `inactive` — The user cannot access the Contact Center.",
            "enum": [
              "active",
              "inactive"
            ],
            "example": "active"
          },
          "channel_settings": {
            "type": "object",
            "description": "Information about the channel settings.",
            "properties": {
              "multi_channel_engagements": {
                "type": "object",
                "description": "Information about the setting's multi-channel engagements.",
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "description": "Whether to allow users to receive voice or video engagements while handling Chat and SMS engagements based on the `max_agent_load` value.",
                    "example": true
                  },
                  "max_agent_load": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "If the `multi_channel_engagements` value is `true`, the maximum load percentage an user needs to undertake in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                    "example": 50
                  }
                }
              },
              "concurrent_message_capacity": {
                "type": "integer",
                "minimum": 0,
                "maximum": 20,
                "description": "The maximum number of concurrent messaging conversations that an user can be assigned.",
                "example": 4
              }
            }
          }
        }
      },
      "ListStatus": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "statuses": {
            "type": "array",
            "description": "Information about the statuses.",
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "The task's ID.",
            "example": "ZWT45A019B032F02E1BFC1F8BEACD789C75"
          },
          "workspace_id": {
            "type": "string",
            "description": "The task's Workspace ID.",
            "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
          },
          "task_timeout": {
            "type": "integer",
            "description": "The task's timeout, in seconds.",
            "example": 86400
          },
          "task_priority": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10,
            "description": "The task's priority, from `0` to `10`. The greater the value, the higher the priority. The maximum value is `10`.",
            "example": 1
          },
          "task_status": {
            "type": "string",
            "description": "The task's assignment status: \n* `pending` \n* `reserved` \n* `assigned` \n* `canceled` \n* `completed` \n* `wrapping`",
            "enum": [
              "pending",
              "reserved",
              "assigned",
              "canceled",
              "completed",
              "wrapping"
            ],
            "example": "pending"
          },
          "channel_id": {
            "type": "string",
            "description": "The task's channel ID.",
            "example": "ZTC626F90D72F0C6188F0144DF0BDD8FD02"
          },
          "channel_name": {
            "type": "string",
            "description": "The unique name of the task channel: \n* `default` \n* `voice` \n* `sms` \n* `chat` \n* `phone`",
            "enum": [
              "default",
              "voice",
              "sms",
              "chat",
              "phone"
            ],
            "example": "default"
          },
          "queue_id": {
            "type": "string",
            "description": "The queue's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "queue_name": {
            "type": "string",
            "description": "The queue's name.",
            "example": "Demo"
          },
          "flow_id": {
            "type": "string",
            "description": "The flow's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "flow_name": {
            "type": "string",
            "description": "The flow's name.",
            "example": "Demo"
          },
          "engagement_id": {
            "type": "string",
            "description": "The task's Engagement ID.",
            "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
          },
          "caller_number": {
            "type": "string",
            "description": "The caller's phone number.",
            "example": "+12363605433"
          },
          "callee_number": {
            "type": "string",
            "description": "The callee's phone number.",
            "example": "+12048002447"
          },
          "assigned_user_id": {
            "type": "string",
            "description": "The user ID of the task's assigned user.",
            "example": "ukAAkZKfROKMSw1bj_RDFQ"
          },
          "auto_assign": {
            "type": "boolean",
            "description": "Whether user auto assignment is enabled for the task.",
            "example": false
          },
          "created_time": {
            "description": "The task's creation date and time.",
            "format": "date-time",
            "type": "string",
            "example": "2022-04-08T07:21:57Z"
          },
          "last_modified_time": {
            "description": "The date and time at which the task was last modified.",
            "format": "date-time",
            "type": "string",
            "example": "2022-04-08T07:22:03Z"
          }
        }
      },
      "ListTasks": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "description": "The number of records returned within a single API call.",
            "maximum": 300,
            "example": 50
          },
          "tasks": {
            "type": "array",
            "description": "Information about the tasks.",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          }
        }
      },
      "UpdateTask": {
        "type": "object",
        "properties": {
          "task_priority": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10,
            "description": "The task's priority level, from `0` to `10`. The greater the value, the higher the task's priority. The maximum value is `10`.",
            "example": 2
          },
          "assigned_user_id": {
            "type": "string",
            "description": "The agent's user ID to whom the task is manually assigned.<br>To unassign the task from an agent manually and put the task back to the queue for reassignment, set the `assigned_user_id` field as an empty string.",
            "example": "ukAAkZKfROKMSw1bj_RDFQ"
          }
        }
      },
      "UpdateAddressBook": {
        "type": "object",
        "properties": {
          "address_book_name": {
            "type": "string",
            "description": "The address book's name.",
            "example": "example"
          },
          "address_book_description": {
            "type": "string",
            "description": "The address book's description.",
            "example": "This is a Demo Address Book."
          }
        }
      },
      "CreateAddressBook": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "description": "The address book's unit ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "address_book_name": {
            "type": "string",
            "description": "The address book's name.",
            "example": "Address Book"
          },
          "address_book_description": {
            "type": "string",
            "description": "The address book's description.",
            "example": "This is an address book."
          }
        }
      },
      "UpdateUnit": {
        "type": "object",
        "properties": {
          "unit_name": {
            "type": "string",
            "description": "The address book unit's name.",
            "example": "example"
          },
          "unit_description": {
            "type": "string",
            "description": "The address book unit's description.",
            "example": "This is a Demo Unit."
          }
        }
      },
      "ListContacts": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 30
          },
          "contacts": {
            "type": "array",
            "description": "Information about the contacts.",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          }
        }
      },
      "CreateUnitResponse": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "description": "The address book unit's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "unit_name": {
            "type": "string",
            "description": "The address book unit's name.",
            "example": "Example"
          },
          "unit_description": {
            "type": "string",
            "description": "The address book unit's description.",
            "example": "This is a unit."
          }
        }
      },
      "ListAddressBooks": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The total number of all the records available across pages.",
            "example": 1
          },
          "address_books": {
            "type": "array",
            "description": "Information about the address books.",
            "items": {
              "$ref": "#/components/schemas/AddressBook"
            }
          }
        }
      },
      "Unit": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "description": "The address book unit's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "unit_name": {
            "type": "string",
            "description": "The address book unit's name.",
            "example": "Example"
          },
          "unit_description": {
            "type": "string",
            "description": "The address book unit's description.",
            "example": "This is a unit description."
          }
        }
      },
      "CreateUnit": {
        "type": "object",
        "properties": {
          "unit_name": {
            "type": "string",
            "description": "The address book unit's name.",
            "example": "Example"
          },
          "unit_description": {
            "type": "string",
            "description": "The address book unit's description.",
            "example": "This is a unit."
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "string",
            "description": "The contact's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "display_name": {
            "type": "string",
            "description": "The contact's name.",
            "example": "Jill Chill"
          },
          "first_name": {
            "type": "string",
            "description": "The contact's first name.",
            "example": "Jill"
          },
          "last_name": {
            "type": "string",
            "description": "The contact's last name.",
            "example": "Chill"
          },
          "phone_numbers": {
            "type": "array",
            "description": "The contact's phone numbers.",
            "items": {
              "type": "string",
              "example": "(800) 555-0100"
            }
          },
          "emails": {
            "type": "array",
            "description": "The contact's email addresses.",
            "items": {
              "type": "string",
              "format": "email",
              "example": "user@example.com"
            }
          },
          "location": {
            "type": "string",
            "description": "The contact's location.",
            "example": "San Jose"
          },
          "account_number": {
            "type": "string",
            "description": "The contact's account number.",
            "example": "(800) 555-0101"
          },
          "company": {
            "type": "string",
            "description": "The contact's company.",
            "example": "Example"
          },
          "role": {
            "type": "string",
            "description": "The contact's role.",
            "example": "Agent"
          },
          "address_book_id": {
            "type": "string",
            "description": "The address book's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "address_book_name": {
            "type": "string",
            "description": "The address book's name.",
            "example": "Address Book"
          }
        }
      },
      "CreateAddressBookResponse": {
        "type": "object",
        "properties": {
          "address_book_id": {
            "type": "string",
            "description": "The address book's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "address_book_name": {
            "type": "string",
            "description": "The address book's name.",
            "example": "Address Book"
          },
          "address_book_description": {
            "type": "string",
            "description": "The address book's description.",
            "example": "This is an address book."
          },
          "unit_id": {
            "type": "string",
            "description": "The address book unit's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "unit_name": {
            "type": "string",
            "description": "The address book unit's name.",
            "example": "Unit"
          }
        }
      },
      "AddressBook": {
        "type": "object",
        "properties": {
          "address_book_id": {
            "type": "string",
            "description": "The address book's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "address_book_name": {
            "type": "string",
            "description": "The address book's name.",
            "example": "Address Book"
          },
          "address_book_description": {
            "type": "string",
            "description": "The address book's description.",
            "example": "This is an address book."
          },
          "total_contacts": {
            "type": "integer",
            "description": "The address book's total number of contacts.",
            "example": 30
          },
          "unit_id": {
            "type": "string",
            "description": "The address book unit's ID.",
            "example": "zeYjXoDOS_eV1QmTpj63PQ"
          },
          "unit_name": {
            "type": "string",
            "description": "The address book unit's name.",
            "example": "Unit"
          }
        }
      },
      "CreateContact": {
        "type": "object",
        "required": [
          "email",
          "phone_numbers"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The contact's display name.",
            "example": "Jill Chill"
          },
          "first_name": {
            "type": "string",
            "description": "The contact's first name.",
            "example": "Jill"
          },
          "last_name": {
            "type": "string",
            "description": "The contact's last name.",
            "example": "Chill"
          },
          "phone_numbers": {
            "type": "array",
            "description": "The contact's phone numbers. You must provide this field and/or the `email` field when you create a contact.",
            "items": {
              "type": "string",
              "example": "(800) 555-0100"
            }
          },
          "emails": {
            "type": "array",
            "description": "The contact's email addresses. You must provide this field and/or the `phone_numbers` field when you create a contact.",
            "items": {
              "type": "string",
              "format": "email",
              "example": "user@example.com"
            }
          },
          "location": {
            "type": "string",
            "description": "The contact's location.",
            "example": "San Jose"
          },
          "account_number": {
            "type": "string",
            "description": "The contact's account number.",
            "example": "(800) 555-0101"
          },
          "company": {
            "type": "string",
            "description": "The contact's company.",
            "example": "Example"
          },
          "role": {
            "type": "string",
            "description": "The contact's role.",
            "example": "Agent"
          }
        }
      },
      "ListUnits": {
        "type": "object",
        "properties": {
          "next_page_token": {
            "type": "string",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
          },
          "page_size": {
            "type": "integer",
            "default": 30,
            "maximum": 300,
            "description": "The number of records returned within a single API call.",
            "example": 30
          },
          "units": {
            "type": "array",
            "description": "Information about the address book units.",
            "items": {
              "$ref": "#/components/schemas/Unit"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      },
      "Client_Credentials": {
        "description": "Client Credentials Flow for ChatBots",
        "flows": {
          "clientCredentials": {
            "scopes": {},
            "tokenUrl": "https://api.zoom.us/oauth/token"
          }
        },
        "type": "oauth2"
      },
      "OAuth": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://zoom.us/oauth/authorize",
            "scopes": {},
            "tokenUrl": "https://zoom.us/oauth/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "OAuth": []
    }
  ]
}
openapi: 3.0.1
info:
  title: DocuSign REST API
  description: The DocuSign REST API provides you with a powerful, convenient, and
    simple Web services API for interacting with DocuSign.
  termsOfService: https://www.docusign.com/company/terms-and-conditions/web
  contact:
    name: DocuSign Developer Center
    url: https://developers.docusign.com/
    email: devcenter@docusign.com
  version: v2.1
externalDocs:
  description: See the DocuSign REST API Guide for more information.
  url: https://docs.docusign.com/esign
servers:
  - url: https://www.docusign.net/restapi
tags:
  - name: AccountBrands
    description: "The AcccountBrands resource provides methods that enable you to create\
    \ and manage brands for an account.\n\nBranding enables you to add the look and\
    \ feel of your organization's brand to the sending, signing, and email processes,\
    \ making it easier for recipients to identify envelopes coming from your organization.\n\
    \nThe DocuSign Account Custom Branding feature enables you to set the colors,\
    \ logo, and text that recipients see at the account level. The settings associated\
    \ with a brand are applied to all of the envelopes that use the brand. You can\
    \ create multiple brand profiles for different corporate brands or internal departments.\n\
    \n**Note**: To use this resource, branding for either signing or sending must\
    \ be enabled for the account (either `canSelfBrandSend`, `canSelfBrandSign`, or\
    \ both of these account settings must be set to **true**). "
  - name: AccountConsumerDisclosures
    description: "The `AccountConsumerDisclosures` resource provides methods that enable\
    \ you to enable, retrieve, and manage the Electronic Record and Signature Consent\
    \ Disclosure (ERSD) options for your account. This is the disclosure that displays\
    \ to each new recipient who is going to sign or add other information, or who\
    \ is required to view the documents you send to them. The recipient must read\
    \ and agree to the terms of the disclosure before they can access and take action\
    \ on the documents you send. The ERSD does not apply to copy-only recipients,\
    \ but does apply to recipients who must sign or view your documents.\n\nYou can\
    \ use either the default ERSD that DocuSign provides for U.S.-based transactions,\
    \ or a custom ERSD. \n\n## Languages\n\n**Important**: The system does not translate\
    \ the ERSD for you. The default ERSD is always in English. For a custom ERSD,\
    \ an account administrator must create a version of the disclosure for each language\
    \ that your signers use. When you create a version of your custom ERSD for a specific\
    \ signer language, you must:\n\n1. Specify the language code (`langCode`) for\
    \ the signer language.\n2. Provide the `esignAgreementText` and `esignText` in\
    \ the language associated with the `langCode`.\n\nFor more information, see [Legal\
    \ Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure)."
  - name: AccountCustomFields
    description: "Custom fields enable you to record custom information about envelopes\
    \ that you can then use for sorting, organizing, searching, and other downstream\
    \ processes. \n\nFor example, you can use custom fields to copy envelopes or data\
    \ to multiple areas in Salesforce. eOriginal customers can eVault all of their\
    \ documents from the web app by setting an account custom field with a name like\
    \ `eVault with eOriginal` to **true**.\n\nYou can also use account custom fields\
    \ to set the following information:\n\n- Tracking ID\n- Department \n- Use case\n\
    - Other envelope metadata\n\n## Envelope Custom Field Visibility\n\nWhen you create\
    \ an envelope custom field for your account, you have the following options: \n\
    \n- Make it a required field for senders at the time of sending\n- Display it\
    \ as an optional field at the time of sending\n- Set a specific value for the\
    \ field behind the scenes (NOT SURE IF THIS IS RIGHT; MIGHT JUST BE AN UNUSED\
    \ DRAFT FIELD)\n\nEnvelope recipients do not see the envelope custom fields.\n\
    \n## Types of Envelope Custom Fields\n\nThere are two types of envelope custom\
    \ fields:\n\n- `text`: Enables the sender to enter the value for the field. \n\
    - `list`: Enables the sender to select the value of the field from a predetermined\
    \ list."
  - name: EnvelopeCustomFields
    description: "The EnvelopeCustomFields resource provides methods that allow you\
    \ manage custom fields in an envelope. \n\nCustom fields can be used in the envelopes\
    \ for your account to record information about the envelope, help search for envelopes\
    \ and track information. The envelope custom fields are shown in the Envelope\
    \ Settings section when a user is creating an envelope in the DocuSign member\
    \ console. The envelope custom fields are not seen by the envelope recipients.\n\
    \nThere are two types of envelope custom fields:\n\n- `text`: Enables the sender\
    \ to enter the value for the field. \n- `list`: Enables the sender to select the\
    \ value of the field from a predetermined list.\n\nYou may assign up to three\
    \ envelope custom fields to an envelope. This limit does not include account (document)\
    \ custom fields."
  - name: EnvelopeDocumentFields
    description: "The EnvelopeDocumentFields resource provides methods that allow you\
    \ to manage custom fields on a document.\n\nYou can create custom versions of\
    \ standard fields that combine of field properties, such as font type or size,\
    \ or a validation setting. \n\nNote: Some advanced features and options are supported\
    \ only in certain DocuSign plans. Your account plan might not support some options\
    \ discussed in this help topic. For more information about which options are available\
    \ for your account, check your account plan or contact your Account Manager."
  - name: EnvelopeLocks
    description: |-
      The EnvelopeLocks resource provides methods that allow you to
      manage locks on an envelope.

      To prevent users from changing an envelope while another user is
      modifying it, you can lock the envelope and set the time until
      the lock expires.

      For example, you would use the following flow:

      1. Lock the envelope.
      2. Make changes to envelope.
      3. Delete the envelope lock and save the changes. If the envelope is based on a template that has a password, you must supply the template password to save the changes.

      **Note**: To use envelope locks, the user must have envelope locking capability enabled.
  - name: EnvelopeRecipients
    description: "The EnvelopeRecipients resource enables you manage the recipients\
    \ of an envelope. All recipient types share a set of [core parameters](#core-recipient-parameters),\
    \ but some recipient types have additional parameters. You specify the recipient\
    \ type using the `recipientType` parameter. The recipient types are as follows:\n\
    \n<br>\n\n| Recipient type | Description |\n| :--- | :--- |\n| [Agent](#agent-recipient)\
    \ | Agent recipients can add name and email information for recipients that appear\
    \ after the agent in routing order. |\n| [Carbon Copy](#carbon-copy-recipient)\
    \ | Carbon copy recipients get a copy of the envelope but don't need to sign,\
    \ initial, date, or add information to any of the documents. This type of recipient\
    \ can be used in any routing order. Carbon copy recipients receive their copy\
    \ of the envelope when the envelope reaches the recipient's order in the process\
    \ flow and when the envelope is completed. |\n| [Certified Delivery](#certified-delivery-recipient)\
    \ | Certified delivery recipients must receive the completed documents for the\
    \ envelope to be completed. However, they don't need to sign, initial, date, or\
    \ add information to any of the documents. |\n| [Editor](#editor-recipient) |\
    \ Editors have the same management and access rights for the envelope as the sender.\
    \ They can make changes to the envelope as if they were using the Advanced Correct\
    \ feature. This recipient can add name and email information, add or change the\
    \ routing order, set authentication options, and can edit signature/initial tabs\
    \ and data fields for the remaining recipients. The recipient must have a DocuSign\
    \ account to be an editor. |\n| [In-Person Signer](#in-person-signer-recipient)\
    \ | In-person signer recipients are DocuSign users who act as signing hosts in\
    \ the same physical location as the signer. |\n| [Intermediary](#intermediary-recipient)\
    \ | Intermediaries are recipients who can, but are not required to, add name and\
    \ email information for recipients at the same or subsequent level in the routing\
    \ order, unless subsequent agents, editors, or intermediaries are added. |\n|\
    \ [Seal](#seal-recipient) | Electronic seal recipients represent legal entities\
    \ rather than individuals. Organizations and governments can use electronic seals\
    \ to show evidence of origin and integrity of documents. |\n| [Signer](#signer-recipient)\
    \ | Signers are recipients who must sign, initial, date, or add data to form fields\
    \ on the documents in the envelope. |\n| [Witness](#witness-recipient) | Witnesses\
    \ are recipients whose signatures affirm that the identified signers have signed\
    \ the documents in the envelope. |\n\n<br>\n\nNot all recipients are are available\
    \ to all account types. Review your account plan to determine which recipient\
    \ types are available to you. All recipient types are available in the Demo environment.\n\
    \n\n## Core Recipient Parameters\n\nAll recipients, regardless of type, have the\
    \ same common core parameters. The following table contains the descriptions for\
    \ the core properties for all recipient types:\n\n<br>\n\n| Name | Required |\
    \ Schema Type | Description |\n| :--- | :--- | :--- | :--- |\n| email | Yes |\
    \ Email | Email of the recipient. Notification will be sent to this email id.<br/>Maximum\
    \ Length: 100 characters. |\n| name | Yes | String | Full legal name of the recipient.<br/>Maximum\
    \ Length: 100 characters.<br/><br/>**Note:** If you are creating an envelope with\
    \ DocuSign EU advanced signature enabled, ensure that recipient names do not contain\
    \ any of the following characters: **^ : \\ @ , + <** |\n| accessCode | No | String\
    \ | This optional element specifies the access code a recipient has to enter to\
    \ validate the identity.<br/>Maximum Length: 50 characters. |\n| addAccessCodeToEmail\
    \ | No | Boolean | This optional attribute indicates that the access code is added\
    \ to the email sent to the recipient; this nullifies the Security measure of Access\
    \ Code on the recipient. |\n| agentCanEditEmail | No | Boolean | When set to **true**,\
    \ the agent recipient associated with this recipient can change the recipient's\
    \ pre-populated email address. This element is only active if enabled for the\
    \ account. |\n| agentCanEditName | No | Boolean | When set to **true**, the agent\
    \ recipient associated with this recipient can change the recipient's pre-populated\
    \ name (`UserName`). This element is only active if enabled for the account. |\n\
    | clientUserId | No | String | This specifies whether the recipient is embedded\
    \ or remote.<br/><br/>If the `clientUserId` property is not null then the recipient\
    \ is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount`\
    \ or `SignerMustLoginToSign` property of the account settings is set to  **true**,\
    \ an error is generated on sending. Maximum length: 100 characters. |\n| embeddedRecipientStartURL\
    \ | No | String | This is a sender provided valid URL string for redirecting an\
    \ embedded recipient. When using this option, the embedded recipient still receives\
    \ an email from DocuSign, just as a remote recipient would, but when the document\
    \ link in the email is clicked the recipient is redirected, through DocuSign,\
    \ to this URL to complete their actions. When routing to the URL, it is up to\
    \ the sender's system (the server responding to the URL) to then request a recipient\
    \ token to launch a signing session.<br/><br/>If the value `SIGN_AT_DOCUSIGN`\
    \ is used for this node, the recipient is directed to an embedded signing or viewing\
    \ process directly at DocuSign. The signing or viewing action is initiated by\
    \ the DocuSign system and the transaction activity and Certificate of Completion\
    \ records will reflect this. In all other ways the process is identical to an\
    \ embedded signing or viewing operation that would be launched by any partner.<br/><br/>It\
    \ is important to remember that in a typical embedded workflow the authentication\
    \ of an embedded recipient is the responsibility of the sending application and\
    \ DocuSign expects that senders will follow their own process for establishing\
    \ the recipient's identity. In this workflow the recipient goes through the sending\
    \ application before the embedded signing or viewing process in initiated. However,\
    \ when the sending application sets  the `EmbeddedRecipientStartURL` property\
    \ to `SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or\
    \ viewing process bypassing the sending application and any authentication steps\
    \ the sending application would use. In this case, DocuSign recommends that one\
    \ of the normal DocuSign authentication features (Access Code, Phone Authentication,\
    \ SMS Authentication, etc.) be used to verify the identity of the recipient.<br/><br>If\
    \ the `clientUserId` property is NOT set and the `embeddedRecipientStartURL` property\
    \ is set, DocuSign ignores the redirect URL and launch the standard signing process\
    \ for the email recipient. Information can be appended to the `embeddedRecipientStartURL`\
    \ property using merge fields. The available merge fields items are: envelopeId,\
    \ recipientId, recipientName, recipientEmail, and customFields. The customFields\
    \ must be part of the recipient or envelope. The merge fields are enclosed in\
    \ double brackets.<br/><br/>_Example_:<br/>`http://senderHost/[[mergeField1]]/\
    \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` |\n| customFields | No\
    \ | customField |An optional array of strings that allows the sender to provide\
    \ custom data about the recipient. This information is returned in the envelope\
    \ status but otherwise not used by DocuSign. String `customField` properties have\
    \ a maximum length of 100 characters. |\n| emailNotification | No | emailNotification\
    \ | An optional complex type that has information for setting the language for\
    \ the recipient's email information. It is composed of three elements:<br/><br/>*emailBody*:\
    \ a string with the email message sent to the recipient.<br/>Maximum Length: 10000\
    \ characters.<br/><br/>*emailSubject*: a string with the subject of the email\
    \ sent to the recipient.<br/>Maximum Length: 100 characters.<br/><br/>*supportedLanguage*:\
    \ The simple type enumeration (two-letter code) for the language to use for the\
    \ standard email format and the signing view for the recipient. To retrieve the\
    \ possible values, use the [Accounts::listSupportedLanguages method][ListLang].<br/><br/>**Note**:\
    \ You can set the `emailNotification` property separately for each recipient.\
    \ If you set the value only for certain recipients, the other recipients will\
    \ inherit the this value from the top-level `emailSubject` and `emailBlurb`. \
    \ |\n| excludedDocuments | No | Array of Strings | Specifies the documents that\
    \ are not visible to this recipient. Document Visibility must be enabled for the\
    \ account and the enforceSignerVisibility property must be set to true for the\
    \ envelope to use this.<br/><br/>When the enforceSignerVisibility property is\
    \ set to **true**, documents with tabs can only be viewed by signers that have\
    \ a tab on that document. Recipients that have an administrative role (Agent,\
    \ Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon\
    \ Copies) can always see all the documents in an envelope, unless they are specifically\
    \ excluded using this setting when an envelope is sent. Documents that do not\
    \ have tabs are always visible to all recipients, unless they are specifically\
    \ excluded using this setting when an envelope is sent. |\n| idCheckConfigurationName\
    \ | No | String |Specifies authentication check by name. The names used here must\
    \ be the same as the authentication type names used by the account (these name\
    \ can also be found in the web console sending interface in the Identify list\
    \ for a recipient). This overrides any default authentication setting.<br/><br/>_Example_:<br/>\
    \ Your account has ID Check and SMS Authentication available and in the web console\
    \ Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check\
    \ in an envelope, the `idCheckConfigurationName` property must be  set to `ID\
    \ Check $`. To use SMS, it must be set to `SMS Auth $` and you must add phone\
    \ number information to the `smsAuthentication` node.|\n| iDCheckInformationInput\
    \ | No | IdCheckInformationInput | This complex element contains input information\
    \ related to a recipient ID check. It can include the following information.<br/><br/>*addressInformationInput*:\
    \ Used to set recipient address information and consists of:<br/><br/>*addressInformation*:\
    \ consists of six elements, with street2 and zipPlus4 being optional. The elements\
    \ are: street1, street2, city, state, zip, zipPlus4\\. The maximum number of characters\
    \ in each element are: street1/street2 = 150 characters, city = 50 characters,\
    \ state = 2 characters, and zip/zipPlus4 = 20 characters.<br/><br/>displayLevelCode:\
    \ Specifies the display level for the recipient. Values are: ReadOnly, Editable,\
    \ or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies\
    \ if the information needs to be returned in the response.<br/><br/>*dobInformationInput*:\
    \ Used to set recipient date of birth information and consists of:<br/><br/>*dateOfBirth*:\
    \ Specifies the recipient's date, month and year of birth.<br/><br/>*displayLevelCode*:\
    \ Specifies the display level for the recipient. Values are: ReadOnly, Editable,\
    \ or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies\
    \ if the information needs to be returned in the response.<br/><br/>*ssn4InformationInput*:\
    \ Used to set the last four digits of the recipient's SSN information and consists\
    \ of:<br/><br/>*ssn4*: Specifies the last four digits of the recipient's SSN.<br/><br/>*displayLevelCode*:\
    \ Specifies the display level for the recipient. Values are: ReadOnly, Editable,\
    \ or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies\
    \ if the information needs to be returned in the response.<br/><br/>*ssn9InformationInput*:\
    \ Used to set the recipient's SSN information. Note that the ssn9 information\
    \ can never be returned in the response. The ssn9 input consists of:<br/><br/><br/><br/>*ssn9*:\
    \ Specifies the recipient's SSN.<br/><br/>*displayLevelCode*: Specifies the display\
    \ level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. |\n\
    | inheritEmailNotificationConfiguration | No | Boolean | Optional element. If\
    \ true and the envelope recipient creates a DocuSign account after signing, the\
    \ Manage Account Email Notification settings are used as the default settings\
    \ for the recipient's account. |\n| note | No | String | A note that is unique\
    \ to this recipient. This note is sent to the recipient via the signing email.\
    \ The note displays in the signing UI near the upper left corner of the document\
    \ on the signing screen.<br/>Maximum Length: 1000 characters. |\n| phoneAuthentication\
    \ | No | RecipientPhoneAuthentication | Optional element. Contains the elements:\
    \ <br/><br/> *recipMayProvideNumber*:Boolean. When set to **true** thenrecipient\
    \ can use whatever phone number they choose to.<br/><br/> *senderProvidedNumbers*:\
    \ ArrayOfString. A list of phone numbers the recipient can use. <br/>\n| recipientId\
    \ | No | String | Unique for the recipient. It is used by the tab element to indicate\
    \ which recipient is to sign the Document. |\n| requireIdLookup | No | Boolean\
    \ | When set to **true**, the recipient is required to use the specified ID check\
    \ method (including Phone and SMS authentication) to validate their identity.\
    \ |\n| roleName | No* | String | Optional element. Specifies the role name associated\
    \ with the recipient.<br/><br/>This is required when working with template recipients.\
    \ |\n| routingOrder | Yes | String | This element specifies the routing order\
    \ of the recipient in the envelope. |\n| smsAuthentication | No | senderProvidedNumbers\
    \ | Optional element. Contains the element:<br/><br/>*senderProvidedNumbers*:\
    \ Array that contains a list of phone numbers the recipient can use for SMS text\
    \ authentication. |\n| templateAccessCodeRequired | No | Boolean | Optional element.\
    \ Used only when working with template recipients. When set to **true** and the\
    \ `TemplateLocked` parameter is set to **true**, the sender must enter an access\
    \ code. |\n| templateLocked | No | Boolean | Optional element. Used only when\
    \ working with template recipients. When set to **true**, the sender cannot change\
    \ any attributes of the recipient. |\n| templateRequired | No | Boolean | Optional\
    \ element. Used only when working with template recipients. When set to **true**,\
    \  the sender may not remove the recipient. |\n| identityVerification <a name=\"\
    toto\"></a> | No | identityVerification | Optional element. Specifies ID Verification\
    \ applied on an envelope by workflow ID. <br/>See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/accounts/identityverifications/list/)\
    \ method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/accounts/identityverifications/)\
    \ resource for more information on how to retrieve workflow IDs available for\
    \ an account. <br/>This can be used in addition to other [recipient authentication](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/auth/)\
    \ methods. <br/>Note that ID Verification and ID Check are two distinct methods.\
    \ ID Verification checks recipients' identity by verifying their ID while ID Check\
    \ relies on data available on public records (such as current and former address).\
    \ |\n\n<br>\n\n\n\n## Agent Recipient\n\nAn agent recipient can add name and email\
    \ information for recipients that appear after the agent in routing order.\n\n\
    In addition to the [core parameters](#core-recipient-parameters), this recipient\
    \ type has the following parameters:\n\n<br>\n\n| Name | Required | Schema Type\
    \ | Description |\n| :--- | :--- | :--- | :--- |\n| documentVisibility | No |\
    \ documentVisibility | A complex type that specifies which documents are visible\
    \ to this recipient. |\n\n<br>\n\n\n\n## Carbon Copy Recipient\n\nCarbon copy\
    \ recipients receive a copy of the envelope but don't need to sign, initial, date\
    \ or add information to any of the documents. You can place this type of recipient\
    \ in any routing order. Carbon copy recipients receive their copy of the envelope\
    \ when the envelope reaches the recipient's order in the process flow and when\
    \ the envelope is completed.\n\nIn addition to the [core parameters](#core-recipient-parameters),\
    \ this recipient type has the following parameters:\n\n<br>\n\n| Name | Required\
    \ | Schema Type | Description |\n| :--- | :--- | :--- | :--- |\n| documentVisibility\
    \ | No | documentVisibility | A complex type that specifies which documents are\
    \ visible to this recipient. |\n\n<br>\n\n\n\n## Certified Delivery Recipient\n\
    \nCertified delivery recipients must receive the completed documents for the envelope\
    \ to be completed. However, they don't need to sign, initial, date or add information\
    \ to any of the documents.\n\nIn addition to the [core parameters](#core-recipient-parameters),\
    \ this recipient type has the following parameters:\n\n<br>\n\n| Name | Required\
    \ | Schema Type | Description |\n| :--- | :--- | :--- | :--- |\n| documentVisibility\
    \ | No | documentVisibility | A complex type that specifies which documents are\
    \ visible to this recipient. |\n\n<br>\n\n\n\n## Editor Recipient\n\nEditors have\
    \ the same management and access rights for the envelope as the sender. They can\
    \ make changes to the envelope as if they were using the Advanced Correct feature.\
    \ This recipient can add name and email information, add or change the routing\
    \ order and set authentication options for the remaining recipients. Additionally,\
    \ this recipient can edit signature/initial tabs and data fields for the remaining\
    \ recipients. The recipient must have a DocuSign account to be an editor.\n\n\
    In addition to the [core parameters](#core-recipient-parameters), this recipient\
    \ type has the following parameters:\n\n<br>\n\n\n| Name | Required | Schema Type\
    \ | Description |\n| :--- | :--- | :--- | :--- |\n| documentVisibility | No |\
    \ documentVisibility | A complex type that specifies which documents are visible\
    \ to this recipient. |\n\n\n<br>\n\n\n## In-Person Signer Recipient\n\nAn in-person\
    \ recipient is a DocuSign user, acting as a Signing Host, who is in the same physical\
    \ location as the signer.\n\nThe following restrictions apply to using electronic\
    \ notary when sending documents:\n\n* Authentication methods are allowed for the\
    \ signer but not the notary.\n* The Sign On Paper, Document Markup, Field Markup\
    \ and Change Signer options cannot be used for the documents.\n* Tabs may be assigned\
    \ to the signer, but cannot be assigned to the notary.\n\nSee [eNotary Resources][enotary-resources]\
    \ in the DocuSign Support Center for more information about how the eNotary feature\
    \ works.\n\nIn addition to the [core parameters](#core-recipient-parameters),\
    \ this type adds the following parameters:\n\n<br>\n\n\n| Name \t| Required \t\
    | Schema Type \t| Description \t|\n|-----------------------\t|-----------------------------------------------------\t\
    |-------------\t|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\t\
    |\n| inPersonSigningType \t| No \t| String \t| Specifies whether the envelope\
    \ uses the eNotary feature. The accepted values are:<ul markdown=1><li>`inPersonSigner`\
    \ The envelope uses the normal in-person signing flow.</li><li>`notary`: The envelope\
    \ uses the eNotary signing flow.</li></ul> \t|\n| notaryHost \t| Yes, when `inPersonSigningType`\
    \ is `notary` \t| NotaryHost \t| Sets the information for the notary host for\
    \ the notary in person signing flow. The following information is required: <ul\
    \ markdown=1> <li>`recipientId`: A unique ID number for the notary signing host.\
    \ </li> <li>`name`: Specifies the notary's full legal name.</li> <li>`email`:\
    \ Specifies the notary's email address. </li> </ul> \t|\n| autoNavigation \t|\
    \ No \t| Boolean \t| Specifies whether auto navigation is set for the recipient.\
    \ \t|\n| defaultRecipient \t| No \t| Boolean \t| When set to **true**, this is\
    \ the default recipient for the envelope. This option is used when creating an\
    \ envelope from a template. \t|\n| documentVisibility | No | documentVisibility\
    \ | A complex type that specifies which documents are visible to this recipient.\
    \ |\n| hostName \t| Yes, when `inPersonSigningType` is `inPersonSigner` \t| String\
    \ \t| The name of the signing host. This is the DocuSign user that is hosting\
    \ the in-person signing session. \t|\n| hostEmail \t| Yes, when `inPersonSigningType`\
    \ is `inPersonSigner` \t| String \t| The email address of the signing host. This\
    \ is the DocuSign user that is hosting the in-person signing session. \t|\n| signerName\
    \ \t| Yes, when `inPersonSigningType` is `inPersonSigner` \t| String \t| The in-person\
    \ signer's full legal name. \t|\n| Name \t| Yes, when `inPersonSigningType` is\
    \ `notary` \t| String \t| The full legal name of the signer in an eNotary flow.\
    \ \t|\n| email \t| Yes, when `inPersonSigningType` is `notary` \t| String \t|\
    \ The signer's email address in an eNotary flow. \t|\n| recipientSuppliesTabs\
    \ \t| No \t| Boolean \t| Indicates whether the recipient supplies tabs in the\
    \ document. \t|\n| signatureInfo \t| No \t| String \t| Optional element only used\
    \ with the recipient types In Person Signers, Signers, and Witnesses.<br/><br/>Allows\
    \ the sender to pre-specify the signature name, signature initials, and signature\
    \ font used in the signature stamp for the recipient. \t|\n| signInEachLocation\
    \ \t| No \t| Boolean \t| When set to **true** and the feature is enabled in the\
    \ sender's account, the signing recipient is required to draw signatures and initials\
    \ at each signature/initial tab (instead of adopting a signature/initial style\
    \ or only drawing a signature/initial once). \t|\n| tabs \t| No \t| Tab \t| Optional\
    \ element only used with recipient types In Person Signers and Signers.<br/><br/>Specifies\
    \ the Tabs associated with the recipient. See the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)\
    \ for more information about tabs. \t|\n|  \t|  \t|  \t|  \t|\n\n\n<br>\n\n\n\n\
    ## Intermediary Recipient\n\nAn intermediary is a recipient who can, but is not\
    \ required to, add name and email information for recipients at the same or subsequent\
    \ level in the routing order, unless subsequent agents, editors or intermediaries\
    \ are added.\n\nIn addition to the [core parameters](#core-recipient-parameters),\
    \ this recipient type has the following parameters:\n\n<br>\n\n\n| Name | Required\
    \ | Schema Type | Description |\n| :--- | :--- | :--- | :--- |\n| documentVisibility\
    \ | No | documentVisibility | A complex type that specifies which documents are\
    \ visible to this recipient. |\n\n<br>\n\n\n\n## Seal Recipient\n\nAn electronic\
    \ seal recipient is a legal entity rather than an actual person. Electronic Seals\
    \ can be used by organizations and governments to show evidence of origin and\
    \ integrity of documents. Even though electronic seals can be represented by a\
    \ tab in a document, they do not require user interaction and apply automatically\
    \ in the order specified by the sender. The sender is therefore the person authorizing\
    \ usage of the electronic seal in the flow.\n\nElectronic seal recipients rely\
    \ on a subset of core properties, described as follows, plus the `recipientSignatureProviders`\
    \ parameter:\n\n\n<br>\n\n\n| Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\
    \ | Required&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\
    \ | Schema Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Description&nbsp;&nbsp;&nbsp;&nbsp;\
    \ |\n| :--- | :--- | :--- | :--- |\n| recipientId| Yes | String | Indicates the\
    \ unique ID of the applied electronic seal.<br/>|\n| routingOrder| No (default:\
    \ 1) | String | Specifies the routing order of the electronic seal in the envelope.\
    \ <br />The routing order assigned to your electronic seal cannot be shared with\
    \ another recipient. It is recommended that you set a routing order for your electronic\
    \ seals.. |\n| recipientSignatureProviders| Yes | String | Indicates which electronic\
    \ seal to apply on documents when creating an envelope. |\n\n\n<br>\n\n\n\nBy\
    \ default, Electronic Seals apply on all documents in an envelope. However, the\
    \ sealDocumentsWithTabsOnly property (see recipientSignatureProvider) allows you\
    \ to seal only documents that have signHere tabs set for the Electronic Seal recipients.\n\
    \n<br>\n\n\n\n## Signer Recipient\n\nA signer is a recipient who must sign, initial,\
    \ date, or add data to form fields on the documents in the envelope.\n\nIn addition\
    \ to the [core parameters](#core-recipient-parameters), this recipient type adds\
    \ the following parameters:\n\n<br>\n\n\n| Name | Required | Schema Type | Description\
    \ |\n| :--- | :--- | :--- | :--- |\n| autoNavigation | No | Boolean | Specifies\
    \ whether auto navigation is set for the recipient.|\n| defaultRecipient | No\
    \ | Boolean | When set to **true**, this is the default recipient for the envelope.\
    \ This option is used with the CreateEnvelopeFromTemplatesAndForms method. |\n\
    | documentVisibility | No | documentVisibility | A complex type that specifies\
    \ which documents are visible to this recipient. |\n| isBulkRecipient | No | Boolean\
    \ | Indicates whether the recipient is a bulk send recipient or not. |\n| recipientSuppliesTabs\
    \ | No | Boolean | Indicates whether the recipient supplies tabs in the document.\
    \ |\n| signInEachLocation | No | Boolean | When set to **true** and the feature\
    \ is enabled in the sender's account, the signing recipient is required to draw\
    \ signatures and initials at each signature/initial tab (instead of adopting a\
    \ signature/initial style or only drawing a signature/initial once). |\n| signatureInfo\
    \ | No | String | Optional element only used with recipient types In Person Signers,\
    \ Signers, and Witnesses.<br/><br/>Allows the sender to pre-specify the signature\
    \ name, signature initials, and signature font used in the signature stamp for\
    \ the recipient. |\n| signerEmail | No | String | Optional element. The email\
    \ address for an In-Person Signer recipient Type.<br/>Maximum Length: 100 characters.\
    \ |\n| signerName | Yes | String | Required element with recipient type In Person\
    \ Signers.<br/>Maximum Length: 100 characters.<br/><br/>The full legal name of\
    \ a signer for the envelope. |\n| tabs | No | Tab | Optional element only used\
    \ with recipient types In Person Signers and Signers.<br/><br/>Specifies the Tabs\
    \ associated with the recipient. See the the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/)\
    \  for more information about tabs. |\n\n<br>\n\n[enotary-resources]: https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources\n\
    \n\n## Witness Recipient\n\nA witness is a recipient whose signature affirms that\
    \ the identified signers have signed the documents in the envelope.\n\nIn addition\
    \ to the [core parameters](#core-recipient-parameters), this recipient type adds\
    \ the following parameters:\n\n<br>\n\n\n| Name | Required | Schema Type | Description\
    \ |\n| :--- | :--- | :--- | :--- |\n| autoNavigation | No | Boolean |\tSpecifies\
    \ whether auto navigation is set for the recipient. |\n| defaultRecipient | No\
    \ | Boolean | When set to **true**, this is the default recipient for the envelope.\
    \ This option is used when creating an envelope from a template. |\n| documentVisibility\
    \ | No | documentVisibility | A complex type that specifies which documents are\
    \ visible to this recipient. |\n| isBulkRecipient | No | Boolean | Indicates whether\
    \ the recipient is a bulk send recipient or not. |\n| recipientSignatureProviders\
    \ | Yes | String | Indicates which electronic seal to apply on documents when\
    \ creating an envelope. |\n| recipientSuppliesTabs | No | Boolean | Indicates\
    \ whether the recipient supplies tabs in the document. |\n| recipientType | Yes\
    \ | String | Indicates the recipient type. |\n|requireSignerCertificate | No |\
    \ Boolean | Indicates whether the envelope requires a signer certificate for this\
    \ recipient. |\n| requireSignOnPaper | No | Boolean | Specifies whether the signer\
    \ must print, sign, and upload or fax the signed documents to DocuSign. |\n| signatureInfo\
    \ | No | Boolean | Optional element only used with recipient types In Person Signers,\
    \ Signers, and Witnesses. Enables the sender to pre-specify the signature name,\
    \ signature initials, and signature font used in the signature stamp for the recipient.\
    \ |\n| signInEachLocation | No | Boolean | When set to **true** and the feature\
    \ is enabled in the sender's account, specifies that the signing recipient is\
    \ required to sign and initial at each signature/initial tab (instead of once).\
    \ |\n| signingGroupId | No | String | The id of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\
    \ |\n| signingGroupName | No | String | The display name for the signing group.\
    \ Maximum Length: 100 characters. |\n| signingGroupUsers | No | userInfo | A complex\
    \ type that contains information about the users in the signing group. |\n| witnessFor\
    \ | Yes | String | Indicates the person or party for whom the recipient is a witness.\
    \ |\n| witnessForGuid | Yes | String | GUID identifying the person or party for\
    \ whom the recipient is a witness. |\n\n\n[ListLang]: https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/listSupportedLanguages/\n"
  - name: EnvelopeRecipientTabs
    description: "The EnvelopeRecipientTabs resource provides methods that enable you\n\
    to add,\nupdate,\nand delete tabs\nfrom an envelope.\nTabs are associated with\
    \ a specific recipient\nin an envelope\nand are only used by the recipient types\n\
    In Person Signers and Signers.\n\n<!-- START doctoc generated TOC please keep\
    \ comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD\
    \ RE-RUN doctoc TO UPDATE -->\n**On this page**\n\n- [Tab Types](#tab-types)\n\
    - [View Tab](#view-tab)\n- [Requesting Payments](#requesting-payments)\n- [Using\
    \ Custom Tabs in Envelopes and Templates](#using-custom-tabs-in-envelopes-and-templates)\n\
    - [Anchoring Tabs](#anchoring-tabs)\n- [Automatically Populating Tabs](#automatically-populating-tabs)\n\
    \n<!-- END doctoc generated TOC please keep comment here to allow auto update\
    \ -->\n\n\n## Tab Types\n\nSome tabs enable values to be entered by the signer.\n\
    Those tabs' values can be preset either through the web browser\nor via the API.\
    \ Other tab types use information that is already\nrecognized by the DocuSign\
    \ platform.\nThese tabs cannot have their value updated on a per-tab basis\nby\
    \ the API or via the browser. In some cases, the info might be\nsettable using\
    \ a different technique.\nFor example, the Full name tab uses the signer's name,\n\
    which is set elsewhere in the request.\n\nHere is the list of tabs and whether\
    \ you can or cannot set their values in the tab definition:\n\n<br>\n\n| Tab Type\
    \                               | Description                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       |\n| :------------------------------------- |
    \ |\n| Approve (`approve`)                    | Allows the recipient to approve\
    \ documents without placing a signature or initials on the document. If the recipient\
    \ clicks the tab during the signing process, the recipient is considered to have\
    \ signed the document. No information is shown on the document of the approval,\
    \ but it is recorded as a signature in the envelope history. This value **can't**\
    \ be set.                                                                    \
    \                                                                            \
    \                                                                            \
    \                  |\n| Checkbox (`checkbox`)                  | Allows the recipient\
    \ to select a yes/no (on/off) option. This value can be set.                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              |\n| Company (`company`)      \
    \              | Displays the recipient's company name. This value **can't** be\
    \ set.                                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    |\n| Date Signed (`dateSigned`)             | Displays the date that the\
    \ recipient signed the document. This value **can't** be set.                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        |\n| Date (`date`)                  \
    \        | Allows the recipient to enter a date. Date tabs are one-line fields\
    \ that allow date information to be entered in any format. The tooltip for this\
    \ tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The\
    \ format entered by the signer is retained. If you need a particular date format\
    \ enforced, DocuSign recommends using a Text tab with a validation pattern and\
    \ a validation message to enforce the format. This value can be set.         \
    \                                                                            \
    \                                                                   |\n| Decline\
    \ (`decline`)                    | Allows the recipient the option of declining\
    \ an envelope. If the recipient clicks the tab during the signing process, the\
    \ envelope is voided. This value **can't** be set.                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     |\n| Email Address (`emailAddress`)         | Displays the\
    \ recipient's email as entered in the recipient information. This value **can't**\
    \ be set.                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  |\n| Email (`email`)      \
    \                  | Allows the recipient to enter an email address. This is a\
    \ one-line field that checks that a valid email address is entered. It uses the\
    \ same parameters as a Text tab, with the validation message and pattern set for\
    \ email information.<br><br>When getting information that includes this tab type,\
    \ the original value of the tab when the associated envelope was sent is included\
    \ in the response. This value can be set.                                    \
    \                                                                            \
    \                                                                        |\n|\
    \ Envelope ID (`envelopeId`)             | Displays the envelope ID. Recipients\
    \ cannot enter or change the information in this tab.  This value **can't** be\
    \ set.                                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             |\n| First Name (`firstName`)               | Displays\
    \ the recipient's first name. This tab takes the recipient's name as entered in\
    \ the recipient information, splits it into sections based on spaces and uses\
    \ the first section as the first name. This value **can't** be set.          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        |\n| Formula Tab (`formulaTab`)\
    \             | The value of a formula tab is calculated from the values of other\
    \ number or date tabs in the document. When the recipient completes the underlying\
    \ fields, the formula tab calculates and displays the result. This value can be\
    \ set.The `formula` property of the tab contains the references to the underlying\
    \ tabs. See [Calculated Fields] in the DocuSign Support Center to learn more about\
    \ formulas. If a formula tab contains a `paymentDetails` property, the tab is\
    \ considered a payment item. See [Requesting Payments Along with Signatures] in\
    \ the DocuSign Support Center to learn more about payments. |\n| Full Name (`fullName`)\
    \                 | Displays the recipient's full name. This value **can't** be\
    \ set.                                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       |\n| Initial Here (`initialHere`)           | Allows the recipient to\
    \ initial the document. May be optional. This value **can't** be set.        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           |\n| Last Name (`lastName`)      \
    \           | Displays the recipient's last name. This tab takes the recipient's\
    \ name as entered in the recipient information, splits it into sections based\
    \ on spaces and uses the last section as the last name. This value **can't** be\
    \ set.                                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                          |\n\
    | List (`list`)                          | This tab offers a list of options to\
    \ choose from. The `listItems` property is used to specify the selectable options.\
    \ This value can be set,                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         |\n| Notarize (`notarize`)                  | Place\
    \ this tab on a page to alert Notary recipients that they must take action. Only\
    \ one notarize tab can appear on a page. This value can be set.              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          |\n| Note (`note`)\
    \                          | Displays additional information, in the form of a\
    \ note, for the recipient. This value can be set.                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 |\n| Number (`number`)                      | Allows the recipient\
    \ to enter numbers and decimal (.) points. This value can be set.            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              |\n| Radio Group (`radioGroup`)\
    \             | This group tab is used to place radio buttons on a document. The\
    \ `radios` property is used to add and place the radio buttons associated with\
    \ the group. Only one radio button can be selected in a group. This value can\
    \ be set.                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \ |\n| Sign Here (`signHere`)                 | Allows the recipient to sign a\
    \ document. May be optional. This value **can't** be set. <br/>**Note**: `signHere`\
    \ tabs can also be used to add a visual representation for  an electronic seal\
    \ in a document.                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             |\n| Signer Attachment (`signerAttachment`) | Allows\
    \ the recipient to attach supporting documents to an envelope. This value **can't**\
    \ be set.                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      |\n| SSN (`ssn`)      \
    \                      | A one-line field that allows the recipient to enter a\
    \ Social Security Number. The SSN can be typed with or without dashes. It uses\
    \ the same parameters as a Text tab, with the validation message and pattern set\
    \ for SSN information.  This value can be set.                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         |\n| Text (`text`)                          | Allows the recipient to\
    \ enter any type of text. This value can be set.                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           |\n| Title (`title`)             \
    \           | Displays the recipient's title. This value **can't** be set.   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   |\n| View (`view`)                          | The View tab is used with the\
    \ Approve tab to handle supplemental documents. This value can be set.       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     |\n| Zip (`zip`)                       \
    \     | Allows the recipient to enter a ZIP code. The ZIP code can be five digits\
    \ or nine digits in the ZIP+4 format. The zip code can be typed with or without\
    \ dashes. It uses the same parameters as a Text tab, with the validation message\
    \ and pattern set for ZIP code information. This value can be set.           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                |\n\n\n[approve]:\t\
    \t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [checkbox]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [company]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [dateSigned]:\t\t    https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [date]:\t\t          https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [decline]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [emailAddress]:     https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [email]:\t\t        https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [envelopeId]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [firstName]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [formulaTab]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [fullName]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [initialHere]:\t  \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [lastName]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [list]:\t           \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [notarize]:         https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [note]:\t\t          https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [number]:\t\t        https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [radioGroup]:\t\t    https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [signHere]:\t      \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [ssn]:\t          \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [text]:\t          \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [title]:\t        \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [view]:\t\t          https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    [zip]:\t          \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types\n\
    \n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n\
    [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
    \n\n\n\n\n\n## View Tab\n\nThe View tab is used on supplemental documents.\nTo\
    \ learn more about using the View tab with\nsupplemental documents, see\n[Using\
    \ Supplemental Documents][usingsupdocs]\nin the [Sending Documents][sendenvelopes]\
    \ section of\nthe [Envelope: create][envelopecreate] method.\n\n[sendenvelopes]:\
    \  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/\n\
    [usingsupdocs]:   https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/supplemental/\n\
    [envelopecreate]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/\n\
    \n<br>\n\n| Name              | Required  | Type    | Description |\n| :---- \
    \            | :----     | :----   | :----       |\n| documentId        | Yes\
    \       | String  | The document ID number that the tab is placed on. This must\
    \ refer to an existing Document's ID attribute. |\n| pageNumber        | Yes \
    \      | String  | Must be set to 1. |\n| recipientId       | Yes       | String\
    \  | The recipient associated with the tab. Must refer to an existing recipient's\
    \ ID attribute. |\n| required          | No        | Boolean | If **true**, the\
    \ recipient is required to select the supplemental document View button during\
    \ signing. |\n| tabLabel          | No        | String  | The label used for the\
    \ tab.  If an empty string is provided for this, an empty sting is used. If no\
    \ value is provided, the tab type is used as the value. Maximum of 500 characters.\
    \ |\n| templateLocked    | No        | Boolean | Optional. Used only when working\
    \ with template tabs. If **true**, the attributes of the tab cannot be changed\
    \ by the sender. |\n| templateRequired  | No        | Boolean | Optional. Used\
    \ only when working with template tabs. If **true**, the tab cannot be removed\
    \ by the sender. |\n| xPosition         | Yes       | String  | Required, but\
    \ can be 0.  |\n| yPosition         | Yes       | String  | Required, but can\
    \ be 0. |\n\n\n## Requesting Payments\n\nThe Payments feature of the DocuSign\
    \ eSignature REST API\nlets you collect payments\nalong with signatures and other\
    \ information.\n\nTo send a request for payment\nand collect payments,\nyou need\
    \ a payment gateway account,\nwhich is the destination for the payments.\nCreate\
    \ a payment account\nwith a supported payment gateway,\nand then connect the payment\
    \ gateway account\nto your DocuSign account.\nTo learn how to connect a payment\
    \ gateway account\nto your DocuSign account\nsee [Managing Payment Gateways][paymentgateways]\n\
    in the DocuSign Support Center.\nYou must connect and manage payment gateway accounts\
    \ manually\nthrough the DocuSign Admin console\nand through your chosen payment\
    \ gateway.\nThere is no public API\nfor connecting payment gateway accounts\n\
    to DocuSign accounts\nor for managing payment gateway accounts.\n\nCurrently\n\
    [Stripe][stripe],\n[Braintree](https://www.braintreepayments.com/), and\n[Authorize.net](https://www.authorize.net/)\n\
    are the supported payment gateways.\n\n### How Payments Work\n\nTo make a request\
    \ for payment,\nuse a [`formulaTab`][formulatab]\nthat has a\n[`paymentDetails`][paymentdetails]\
    \ object.\nThis object includes\na list of [`paymentLineItem`][paymentlineitem]\
    \ objects.\nEach line item refers to a [`number`][numbertab] tab\nthat contains\
    \ the value of the each item.\nThe purpose of the line items\nis to transmit them\
    \ to the payment gateway\nas metadata, so that you can use the information\nin\
    \ the payment processor.\n\n**Note**: If the fileExtension parameter is not added\
    \ in an API call, only base64 converted pdf files will be accepted.\nAny attempt\
    \ to send a non pdf file without using fileExtension results in an error.\n\n\
    This is an example request for two books.\nEach book is specified in the `number`\
    \ tabs\nlabeled \"Hamlet\" and \"Tempest\".\nThe books are referenced as line\
    \ items\nby their tab labels\nwithin the `paymentDetails` object\nof a `formula`\
    \ tab.\nThe formula of the `formula` tab\nadd the values of the same two `number`\
    \ tabs.\n\n```json\n{\n  \"documents\": [\n    {\n      \"documentBase64\": \"\
    <base64-encoded PDF document>\",\n      \"documentId\": \"1\",\n      \"fileExtension\"\
    : \"pdf\",\n      \"name\": \"payment.pdf\"\n    }\n  ],\n  \"emailSubject\":\
    \ \"Order Some Books\",\n  \"recipients\": {\n    \"signers\": [\n      {\n  \
    \      \"email\": \"vreader@example.com\",\n        \"name\": \"Voracious Reader\"\
    ,\n        \"recipientId\": \"1\",\n        \"routingOrder\": \"1\",\n       \
    \ \"tabs\": {\n          . . .\n          \"numberTabs\": [\n            {\n \
    \             \"value\": \"10.00\",\n              \"width\": 78,\n          \
    \    \"required\": \"true\",\n              \"locked\": \"true\",\n          \
    \    \"tabLabel\": \"Hamlet\",\n              \"documentId\": \"1\",\n       \
    \       \"pageNumber\": \"1\",\n              \"xPosition\": \"323\",\n      \
    \        \"yPosition\": \"134\"\n            },\n            {\n             \
    \ \"value\": \"10.00\",\n              \"width\": 78,\n              \"required\"\
    : \"true\",\n              \"locked\": \"true\",\n              \"tabLabel\":\
    \ \"Tempest\",\n              \"documentId\": \"1\",\n              \"pageNumber\"\
    : \"1\",\n              \"xPosition\": \"323\",\n              \"yPosition\":\
    \ \"154\"\n            }\n          ],\n          \"formulaTabs\": [\n       \
    \     {\n              \"required\": \"true\",\n              \"formula\": \"\
    ([Hamlet] + [Tempest]) * 100\",\n              \"roundDecimalPlaces\": \"2\",\n\
    \              \"paymentDetails\": {\n                \"currencyCode\": \"USD\"\
    ,\n                \"lineItems\": [\n                  {\n                   \
    \ \"name\": \"Hamlet\",\n                    \"description\": \"The Danish Play\"\
    ,\n                    \"itemCode\": \"SHAK1\",\n                    \"amountReference\"\
    : \"Hamlet\"\n                  },\n                  {\n                    \"\
    name\": \"Othello\",\n                    \"description\": \"The one with Caliban\
    \ in it\",\n                    \"itemCode\": \"SHAK2\",\n                   \
    \ \"amountReference\": \"Tempest\"\n                  }\n                ],\n\
    \                \"gatewayAccountId\": \"e76668b4-xxxx-xxxx-xxxx-a208d659e490\"\
    \n              },\n              \"tabLabel\": \"Payment1\",\n              \"\
    documentId\": \"1\",\n              \"pageNumber\": \"1\",\n              \"xPosition\"\
    : 300,\n              \"yPosition\": 200\n            }\n          ]\n       \
    \ }\n      }\n    ]\n  },\n  \"status\": \"sent\"\n}\n```\n\nUse the\n[EnvelopeRecipients:\
    \ list][enveloperecipientslist] method\nto check the status of a payment.\nWhen\
    \ the payment is successful,\nthe `status` property of\nthe [`paymentDetails`][paymentdetails]\
    \ object\nis `payment_complete`.\n\n```json\n{\n  \"signers\": [\n    {\n    \
    \  \"tabs\": {\n        . . .\n        \"numberTabs\": [\n          {\n      \
    \      \"value\": \"10.00\",\n            \"tabLabel\": \"Hamlet\",\n        \
    \    \"documentId\": \"1\",\n            \"recipientId\": \"1\",\n           \
    \ \"pageNumber\": \"1\",\n            \"xPosition\": \"323\",\n            \"\
    yPosition\": \"134\",\n          },\n          {\n            \"value\": \"10.00\"\
    ,\n            \"tabLabel\": \"Tempest\",\n            \"documentId\": \"1\",\n\
    \            \"recipientId\": \"1\",\n            \"pageNumber\": \"1\",\n   \
    \       }\n        ],\n        \"formulaTabs\": [\n          {\n            \"\
    formula\": \"([Hamlet] + [Tempest]) * 100\",\n            \"roundDecimalPlaces\"\
    : \"2\",\n            \"paymentDetails\": {\n              \"status\": \"payment_complete\"\
    ,\n              \"currencyCode\": \"USD\",\n              \"lineItems\": [\n\
    \                {\n                  \"name\": \"Hamlet\",\n                \
    \  \"description\": \"The Danish Play\",\n                  \"itemCode\": \"SHAK1\"\
    ,\n                  \"amountReference\": \"Hamlet\"\n                },\n   \
    \             {\n                  \"name\": \"Tempest\",\n                  \"\
    description\": \"The one with Caliban in it\",\n                  \"itemCode\"\
    : \"SHAK2\",\n                  \"amountReference\": \"Tempest\"\n           \
    \     }\n              ],\n              \"gatewayAccountId\": \"e76668b4-xxxx-xxxx-xxxx-a208d659e490\"\
    \n            },\n            \"value\": \"20\",\n            \"required\": \"\
    true\",\n            \"locked\": \"false\",\n            \"tabLabel\": \"Payment1\"\
    ,\n            \"documentId\": \"1\",\n            \"recipientId\": \"1\",\n \
    \           \"pageNumber\": \"1\",\n          }\n        ]\n      },\n      \"\
    creationReason\": \"sender\",\n      \"email\": \"vreader@example.com\",\n   \
    \   \"name\": \"Voracious Reader\",\n      \"recipientId\": \"1\",\n      \"requireIdLookup\"\
    : \"false\",\n      \"status\": \"completed\",\n    }\n  ],\n  . . .\n}\n```\n\
    \n#### How to make a request for future payments\n\nUse the following steps to\
    \ make a request to collect a signer's payment method for future use:\n\n1. Add\
    \ a text tab with a descriptive `tabLabel` such as `FuturePayment`.\n2. In the\
    \ formula tab's `paymentDetails` object, add a `lineItem` object that references\
    \ the `tabLabel` from step 1.\n\n**Note**: Do not include this new `lineItem`\
    \ in formula calculations.\n\nThe following example builds on the previous code\
    \ block to also collect a payment method for future use:\n\n```\n{\n  \"documents\"\
    : [\n    {\n      \"documentBase64\": \"<base64-encoded PDF document>\",\n   \
    \   \"documentId\": \"1\",\n      \"fileExtension\": \"pdf\",\n      \"name\"\
    : \"payment.pdf\"\n    }\n  ],\n  \"emailSubject\": \"Order Some Books\",\n  \"\
    recipients\": {\n    \"signers\": [\n      {\n        \"email\": \"vreader@example.com\"\
    ,\n        \"name\": \"Voracious Reader\",\n        \"recipientId\": \"1\",\n\
    \        \"routingOrder\": \"1\",\n        \"tabs\": {\n          \"numberTabs\"\
    : [\n            {\n              \"value\": \"10.00\",\n              \"width\"\
    : 78,\n              \"required\": \"true\",\n              \"locked\": \"true\"\
    ,\n              \"tabLabel\": \"Hamlet\",\n              \"documentId\": \"1\"\
    ,\n              \"pageNumber\": \"1\",\n              \"xPosition\": \"323\"\
    ,\n              \"yPosition\": \"134\"\n            },\n            {\n     \
    \         \"value\": \"10.00\",\n              \"width\": 78,\n              \"\
    required\": \"true\",\n              \"locked\": \"true\",\n              \"tabLabel\"\
    : \"Tempest\",\n              \"documentId\": \"1\",\n              \"pageNumber\"\
    : \"1\",\n              \"xPosition\": \"323\",\n              \"yPosition\":\
    \ \"154\"\n            }\n          ],\n          \"textTabs\": [\n          \
    \  {\n              \"value\": \"\",\n              \"width\": 78,\n         \
    \     \"required\": \"true\",\n              \"locked\": \"true\",\n         \
    \     \"tabLabel\": \"FuturePayment\",\n              \"documentId\": \"1\",\n\
    \              \"pageNumber\": \"1\",\n              \"xPosition\": \"323\",\n\
    \              \"yPosition\": \"174\"\n            }\n          ],\n         \
    \ \"formulaTabs\": [\n            {\n              \"required\": \"true\",\n \
    \             \"formula\": \"([Hamlet] + [Tempest]) * 100\",\n              \"\
    roundDecimalPlaces\": \"2\",\n              \"paymentDetails\": {\n          \
    \      \"currencyCode\": \"USD\",\n                \"paymentOption\": \"save_and_authorize\"\
    ,\n                \"lineItems\": [\n                  {\n                   \
    \ \"name\": \"Hamlet\",\n                    \"description\": \"The Danish Play\"\
    ,\n                    \"itemCode\": \"SHAK1\",\n                    \"amountReference\"\
    : \"Hamlet\"\n                  },\n                  {\n                    \"\
    name\": \"Othello\",\n                    \"description\": \"The one with Caliban\
    \ in it\",\n                    \"itemCode\": \"SHAK2\",\n                   \
    \ \"amountReference\": \"Tempest\"\n                  },\n                  {\n\
    \                    \"name\": \"Request books\",\n                    \"description\"\
    : \"collect Payment method\",\n                    \"itemCode\": \"\",\n     \
    \               \"amountReference\": \"FuturePayment\"\n                  }\n\
    \                ],\n                \"gatewayAccountId\": \"e76668b4-xxxx-xxxx-xxxx-a208d659e490\"\
    \n              },\n              \"tabLabel\": \"Payment1\",\n              \"\
    documentId\": \"1\",\n              \"pageNumber\": \"1\",\n              \"xPosition\"\
    : 300,\n              \"yPosition\": 200\n            }\n          ]\n       \
    \ }\n      }\n    ]\n  },\n  \"status\": \"sent\"\n}\n```\n\n### Some Things to\
    \ Keep in Mind About Payments\n\n* An envelope is not completed until all payments\
    \ are completed.\n\n* If a DocuSign account Administrator\n  deletes a payment\
    \ gateway account connection\n  DocuSign cancels all in-process envelopes\n  that\
    \ reference the deleted payment gateway account.\n\n* If the sender voids an envelope,\n\
    \  all payment authorizations are canceled.\n\n* If a required recipient refuses\
    \ to sign,\n  all authorized payments are canceled.\n\n* If a required recipient's\
    \ payment fails authorization,\n  DocuSign attempts to recover\n  by sending the\
    \ recipient\n  notification about the failed payment authorization.\n  The recipient\
    \ has the opportunity\n  to correct the payment method information.\n\n* Each\
    \ recipient's payment is authorized separately.\n  Accounts are charged and payment\
    \ made\n  after all required tabs are completed,\n  and all payments in an envelope\
    \ for all recipients are authorized.\n\n* Refunds are not supported.\n  Conduct\
    \ refunds or payment changes\n  with the payment gateway separately from DocuSign.\n\
    \n* At this time, DocuSign does not charge a per-transaction fee.\n\n\n[enveloperecipientslist]:\
    \ https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients/list/\n\
    [formulatab]:             https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/\n\
    [ISO4217]:                https://en.wikipedia.org/wiki/ISO_4217\n[numbertab]:\
    \              https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/\n\
    [paymentgateways]:        https://support.docusign.com/en/guides/managing-payment-gateways\n\
    [paymentguide]:           https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
    [paymentlineitem]:        https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/\n\
    [paymentdetails]:         https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/\n\
    [stripe]:                 https://stripe.com/\n\n\n## Using Custom Tabs in Envelopes\
    \ and Templates\n\nCustom Tabs can be added to envelopes and templates\nby setting\
    \ the `customTabId` property\nwhen creating an envelope or template recipient\n\
    or when adding a new tab for an existing recipient.\nThe custom tab must be added\
    \ as the correct tab type.\nFor example if the custom tab type is text, it cannot\
    \ be used as a number tab.\n\nWhen the `customTabId` property is set,\nthe new\
    \ tab inherits all the custom tab properties.\nRequired information that is not\
    \ included in the custom tab,\nsuch as document ID and page ID, must be included\
    \ when adding the tab.\nIf the custom tab does not have anchor settings, the X\
    \ and Y positions must be included.\n\nAfter the tab is created,\nit is treated\
    \ as any other tab for updating or deleting.\n\n## Anchoring Tabs\n\nThe tab anchoring\
    \ option\nallows you to send documents for signature\nthat do not have a fixed\
    \ layout or format.\nIn these documents you might not know\nthe absolute location\
    \ of the tabs\nwhen you design your API client application because the tabs must\
    \ move with text.\nAs an alternative to sending X and Y coordinates for tabs,\n\
    the DocuSign Service can derive an anchor location for the tab\nby correlating\
    \ anchor information to data within the document.\n\nWhen the DocuSign Service\
    \ receives a request that contains tabs\nwith anchor information,\nit searches\
    \ the document for instances of the `anchorString` property.\nWhen found,\nit\
    \ places a tab of the specified type for the designated recipient.\nTab positions\
    \ are established by setting offsets for the tab.\n\nWhen you apply tabs to the\
    \ document,\nDocuSign does not remove or replace the text in the `anchorString`\
    \ property. You can hide codified anchors by using the same font color as the\
    \ background of the document. So the anchor can be used by DocuSign processes\
    \ and it will not be visible on the document.\n\nTo use an anchoring option:\n\
    \n1. Identify the location in the document by text string. You can use a pre-existing\
    \ text string or add a new one.\nFor best performance DocuSign recommends using\
    \ single word anchor strings when possible, especially when there are a large\
    \ number of pages in the envelope.\nFor example, you might want to add a Sign\
    \ Here tab to the \"Borrower's Signature\" lines in a document, but that phrase\
    \ might occur in places in the document where you don't want to tab to appear.\
    \ In this case, you could add the text \"BorrowerSignHere\" in white font color\
    \ (so that isn't visible in the document) to all the places you want Sign Here\
    \ tabs to appear and use \"BorrowerSignHere\" as the anchor string.\n1. Reference\
    \ the anchor through the `anchorString` property of the tab.\n1. Determine the\
    \ offset from the anchor string location to where the tab should be placed.\n\n\
    Setting a positive value in the `anchorXOffset` property moves the tab right on\
    \ the page and positive values in the  `anchorYoffset` prove moves the tab down\
    \ the page. The `anchorUnits` property specifies the units used for the offsets.\n\
    For Sign Here and Initial Here tabs the bottom-left of the anchor string is equivalent\
    \ to position (0,0), and the bottom-left of the tab graphic is placed relative\
    \ to that.\nFor all other tabs the bottom-left of the anchor string is equivalent\
    \ to position (0,0), and the top-left of the tab graphic is placed relative to\
    \ that.\nDocuSign does not currently provide tools to derive the offset values.\
    \ Determination of the proper offset will likely require some trial-and-error.\n\
    \n### Rules for working with anchor tags\n\nWhen anchor tabs are used, all documents\
    \ in the envelope are searched for the `anchorString` property.\n\n* You set the\
    \ text of the anchor string in the `anchorString` property. DocuSign tabs are\
    \ created for each instance of the `anchorString` property within the document,\
    \ so special care must be taken to establish unique anchor strings that do not\
    \ result in unintentional tabs.\n* You cannot use the same anchored tab for different\
    \ recipients for the same document.\n* The DocuSign system cannot search for text\
    \ that is embedded in an image when checking for anchor strings.\n* X or Y offsets\
    \ supplied for a tab apply to all instances of the tab in the document. To use\
    \ different offsets at different locations in the document for the same recipient,\
    \ create multiple, unique anchor tabs.\n* If the Y offset value of an anchor string\
    \ would force a tab outside of the page boundaries, the tag is placed at the page\
    \ boundary. If the X offset value places a tab outside of the page boundaries,\
    \ the error message `Invalid_User_Offset` is sent. The error message includes\
    \ the X offset that resulted in the error.\n* The system does not support an anchor\
    \ string embedded in the form of a PDF X-object in the document.\n* The system\
    \ does not re-flow the text that surrounds the anchor tabs. It is the responsibility\
    \ of the document author to provide sufficient white space to contain the potential\
    \ width of the ultimate tab value.\n\n### Tips and Tricks\n\nThe following are\
    \ tips for effective use of anchor tags:\n* In order to avoid unintentional conflicts\
    \ between text contained in an `anchorString` property and the text that naturally\
    \ exists in documents, establish a codified syntax for the anchor string text\
    \ that is unlikely to appear elsewhere in a document.\n* Develop an extensible\
    \ and consistent syntax that can be used across multiple document types.\n* Especially\
    \ for documents that have variable numbers of tabs or signers, author the source\
    \ document to include hidden anchor tabs for all potential signers/permutations.\
    \ Then, control the tabs that are actually placed by including/excluding the anchor\
    \ tabs in the request. This approach allows a single document to be used for all\
    \ use cases instead of maintaining separate documents for each scenario.\n\n##\
    \ Automatically Populating Tabs\n\nIf you want similar tab types\nto automatically\
    \ populate with the same data,\nyou must follow these guidelines:\n\n* Each `tabLabel`\
    \ entry must have the characters\n  `\\\\*` in front of the label.\n  If you omit\
    \ the `\\\\*` prefix,\n  only the first occurrence of the tab is populated.\n\n\
    \  When automatically populating tabs,\n  the `tabLabel` must not contain any\
    \ spaces.\n  In the JSON example below,\n  the Text tabs  properties `StudentLastName`\
    \ and `StudentFirstName`\n  will be auto-populated as specified (\"Doe\" and \"\
    John\")\n  each place they appear throughout the envelope.\n\n  ```\n  \"tabs\"\
    : {\n    \"textTabs\": [\n    {\n      \"tabLabel\": \"\\\\*StudentLastName\"\
    ,\n      \"value\": \"Doe\"\n    },\n    {\n      \"tabLabel\": \"\\\\*StudentFirstName\"\
    ,\n      \"value\": \"John\"\n    }]\n  }\n  ```\n\n* Note that `\\\\*` matches\
    \ _anything_.  If you were to add\n  another tab with the `tabLabel` set to `\\\
    \\*Name` to the\n  example above, it would end up matching the other two\n  labels\
    \ as well.\n\n* Each occurrence of the tab must have identical properties.\n\n\
    \  For example, suppose there are two Text tabs in a document,\n  each with `tabLabel`\
    \ set to `Name`.\n  If one tab has the `bold` property set to **true**,\n  and\
    \ the other has the `bold` property set to **false**,\n  only the first one will\
    \ be populated.\n  In order to automatically populate both occurrences\n  of the\
    \ `Name` Text tabs,\n  the `bold` property must be set to the same value for both\
    \ tabs.\n"
  - name: EnvelopeDocumentTabs
    description: The EnvelopeDocumentTabs resource provides methods that enable you
      to manage tabs in envelopes. For a complete list of options, see the following
      Properties section.
  - name: TemplateDocumentTabs
    description: The EnvelopeDocumentTabs resource provides methods that enable you
      to manage tabs in a template.
  - name: EnvelopeViews
    description: |-
      The `EnvelopeViews` resource provides methods that return URLs that you can embed into your application to provide access to the DocuSign UI.

      The following Envelope Views are available:

      -  Console View: The authentication view of the DocuSign UI.
      -  Correct View: The correction view of the DocuSign UI.
      -  Edit View: The editing view of the DocuSign UI.
         **Note**: This provides the same functionality as the sender view.
      -  Recipient View: The view the recipient sees in the DocuSign UI.
      -  Shared Recipient View: The view a user sees of a shared envelope in the DocuSign UI.
      -  Sender View: The sending view of the DocuSign UI.
  - name: AccountSealProviders
    description: ""
  - name: Accounts
    description: The Accounts resource provides methods that allow you to create, delete,
      and manage your accounts.
  - name: AccountSignatureProviders
    description: |-
      Standards-Based Signatures (SBS) is the label used to describe DocuSign's suite of signatures that comply with regional and industry regulations, such as the electronic IDentification, Authentication and trust Services (eIDAS) regulation in Europe.

      ## Feature Differences When Using Standards-Based Signatures

      Some DocuSign features are not compatible with Standards-Based Signatures, while others work somewhat differently. It's important to understand these key differences.

      ### DocuSign Features Not Compatible with SBS

      - Attachment by fax
      - Concatenation of signer attachments
      - Legacy digital signatures
      - Markup
      - Notary

      ### DocuSign Features That Change with SBS

      The following features work slightly differently with SBS:

      - **Advanced Correct**: After the first signature, adding or deleting a field is not allowed. This behavior occurs because SBS does not allow adding or removing form fields after a digital signature has already been applied to a PDF.
      - **Downloading Combined Envelopes**: A combined PDF is not digitally signed. This behavior occurs because concatenating digitally signed PDFs breaks the digital signatures on the PDFs.
      - **Freeform Signing**: After someone has signed, allows only signature and initials on free-form. This behavior occurs because if another signer has already signed the document, adding fields other than signature fields will break the existing digital signatures on the document.
      - **Watermarks**: All watermarks are added as PDF annotations. This behavior occurs because burning the watermark into the PDF will break the digital signatures on the document.
      - **Wet Signing**: Wet-signed documents are added as new documents to envelopes. This behavior results in the uploaded or faxed, physically signed document being added as a new document to the envelope. This new document gets only a platform seal.

      For more information, see [Standards Based Signatures](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
  - name: BillingPlans
    description: The Billing resource provides methods that allow you to manage the
      billing plans,associated with an account.
  - name: Invoices
    description: The Invoices resource provides methods that allow you to manage the
      invoices for an account.
  - name: Payments
    description: |-
      The Payments resource provides methods that allow you to manage payments for an account.

      These calls can only be used by users with account administrator privileges.
  - name: CloudStorage
    description: The CloudStorage resource provides methods that allow you to list files
      stored on your cloud storage provider.
  - name: CloudStorageProviders
    description: |-
      The following providers are supported:

      * Google Drive
      * Dropbox
      * Box
      * Evernote
      * OneDrive

      To use cloud storage files, you must first give DocuSign access to your cloud storage provider. You can disconnect authorized a cloud storage provider at any time.
  - name: ConnectConfigurations
    description: "The `ConnectConfigurations` resource enables you to configure the\
    \ DocuSign Connect service for your account.\n\nYou can use this resource to configure\
    \ account-level webhooks that send notifications about every envelope sent from\
    \ your account. You can set account-level webhooks to listen for events for envelopes\
    \ sent by a specific user on your account, by multiple specific users, or from\
    \ any of the users on your account. These events will be tracked, and can be delivered\
    \ to a listening application.\n\n**Note**: To use DocuSign Connect, it must be\
    \ enabled in your DocuSign account. It is not enabled by default.\n\n## Aggregated\
    \ Messages\n\nTo avoid duplicate simultaneous events, you can configure Connect\
    \ to aggregate similar events into a single delivery. By default, aggregation\
    \ is enabled on all Connect configurations. Similar or simultaneous events will\
    \ be aggregated so your listener doesn't receive extraneous messages. \n\nFor\
    \ example, when the final recipient signs an envelope,  the system delivers a\
    \ single, aggregated Connect event, rather than separate Recipient: complete and\
    \ Envelope: complete messages. This aggregation process ensures that you only\
    \ receive the minimal viable number of messages about an envelope's life cycle.\
    \ \n\n## Send Individual Messages\n\nWhen you enable Send Individual Messages\
    \ (SIM) mode on a Connect configuration, DocuSign will deliver notifications for\
    \ all envelope events individually. In contrast with aggregated messages, when\
    \ a final recipient completes an envelope, your listener will receive a single\
    \ Recipient: complete event followed by a single Envelope: complete event for\
    \ the final participating party on the agreement.  If you need more granular control\
    \ over event notifications, you can enable SIM mode in the Admin area of the RADmin\
    \ console. For more information about SIM mode, see [Using Connect's New Send\
    \ Individual Messages Feature](https://www.docusign.com/blog/dsdev-connect-send-individual-messages/).\n\
    \n**Note**: To create an envelope-level webhook instead of using account-level\
    \ webhooks, use the Envelopes::Create method and add an `eventNotification` object\
    \ to an envelope object."
  - name: ConnectEvents
    description: The ConnectEvents resource provides methods that allow you to read,
      delete, and republish the connect logs associated with an envelope.
  - name: CustomTabs
    description: |-
      The CustomTabs resource provides methods that allow you create and manage custom tabs based on the existing DocuSign tabs.

      You can create a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.

      Custom tabs can be created based on the  approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
  - name: RequestLogs
    description: "The RequestLogs resource provide methods that allow you to retrieve\
    \ and delete the API request log files.\n\nThe log files contain the API requests\
    \ associated with your integration. They can aid you in troubleshooting specific\
    \ issues within an integration, or if DocuSign Support requests an API trace log. "
  - name: Resources
    description: The Resources resource provides a method which retrieves the base resources
      that are available.
  - name: Services
    description: The Services resource provides a method that allow you to retrieve
      the available service versions.
  - name: EnvelopeConsumerDisclosures
    description: "The `EnvelopeConsumerDisclosures` resource provides methods that enable\
    \ you to retrieve the Electronic Record and Signature Disclosure (ERSD) for an\
    \ envelope recipient. This is the disclosure that displays to each new recipient\
    \ who is going to sign or add other information, or who is required to view the\
    \ documents you send to them. The recipient must read and agree to the terms of\
    \ the disclosure before they can access and take action on the documents you send.\
    \ The ERSD does not apply to copy-only recipients, but does apply to recipients\
    \ who must sign or view your documents.\n\nYou can retrieve either the default\
    \ ERSD that DocuSign provides for U.S.-based transactions, or a custom ERSD.\n\
    \n## Languages\n\nYou specify the language of the disclosure version that you\
    \ want to retrieve by using the `langCode` parameter.\n\n**Important**: The system\
    \ does not translate the ERSD for you. An account administrator must create a\
    \ version of the account-level disclosure for each language that your signers\
    \ use. \n\nFor more information, see [Legal Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure)."
  - name: EnvelopeDocuments
    description: |+
      <!-- resources aren't rendered the same way
           as other pages. This is a little hack to
           make the headings work better -->
      <style>
      h1, h2, h3 {
        margin-top: 1em;
      }
      </style>

      The EnvelopeDocuments resource provides methods
      that manage documents in an envelope.
      You can:
      * add one or more documents to the envelope
      * retrieve one or more documents from the envelope
      * delete documents from the envelope

      All of the methods in this resource
      operate on on an existing envelope.
      Before you can add documents
      to an envelope,
      you must first create it
      with the [Envelopes: create][envelopescreate] method.


      [envelopescreate]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/

  - name: EnvelopeEmailSettings
    description: |-
      The EnvelopeEmailSettings provide methods that allow you to manage the email override settings for an envelope.

      Email override settings change the reply to email address, name, or the BCC for email archive information, for the envelope. Note that changing email settings will only affect email communications that occur after the addition was made.

      The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options. To send a copy of the envelope to a recipient who does not need to sign, use a Carbon Copies or Certified Deliveries Recipient Type.
  - name: Envelopes
    description: "The Envelope resource provides methods that allow you to manipulate\
    \ and monitor envelopes. \n\nOnce you have authenticated the user you can use\
    \ the Envelopes: createEnvelope method to create an envelope. You can call the\
    \ EnvelopeDocuments: update or EnvelopeDocuments: updateList method to add additional\
    \ documents.\n\nSetting the `status` property on the envelope to `sent` allows\
    \ you to send it or `created` to save it as a draft.\n\nYou can receive envelope\
    \ event notifications by setting the `eventNotification` properties. When the\
    \ envelope or recipient status changes to one of the specified status codes, a\
    \ notification is sent to a URL that you specify.\n\nIf you have an envelope that\
    \ you have previously saved, you can modify the subject and message, send it,\
    \ void it, or place it in the purge queue using the Envelope: update method.\n\
    \nIn addition to receiving notifications you can monitor the status of the envelopes\
    \ using the following methods:\n* Envelope: getEnvelope - To get the status of\
    \ a envelope. \n* Envelope: listStatus - To get the envelope status for a set\
    \ of envelopes.\n* Envelope: listStatusChanges - To get status changes information\
    \ for one or more envelopes. \n\nIf you need to delete a page from a document\
    \ in an envelope, use the Envelope: deleteDocumentPage method.\n\nThe resource\
    \ also includes a number of methods that allow you to retrieve and set the initials\
    \ and signature for certain types of recipients on the document."
  - name: EnvelopeTemplates
    description: The EnvelopeTemplates resource provides methods that allow you to add
      and delete templates on envelopes and documents.
  - name: Folders
    description: The Folders resource provides methods that allow you to view contents
      of folders on the account and move envelopes between folders.
  - name: GroupBrands
    description: For the custom groups you define for your account, you can assign brands
      to specify the ones that group members can use. Group members can use the available
      brands when they send envelopes or create templates. For more information, see
      [Assign Brands to Groups](https://support.docusign.com/en/guides/ndse-admin-guide-assign-brands-to-groups).
  - name: Groups
    description: |-
      The Groups resource provides methods that allow you to manage groups for the account.

      Groups can be used to help manage users by associating users with a group. A group can be associated with a Permission Profile, which sets the user permissions for users in that group without having to set the `userSettings` property for each user. You are not required to set Permission Profiles for a group, but this makes it easier to manage user permissions for a large number of users. Groups can also be used with template sharing to limit user access to templates.
  - name: GroupUsers
    description: The GroupUsers resource provides methods that allow you to manage the
      users in a group.
  - name: SigningGroups
    description: "The SigningGroups resource provides methods that allow you manage\
    \ signing groups.\n\nSigning Groups allow you to create a group of people to which\
    \ an envelope is sent. Any member of that group can open an envelope and sign\
    \ the documents in the envelope with their own signature, even though a signature\
    \ field was not directly assigned to them. When the Signing Group option is used,\
    \ group members that open and sign the envelope are tracked in the envelope history\
    \ and certificate.\n\nWhen one group member opens the envelope, it is temporarily\
    \ locked and if other members try to open the envelope they will see a message\
    \ saying the envelope is currently opened. If the group member exits the envelope\
    \ without finishing the lock expires, allowing other group members to open and\
    \ complete the envelope.\n\nWhen the envelope is complete, all members of the\
    \ group will receive a completed notification and can access the completed envelope.\
    \ \nThe envelope history and Certificate of Completion will show that the envelope\
    \ was sent to a signing group and record which members viewed and signed the envelope.\n\
    \nAn account can have a maximum of 50 signing groups. Each signing group can have\
    \ a maximum of 50 group members.\n\nThe Signing Groups feature is only supported\
    \ in certain DocuSign Enterprise and System Automated Premium plans. Your account\
    \ might not support this option. To access this functionality, contact your Account\
    \ Manager or DocuSign Support (support@docusign.com) for assistance.\n\nFor more\
    \ information, see [Signing Groups](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups)."
  - name: SigningGroupUsers
    description: The SigningGroupUsers resource provides methods that allow you to manage
      users in Signing Groups.
  - name: TemplateRecipients
    description: |
      The TemplateRecipients resource allows you manage the recipients of an template.

      The exact parameters associated with a recipient depend on the recipient type. There are seven recipient types: Agents, Carbon Copies, Certified Deliveries, Editors, In Person Signers, Intermediaries, and Signers.

      Not all recipients are are available to all account types, review you account plan to determine which recipient types are available to you. If you are working in the Demo environment, all recipient types are available.

      Each recipient type is described below:

      [Agents](#agents): This recipient can add name and email information for recipients that appear after the recipient in routing order.

      [Carbon Copies](#carboncopies): Use this action if the recipient should get a copy of the template, but the recipient does not need to sign, initial, date or add information to any of the documents. This type of recipient can be placed in any order in the recipient list. The recipient receives a copy of the template when the template reaches the recipient's order in the process flow and when the template is completed.

      [Certified Deliveries](#certifiedDeliveries): Use this action if the recipient must receive the completed documents for the template to be completed, but the recipient does not need to sign, initial, date or add information to any of the documents.

      [Editors](#editors): This recipient has the same management and access rights for the template as the sender and can make changes to the template as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor.

      [In Person Signers](#inPerson): Use this action if the signer is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.

      [Intermediaries](#intermediaries): This recipient can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).

      [Signers](#signers): Use this action if your recipient must sign, initial, date or add data to form fields on the documents in the template.

      ### Core JSON Layout

      The following shows the core JSON layout for a recipient.

      ```
      "email": "email.name@company.com",
        "name": "recipient name",
        "accessCode": "",
        "addAccessCodeToEmail": false,
        "clientUserIs": null,
        "embeddedRecipientStartURL": "string",
        "customFields": {
          "sample string 1",
          "sample string 2"
        },
        "emailNotification"{
          "emailBody":"email text",
          "emailSubject":"Subject text",
          "supportedLanguage":"en",
        },
        "excludedDocuments": ["2", "4"],
        "idCheckConfigurationName": null,
        "idCheckInformationInput": {
          "addressInformationInput": {
            "addressInformation": {
              "street1": "sample string 1",
              "street2": "sample string 2",
              "city": "sample string 3",
              "state": "sample string 4",
              "zip": "sample string 5",
              "zipPlus4": "sample string 6"
            },
            "displayLevelCode": "sample string 1",
            "receiveInResponse": "sample string 2"
          },
          "dobInformationInput": {
            "dateOfBirth": "sample string 1",
            "displayLevelCode": "sample string 2",
            "receiveInResponse": "sample string 3"
          },
          "ssn4InformationInput": {
            "ssn4": "sample string 1",
            "displayLevelCode": "sample string 2",
            "receiveInResponse": "sample string 3"
          },
          "ssn9InformationInput": {
            "ssn9": "sample string 1",
            "displayLevelCode": "sample string 2"
          }
        },
        "inheritEmailNotificationConfiguration": false,
        "note": "",
        "phoneAuthentication": {
          "recipMayProvideNumber": "sample string 1",
          "validateRecipProvidedNumber": "sample string 2",
          "recordVoicePrint": "sample string 3",
          "senderProvidedNumbers": [
            "sample string 1",
            "sample string 2"
          ]
        },
        "recipientAttachment": null,
        "recipientCaptiveInfo": null,
        "recipientId": "1",
        "requireIdLookup": false,
        "roleName": "",
        "routingOrder": 1,
        "samlAuthentication": {
          "samlAssertionAttributes": [
            {
              "name": "string",
              "value": "string"
            },
            {
              "name": "string",
              "value": "string"
            }
          ]
        },
        "smsAuthentication": {
          "senderProvidedNumbers":[
            "sample string 1",
            "sample string 2"
          ]
        },
        "socialAuthentications": null,
        "templateAccessCodeRequired": false,
        "templateLocked": false,
        "templateRequired": false,
      ...
      ```

      ### Core Recipient Parameters

      The following table contains the descriptions for the core properties for a recipient.

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | email | Yes | Email | Email of the recipient. Notification will be sent to this email id.<br/>Maximum Length: 100 characters. |
      | name | Yes | String | Full legal name of the recipient.<br/>Maximum Length: 100 characters. |
      | accessCode | No | String | This optional element specifies the access code a recipient has to enter to validate the identity.<br/>Maximum Length: 50 characters. |
      | addAccessCodeToEmail | No | Boolean | This optional attribute indicates that the access code is added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient. |
      | clientUserId | No | String | This specifies whether the recipient is embedded or remote.<br/><br/>If the `clientUserId` property is not null then the recipient is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. |
      | embeddedRecipientStartURL | No | String | This is a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would, but when the document link in the email is clicked the recipient is redirected, through DocuSign, to this URL to complete their actions. When routing to the URL, it is up to the sender's system (the server responding to the URL) to then request a recipient token to launch a signing session.<br/><br/>If the value `SIGN_AT_DOCUSIGN` is used for this node, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that would be launched by any partner.<br/><br/>It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application and DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets  the `EmbeddedRecipientStartURL` property to `SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) be used to verify the identity of the recipient.<br/><br>If the `clientUserId` property is NOT set and the `embeddedRecipientStartURL` property is set, DocuSign ignores the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the `embeddedRecipientStartURL` property using merge fields. The available merge fields items are: templateId, recipientId, recipientName, recipientEmail, and customFields. The customFields must be part of the recipient or template. The merge fields are enclosed in double brackets.<br/><br/>_Example_:<br/>`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` |
      | customFields | No | customField |An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the template status but otherwise not used by DocuSign. String `customField` properties have a maximum length of 100 characters. |
      | emailNotification | No | emailNotification | An optional complex type that has information for setting the language for the recipient's email information. It is composed of three elements:<br/><br/>*emailBody*: a string with the email message sent to the recipient.<br/>Maximum Length: 10000 characters.<br/><br/>*emailSubject*: a string with the subject of the email sent to the recipient.<br/>Maximum Length: 100 characters.<br/><br/>*supportedLanguage*: The simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi).<br/><br/>**IMPORTANT**: If this is enabled for one recipient, it overrides the Template Subject and `EmailBlurb` property settings. Also, you must set the  `emailNotification` property for all recipients. |
      | excludedDocuments | No | Array of Strings | Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the enforceSignerVisibility property must be set to true for the template to use this.<br/><br/>When the enforceSignerVisibility property is set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an template, unless they are specifically excluded using this setting when an template is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an template is sent. |
      | idCheckConfigurationName | No | String |Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient). This overrides any default authentication setting.<br/><br/>_Example_:<br/> Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an template, the `idCheckConfigurationName` property must be  set to `ID Check $`. To use SMS, it must be set to `SMS Auth $` and you must add phone number information to the `smsAuthentication` node.|
      | iDCheckInformationInput | No | IdCheckInformationInput | This complex element contains input information related to a recipient ID check. It can include the following information.<br/><br/>*addressInformationInput*: Used to set recipient address information and consists of:<br/><br/>*addressInformation*: consists of six elements, with street2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4\. The maximum number of characters in each element are: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.<br/><br/>displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*dobInformationInput*: Used to set recipient date of birth information and consists of:<br/><br/>*dateOfBirth*: Specifies the recipient's date, month and year of birth.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*ssn4InformationInput*: Used to set the last four digits of the recipient's SSN information and consists of:<br/><br/>*ssn4*: Specifies the last four digits of the recipient's SSN.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*ssn9InformationInput*: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of:<br/><br/><br/><br/>*ssn9*: Specifies the recipient's SSN.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. |
      | inheritEmailNotificationConfiguration | No | Boolean | Optional element. If true and the template recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. |
      | note | No | String | A note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.<br/>Maximum Length: 1000 characters. |
      | phoneAuthentication | No | RecipientPhoneAuthentication | Optional element. Contains the elements: <br/><br/> *recipMayProvideNumber*:Boolean. When set to **true** thenrecipient can use whatever phone number they choose to.<br/><br/> *senderProvidedNumbers*: ArrayOfString. A list of phone numbers the recipient can use. <br/><br/>*recordVoicePrint* - Reserved <br/><br/>*validateRecipProvidedNumber* - Reserved| |
      | recipientAttachment | No | Attachment | Reserved |
      | recipientId | No | String | Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document. |
      | requireIdLookup | No | Boolean | When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. |
      | roleName | No* | String | Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients. |
      | routingOrder | Yes | String | This element specifies the routing order of the recipient in the template. |
      | samlAuthentication | No | samlAssertionAttributes | Optional element, account must be set up to use SSO to use this. Contains the name/value pair information for the SAML assertion attributes:<br/><br/>*name*: The name of the SAML assertion attribute.<br/><br/>*value*: The value associated with the named SAML assertion attribute. |
      | smsAuthentication | No | senderProvidedNumbers | Optional element. Contains the element:<br/><br/>*senderProvidedNumbers*: Array that contains a list of phone numbers the recipient can use for SMS text authentication. |
      | socialAuthentications | No | Boolean | Lists the social ID type that can be used for recipient authentication. |
      | templateAccessCodeRequired | No | Boolean | Optional element. Used only when working with template recipients. When set to **true** and the `TemplateLocked` parameter is set to **true**, the sender must enter an access code. |
      | templateLocked | No | Boolean | Optional element. Used only when working with template recipients. When set to **true**, the sender cannot change any attributes of the recipient. |
      | templateRequired | No | Boolean | Optional element. Used only when working with template recipients. When set to **true**,  the sender may not remove the recipient. |

      ## <a name="agents"></a> Agents Recipient

      This recipient can add name and email information for recipients that appear after the recipient in routing order.

      #### Example Agents layout

      ```
      "agents": [{
       <core parameters>
        "canEditRecipientEmails": false,
        "canEditRecipientNames": false
      }],
      ```

      The additional parameters for Agents recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | canEditRecipientEmails | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this Recipient can change the Recipient's pre-populated Email address. This element is only active if enabled for the account. |
      | canEditRecipientNames | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this recipient can change the recipient's pre-populated name (`UserName`). This element is only active if enabled for the account. |

      ## <a name="carbonCopies"></a>Carbon Copies Recipient

      Use this type if the recipient should get a copy of the template, but the recipient does not need to sign, initial, date, or add information to any of the documents. This type of recipient can be placed in any order in the recipient list. The recipient receives a copy of the template when the template reaches the recipient's order in the process flow and when the template is completed.

      #### Example Carbon Copies layout

      ```
      "carbonCopies": [{
       <core parameters>
      ```

      The Carbon Copies recipient uses only the core parameters.

      ## <a name="certifiedDeliveries"></a>Certified Deliveries Recipient

      Use this action if the recipient must receive the completed documents for the template to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.

      #### Example Certified Deliveries layout

      ```
      "certifiedDeliveries": [{
      <core parameters>
      }],
      ```
      The Certified Deliveries recipient uses only the core parameters.

      ## <a name="editors"></a>Editors Recipient

      This recipient has the same management and access rights for the template as the sender and can make changes to the template as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor.

      #### Example Editors layout

      ```
      "editors": [{
       <core parameters>
        "canEditRecipientEmails": false,
        "canEditRecipientNames": false
      }],
      ```

      The additional parameters for Editors recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | canEditRecipientEmails | No | Boolean | Optional element. When set to **true**, the Editors Recipient associated with this Recipient can change the Recipient's pre-populated Email address. This element is only active if enabled for the account. |
      | canEditRecipientNames | No | Boolean | Optional element. When set to **true**, the Editors Recipient associated with this recipient can change the recipient's pre-populated name (`UserName`). This element is only active if enabled for the account. |

      ## <a name="inPerson"></a>In Person Signers Recipient

      Use this type if the signer is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.

      #### Example In Person Signers layout

      ```
      "inPersonSigners": [{
        "hostEmail": "signing.host@company.com",
        "hostName": "Mike Host",
       <core parameters>
        "autoNavigation": false,
        "defaultRecipient": false,
        "signInEachLocation": false,
        "signatureInfo": null,
        "signerEmail": "signer.name@company.com",
        "signerName": "MC Clap Your Hands",
        "tabs": {
          "approveTabs": null,
          "checkboxTabs": null,
          "companyTabs": null,
          "dateSignedTabs": null,
          "dateTabs": null,
          "declineTabs": null,
          "emailTabs": null,
          "templateIdTabs": null,
          "fullNameTabs": null,
          "initialHereTabs": null,
          "listTabs": null,
          "noteTabs": null,
          "numberTabs": null,
          "radioGroupTabs": null,
          "signHereTabs": [{
          "signerAttachmentTabs": null,
          "ssnTabs": null,
          "textTabs": null,
          "titleTabs": null,
          "zipTabs": null
        }
      }],
      ```

      The additional and changed parameters for In Person Signers recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | hostEmail | Yes | Email | Required element for In Person Signers recipient Type.<br/>Maximum Length: 100 characters.<br/><br/>Specifies the email for the signing host. |
      | hostName | Yes | String | Required element for In Person Signers recipient Type.<br/>Maximum Length: 100 characters.<br/><br/>Specifies the email for the signing host.|
      | autoNavigation | No | Boolean | Specifies whether auto navigation is set for the recipient.|
      | defaultRecipient | No | Boolean | When set to **true**, this is the default recipient for the template. This option is used with the CreateTemplateFromTemplatesAndForms method. |
      | signInEachLocation | No | Boolean | When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once). |
      | signatureInfo | No | String | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Allows the sender to pre-specify the signature name, signature initials, and signature font used in the signature stamp for the recipient. |
      | signerEmail | No | String | Optional element. The email address for an InPersonSigner recipient Type.<br/>Maximum Length: 100 characters. |
      | signerName | Yes | String | Required element with recipient type In Person Signers.<br/>Maximum Length: 100 characters.<br/><br/>The full legal name of a signer for the template. |
      | tabs | No | Tab | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Specifies the Tabs associated with the recipient. See the See the the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/)  for more information about tabs. for more information about tabs. |

      ## <a name="intermediaries"></a>Intermediaries Recipient

      This recipient can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).

      #### Example Intermediaries layout

      ```
      "intermediaries": [{
      <core parameters>
        "canEditRecipientEmails": false,
        "canEditRecipientNames": false
      }],
      ```

      The parameters for Intermediaries recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | canEditRecipientEmails | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this Recipient can change the Recipient's pre-populated Email address. This element is only active if enabled for the account. |
      | canEditRecipientNames | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this recipient can change the recipient's pre-populated name (`UserName`). This element is only active if enabled for the account. |

      ## <a name="signers"></a>Signers Recipient

      Use this action if your recipient must sign, initial, date, or add data to form fields on the documents in the template.

      #### Example Signers layout

      ```
      "Signers": [{
      <core paramters>
        "autoNavigation": false,
        "defaultRecipient": false,
        "signInEachLocation": false,
        "signatureInfo": null,
        "tabs": {
          "approveTabs": null,
          "checkboxTabs": null,
          "companyTabs": null,
          "dateSignedTabs": null,
          "dateTabs": null,
          "declineTabs": null,
          "emailTabs": null,
          "templateIdTabs": null,
          "fullNameTabs": null,
          "initialHereTabs": null,
          "listTabs": null,
          "noteTabs": null,
          "numberTabs": null,
          "radioGroupTabs": null,
          "signHereTabs": [{
          "signerAttachmentTabs": null,
          "ssnTabs": null,
          "textTabs": null,
          "titleTabs": null,
          "zipTabs": null
        }
        "deliveryMethod":"",
        "deliveredDateTime":"String Content",
        "signedDateTime":"String Content",
        "offlineAttributes":{
          "deviceName":"String Content",
          "deviceModel":"String Content",
          "gpsLatitude":"String Content",
          "gpsLongitude":"String Content",
          "accountEsignId":"String Content"
        }
      }],
      ```

      The additional parameters for Signers recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | autoNavigation | No | Boolean | Specifies whether auto navigation is set for the recipient.|
      | defaultRecipient | No | Boolean | When set to **true**, this is the default recipient for the template. This option is used with the CreateTemplateFromTemplatesAndForms method. |
      | signInEachLocation | No | Boolean | When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once). |
      | signatureInfo | No | String | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Allows the sender to pre-specify the signature name, signature initials, and signature font used in the signature stamp for the recipient. |
      | signerEmail | No | String | Optional element. The email address for an InPersonSigner recipient Type.<br/>Maximum Length: 100 characters. |
      | signerName | Yes | String | Required element with recipient type In Person Signers.<br/>Maximum Length: 100 characters.<br/><br/>The full legal name of a signer for the template. |
      | tabs | No | Tab | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Specifies the Tabs associated with the recipient. See the See the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/)  for more information about tabs. section for more information about tabs. |
      | deliveryMethod | No | String | Reserved: For DocuSign use only.|
      | deliveredDateTime | No | DateTime | Reserved: For DocuSign use only. |
      | signedDateTime | No | DateTime | Reserved: For DocuSign use only. |
      | offlineAttributes | No | &nbsp; | Reserved: For DocuSign use only.|
  - name: TemplateBulkRecipients
    description: "The TemplateBulkRecipients resource provide methods that allow you\
    \ manage the bulk recipient file for an template.\n\nThe bulk recipient CSV (Comma\
    \ Separated Value) file contains the list of recipient names and email addresses\
    \ that you can add to an template to send the same document to a large number\
    \ of recipients.\n \nThe required and optional information that can be included\
    \ the file is described in the BulkEnvelope: updateRecipients method"
  - name: TemplateCustomFields
    description: "The TemplateCustomFields resource provides methods that allow you\
    \ manage custom fields in an template. \n\nCustom fields can be used in the templates\
    \ for your account to record information about the template, help search for templates\
    \ and track information. The template custom fields are shown in the Template\
    \ Settings section when a user is creating an template in the DocuSign member\
    \ console. The template custom fields are not seen by the template recipients.\n\
    \nThere are two types of custom fields:\n\n- `text`: Enables the sender to enter\
    \ the value for the field. \n- `list`: Enables the sender to select the value\
    \ of the field from a predetermined list."
  - name: TemplateDocumentFields
    description: "The TemplateDocumentFields resource provides methods that allow you\
    \ to manage custom fields on a document.\n\nYou can create custom versions of\
    \ standard fields that combine of field properties, such as font type or size,\
    \ or a validation setting. \n\nNote: Some advanced features and options are supported\
    \ only in certain DocuSign plans. Your account plan might not support some options\
    \ discussed in this help topic. For more information about which options are available\
    \ for your account, check your account plan or contact your Account Manager."
  - name: TemplateDocuments
    description: |
      <!-- resources aren't rendered the same way
           as other pages. This is a little hack to
           make the headings work better -->
      <style>
      h1, h2, h3 {
        margin-top: 1em;
      }
      </style>

      The TemplateDocuments resource provides methods
      that manage documents in a template.
      You can:
      * Add one or more documents to the template
      * Retrieve one or more documents from the template
      * Delete documents from the template

      All of the methods associated with this resource
      operate on an existing template.
      Before you can add documents
      to a template,
      you must first create it
      with the [Templates:: Create][templatescreate] method.

      [templatescreate]: https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create/
  - name: TemplateLocks
    description: |-
      The TemplateLocks resource provides methods that allow you to
      manage locks on a template.

      To prevent users from changing a template while another user is
      modifying it, you can lock the template and set the time until
      the lock expires.

      For example, you would use the following flow:

      1. Lock the template.
      2. Make changes to template.
      3. Delete the template lock and save the changes. If the template has a password, you must supply the template password to save the changes.

      **Note**: To use template locks, the user must have envelope locking capability enabled.
  - name: Templates
    description: "The Template resource provides methods that allow you to manipulate\
    \ and monitor templates. \n\nOnce you have authenticated the user you can use\
    \ the Templates: createTemplate method to create a template. You can call the\
    \ TemplateDocuments: update or TemplateDocuments: updateList method to add more\
    \ documents.\n\nIf you have a template that you have previously saved, you can\
    \ modify the subject and message, send it, void it, or purge it from the DocuSign\
    \ system using the Template: update method.\n\nIn addition to receiving notifications,\
    \ you can monitor the status of the templates using the following methods:\n\n\
    * Template: getTemplate - Gets the status of a template. \n* Template: listStatus\
    \ - Gets the status for a set of templates.\n* Template: listStatusChanges - Gets\
    \ status change information for one or more templates. \n\nIf you need to delete\
    \ a page from a document in a template, use the Template: deleteDocumentPage method.\n\
    \nThe resource also includes a number of methods that allow you to retrieve and\
    \ set the initials and signature for certain types of recipients on the document."
  - name: TemplateRecipientTabs
    description: "<!-- resources aren't rendered the same way\n     as other pages.\
    \ This is a little hack to\n     make the headings work better -->\n<style>\n\
    h1, h2, h3 {\n  margin-top: 1em;\n}\n</style>\n\nThe TemplateRecipientTabs resource\
    \ provides methods that let you\nadd,\nupdate,\nand delete tabs\nfrom an envelope.\n\
    Tabs are associated with a specific recipient\nin an envelope\nand are only used\
    \ by the recipient types\nIn Person Signers and Signers. \n\n\n## Tab Types\n\n\
    This table lists the available tab types.\n\n<br>\n\n\n| Tab Type            \
    \  | Description |\n| :-------              | :---------- |\n| Approve Tab   \
    \        | Place this tab on the document if you want the recipient to approve\
    \ documents in an envelope without placing a signature or initials on the document.\
    \ If the recipient clicks the Approve tab during the signing process, the recipient\
    \ is considered to have signed the document. No information is shown on the document\
    \ for the approval, but it is recorded as a signature in the envelope history.\
    \ |\n| Checkbox Tab          | Place this tab on the document in a location where\
    \ the recipient can select a yes/no (on/off) type option. |\n| Company Tab   \
    \        | Place this tab on the document where you want the recipient's company\
    \ name to appear. |\n| Date Signed Tab       | Place this tab on the document\
    \ where you want the date the recipient signed the document to appear. |\n| Date\
    \ Tab              | Place this tab on the document where you want the recipient\
    \ to enter a date. Date tabs are single-line fields that allow date information\
    \ to be entered in any format. The tooltip for this tab recommends entering the\
    \ date as MM/DD/YYYY, but this is not enforced. The format entered by the signer\
    \ is retained. If you need a particular date format enforced, DocuSign recommends\
    \ using a Text tab with a Validation Pattern and Validation Message to enforce\
    \ the format. |\n| Decline Tab           | Place this tab on the document where\
    \ you want to give the recipient the option of declining an envelope. If the recipient\
    \ clicks the Decline tab during the signing process, the envelope is voided. |\n\
    | Email Address Tab     | Place this tab on a document where you want the recipient's\
    \ email, as entered in the recipient information, to appear. |\n| Email Tab  \
    \           | This is a single-line field that accepts all characters. |\n| Envelope\
    \ ID Tab       | Place this tab on the document where you want the envelope ID\
    \ for to appear. Recipients cannot enter or change the information in this tab.\
    \ It is for informational purposes only. |\n| First Name Tab        | Place this\
    \ tab on a document where you want the recipient's first name to appear. This\
    \ tab splits the recipient's name (as entered in the recipient information) into\
    \ sections based on spaces and uses the first section as the first name. |\n|\
    \ Formula Tab           | This tab is used to add a calculated field to a document.\
    \ Envelope recipients cannot directly enter information into the tab. The formula\
    \ tab calculates and displays a new value when changes are made to the reference\
    \ tab values. The reference tab information and calculation operations are entered\
    \ in the \"formula\" element. See the Using the Calculated Fields Feature quick\
    \ start guide or DocuSign Service User Guide for more information about formulas.\
    \  |\n| Full Name Tab         | Place this tab on the document where you want\
    \ the recipient's full name to appear. |\n| Initial Here Tab      | Place this\
    \ tab where the recipient must initial the document. This tab can be set to be\
    \ optional.  |\n| Last Name Tab         | Place this tab on a document where you\
    \ want the recipient's last name to appear. This tab splits the recipient's name\
    \ (as entered in the recipient information) into sections based on spaces and\
    \ uses the last section as the last name. |\n| List Tab              | This tab\
    \ has a list of options that a recipient can select. The `listItems` parameter\
    \ is used to set the options that can be selected.  |\n| Note Tab            \
    \  | Place this tab on the document where you want to add a note for the recipient\
    \ on a document. |\n| Number Tab            | This tab is a field where the recipient\
    \ can enter numbers and decimal (.) points.  |\n| Radio Group Tab       | This\
    \ group tab is used to place radio buttons on a document. The `radios` parameter\
    \ is used to add and place the radio buttons associated with the group. Only one\
    \ radio button can be selected in a group.  |\n| Sign Here Tab         | Place\
    \ this tab where the recipient must sign the document. This tab can be set to\
    \ be optional.  |\n| Signer Attachment Tab | The signer attachment is where the\
    \ recipient initiates the process of adding supporting documents to an envelope.\
    \ |\n| SSN Tab               | This tab is a single-line field where the recipient\
    \ can enter numbers. A Social Security Number can be typed with or without dashes.\
    \ |\n| Text Tab              | This tab is a field where the recipient can enter\
    \ any type of characters.  |\n| Title Tab             | Place this tab on the\
    \ document where you want the recipient's title to appear. |\n| Zip Tab      \
    \         | This tab is a single-line field where the recipient can enter numbers.\
    \ |\n\n\n## Using Custom Tabs in Envelopes and Templates \n\nCustom Tabs can be\
    \ added to envelopes and templates\nby setting the `customTabId` property\nwhen\
    \ creating an envelope or template recipient\nor when adding a new tab for an\
    \ existing recipient.\nThe custom tab must be added as the correct tab type.\n\
    For example if the custom tab type is text, it cannot be used as a number tab.\n\
    \nWhen the `customTabId` property is set,\nthe new tab inherits all the custom\
    \ tab properties.\nRequired information that is not included in the custom tab,\n\
    such as document ID and page ID, must be included when adding the tab.\nIf the\
    \ custom tab does not have anchor settings, the X and Y positions must be included.\n\
    \nAfter the tab is created,\nit is treated as any other tab for updating or deleting.\
    \ \n\n## Anchoring Tabs\n\nThe tab anchoring option\nallows you to send documents\
    \ for signature\nthat do not have a fixed layout or format.\nIn these documents\
    \ you might not know\nthe absolute location of the tabs\nwhen you design your\
    \ API client application because the tabs must move with text.\nAs an alternative\
    \ to sending X and Y coordinates for tabs,\nthe DocuSign Service can derive an\
    \ anchor location for the tab\nby correlating anchor information to data within\
    \ the document.\n\nWhen the DocuSign Service receives a request that contains\
    \ tabs\nwith anchor information,\nit searches the document for instances of the\
    \ `anchorString` property.\nWhen found,\nit places a tab of the specified type\
    \ for the designated recipient.\nTab positions are established by setting offsets\
    \ for the tab.\n\nWhen you apply tabs to the document,\nDocuSign does not remove\
    \ or replace the text in the `anchorString` property. You can hide codified anchors\
    \ by using the same font color as the background of the document. So the anchor\
    \ can be used by DocuSign processes and it will not be visible on the document.\n\
    \nTo use an anchoring option:\n\n1. Identify the location in the document by text\
    \ string. You can use a pre-existing text string or add a new one.\nFor best performance\
    \ DocuSign recommends using single word anchor strings when possible, especially\
    \ when there are a large number of pages in the envelope. \nFor example, you might\
    \ want to add a Sign Here tab to the \"Borrower's Signature\" lines in a document,\
    \ but that phrase might occur in places in the document where you don't want to\
    \ tab to appear. In this case, you could add the text \"BorrowerSignHere\" in\
    \ white font color (so that isn't visible in the document) to all the places you\
    \ want Sign Here tabs to appear and use \"BorrowerSignHere\" as the anchor string.\
    \ \n1. Reference the anchor through the `anchorString` property of the tab.\n\
    1. Determine the offset from the anchor string location to where the tab should\
    \ be placed. \n\nSetting a positive value in the `anchorXOffset` property moves\
    \ the tab right on the page and positive values in the  `anchorYoffset` prove\
    \ moves the tab down the page. The `anchorUnits` property specifies the units\
    \ used for the offsets.\nFor Sign Here and Initial Here tabs the bottom-left of\
    \ the anchor string is equivalent to position (0,0), and the bottom-left of the\
    \ tab graphic is placed relative to that.\nFor all other tabs the bottom-left\
    \ of the anchor string is equivalent to position (0,0), and the top-left of the\
    \ tab graphic is placed relative to that.\nDocuSign does not currently provide\
    \ tools to derive the offset values. Determination of the proper offset will likely\
    \ require some trial-and-error.\n\n### Rules for working with anchor tags\n\n\
    When anchor tabs are used, all documents in the envelope are searched for the\
    \ `anchorString` property.\n\n* You set the text of the anchor string in the `anchorString`\
    \ property. DocuSign tabs are created for each instance of the `anchorString`\
    \ property within the document, so special care must be taken to establish unique\
    \ anchor strings that do not result in unintentional tabs.\n* You cannot use the\
    \ same anchored tab for different recipients for the same document.\n* The DocuSign\
    \ system cannot search for text that is embedded in an image when checking for\
    \ anchor strings.\n* X or Y offsets supplied for a tab apply to all instances\
    \ of the tab in the document. To use different offsets at different locations\
    \ in the document for the same recipient, create multiple, unique anchor tabs.\n\
    * If the Y offset value of an anchor string would force a tab outside of the page\
    \ boundaries, the tag is placed at the page boundary. If the X offset value places\
    \ a tab outside of the page boundaries, the error message `Invalid_User_Offset`\
    \ is sent. The error message includes the X offset that resulted in the error.\n\
    * The system does not support an anchor string embedded in the form of a PDF X-object\
    \ in the document.\n* The system does not re-flow the text that surrounds the\
    \ anchor tabs. It is the responsibility of the document author to provide sufficient\
    \ white space to contain the potential width of the ultimate tab value.\n\n###\
    \ Tips and Tricks\n\nThe following are tips for effective use of anchor tags:\n\
    * In order to avoid unintentional conflicts between text contained in an `anchorString`\
    \ property and the text that naturally exists in documents, establish a codified\
    \ syntax for the anchor string text that is unlikely to appear elsewhere in a\
    \ document.\n* Develop an extensible and consistent syntax that can be used across\
    \ multiple document types.\n* Especially for documents that have variable numbers\
    \ of tabs or signers, author the source document to include hidden anchor tabs\
    \ for all potential signers/permutations. Then, control the tabs that are actually\
    \ placed by including/excluding the anchor tabs in the request. This approach\
    \ allows a single document to be used for all use cases instead of maintaining\
    \ separate documents for each scenario.\n\n## Automatically Populating Tabs\n\n\
    If you want similar tab types\nto automatically populate with the same data,\n\
    you must follow these guidelines:\n\n* Each `tabLabel` entry must have the characters\n\
    \  `\\\\*` in front of the label.\n  If you omit the `\\\\*` prefix,\n  only the\
    \ first occurrence of the tab is populated.\n\n  When automatically populating\
    \ tabs,\n  the `tabLabel` must not contain any spaces.\n  In the JSON example\
    \ below,\n  the Text tabs  properties `StudentLastName` and `StudentFirstName`\n\
    \  will be auto-populated as specified (\"Doe\" and \"John\")\n  each place they\
    \ appear throughout the envelope.\n\n  ```\n  \"tabs\": {\n    \"textTabs\": [\n\
    \    {\n      \"tabLabel\": \"\\\\*StudentLastName\",\n      \"value\": \"Doe\"\
    \n    },\n    {\n      \"tabLabel\": \"\\\\*StudentFirstName\",\n      \"value\"\
    : \"John\"\n    }]\n  }\n  ```\n\n* Each occurrence of the tab must have identical\
    \ properties.\n\n  For example, suppose there are two Text tabs in a document,\n\
    \  each with `tabLabel` set to `Name`.\n  If one tab has the `bold` property set\
    \ to **true**,\n  and the other has the `bold` property set to **false**,\n  only\
    \ the first one will be populated.\n  In order to automatically populate both\
    \ occurrences\n  of the `Name` Text tabs,\n  the `bold` property must be set to\
    \ the same value for both tabs.\n"
  - name: TemplateViews
    description: |
      The TemplateViews resource
      provides a method that returns a URL
      that you can embed in your application
      to generate a template view that uses the DocuSign UI.

      One template view is available:

      * Edit View: The DocuSign UI for editing a template.

      This resource is related to the [EnvelopeViews][envelopeviews] resource.
      Both resources enable you to embed the DocuSign UI into your application.


      [envelopeviews]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeViews/
  - name: UserCustomSettings
    description: |-
      The UserCustomSettings resource provides methods that allow you to manage the custom settings for a user.

      Custom settings are a flexible way to store and retrieve custom user information that can be used in your own system.

      There is a limit on the size for all the custom user settings for a single user. All the custom user settings for a single user is limited to 4,000 characters, which includes the xml and json structure for the settings.
  - name: UserProfiles
    description: The UserProfiles resource provides methods that allow you to manage
      a user's profile.
  - name: Users
    description: |-
      The Users resource provides methods that enable you to manage users for an account.

      The following User methods do not use the `title` property in the Users object:

      - create
      - delete
      - deleteProfileImage
      - get
      - getProfileImage
      - getSettings
      - list
      - update
      - updateList
      - updateProfileImag
      - updateSettings

      Instead, you can retrieve and set the user's job title by using the UserProfiles:Get and UserProfiles:Update methods. For more information, see [UserProfiles](https://developers.docusign.com/docs/esign-rest-api/reference/Users/UserProfiles).
  - name: UserSignatures
    description: The UserSignatures resource provides methods that allow you manage
      the  intials and signature images for a user.
  - name: Contacts
    description: |+
      DocuSign eSignature includes a contacts list (also referred to as an address book) to help make sending envelopes even easier. When you send an envelope, the recipients' names and email addresses are automatically added to your contacts list. You can use the contacts list to quickly add recipients to the envelopes you send. The `Contacts` resource provides methods that enable you to manage your contacts.

  - name: EnvelopeAttachments
    description: |
      The EnvelopeAttachments resource provides methods that allow you to manage attachments.
  - name: AccountPermissionProfiles
    description: "An account permission profile is assigned to a group of users, enabling\
    \ you to set permissions for all of the users in the group at the same time. You\
    \ are not required to set Permission Profiles for a group, but it makes it easier\
    \ to manage user permissions for a large number of users. \n\nDocuSign offers\
    \ the following account permission profiles:\n\n- DocuSign Viewer\n- DocuSign\
    \ Sender\n- Account Administrator\n\nYou can also create your own custom account\
    \ permission profiles.\n"
  - name: PowerForms
    description: |
      PowerForms enable you to create self-service documents for signature. A PowerForm is an envelope initiated from a URL that you make available for signers to complete. You can either add a PowerForm to your website or email the URL to recipients. DocuSign saves the data that recipients enter so  you can easily integrate it with your other applications.

      For more information, see [Using PowerForms](https://support.docusign.com/en/guides/ndse-user-guide-using-powerforms).

      **Note**: PowerForms are available only for DocuSign Enterprise accounts.


      ### Errors

      PowerForm methods return the following 404 errors:

      - `PowerForms_Recipient_Denied_Documents`: The recipient is denied access to the documents.
      - `PowerForms_DigitalCerts_Shared_Tabs_Not_Allowed`: Shared tags are not allowed because a digital certificate is required
      for a signer.
      - `PowerForms_DigitalCerts_Free_Form_Tabs_Not_Allowed`: Signers that are required to use a digital certificate must have at
      least one required, non-conditional signature or initials tab.
      - `PowerForms_DigitalCerts_Multiple_Recipients_Routing_Order`: Signers that are required to use a digital certificate must be the
      only recipient in a routing order. Edit the routing order or remove the digital certificate requirement.
      - `PowerForms_DigitalCerts_Markup_Not_Allowed`: Document markup is not allowed because a digital certificate is
      required for a signer.
      - `PowerForms_Incomplete_Recipient`: The recipient's username, email, or role is not set.
      - `PowerForms_PowerFormId_Required`: A `powerFormId` is required.
      - `PowerForms_PowerFormId_Mismatch`: A `powerFormId` mismatch has occurred.
  - name: PowerFormData
    description: |
      The PowerFormData resource provides a method for accessing PowerForm data.
  - name: AccountTabSettings
    description: |
      The AccountTabSettings resource provides methods that allow you to manage
      tab settings for an account.
  - name: ENoteConfigurations
    description: |
      The ENoteConfigurations resource provides methods that allow you to manage
      information for the eNote eOriginal integration.
  - name: WorkspaceItems
    description: |
      The WorkspaceItems resource provides methods that enable you to manage
      workspace items.
  - name: Workspaces
    description: "A workspace is a collaborative space for sharing documents and managing\
    \ workflows. A workspace has a single owner who must be a DocuSign user. The owner\
    \ can invite others to the workspace as collaborators. Individuals who are not\
    \ DocuSign users must create a DocuSign account to join a workspace as a collaborator.\n\
    \ \nYou can create an envelope directly from a workspace.\n\nWorkspaces store\
    \ the following information:\n\n- **Files**: Files uploaded to a workspace for\
    \ storage or reuse.\n- **Documents**: A document is a component of a transaction,\
    \ template, or workspace. When a file is added to a transaction, template, or\
    \ workspace, it is copied as a document. Each document in a workspace has a single\
    \ owner.\n- **Templates**: A set of documents that you can use to create a transaction\
    \ or a workspace.\n- **Transactions**: A transaction is a series of workflow events\
    \ related to one or more documents. These events route the documents to one or\
    \ more individuals for the purposes of doing business. Each transaction has a\
    \ single owner (the sender).\n\n**Note**: Documents in a template are not individually\
    \ listed as files."
  - name: ChunkedUploads
    description: "A chunked upload is a temporary file that you upload in parts and\
    \ stage at DocuSign, then refer to as the content for other API calls. For example,\
    \ you might use it for document content when assembling an envelope or template.\
    \ \n\nA chunked upload is linked to the DocuSign account member who initiated\
    \ the API call. This user is the only user who is able to reference the chunked\
    \ upload.\n\nA ChunkedUpload is intended to be an area for briefly staging data\
    \ for use with other DocuSign API calls. The ChunkedUpload API endpoints do not\
    \ provide an action to download the ChunkedUpload's content.\n\nThe typical flow\
    \ for using a chunked upload involves the following steps:\n\n1) Initiate the\
    \ chunked upload with content representing part 0.\n\n2) Add more parts to the\
    \ chunked upload until you have transmitted the entirety of the content.\n\n3)\
    \ Commit the chunked upload, preparing it for use with other API calls.\n\n4)\
    \ Assemble a DocuSign envelope with a document that includes a reference to the\
    \ chunked upload as the content.\n\n5) Continue with envelope-related processes.\n\
    \n**Note**: You must fully upload and use a chunked upload within 20 minutes of\
    \ initializing it.\n\nAfter the chunked upload has been correctly referenced within\
    \ another API call, it becomes unavailable for any further use and is promptly\
    \ removed from the system.\n\nChunked uploads have the following limits, which\
    \ are configured per DocuSign environment, account, or integrator:\n\n- The maximum\
    \ number of all of a member's unexpired, unconsumed ChunkedUploads. The default\
    \ value is 10. \n- The maximum total size of all of a member's unexpired, unconsumed\
    \  ChunkedUploads. The default value is 1 GB. \n- The amount of time that a chunked\
    \ upload is active after you initialize it. The default value is 20 minutes.\n"
  - name: EnvelopeFormData
    description: The EnvelopeFormData resource provides a method for downloading the
      data that users have entered into a form associated with an envelope.
  - name: EnvelopeDocumentVisibility
    description: |
      The Envelope Document Visibility resource provides methods for managing document visibility by recipient.
  - name: TemplateDocumentVisibility
    description: |
      The Template Document Visibility resource provides methods for managing template document visibility by recipient.
  - name: AccountPasswordRules
    description: The AccountPasswordRules resource provides methods that allow you to
      obtain and update account password rules, as well as membership and account rules.
  - name: AccountWatermarks
    description: The AccountWatermarks resource provides methods that allow you to obtain,
      preview and update watermark information.
  - name: PaymentGatewayAccounts
    description: ""
  - name: NotaryJournals
    description: ""
  - name: IdentityVerifications
    description: "The DocuSign Identity Verification process requires a signer to submit\
    \ an image of their valid government ID and wait for the image to be uploaded\
    \ and verified before they can access a document. \n\nIdentity Verification supports\
    \ government photo IDs and European eIDs, analyzing the document security features\
    \ and matching the name on the agreement against the name on the ID. After a successful\
    \ verification, the signer can view the agreement and sign as usual.\n\nTo use\
    \ Identity Verification, the [DocuSign Identity Verification](https://www.docusign.com/products/identify)\
    \ product must be enabled for your account.\n\nFor more information, see [Can\
    \ I see (a photo of) your ID? Digital verification of real-world IDs](https://www.docusign.com/blog/can-i-see-a-photo-of-your-id-digital-verification-of-real-world-ids/)."
  - name: EnvelopeDocumentHtmlDefinitions
    description: ""
  - name: DocumentResponsiveHtmlPreview
    description: "**Note**: Responsive Signing is disabled by default. To use this functionality,\
    \ an account administrator must switch the account setting `enableResponsiveSigning`\
    \ to **true**. \nAlso note that Smart Sections (creating a signable HTML document\
    \ that uses collapsible sections and rotating tables) are premium features. To\
    \ request them, contact your DocuSign account manager."
  - name: EnvelopeHtmlDefinitions
    description: ""
  - name: ResponsiveHtmlPreview
    description: "**Note**: Responsive Signing is disabled by default. To use this functionality,\
    \ an account administrator must switch the account setting `enableResponsiveSigning`\
    \ to **true**. \nAlso note that Smart Sections (creating a signable HTML document\
    \ that uses collapsible sections and rotating tables) are premium features. To\
    \ request them, contact your DocuSign account manager."
  - name: TemplateDocumentResponsiveHtmlPreview
    description: "**Note**: Responsive Signing is disabled by default. To use this functionality,\
    \ an account administrator must switch the account setting `enableResponsiveSigning`\
    \ to **true**. \nAlso note that Smart Sections (creating a signable HTML document\
    \ that uses collapsible sections and rotating tables) are premium features. To\
    \ request them, contact your DocuSign account manager."
  - name: TemplateResponsiveHtmlPreview
    description: "**Note**: Responsive Signing is disabled by default. To use this functionality,\
    \ an account administrator must switch the account setting `enableResponsiveSigning`\
    \ to **true**. \nAlso note that Smart Sections (creating a signable HTML document\
    \ that uses collapsible sections and rotating tables) are premium features. To\
    \ request them, contact your DocuSign account manager."
  - name: TemplateDocumentHtmlDefinitions
    description: ""
  - name: TemplateHtmlDefinitions
    description: ""
  - name: EnvelopeTransferRules
    description: |-
      Envelope transfer rules enable administrators to transfer envelopes and templates from user to another. For example, you might do this when an employee leaves the company. To transfer ownership of envelopes and templates, the **Transfer Custody** feature must be enabled for your account.

      For more information about this functionality, see [Transfer Envelopes and Templates](https://support.docusign.com/en/guides/ndse-admin-guide-transfer-envelopes-templates).
  - name: NotificationDefaults
    description: DocuSign eSignature provides email notifications to senders and recipients
      for many different scenarios. By default, all notification options are turned
      on. Notification preferences give you control over the communications that you
      receive. For more information, see [Manage Notifications](https://support.docusign.com/en/guides/ndse-user-guide-manage-notifications).
  - name: BulkSend
    description: |
      You can use bulk send lists for anything that you need to send to a large number of recipients on a
      recurring basis, such as:

      - Compliance letters (privacy, security, and ethics consent forms)
      - New hire onboarding documents (benefits, transit, and parking information and payroll forms)
      - Other Human Resources documents
      - Event-related forms

      The API creates a separate copy of the envelope for each recipient that you specify. Each instance of the envelope is called a
      `BulkCopy`. You can use a bulk send list to send up to 1,000 copies per call.

      After you create a bulk send list, it persists and can be reused and edited any number of times.

      ## Customizing Bulk Send Lists

      You can customize individual copies of the envelope. For example, you can customize the email notification and
      language and add personalized notes.

      For example, if one recipient prefers to access their DocuSign envelopes behind an access code, and another prefers her
      email in French, you can implement those customizations.

      ## Using Bulk Send

      The bulk send feature uses the following flow:

      1. Create a draft envelope by calling the [Envelopes::createEnvelope][createEnvelope] method. Add placeholders for bulk send information to the envelope, including:
          - Email address placeholders.
          - Tab placeholders. Assign `tabLabels` to these placeholders that will make sense for matching the tabs to values in the bulk send list. For example, if you're sending a field trip permission slip to parents, you might create a placeholder text tab called `StudentName` that will you will then populate with the names of individual students in the bulk send list. You can use the following types of text tabs, radio group tabs, and list tabs to match bulk send recipients to an envelope.
          - Any envelope custom fields. These fields must match the envelope custom fields in envelope copies in the bulk send list.
      2. Create a bulk send list by using the [BulkSend::createBulkSendList][create_list] method.
      3. (Optional) Test compatibility. Use the [BulkSend::createBulkSendTestRequest][create_test] method to test your bulk
         send list for compatibility with the envelope or template that you want to send. For example, a template that has
         three roles is not compatible with a bulk send list that has only two recipients. For this reason, you might want to
         test compatibility first. A successful test result returns the Boolean value `true`. An unsuccessful test returns a
         JSON response that contains information about the errors that occurred.
      4. Send your envelope to the list by using the [BulkSend::createBulkSendRequest][create_request] method. The response
         returns a `batchId` that you can use for tracking and other purposes.

      The API creates and queues your envelopes asynchronously behind the scenes. You can get the status of the batch by
      using the [BulkEnvelopes_GetBulkEnvelopesBatchId][getbulkenv] method, passing in the `batchId`.

      To get the envelopes generated for the `batchId`, use the [Envelopes:listStatusChanges][GetEnvelopes] method, passing in
      a `custom_field` named `BulkBatchId` where the value is the `batchId` that was returned in step 4.

      Example:

      `custom_field=BulkBatchId={{batchId}}`

      **Bulk Send Requirements and Limitations**

      * Bulk send must be enabled for your account (in the `accountSettingsInformation` object, `enableBulkRecipient` must be set to **true**) and for the user sending the envelopes (the `allowBulkRecipients` property in `userSettings` must be set to **true**).
      * You can include up to 1,000 bulk recipients in each request.
      * When you send an envelope with bulk recipients, envelopes are added to a bulk recipient queue and sent in a metered fashion. An account can have a total of 2,000 total envelopes in the queue at a time.  If this limit is reached, an error message displays to the sender. If you receive this error, wait and resend the envelope at a later time.

      If you frequently run into queue limits, contact your account manager to discuss modifying the queue limits for your account.

      [create_list]:    https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendList/
      [create_test]:    https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendTestRequest/
      [create_request]: https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendRequest/
      [getbulkenv]:     https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/getBulkSendLists/
      [GetEnvelopes]:   https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges/

      [createEnvelope]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeCustomFields/create/


      For more information about using bulk send, see [Bulk Sending Envelopes](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/bulk-send/).
  - name: BCCEmailArchive
    description: |-
      You can configure automatic archiving of emails sent from all of your DocuSign accounts.

      For more information, see [Email Archive Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-email-archive-configuration).

      **Note**: This feature is only available for certain account plans and must be enabled by DocuSign.
  - name: TabsBlob
    description: ""
  - name: Comments
    description: "The comments resource provides a method that enables you to download\
    \ a PDF file containing all of the comments that recipients and the sender have\
    \ added to the documents in an envelope.\n\nComments are disabled by default.\
    \ To use the comments feature, an account administrator must enable comments on\
    \ the account (in the `accountSettingsInformation` object, set the `enableSigningExtensionComments`\
    \ property to **true**). \n\nFor more information, see [Comments Settings](https://support.docusign.com/en/guides/ndse-admin-guide-comments-settings)."
  - name: FavoriteTemplates
    description: ""
  - name: Notary
    description: |+
      DocuSign eNotary makes the notarization process fully digital
      for senders, signers, and notaries.
      It enables a notary public to act as an in-person witness
      to electronic signing of documents.
      Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
      to see which jurisdictions are supported.

  - name: NotaryJurisdiction
    description: Creating, updating, and deleting notary jurisdiction objects.
  - name: EnvelopeWorkflowDefinition
    description: ""
  - name: Reports
    description: ""
  - name: AccountSignatures
    description: ""
  - name: ApplianceInfo
    description: ""
  - name: ConnectSecret
    description: ""
paths:
  /service_information:
    get:
      tags:
        - Services
      summary: Retrieves the available REST API versions.
      description: |-
        Retrieves the available REST API versions.

        DocuSign Production system: https://www.docusign.net/restapi/service_information
        DocuSign Demo system: https://demo.docusign.net/restapi/service_information

        You do not need an integrator key to view the REST API versions and resources.
      operationId: ServiceInformation_GetServiceInformation
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/serviceInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getService
      x-ds-method: get
      x-ds-service: Diagnostics
      x-ds-in-sdk: true
  /v2.1:
    get:
      tags:
        - Resources
      summary: Lists resources for REST version specified
      description: |-
        Retrieves the base resources available for the DocuSign REST APIs.

        You do not need an integrator key to view the REST API versions and resources.

        Example: https://demo.docusign.net/restapi/v2 lists all of the base resources available in version 2 of the REST API on the DocuSign Demo system.

        To view descriptions and samples of the service operations for all versions, remove the version number and add /help to the URL.

        Example: https://demo.docusign.net/restapi/help lists the REST API operations on the DocuSign Demo system with XML and JSON request and response samples.
      operationId: ServiceInformation_GetResourceInformation
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/resourceInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getResources
      x-ds-method: get
      x-ds-service: Diagnostics
      x-ds-in-sdk: true
  /v2.1/accounts:
    post:
      tags:
        - Accounts
      summary: Creates new accounts.
      description: "Creates new DocuSign accounts.\nYou can use this method to create\n\
        a single account\nor up to 100 accounts at a time.\n\n**Note**:  This method\
        \ is restricted to partner integrations. You must work with DocuSign Professional\
        \ Services or DocuSign Business Development, who will provide you with the\
        \ Distributor Code and Distributor Password that you need to include in the\
        \ request body.\n\nYou must include the `X-DocuSign-Authentication`  header.\n\
        \nExample:\n\n`<DocuSignCredentials><IntegratorKey>{{integratorKey}}</IntegratorKey></DocuSignCredentials>`\n\
        \nWhen creating a single account,\nthe body of the request is a\n[`newAccountRequest`][newAccountRequest]\n\
        object.\n\nExample:\n\n```\n{\n\t\"newAccountRequest\": [\n\t\t{\n\t\t\t\"\
        accountName\":\"Test Account\",\n\t\t\t\"distributorCode\":\"MY_DIST_CODE\"\
        ,\n\t\t\t\"distributorPassword\":\"MY_DIST_PWD\",\n\t\t\t\"initialUser\":{\n\
        \t\t\t\t\"email\":\"user@emaildomain.com\",\n\t\t\t\t\"firstName\":\"John\"\
        ,\n\t\t\t\t\"middleName\": \"Harry\",\n\t\t\t\t\"lastName\":\"Doe\",\n\t\t\
        \t\t\"suffixName\": \"\",\n\t\t\t\t\"userName\": \"John Doe\",\n\t\t\t\t\"\
        jobTitle\": \"Engineer\",\n\t\t\t\t\"company\": \"Test Company\"\n\t\t\t},\n\
        \t\t\t\"addressInformation\":{\n\t\t\t\t\"address1\": \"1234 Main Street\"\
        ,\n\t\t\t\t\"address2\": \"Suite 100\",\n\t\t\t\t\"city\": \"Seattle\",\n\t\
        \t\t\t\"state\": \"WA\",\n\t\t\t\t\"postalCode\": \"98101\",\n\t\t\t\t\"country\"\
        : \"US\",\n\t\t\t\t\"phone\": \"1234567890\",\n\t\t\t\t\"fax\": \"1234567891\"\
        \n\t\t\t},\n\t\t\t\"planInformation\":{\n\t\t\t\t\"planId\":\"37085696-xxxx-xxxx-xxxx-7ea067752959\"\
        \n\t\t\t},\n\t\t\t\"referralInformation\":{\n\t\t\t\t\"includedSeats\": \"\
        1\",\n\t\t\t\t\"referralCode\": \"code\",\n\t\t\t\t\"referrerName\": \"name\"\
        \n\t\t\t}\n\t\t}\n\t]\n}\n\n```\nIf the request succeeds,\nit returns a\n\
        201 (Created) HTTP response code.\nThe response returns the new account ID,\
        \ password, and the default user\ninformation for each newly created account.\n\
        \n\nWhen creating multiple accounts,\nthe body of the request is a\n`newAccountRequests`\n\
        object,\nwhich contains one or more \n[`newAccountDefinition`][newAccountDefinition]\n\
        objects.\nYou can create up to 100 new accounts\nat a time this way.\n\nThe\
        \ body for a multi-account\ncreation request\nlooks like this in JSON:\n\n\
        ```\n{\n  \"newAccountRequests\": [\n    {\n      \"accountName\": \"accountone\"\
        ,\n      . . .\n    },\n    {\n      \"accountName\": \"accounttwo\",\n  \
        \    . . .\n    }\n  ]\n}\n```\n\nA multi-account request\nlooks like this\
        \ in XML:\n\n```\n<newAccountsDefinition xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\
        \ xmlns=\"http://www.docusign.com/restapi\">\n  <newAccountRequests>\n   \
        \ <newAccountDefinition>\n      . . .\n    </newAccountDefinition>\n    <newAccountDefinition>\n\
        \      . . .\n    </newAccountDefinition>\n  </newAccountRequests>\n</newAccountsDefinition>\n\
        ```\n\nA multi-account creation request\nmay succeed (report a 201 code)\n\
        even if some accounts could not be created.\nIn this case, the `errorDetails`\
        \ property\nin the response contains specific information\nabout the failure.\n\
        \n\n\n[newAccountDefinition]: #/definitions/newAccountDefinition\n[nameValue]:\
        \ #/definitions/nameValue\n[newAccountRequest]: #/definitions/newAccountRequest\n"
      operationId: Accounts_PostAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newAccountDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/newAccountDefinition'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/newAccountSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: create
      x-ds-method: create
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: newAccountDefinition
  /v2.1/accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Retrieves the account information for the specified account.
      description: "Retrieves the account information for the specified account.\n\
        \n**Response**\nThe `canUpgrade` property contains is a Boolean that indicates\
        \ whether the account can be upgraded through the API. "
      operationId: Accounts_GetAccount
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: include_account_settings
          in: query
          description: |-
            When set to **true**, includes account settings
            in the response. If you omit this parameter, the default behavior is **false**.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: GetAccountInformation
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    delete:
      tags:
        - Accounts
      summary: Deletes the specified account.
      description: This closes the specified account. You must be an account admin
        to close your account. Once closed, an account must be reopened by DocuSign.
      operationId: Accounts_DeleteAccount
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: delete
      x-ds-method: delete
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/billing_charges:
    get:
      tags:
        - Accounts
      summary: Gets list of recurring and usage charges for the account.
      description: "Retrieves the list of recurring and usage charges for the account.\
        \ This can be used to determine the charge structure and usage of charge plan\
        \ items. \n\nPrivileges required: account administrator "
      operationId: BillingCharges_GetAccountBillingCharges
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: include_charges
          in: query
          description: |
            Specifies which billing charges to return.
            Valid values are:

            * envelopes
            * seats
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingChargeResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBillingCharges
      x-ds-method: getBillingCharges
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/billing_invoices:
    get:
      tags:
        - Invoices
      summary: Get a List of Billing Invoices
      description: "Retrieves a list of invoices for the account. If the from date\
        \ or to date queries are not specified, the response returns invoices for\
        \ the last 365 days.\n\nPrivileges required: account administrator "
      operationId: BillingInvoices_GetBillingInvoices
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: from_date
          in: query
          description: Specifies the date/time of the earliest invoice in the account
            to retrieve.
          schema:
            type: string
        - name: to_date
          in: query
          description: Specifies the date/time of the latest invoice in the account
            to retrieve.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingInvoicesResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listInvoices
      x-ds-method: list
      x-ds-service: Billing
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/billing_invoices/{invoiceId}:
    get:
      tags:
        - Invoices
      summary: Retrieves a billing invoice.
      description: |-
        Retrieves the specified invoice.

        **Note**: If the `pdfAvailable` property in the response is set to *true*, you can download a PDF version of the invoice. To download the PDF, make the call again and change the value of the `Accept` property in the header to `Accept: application/pdf`.

        Privileges required: account administrator

        The response returns a list of charges and information about the charges. Quantities are usually shown as 'unlimited' or an integer. Amounts are shown in the currency set for the account.

        **Response**
        The following table provides a description of the different `chargeName` property values. The information will grow as more chargeable items are added to the system.

        | chargeName | Description |
        | --- | --- |
        | id_check | ID Check Charge |
        | in_person_signing | In Person Signing charge |
        | envelopes Included | Sent Envelopes for the account |
        | age_verify | Age verification check |
        | ofac | OFAC Check |
        | id_confirm | ID confirmation check |
        | student_authentication | STAN PIN authentication check |
        | wet_sign_fax | Pages for returning signed documents by fax |
        | attachment_fax | Pages for returning attachments by fax |
        | phone_authentication | Phone authentication charge |
        | powerforms | PowerForm envelopes sent |
        | signer_payments | Payment processing charge |
        | outbound_fax | Send by fax charge |
        | bulk_recipient_envelopes | Bulk Recipient Envelopes sent |
        | sms_authentications | SMS authentication charge |
        | saml_authentications | SAML authentication charge |
        | express_signer_certificate | DocuSign Express Certificate charge |
        | personal_signer_certificate | Personal Signer Certificate charge |
        | safe_certificate | SAFE BioPharma Signer Certificate charge |
        | seats | Included active seats charge |
        | open_trust_certificate | OpenTrust Signer Certificate charge |
      operationId: BillingInvoices_GetBillingInvoice
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingInvoice'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getInvoice
      x-ds-method: get
      x-ds-service: Billing
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/billing_invoices_past_due:
    get:
      tags:
        - Invoices
      summary: Get a list of past due invoices.
      description: "Returns a list past due invoices for the account and notes if\
        \ payment can be made through the REST API. \n\nPrivileges Required: account\
        \ administrator"
      operationId: BillingInvoices_GetBillingInvoicesPastDue
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingInvoicesSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listInvoicesPastDue
      x-ds-method: listPastDue
      x-ds-service: Billing
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/billing_payments:
    get:
      tags:
        - Payments
      summary: Gets payment information for one or more payments.
      description: "Retrieves a list containing information about one or more payments.\
        \ If the from date or to date queries are not used, the response returns payment\
        \ information for the last 365 days. \n\nPrivileges required: account administrator "
      operationId: BillingPayments_GetPaymentList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: from_date
          in: query
          description: Specifies the date/time of the earliest payment in the account
            to retrieve.
          schema:
            type: string
        - name: to_date
          in: query
          description: Specifies the date/time of the latest payment in the account
            to retrieve.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingPaymentsResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listPayments
      x-ds-method: list
      x-ds-service: Billing
      x-ds-in-sdk: true
    post:
      tags:
        - Payments
      summary: Posts a payment to a past due invoice.
      description: |
        Posts a payment to a past due invoice.

        This method can only be used if the `paymentAllowed` value for a past due invoice is true. This can be determined calling [Billing::listInvoicesPastDue](https://developers.docusign.com/docs/esign-rest-api/reference/Billing/Invoices/listPastDue).

        The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the `nextUri` and `previousUri` properties are not returned.

        Privileges required: account administrator
      operationId: BillingPayments_PostPayment
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/billingPaymentRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/billingPaymentRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingPaymentResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: makePayment
      x-ds-method: create
      x-ds-service: Billing
      x-ds-in-sdk: true
      x-codegen-request-body-name: billingPaymentRequest
  /v2.1/accounts/{accountId}/billing_payments/{paymentId}:
    get:
      tags:
        - Payments
      summary: Gets billing payment information for a specific payment.
      description: "Retrieves the information for a specified payment. \n\nPrivileges\
        \ required: account administrator "
      operationId: BillingPayments_GetPayment
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingPaymentItem'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPayment
      x-ds-method: get
      x-ds-service: Billing
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/billing_plan:
    get:
      tags:
        - BillingPlans
      summary: Get Account Billing Plan
      description: |
        Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.

        By default the successor plan and credit card information is included in the response. You can exclude this information from the response by adding the appropriate optional query string and setting it to **false**.

        Response

        The response returns the billing plan information, including the currency code, for the plan. The `billingPlan` and `succesorPlans` property values are the same as those shown in the [Billing::getBillingPlan](https://developers.docusign.com/docs/esign-rest-api/reference/Billing/BillingPlans/get) reference. the `billingAddress` and `creditCardInformation` property values are the same as those shown in the [Billing::updatePlan](https://developers.docusign.com/docs/esign-rest-api/reference/Billing/BillingPlans/update) reference.

        **Note**: When credit card number information displays, a mask is applied to the response so that only the last 4 digits of the card number are visible.
      operationId: BillingPlan_GetBillingPlan
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: include_credit_card_information
          in: query
          description: When set to **true**, payment information including credit card
            information will show in the return.
          schema:
            type: string
        - name: include_metadata
          in: query
          description: 'When set to **true**, the `canUpgrade` and `renewalStatus` properities
          are included the response and an array of `supportedCountries` is added
          to the `billingAddress` information. '
          schema:
            type: string
        - name: include_successor_plans
          in: query
          description: When set to **true**, excludes successor information from the
            response.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountBillingPlanResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPlan
      x-ds-method: getAccountPlan
      x-ds-service: Billing
      x-ds-in-sdk: true
    put:
      tags:
        - BillingPlans
      summary: Updates an account billing plan.
      description: Updates the billing plan information, billing address, and credit
        card information for the specified account.
      operationId: BillingPlan_PutBillingPlan
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: preview_billing_plan
          in: query
          description: When set to **true**, updates the account using a preview billing
            plan.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/billingPlanInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/billingPlanInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingPlanUpdateResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updatePlan
      x-ds-method: update
      x-ds-service: Billing
      x-ds-in-sdk: true
      x-codegen-request-body-name: billingPlanInformation
  /v2.1/accounts/{accountId}/billing_plan/credit_card:
    get:
      tags:
        - BillingPlans
      summary: Get credit card information
      description: This method returns information about a credit card associated
        with an account.
      operationId: BillingPlan_GetCreditCardInfo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/creditCardInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getCreditCardInfo
      x-ds-method: getCreditCard
      x-ds-service: Billing
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/billing_plan/downgrade:
    get:
      tags:
        - BillingPlans
      summary: Returns downgrade plan information for the specified account.
      operationId: BillingPlan_GetDowngradeRequestBillingInfo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/downgradRequestBillingInfoResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDowngradeRequestBillingInfo
      x-ds-method: getDowngradeRequestBillingInfo
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - BillingPlans
      summary: Queues downgrade billing plan request for an account.
      operationId: BillingPlan_PutDowngradeAccountBillingPlan
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/downgradeBillingPlanInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/downgradeBillingPlanInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/downgradePlanUpdateResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDowngradeAccountBillingPlan
      x-ds-method: updateDowngradeAccountBillingPlan
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: downgradeBillingPlanInformation
  /v2.1/accounts/{accountId}/billing_plan/purchased_envelopes:
    put:
      tags:
        - BillingPlans
      summary: 'Reserverd: Purchase additional envelopes.'
      description: 'Reserved: At this time, this endpoint is limited to DocuSign internal
        use only. Completes the purchase of envelopes for your account. The actual
        purchase is done as part of an internal workflow interaction with an envelope
        vendor.'
      operationId: PurchasedEnvelopes_PutPurchasedEnvelopes
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/purchasedEnvelopesInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/purchasedEnvelopesInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: purchaseEnvelopes
      x-ds-method: purchaseEnvelopes
      x-ds-service: Billing
      x-ds-in-sdk: true
      x-codegen-request-body-name: purchasedEnvelopesInformation
  /v2.1/accounts/{accountId}/brands:
    get:
      tags:
        - AccountBrands
      summary: Gets a list of brands.
      description: "This method returns details about all of the brands associated\
        \ with an account, including the default brand profiles. \n\n**Note**: Branding\
        \ for either signing or sending must be enabled for the account (`canSelfBrandSend`\
        \ , `canSelfBrandSign`, or both of these account settings must be **true**)."
      operationId: Brands_GetBrands
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: exclude_distributor_brand
          in: query
          description: When **true**, excludes distributor brand information from the
            response set.
          schema:
            type: string
        - name: include_logos
          in: query
          description: When set to **true**, returns the logos associated with the brand.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountBrands'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listBrands
      x-ds-method: list
      x-ds-service: Accounts
      x-ds-in-sdk: true
    post:
      tags:
        - AccountBrands
      summary: Creates one or more brand profiles for an account.
      description: |-
        This method creates one or more brand profile files for an account.

        If the `brandId` property for a brand profile is already set for the account, an error is returned. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.

        When you upload brand profile files, you must combine them into a single zip file and set the `Content-Type` to `application/zip`.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brands_PostBrands
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/brand'
          application/xml:
            schema:
              $ref: '#/components/schemas/brand'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountBrands'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createBrand
      x-ds-method: create
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: brand
    delete:
      tags:
        - AccountBrands
      summary: Deletes one or more brand profiles.
      description: |-
        This method deletes one or more brand profiles from an account, based on the brand ids that you include in the `brandsRequest`.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brands_DeleteBrands
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/brandsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/brandsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountBrands'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteBrands
      x-ds-method: deleteList
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: brandsRequest
  /v2.1/accounts/{accountId}/brands/{brandId}:
    get:
      tags:
        - AccountBrands
      summary: Gets information about a brand.
      description: |-
        This method returns details about an account brand.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brand_GetBrand
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
        - name: include_external_references
          in: query
          description: When **true**, the landing pages and links associated with the
            brand are included in the response.
          schema:
            type: string
        - name: include_logos
          in: query
          description: When **true**, the URIs for the logos associated with the brand
            are included in the response.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/brand'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBrand
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountBrands
      summary: Updates an existing brand.
      description: "This method updates an account brand. \n\n**Note**: Branding for\
        \ either signing or sending must be enabled for the account (`canSelfBrandSend`\
        \ , `canSelfBrandSign`, or both of these account settings must be **true**)."
      operationId: Brand_PutBrand
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/brand'
          application/xml:
            schema:
              $ref: '#/components/schemas/brand'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/brand'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateBrand
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: brand
    delete:
      tags:
        - AccountBrands
      summary: Deletes a brand.
      description: |-
        This method deletes a brand from an account.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brand_DeleteBrand
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteBrand
      x-ds-method: delete
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/brands/{brandId}/file:
    get:
      tags:
        - AccountBrands
      summary: Exports a brand.
      description: |-
        This method exports information about a brand to an XML file.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandExport_GetBrandExportFile
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBrandExportFile
      x-ds-method: getExportFile
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}:
    get:
      tags:
        - AccountBrands
      summary: Gets a brand logo.
      description: |-
        This method returns a specific logo that is used in a brand.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandLogo_GetBrandLogo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
        - name: logoType
          in: path
          description: "The type of logo. Valid values are:\n\n- `primary` \n- `secondary`\
          \ \n- `email`"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/png:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBrandLogoByType
      x-ds-method: getLogo
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountBrands
      summary: Updates a brand logo.
      description: |-
        This method updates a single brand logo.

        You pass in the new version of the resource in the `Content-Disposition` header. Example:

        `Content-Disposition: form-data; name="file"; filename="logo.jpg"`

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandLogo_PutBrandLogo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
        - name: logoType
          in: path
          description: "The type of logo. Valid values are:\n\n- `primary` \n- `secondary`\
          \ \n- `email`"
          required: true
          schema:
            type: string
      requestBody:
        description: 'Brand logo binary Stream. Supported formats: JPG, GIF, PNG.
          Maximum file size: 300 KB. Recommended dimensions: 296 x 76 pixels (larger
          images will be resized). Changes may take up to one hour to display in all
          places'
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateBrandLogoByType
      x-ds-method: updateLogo
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: logoFileBytes
    delete:
      tags:
        - AccountBrands
      summary: Deletes a brand logo.
      description: |-
        This method deletes a single logo from an account brand.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandLogo_DeleteBrandLogo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
        - name: logoType
          in: path
          description: "The type of logo. Valid values are:\n\n- `primary` \n- `secondary`\
          \ \n- `email`"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteBrandLogoByType
      x-ds-method: deleteLogo
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/brands/{brandId}/resources:
    get:
      tags:
        - AccountBrands
      summary: Returns metadata about the branding resources for an account.
      description: |-
        This method returns metadata about the branding resources that are associated with an account.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandResources_GetBrandResourcesList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/brandResourcesList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBrandResources
      x-ds-method: listResources
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}:
    get:
      tags:
        - AccountBrands
      summary: Returns a branding resource file.
      description: "This method returns a specific branding resource file.\n\nA brand\
        \ uses a set of brand resource files to control the sending, signing, email\
        \ message, and captive (embedded) signing experiences.  You can modify the\
        \ default email messages and formats in these files and upload them to your\
        \ brand to customize the user experience.\n\n**Important**: When you upload\
        \ a modified resource file, only the elements that differ from the master\
        \ resource file are saved as your resource file. Similarly, when you download\
        \ your resource files, only the modified elements are included in the file.\
        \ \n\n**Note**: Branding for either signing or sending must be enabled for\
        \ the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account\
        \ settings must be **true**)."
      operationId: BrandResources_GetBrandResources
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
        - name: resourceContentType
          in: path
          description: |-
            The type of brand resource file to return. Valid values are:

            - `sending`
            - `signing`
            - `email`
            - `signing_captive`
          required: true
          schema:
            type: string
        - name: langcode
          in: query
          description: The ISO 3166-1 alpha-2 codes for the languages that the brand
            supports.
          schema:
            type: string
        - name: return_master
          in: query
          description: Specifies which resource file data to return. When **true**,
            only the master resource file is returned. When **false**, only the elements
            that you modified are returned.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBrandResourcesByContentType
      x-ds-method: getResource
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountBrands
      summary: Updates a branding resource file.
      description: |-
        This method updates a branding resource file.

        You pass in the new version of the resource file in the `Content-Disposition` header. Example:

        `Content-Disposition: form-data; name="file"; filename="DocuSign_SigningResource_4328673.xml"`

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

        **Important**: Customizing resource files is an advanced branding configuration option which can significantly impact your account, and should be done only by someone with expertise in XML and HTML. The master resource files are subject to change without notice. If you customize your resource files, after each release, DocuSign recommends you review any changes and update your custom files as needed.

        When you upload a modified resource file, only the elements that differ from the master resource file are saved as your resource file. Similarly, when you download your resource files, only the modified elements are included in the file.
      operationId: BrandResources_PutBrandResources
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: brandId
          in: path
          description: The id of the brand.
          required: true
          schema:
            type: string
        - name: resourceContentType
          in: path
          description: |-
            The type of brand resource file that you are updating. Valid values are:

            - `sending`
            - `signing`
            - `email`
            - `signing_captive`
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file.xml
              properties:
                file.xml:
                  type: string
                  description: Brand resource XML file.
                  format: binary
        required: true
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/brandResources'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateBrandResourcesByContentType
      x-ds-method: updateResource
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/bulk_send_batch:
    get:
      tags:
        - BulkSend
      summary: 'Returns a list of bulk send batch summaries. '
      description: |-
        Returns a summary of bulk send batches.

        Use the `batch_ids` query parameter to narrow the list of batches.
      operationId: BulkSendV2Batch_GetBulkSendBatches
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: batch_ids
          in: query
          description: A comma-separated list of batch IDs to query.
          schema:
            type: string
        - name: count
          in: query
          description: |-
            The number of results to report. Must be a value from 1 to 1000.

            Default: 100
          schema:
            type: string
        - name: start_position
          in: query
          description: The start position for results. Essentially the number of results
            to skip before collecting them. Must be a value greater than 0.
          schema:
            type: string
        - name: status
          in: query
          description: |-
            The kind of results to collect. Must be one of:

            - all
            - failed
            - sent
            - queued
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendBatchSummaries'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBulkSendBatches
      x-ds-method: getBulkSendBatches
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/bulk_send_batch/{bulkSendBatchId}:
    get:
      tags:
        - BulkSend
      summary: Gets the status of a specific bulk send batch.
      description: |-
        Gets the general status of a specific bulk send batch such as:

        - number of successes
        - number pending
        - number of errors

        The `bulkErrors` property of the response object contains more information about the errors.
      operationId: BulkSendV2Batch_GetBulkSendBatchStatus
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bulkSendBatchId
          in: path
          description: The batch ID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendBatchStatus'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBulkSendBatchStatus
      x-ds-method: getBulkSendBatchStatus
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - BulkSend
      summary: Updates a specific bulk send batch status.
      operationId: BulkSendV2Batch_PutBulkSendBatchStatus
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bulkSendBatchId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkSendBatchRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/bulkSendBatchRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendBatchStatus'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateBulkSendBatchStatus
      x-ds-method: updateBulkSendBatchStatus
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: bulkSendBatchRequest
  /v2.1/accounts/{accountId}/bulk_send_lists:
    get:
      tags:
        - BulkSend
      summary: Gets bulk send lists
      description: This method returns a list of bulk send lists belonging to the
        current user, as well as basic information about each list.
      operationId: BulkSendV2CRUD_GetBulkSendLists
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendingListSummaries'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBulkSendLists
      x-ds-method: getBulkSendLists
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    post:
      tags:
        - BulkSend
      summary: Creates a bulk send list
      description: |-
        This method creates a bulk send list that you can use to send an envelope to up to 1,000 recipients at once.

        It returns the following errors:

        | Error code                                              | Description                                                                                                                                                                                                                                                                              |
        | :------------------------------------------------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | BULK_SEND_MAX_COPIES_EXCEEDED                           | A bulk sending list cannot specify more than XXX copies in the mailing list. Call the settings API endpoint to find the maximum number of copies in a batch allowed for your account. In almost all cases, the default limit is 1000.                                                    |
        | BULK_SEND_RECIPIENT_IDS_MUST_BE_UNIQUE                  | No two recipientIds can be same within a bulkCopy. Same restriction as a regular envelope applies. Specify unique recipient IDs for each recipient within a bulkCopy (model for envelope in mailing list).                                                                               |
        | BULK_SEND_RECIPIENT_ID_REQUIRED                         | If no RoleName is present, recipientID is required in mailing list's bulkCopy. Add a roleName (that coalesces with template/envelope) or a recipientID.                                                                                                                                  |
        | BULK_SEND_RECIPIENT_NAME_REQUIRED                       | Recipient {0} has no name. Specify a name for the recipient.                                                                                                                                                                                                                             |
        | BULK_SEND_EMAIL_ADDRESS_REQUIRED_FOR_EMAIL_RECIPIENT    | Recipient {0} is an email recipient with no email address. Specify an email for the email recipient.                                                                                                                                                                                     |
        | BULK_SEND_FAX_NUMBER_REQUIRED_FOR_FAX_RECIPIENT         | Recipient {0} is a fax recipient with no fax number. Specify a fax number for the fax recipient.                                                                                                                                                                                         |
        | BULK_SEND_FAX_NUMBER_NOT_VALID                          | Recipient {0} specifies fax number {1}, which is not valid. Specify a valid fax number for the fax recipient.                                                                                                                                                                            |
        | BULK_SEND_EMAIL_ADDRESS_NOT_VALID                       | Recipient {0} specifies email address {1}, which is not a valid email address.  Specify a valid email address for the recipient.                                                                                                                                                         |
        | BULK_SEND_PHONE_NUMBER_REQURED_FOR_SMS_AUTH             | Recipient {0} specifies SMS auth, but no number was provided. Specify a phone number for the SMS auth recipient.                                                                                                                                                                         |
        | BULK_SEND_PHONE_NUMBER_INVALID_FOR_SMS_AUTH             | Recipient {0} specifies phone number {1} for SMS auth, which is not valid. Specify a valid phone number for the SMS auth recipient.                                                                                                                                                      |
        | BULK_SEND_ROLE_NAMES_MUST_BE_UNIQUE                     | Recipient role names cannot be duplicated; role {duplicateRecipientRole} appears multiple times. Use unique roleNames for recipients.                                                                                                                                                    |
        | BULK_SEND_CANNOT_USE_BOTH_ROLE_AND_ID_ON_SAME_RECIPIENT | Recipients cannot have both ID and Role; {0} has both. Specify a roleName or recipientId, but not both for the same recipient.                                                                                                                                                           |
        | BULK_SEND_CANNOT_USE_BOTH_ROLE_AND_ID_IN_SAME_LIST      | Cannot use both recipient role and ID in the same list. Specify a roleName or recipientId, but not both in the same list.                                                                                                                                                                |
        | BULK_SEND_INVALID_ID_CHECK_CONFIGURATION                | Recipient {0} specified SMS authentication, but no SMS auth settings were provided. Provide an SMS auth setting (proper ID configuration) if SMS auth is specified.                                                                                                                      |
        | BULK_SEND_INVALID_SBS_INPUT_CONFIGURATION               | Recipient {0} has more than one signature provider specified. Or signingProviderName is not specified. Or Signature provider : {0} is either unknown or not an available pen for this account. One or more SBS configuration is missing or invalid. The error details provide specifics. |
        | BULK_SEND_TAB_LABELS_MUST_BE_UNIQUE                     | Tab label {0} is duplicated. Needs to be unique. Use a unique tab label.                                                                                                                                                                                                                 |
        | BULK_SEND_TAB_LABEL_REQUIRED                            | Tab label is required. Specify a tab label.                                                                                                                                                                                                                                              |
        | BULK_SEND_TAB_VALUE_REQUIRED                            | Tab Label value is required. Specify a value for the tab label.                                                                                                                                                                                                                          |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_NAME_MUST_BE_UNIQUE     | Custom fields must have distinct names. The field {0} appears more than once in a copy. Use unique names for custom fields.                                                                                                                                                              |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_NAME_REQUIRED           | All custom fields must have names. Specify a name for the custom field.                                                                                                                                                                                                                  |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_VALUE_REQUIRED          | Custom field {0} has no value. A custom field can have an empty value, but it cannot have a null value. Specify a value for the custom field.                                                                                                                                            |
      operationId: BulkSendV2CRUD_PostBulkSendList
      parameters:
        - name: accountId
          in: path
          description: The id of the account.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkSendingList'
          application/xml:
            schema:
              $ref: '#/components/schemas/bulkSendingList'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendingList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createBulkSendList
      x-ds-method: createBulkSendList
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: bulkSendingList
  /v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}:
    get:
      tags:
        - BulkSend
      summary: Gets a specific bulk send list
      description: This method returns all of the details associated with a specific
        bulk send list that belongs to the current user.
      operationId: BulkSendV2CRUD_GetBulkSendList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bulkSendListId
          in: path
          description: The GUID of the bulk send list. This property is created after
            you post a new bulk send list.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendingList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBulkSendList
      x-ds-method: getBulkSendList
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - BulkSend
      summary: Updates a bulk send list
      description: This method replaces the definition of an existing bulk send list.
      operationId: BulkSendV2CRUD_PutBulkSendList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bulkSendListId
          in: path
          description: The GUID of the bulk send list. This property is created after
            you post a new bulk send list.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkSendingList'
          application/xml:
            schema:
              $ref: '#/components/schemas/bulkSendingList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendingList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateBulkSendList
      x-ds-method: updateBulkSendList
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: bulkSendingList
    delete:
      tags:
        - BulkSend
      summary: Deletes a bulk send list
      description: This method deletes a bulk send list.
      operationId: BulkSendV2CRUD_DeleteBulkSendList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bulkSendListId
          in: path
          description: The GUID of the bulk send list. This property is created after
            you post a new bulk send list.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendingListSummaries'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteBulkSendList
      x-ds-method: deleteBulkSendList
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}/send:
    post:
      tags:
        - BulkSend
      summary: Creates a bulk send request
      description: |+
        This method initiates the bulk send process. It generates a bulk send request based on an [existing bulk send list][create_list] and an envelope or template.

        Consider using the [BulkSend::createBulkSendTestRequest][create_test] method to test your bulk send list for compatibility with the envelope or template that you want to send first. To learn about the complete bulk send flow, see the [Bulk Send overview][BulkSendOverview].

        If the envelopes were successfully queued for asynchronous processing, the response contains a `batchId` that you can use to get the status of the batch. If a failure occurs, the API returns an error message.

        **Note**: Partial success or failure generally does not occur. Only the entire batch is queued for asynchronous processing.

        This method returns the following errors:

        | Error code                                                 | Description                                                                                                                                                                                                                                                                                            |
        | :--------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | BULK_SEND_ENVELOPE_NOT_IN_SENDABLE_STATE                   | Envelope {0} is not in a sendable state. The envelope is not complete. Make sure it has a sendable status, such as `created`.                                                                                                                                                                          |
        | BULK_SEND_ENVELOPE_LIST_CONTAINS_NO_COPIES                 | Cannot send an envelope with a bulk sending list which contains no copies.  The list you're trying to bulk send is empty. Make sure the bulk sending list you're using contains recipients.                                                                                                            |
        | BULK_SEND_ENVELOPE_LIST_CONTAINS_TOO_MANY_COPIES           | Bulk sending list contains more than {0} copies. The list you're trying to bulk send will cause your account to exceed the 1,000-copy limit imposed for all accounts. Try sending two or more separate lists.                                                                                          |
        | BULK_SEND_ENVELOPE_CANNOT_BE_NULL                          | Cannot send a bulk list without an envelope. Specify the envelope ID or template ID for the envelope you want to bulk send.                                                                                                                                                                            |
        | BULK_SEND_BLOB_STORE_ERROR                                 | Could not save copy of bulk sending list. An error writing to the database occurred. Try again. If the error persists, contact DocuSign Support.                                                                                                                                                       |
        | BULK_SEND_ACCOUNT_HAS_TOO_MANY_QUEUED_ENVELOPES            | Cannot send this bulk sending list because doing so would exceed the maximum of {maxCopies} in-flight envelopes. This account currently has {unprocessedEnvelopes} envelopes waiting to be processed. Please try again later." .Try again later, or contact DocuSign Support to request a higher tier. |
        | BULK_SEND_ENVELOPE_NOT_FOUND                               | Envelope {envelopeOrTemplateId} does not exist or you do not have permission to access it. The envelopeId or templateId specified could not be found. Specify a valid value.                                                                                                                           |
        | BULK_SEND_LIST_NOT_FOUND                                   | Bulk Sending list {listId} does not exist or you do not have permission to access it. The mailingListId specified could not be found. Specify a valid value.                                                                                                                                           |
        | BULK_SEND_ENVELOPE_HAS_NO_RECIPIENTS                       | Bulk sending copy contains recipients, but the specified envelope does not. The recipients on the envelope and the bulk send list do not match. Make sure the envelope and list are compatible for sending.                                                                                            |
        | BULK_SEND_RECIPIENT_ID_DOES_NOT_EXIST_IN_ENVELOPE          | Recipient {0} does not exist in the envelope. Add the missing recipient to the envelope.                                                                                                                                                                                                               |
        | BULK_SEND_RECIPIENT_ID_DOES_NOT_MATCH                      | Recipient ID {envelopeMember.ID} does not match. Make sure the recipient information in the list and the envelope match up.                                                                                                                                                                            |
        | BULK_SEND_ENVELOPE_HAS_BULK_RECIPIENT                      | Recipient {0} is a bulk recipient.  This is not supported. No legacy 'bulk recipient' allowed. In v2.1 of the eSignature API, you must use a bulk send list instead of a bulk recipient. See the API documentation for details.                                                                        |
        | BULK_SEND_RECIPIENT_ROLE_DOES_NOT_MATCH                    | Recipient Role {envelopeMember.RoleName} does not match. Make sure the recipient information in the list and the envelope is compatible.                                                                                                                                                               |
        | BULK_SEND_DUPLICATE_RECIPIENT_DETECTED                     | Duplicate recipients ({0}) not allowed, unless recipients have unique routing order specified on envelope.                                                                                                                                                                                             |
        | BULK_SEND_ENVELOPE_HAS_NO_TABS                             | Bulk sending copy contains tabs, but the specified envelope does not. List and envelope tabs cannot be coalesced. Make sure they are compatible for sending.                                                                                                                                           |
        | BULK_SEND_TAB_LABEL_DOES_NOT_EXIST_IN_ENVELOPE             | Tab with label {0} does not exist in envelope. Add the tab label to the envelope, remove the label from the list, or make sure you're specifying the correct list and envelope.                                                                                                                        |
        | BULK_SEND_TAB_DOES_NOT_MATCH                               | Tab {0} does not match {0} in envelope. A tab exists on the list that does not match or is missing on the envelope. Make sure the tabs on the list and the envelope match.                                                                                                                             |
        | BULK_SEND_ENVELOPE_HAS_NO_ENVELOPE_CUSTOM_FIELDS           | Bulk sending copy contains custom fields, but the specified envelope does not. There are custom fields on the list that the envelope does not have. Make sure that any custom fields on the list and the envelope match.                                                                               |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_DOES_NOT_EXIST_IN_ENVELOPE | Custom field {0} does not exist in the envelope. Either add the custom field on the list to the envelope, remove the custom field from the list, or make sure you're specifying the correct list and envelope.                                                                                         |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_NAME_DOES_NOT_MATCH        | Custom field names must match. {0} and {1} do not match. The custom field names on the list and the envelope do not match. Use identical names for both.                                                                                                                                               |

        [create_list]:      https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendList
        [create_test]:      https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendTestRequest
        [BulkSendOverview]: https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend

      operationId: BulkSendV2Send_PostBulkSendRequest
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bulkSendListId
          in: path
          description: The GUID of the bulk send list. This property is created after
            you post a new bulk send list.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkSendRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/bulkSendRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createBulkSendRequest
      x-ds-method: createBulkSendRequest
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: bulkSendRequest
  /v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}/test:
    post:
      tags:
        - BulkSend
      summary: Creates a bulk send test
      description: |+
        This method tests a bulk send list for compatibility with the envelope or template that you want to send. For example, a template that has three roles is not compatible with a bulk send list that has only two recipients. For this reason, you might want to test compatibility first.

        A successful test result returns `true` for the `canBeSent` property. An unsuccessful test returns a JSON response that contains information about the errors that occurred.

        If the test is successful, you can then send the envelope or template by using the [BulkSend::createBulkSendRequest][BulkSendRequest] method.

        ## Envelope Compatibility Checks

        This section describes the envelope compatibility checks that the system performs.

        **Top-Level Issues**

        - Envelopes must be in a sendable state.
        - The bulk send list must contain at least one copy (instance of an envelope), and no more than the maximum number of copies allowed for the account.
        - The envelope must not be null and must be visible to the current user.
        - The account cannot have more queued envelopes than the maximum number configured for the account.
        - The bulk send list must exist.

        **Recipients**

        - The envelope must have recipients.
        - If you are using an envelope, all of the recipients defined in the bulk send list must have corresponding recipient IDs in the envelope definition. If you are using a template, you must either match the recipient IDs or role IDs.
        - The envelope cannot contain a bulk recipient (an artifact of the legacy version of DocuSign's bulk send
          functionality).

        **Recipient Tabs**

        - Every `recipient ID, tab label` pair in the bulk send list must correspond to a tab in the envelope.

        **Custom Fields**

        - Each envelope-level custom field in the bulk send list must correspond to the name of a `customField` in the
          envelope definition. You do not have to match the recipient-level custom fields.

        [BulkSendRequest]:  https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendRequest


      operationId: BulkSendV2Test_PostBulkSendTestRequest
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bulkSendListId
          in: path
          description: The GUID of the bulk send list. This property is created after
            you post a new bulk send list.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkSendRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/bulkSendRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkSendTestResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createBulkSendTestRequest
      x-ds-method: createBulkSendTestRequest
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: bulkSendRequest
  /v2.1/accounts/{accountId}/captive_recipients/{recipientPart}:
    delete:
      tags:
        - Accounts
      summary: Deletes the signature for one or more captive recipient records.
      description: This method deletes the signature for one or more captive recipient
        records. It is primarily used for testing. This functionality provides a way
        to reset the signature associated with a client user ID so that a new signature
        can be created the next time the client user ID is used.
      operationId: CaptiveRecipients_DeleteCaptiveRecipientsPart
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientPart
          in: path
          description: 'Signature is the only supported value. '
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/captiveRecipientInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/captiveRecipientInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/captiveRecipientInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteCaptiveRecipient
      x-ds-method: deleteCaptiveRecipient
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: captiveRecipientInformation
  /v2.1/accounts/{accountId}/chunked_uploads:
    post:
      tags:
        - ChunkedUploads
      summary: Initiate a new chunked upload.
      description: This method initiates a new chunked upload with the first part
        of the content.
      operationId: ChunkedUploads_PostChunkedUploads
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chunkedUploadRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/chunkedUploadRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/chunkedUploadResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createChunkedUpload
      x-ds-api-status: beta
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: chunkedUploadRequest
  /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}:
    get:
      tags:
        - ChunkedUploads
      summary: Retrieves metadata about a chunked upload.
      description: |-
        Returns the details (but not the content) about a chunked upload.

        **Note**: You cannot obtain details about a chunked upload that has expired, been deleted, or consumed by other actions.
      operationId: ChunkedUploads_GetChunkedUpload
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: chunkedUploadId
          in: path
          description: 'The id of the chunked upload. '
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: (Optional) This parameter enables you to include additional attribute
            data in the response. The valid value for this method is `checksum`, which
            returns an SHA256 checksum of the content of the chunked upload in the response.
            You can use compare this checksum against your own checksum of the original
            content to verify that there are no missing parts before you attempt to
            commit the chunked upload.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/chunkedUploadResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getChunkedUpload
      x-ds-api-status: beta
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - ChunkedUploads
      summary: Commit a chunked upload.
      description: |-
        This method checks the integrity of a chunked upload and then commits it. When this request is successful, the chunked upload is then ready to be referenced in other API calls.

        If the request is unsuccessful, ensure that you have uploaded all of the parts by using the Update method.

        **Note**: After you commit a chunked upload, it no longer accepts additional parts.
      operationId: ChunkedUploads_PutChunkedUploads
      parameters:
        - name: accountId
          in: path
          description: (Required) The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: chunkedUploadId
          in: path
          description: (Required) The id of the chunked upload to commit.
          required: true
          schema:
            type: string
        - name: action
          in: query
          description: (Required) You must use this query parameter with the value `commit`,
            which affirms the request to validate and prepare the chunked upload for
            use with other API calls.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/chunkedUploadResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateChunkedUpload
      x-ds-api-status: beta
      x-ds-method: commit
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    delete:
      tags:
        - ChunkedUploads
      summary: Deletes a chunked upload.
      description: |-
        Deletes a chunked upload that has been committed but not yet consumed.

        This method cannot be used to delete the following types of chunked uploads, which the system deletes automatically:


        - Chunked uploads that have been consumed by use in another API call.
        - Expired chunked uploads.

        **Note**: If you are aware of a chunked upload that can be discarded, the best practice is to explicitly delete it. If you wait for the system to automatically delete it after it expires, the chunked upload will continue to count against your quota.
      operationId: ChunkedUploads_DeleteChunkedUpload
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: chunkedUploadId
          in: path
          description: 'The id of the chunked upload. '
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/chunkedUploadResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteChunkedUpload
      x-ds-api-status: beta
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/{chunkedUploadPartSeq}:
    put:
      tags:
        - ChunkedUploads
      summary: Add a chunk to an existing chunked upload.
      description: "Adds a chunk or part to an existing chunked upload. After you\
        \ use the Create method to initiate a new chunked upload and upload the first\
        \ part, \nuse this method to upload subsequent parts.\n\nFor simplicity, we\
        \ recommend that you upload the parts in their sequential order ( 1,2, 3,\
        \ 4, etc.). The Create method adds the first part and assigns it the `sequence`\
        \ value `0`. As a result, we recommend that you start with a `sequence` value\
        \ of `1` when you use this method, and continue uploading parts contiguously\
        \ until you have uploaded the entirety of the original content to DocuSign.\n\
        \nExample:\n\n\n```\nPUT /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/1\n\
        PUT /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/2\nPUT /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/3\n\
        ```\n\n**Note**: You cannot replace a part that DocuSign has already received,\
        \ or add parts to a chunked upload that is already successfully committed."
      operationId: ChunkedUploads_PutChunkedUploadPart
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: chunkedUploadId
          in: path
          description: 'The id of the chunked upload. '
          required: true
          schema:
            type: string
        - name: chunkedUploadPartSeq
          in: path
          description: |-
            The sequence or order of the part in the chunked upload. By default, the sequence of the first part that is uploaded as part of the Create request is `0`.

            **Note**: You can add parts out of order. However, the chunked upload must consist of a contiguous series of one or more parts before you can successfully commit it.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chunkedUploadRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/chunkedUploadRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/chunkedUploadResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateChunkedUploadPart
      x-ds-api-status: beta
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: chunkedUploadRequest
  /v2.1/accounts/{accountId}/connect:
    get:
      tags:
        - ConnectConfigurations
      summary: Get Connect Configuration Information
      description: |-
        Retrieves all the DocuSign Custom Connect definitions for the specified account.

        **Note**: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
      operationId: Connect_GetConnectConfigs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectConfigResults'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listConfigurations
      x-ds-method: list
      x-ds-service: Connect
      x-ds-in-sdk: true
    put:
      tags:
        - ConnectConfigurations
      summary: Updates a specified Connect configuration.
      description: |-
        Updates the specified DocuSign Connect configuration in your account.

        **Note**: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
      operationId: Connect_PutConnectConfiguration
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/connectCustomConfiguration'
          application/xml:
            schema:
              $ref: '#/components/schemas/connectCustomConfiguration'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectCustomConfiguration'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateConfiguration
      x-ds-method: update
      x-ds-service: Connect
      x-ds-in-sdk: true
      x-codegen-request-body-name: connectCustomConfiguration
    post:
      tags:
        - ConnectConfigurations
      summary: Creates a connect configuration for the specified account.
      description: |
        Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [DocuSign Connect](https://developers.docusign.com/esign-rest-api/guides/connect).

        **Note**: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
      operationId: Connect_PostConnectConfiguration
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/connectCustomConfiguration'
          application/xml:
            schema:
              $ref: '#/components/schemas/connectCustomConfiguration'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectCustomConfiguration'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createConfiguration
      x-ds-method: create
      x-ds-service: Connect
      x-ds-in-sdk: true
      x-codegen-request-body-name: connectCustomConfiguration
  /v2.1/accounts/{accountId}/connect/{connectId}:
    get:
      tags:
        - ConnectConfigurations
      summary: Gets the details about a Connect configuration.
      description: |
        Retrieves the information for the specified DocuSign Connect configuration.

        **Note**: Connect must be enabled for your account to use this function.
      operationId: Connect_GetConnectConfig
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: connectId
          in: path
          description: The ID of the custom Connect configuration being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectConfigResults'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getConfiguration
      x-ds-method: get
      x-ds-service: Connect
      x-ds-in-sdk: true
    delete:
      tags:
        - ConnectConfigurations
      summary: Deletes the specified connect configuration.
      description: |+
        Deletes the specified DocuSign Connect configuration.

        **Note**: Connect must be enabled for your account to use this function.


      operationId: Connect_DeleteConnectConfig
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: connectId
          in: path
          description: The ID of the custom Connect configuration being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteConfiguration
      x-ds-method: delete
      x-ds-service: Connect
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/connect/{connectId}/users:
    get:
      tags:
        - ConnectConfigurations
      summary: Returns users from the configured Connect service.
      description: Returns users from the configured Connect service.
      operationId: Connect_GetConnectUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: connectId
          in: path
          description: The ID of the custom Connect configuration being accessed.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: |
            Optional. Number of items to return.
          schema:
            type: string
        - name: email_substring
          in: query
          description: Filters returned user records by full email address or a substring
            of email address.
          schema:
            type: string
        - name: list_included_users
          in: query
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values. The value **thumbnail** may be used to return the page
            image.
          schema:
            type: string
        - name: status
          in: query
          description: "Filters the results by user status.\nYou can specify a comma-separated\n\
          list of the following statuses:\n\n* ActivationRequired \n* ActivationSent\
          \ \n* Active\n* Closed \n* Disabled\n"
          schema:
            type: string
        - name: user_name_substring
          in: query
          description: |-
            Filters results based on a full or partial user name.

            **Note**: When you enter a partial user name, you do not use a wildcard character.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/integratedUserInfoList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: connectUsers
      x-ds-method: listUsers
      x-ds-service: Connect
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/connect/envelopes/{envelopeId}/retry_queue:
    put:
      tags:
        - ConnectEvents
      summary: Republishes Connect information for the specified envelope.
      description: Republishes Connect information for the specified envelope.
      operationId: ConnectPublish_PutConnectRetryByEnvelope
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectFailureResults'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: retryEventForEnvelope
      x-ds-method: retryForEnvelope
      x-ds-service: Connect
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/connect/envelopes/retry_queue:
    put:
      tags:
        - ConnectEvents
      summary: Republishes Connect information for multiple envelopes.
      description: |
        Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [Connect::listEventLogs](https://developers.docusign.com/docs/esign-rest-api/reference/Connect/ConnectEvents/list) retrieve the failure log.
      operationId: ConnectPublish_PutConnectRetry
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/connectFailureFilter'
          application/xml:
            schema:
              $ref: '#/components/schemas/connectFailureFilter'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectFailureResults'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: retryEventForEnvelopes
      x-ds-method: retryForEnvelopes
      x-ds-service: Connect
      x-ds-in-sdk: true
      x-codegen-request-body-name: connectFailureFilter
  /v2.1/accounts/{accountId}/connect/failures:
    get:
      tags:
        - ConnectEvents
      summary: Gets the Connect failure log information.
      description: Retrieves the Connect failure log information. You can use this
        log to determine which envelopes failed to post, in order to create a republish
        request.
      operationId: ConnectFailures_GetConnectLogs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: from_date
          in: query
          description: |-
            The start date for a date range in UTC DateTime format.

            **Note**: If this property is null, no date filtering is applied.
          schema:
            type: string
        - name: to_date
          in: query
          description: |-
            The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.

            **Note**: If this property is null, the value defaults to the current date.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectLogs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listEventFailureLogs
      x-ds-method: listFailures
      x-ds-service: Connect
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/connect/failures/{failureId}:
    delete:
      tags:
        - ConnectEvents
      summary: Deletes a Connect failure log entry.
      description: Deletes the Connect failure log information for the specified entry.
      operationId: ConnectFailures_DeleteConnectFailureLog
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: failureId
          in: path
          description: The id of the Connect post failure.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteEventFailureLog
      x-ds-method: deleteFailure
      x-ds-service: Connect
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/connect/logs:
    get:
      tags:
        - ConnectEvents
      summary: Gets the Connect log.
      description: |-
        Retrieves a list of connect log entries for your account.

        **Note**: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded.
      operationId: ConnectLog_GetConnectLogs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: from_date
          in: query
          description: |-
            The start date for a date range in UTC DateTime format.

            **Note**: If this property is null, no date filtering is applied.
          schema:
            type: string
        - name: to_date
          in: query
          description: |-
            The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.

            **Note**: If this property is null, the value defaults to the current date.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectLogs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listEventLogs
      x-ds-method: list
      x-ds-service: Connect
      x-ds-in-sdk: true
    delete:
      tags:
        - ConnectEvents
      summary: Deletes a list of Connect log entries.
      description: Deletes a list of Connect log entries for your account.
      operationId: ConnectLog_DeleteConnectLogs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteEventLogs
      x-ds-method: deleteList
      x-ds-service: Connect
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/connect/logs/{logId}:
    get:
      tags:
        - ConnectEvents
      summary: Gets a Connect log entry.
      description: |-
        Retrieves the specified Connect log entry for your account.

        **Note**: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded.
      operationId: ConnectLog_GetConnectLog
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: logId
          in: path
          description: The id of the Connect log entry.
          required: true
          schema:
            type: string
        - name: additional_info
          in: query
          description: When set to **true**, the response includes the `connectDebugLog`
            information.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/connectLog'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getEventLog
      x-ds-method: get
      x-ds-service: Connect
      x-ds-in-sdk: true
    delete:
      tags:
        - ConnectEvents
      summary: Deletes a specified Connect log entry.
      description: |
        Deletes a specified entry from the Connect Log.
      operationId: ConnectLog_DeleteConnectLog
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: logId
          in: path
          description: The id of the Connect log entry.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteEventLog
      x-ds-method: delete
      x-ds-service: Connect
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/connect/secret/{keyId}:
    delete:
      tags:
        - ConnectSecret
      summary: Deletes the connect HMAC Secret for specified account.
      operationId: ConnectHMAC_DeleteConnectSecret
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteConnectSecret
      x-ds-method: deleteConnectSecret
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/consumer_disclosure:
    get:
      tags:
        - AccountConsumerDisclosures
      summary: Gets the default Electronic Record and Signature Disclosure for an
        account.
      description: "Retrieves the default, HTML-formatted Electronic Record and Signature\
        \ Disclosure (ERSD) associated with the account. \n\nThis is the default ERSD\
        \ disclosure that DocuSign provides for the convenience of U.S.-based customers\
        \ only. This default disclosure is only valid for transactions between U.S.-based\
        \ parties.\n\nTo set the language of the disclosure that you want to retrieve,\
        \ use the optional `langCode` query parameter."
      operationId: ConsumerDisclosure_GetConsumerDisclosure
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: langCode
          in: query
          description: "(Optional) The code for the signer language version of the disclosure\
          \ that you want to retrieve. The following languages are supported:\n\n\
          - Arabic (`ar`)\n- Bulgarian (`bg`)\n- Czech (`cs`)\n- Chinese Simplified\
          \ (`zh_CN`)\n- Chinese Traditional (`zh_TW`)\n- Croatian (`hr`)\n- Danish\
          \ (`da`)\n- Dutch (`nl`)\n- English US (`en`)\n- English UK (`en_GB`)\n\
          - Estonian (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n- French (`fr`)\n-\
          \ French Canadian (`fr_CA`)\n- German (`de`)\n- Greek (`el`)\n- Hebrew (`he`)\n\
          - Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa Indonesian (`id`)\n- Italian\
          \ (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n- Latvian (`lv`)\n- Lithuanian\
          \ (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian (`no`)\n- Polish (`pl`)\n\
          - Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n- Romanian (`ro`)\n\
          - Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n- Slovenian (`sl`)\n\
          - Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n- Swedish (`sv`)\n\
          - Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`) \n- Vietnamese (`vi`)\n\
          \nAdditionally, you can automatically detect the browser language being\
          \ used by the viewer and display the disclosure in that language by setting\
          \ the value to `browser`."
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountConsumerDisclosures'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getConsumerDisclosureDefault
      x-ds-method: getDefault
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/consumer_disclosure/{langCode}:
    get:
      tags:
        - AccountConsumerDisclosures
      summary: Gets the Electronic Record and Signature Disclosure for an account.
      description: "Retrieves the HTML-formatted Electronic Record and Signature Disclosure\
        \ (ERSD) associated with the account. \n\nTo set the language of the disclosure\
        \ that you want to retrieve, use the optional `langCode` query parameter.\n\
        \n**Note**: The text of the default disclosure is always in English, but if\
        \ you are using a custom disclosure and have created versions of it in different\
        \ signer languages, you can use the `langCode` parameter to specify the signer\
        \ language version that you want to retrieve.  "
      operationId: ConsumerDisclosure_GetConsumerDisclosureLangCode
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: langCode
          in: path
          description: "(Optional) The code for the signer language version of the disclosure\
          \ that you want to retrieve. The following languages are supported:\n\n\
          - Arabic (`ar`)\n- Bulgarian (`bg`)\n- Czech (`cs`)\n- Chinese Simplified\
          \ (`zh_CN`)\n- Chinese Traditional (`zh_TW`)\n- Croatian (`hr`)\n- Danish\
          \ (`da`)\n- Dutch (`nl`)\n- English US (`en`)\n- English UK (`en_GB`)\n\
          - Estonian (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n- French (`fr`)\n-\
          \ French Canadian (`fr_CA`)\n- German (`de`)\n- Greek (`el`)\n- Hebrew (`he`)\n\
          - Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa Indonesian (`id`)\n- Italian\
          \ (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n- Latvian (`lv`)\n- Lithuanian\
          \ (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian (`no`)\n- Polish (`pl`)\n\
          - Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n- Romanian (`ro`)\n\
          - Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n- Slovenian (`sl`)\n\
          - Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n- Swedish (`sv`)\n\
          - Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`) \n- Vietnamese (`vi`)\n\
          \nAdditionally, you can automatically detect the browser language being\
          \ used by the viewer and display the disclosure in that language by setting\
          \ the value to `browser`."
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountConsumerDisclosures'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getConsumerDisclosure
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountConsumerDisclosures
      summary: Updates the Electronic Record and Signature Disclosure for an account.
      description: "Account administrators can use this method to perform the following\
        \ tasks:\n\n- Customize values in the default disclosure.\n- Switch to a custom\
        \ disclosure that uses your own text and HTML formatting.\n- Change values\
        \ in your existing consumer disclosure. \n\nTo specify the signer language\
        \ version of the disclosure that you are updating, use the optional `langCode`\
        \ query parameter.\n\n**Note**: Only account administrators can use this method.\
        \ Each time you change the disclosure content, all unsigned recipients of\
        \ outstanding documents will be required to accept a new version. \n\n## Updating\
        \ the default disclosure\n\nWhen you update the default disclosure, you can\
        \ edit all properties except for the following ones:\n\n- `accountEsignId`:\
        \ This property is read only.\n- `custom`: The default value is **false**.\
        \ Editing this property causes the default disclosure to switch to a custom\
        \ disclosure.\n- `esignAgreement`: This property is read only.\n- `esignText`:\
        \ You cannot edit this property when `custom` is set to **false**. The API\
        \ returns a 200 OK HTTP response, but does not update the `esignText`.\n-\
        \ Metadata properties: These properties are read only.\n\n**Note**: The text\
        \ of the default disclosure is always in English.\n\n## Switching to a custom\
        \ disclosure\n\nTo switch to a custom disclosure, set the `custom` property\
        \ to **true** and customize the value for the `eSignText` property. \n\nYou\
        \ can also edit all of the other properties except for the following ones:\n\
        \n- `accountEsignId`: This property is read only.\n- `esignAgreement`: This\
        \ property is read only.\n- Metadata properties: These properties are read\
        \ only.\n\n**Note**: When you use a custom disclosure, you can create versions\
        \ of it in different signer languages and se the `langCode` parameter to specify\
        \ the signer language version that you are updating.\n\n**Important**:  When\
        \ you switch from a default to a custom disclosure, note the following information:\n\
        \n- You will not be able to return to using the default disclosure.\n- Only\
        \ the disclosure for the currently selected signer language is saved. DocuSign\
        \ will not automatically translate your custom disclosure. You must create\
        \ a disclosure for each language that your signers use.\n\n## Updating a custom\
        \ disclosure\n\nWhen you update a custom disclosure, you can update all of\
        \ the properties except for the following ones:\n\n- `accountEsignId`: This\
        \ property is read only. \n- `esignAgreement`: This property is read only.\n\
        - Metadata properties: These properties are read only.\n\n**Important**: Only\
        \ the disclosure for the currently selected signer language is saved. DocuSign\
        \ will not automatically translate your custom disclosure. You must create\
        \ a disclosure for each language that your signers use.\n\n"
      operationId: ConsumerDisclosure_PutConsumerDisclosure
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: langCode
          in: path
          description: "(Optional) The code for the signer language version of the disclosure\
          \ that you want to update. The following languages are supported:\n\n- Arabic\
          \ (`ar`)\n- Bulgarian (`bg`)\n- Czech (`cs`)\n- Chinese Simplified (`zh_CN`)\n\
          - Chinese Traditional (`zh_TW`)\n- Croatian (`hr`)\n- Danish (`da`)\n- Dutch\
          \ (`nl`)\n- English US (`en`)\n- English UK (`en_GB`)\n- Estonian (`et`)\n\
          - Farsi (`fa`)\n- Finnish (`fi`)\n- French (`fr`)\n- French Canadian (`fr_CA`)\n\
          - German (`de`)\n- Greek (`el`)\n- Hebrew (`he`)\n- Hindi (`hi`)\n- Hungarian\
          \ (`hu`)\n- Bahasa Indonesian (`id`)\n- Italian (`it`)\n- Japanese (`ja`)\n\
          - Korean (`ko`)\n- Latvian (`lv`)\n- Lithuanian (`lt`)\n- Bahasa Melayu\
          \ (`ms`)\n- Norwegian (`no`)\n- Polish (`pl`)\n- Portuguese (`pt`)\n- Portuguese\
          \ Brazil (`pt_BR`)\n- Romanian (`ro`)\n- Russian (`ru`)\n- Serbian (`sr`)\n\
          - Slovak (`sk`)\n- Slovenian (`sl`)\n- Spanish (`es`)\n- Spanish Latin America\
          \ (`es_MX`)\n- Swedish (`sv`)\n- Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian\
          \ (`uk`) \n- Vietnamese (`vi`)\n\nAdditionally, you can automatically detect\
          \ the browser language being used by the viewer and display the disclosure\
          \ in that language by setting the value to `browser`."
          required: true
          schema:
            type: string
        - name: include_metadata
          in: query
          description: (Optional) When set to true, the response includes metadata indicating
            which properties are editable.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/consumerDisclosure'
          application/xml:
            schema:
              $ref: '#/components/schemas/consumerDisclosure'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/consumerDisclosure'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateConsumerDisclosure
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: consumerDisclosure
  /v2.1/accounts/{accountId}/contacts:
    put:
      tags:
        - Contacts
      summary: Updates one or more contacts.
      description: This method updates one or more contacts associated with an account.
      operationId: Contacts_PutContacts
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contactModRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/contactModRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/contactUpdateResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: putContacts
      x-ds-method: update
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: contactModRequest
    post:
      tags:
        - Contacts
      summary: Imports new contacts into a contacts list.
      description: |-
        This method imports multiple new contacts into a contact list from a CSV, JSON, or XML file.

        To use this method, you must provide a request body in one of the supported formats and include a `content-type` header with the appropriate value.
      operationId: Contacts_PostContacts
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contactModRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/contactModRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/contactUpdateResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: postContacts
      x-ds-method: create
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: contactModRequest
    delete:
      tags:
        - Contacts
      summary: Deletes multiple contacts from an account.
      description: This method deletes multiple contacts associated with an account.
      operationId: Contacts_DeleteContacts
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contactModRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/contactModRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/contactUpdateResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteContacts
      x-ds-method: deleteList
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: contactModRequest
  /v2.1/accounts/{accountId}/contacts/{contactId}:
    get:
      tags:
        - Contacts
      summary: Gets one or more contacts.
      description: |-
        This method returns one or more contacts
        associated with a DocuSign account. You can also
        retrieve contacts from connected [cloud storage][CloudStorage] providers by using the
        `cloud_provider` query parameter. By default,
        contacts are retrieved from the DocuSign account's
        default address book.

        To return a specific contact, use the `contactId`
        query parameter. To return all contacts associated
        with an account, omit this parameter.

        [CloudStorage]: https://developers.docusign.com/docs/esign-rest-api/reference/CloudStorage
      operationId: Contacts_GetContactById
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: contactId
          in: path
          description: The id of a contact person in the account's address book.
          required: true
          schema:
            type: string
        - name: cloud_provider
          in: query
          description: |-
            (Optional) The cloud provider from which to retrieve the contacts. Valid values are:

            - `rooms`
            - `docusignCore` (default)
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/contactGetResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getContactById
      x-ds-method: get
      x-ds-service: Users
      x-ds-in-sdk: true
    delete:
      tags:
        - Contacts
      summary: Deletes a contact.
      description: This method deletes a contact associated with an account.
      operationId: Contacts_DeleteContactWithId
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: contactId
          in: path
          description: The id of a contact person in the account's address book.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/contactUpdateResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteContactWithId
      x-ds-method: delete
      x-ds-service: Users
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/custom_fields:
    get:
      tags:
        - AccountCustomFields
      summary: Gets a list of custom fields.
      description: This method returns a list of the envelope and document custom
        fields associated with an account.
      operationId: AccountCustomFields_GetAccountCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountCustomFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listCustomFields
      x-ds-method: list
      x-ds-service: Accounts
      x-ds-in-sdk: true
    post:
      tags:
        - AccountCustomFields
      summary: Creates an account custom field.
      description: This method creates a custom field and makes it available for all
        new envelopes associated with an account.
      operationId: AccountCustomFields_PostAccountCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: apply_to_templates
          in: query
          description: (Optional) When set to **true**, the new custom field is applied
            to all of the templates on the account.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customField'
          application/xml:
            schema:
              $ref: '#/components/schemas/customField'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountCustomFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createCustomField
      x-ds-method: create
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: customField
  /v2.1/accounts/{accountId}/custom_fields/{customFieldId}:
    put:
      tags:
        - AccountCustomFields
      summary: Updates an account custom field.
      description: This method updates an existing account custom field.
      operationId: AccountCustomFields_PutAccountCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: customFieldId
          in: path
          description: The id of the custom field.
          required: true
          schema:
            type: string
        - name: apply_to_templates
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customField'
          application/xml:
            schema:
              $ref: '#/components/schemas/customField'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountCustomFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateCustomField
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: customField
    delete:
      tags:
        - AccountCustomFields
      summary: Deletes an account custom field.
      description: This method deletes an existing account custom field.
      operationId: AccountCustomFields_DeleteAccountCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: customFieldId
          in: path
          description: The id of the custom field.
          required: true
          schema:
            type: string
        - name: apply_to_templates
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteCustomField
      x-ds-method: delete
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/display_appliance_info/dynamicsystemsettings:
    get:
      tags:
        - ApplianceInfo
      summary: Returns document pages for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetDynamicSystemSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDynamicSystemSettings
      x-ds-method: getDynamicSystemSettings
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/display_appliance_info/templateInfo:
    post:
      tags:
        - ApplianceInfo
      summary: Returns whether a template was encrypted by Display Appliance.
      operationId: EnvelopeApplianceInfo_GetTemplateInfo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getTemplateInfo
      x-ds-method: getTemplateInfo
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes:
    get:
      tags:
        - Envelopes
      summary: Gets status changes for one or more envelopes.
      description: "Retrieves a list of envelopes that match your request. \nA large\
        \ set of optional filters let you filter\nby date,\nby envelope ID,\nor by\
        \ status codes.\n\nYour request must include one or more of the following\
        \ parameters:\n\n* `from_date`\n* `envelope_ids`\n* `transaction_ids`\n\n\n\
        Getting envelope status using `transaction_ids` is useful\nfor offline signing\
        \ situations where it can be used\ndetermine if an envelope was created or\
        \ not. It can be used\nfor the cases where a network connection was lost,\
        \ before\nthe envelope status could be returned.\n\nTo avoid unnecessary database\
        \ queries, the DocuSign\nsignature platform first checks requests to ensure\
        \ that the\nfilter set supplied does not result in a zero-size response\n\
        before querying the database. \n\nFor example, for a request with a `from_to_status`\
        \ of\n`delivered` and a current `status` of `created,sent`,\nDocuSign will\
        \ always return an empty list. \nThis is because the request translates to:\
        \ find the\nenvelopes that were delivered between the `from_date` and\n`to_date`\
        \ dates that have a current status of `created` or\n`sent`. Since an envelope\
        \ that has been delivered can\nnever have a status of `created` or `sent`,\
        \ a zero-size\nresponse would be generated. \nIn this case, DocuSign does\
        \ not query the database\nand returns an empty list immediately.\n\n\nThe\
        \ following table shows the valid current envelope\nstatuses (`status` parameter)\
        \ for the different status\nqualifiers (`from_to_status` parameter) in the\
        \ request. If\nthe status and status qualifiers in the API request do not\n\
        contain any of the values shown in the Valid Current\nStatuses column, then\
        \ an empty list is returned.\n\nClient applications should check that the\
        \ statuses (`status`\nparameter) they are requesting make sense for a given\n\
        `from_to_status` parameter value.\n\n| Status Qualifier<br>(`from_to_status`)\
        \ | Effective Status Qualifier | Valid Current Statuses                  \
        \                                    |  \n| :-------------------------------------\
        \ | :------------------------- | :--------------------------------------------------------------------------\
        \ |  \n| any (changed)                          | StatusChanged          \
        \    | any, created, sent, delivered, signed, completed, declined, voided,\
        \ deleted |  \n| created                                | Created        \
        \            | any, created, sent, delivered, signed, completed, declined,\
        \ voided, deleted |  \n| sent                                   | Sent   \
        \                    | any, sent, delivered, signed, completed, declined,\
        \ voided, deleted          |  \n| delivered                              |\
        \ StatusChanged              | any, delivered, signed, completed, declined,\
        \ voided, deleted                |  \n| signed                           \
        \      | StatusChanged              | any, signed, completed, declined, voided,\
        \ deleted                           |  \n| completed                     \
        \         | Completed                  | any, completed, declined, voided,\
        \ deleted                                   |  \n| declined              \
        \                 | StatusChanged              | any, declined, voided, deleted\
        \                                              |  \n| timedout<br>always return\
        \ zero results | StatusChanged              | any, voided, deleted       \
        \                                                 |  \n| voided          \
        \                       | Voided                     | any, voided, deleted\
        \                                                        |  \n| deleted  \
        \                              | StatusChanged              | any, deleted\
        \                                                                |  \n\n##\
        \ Extraneous results\n\nIn some cases, a request for a specific envelope status\
        \ will\ninclude envelopes with additional statuses. For example, in\na request\
        \ with a `from_date` of 2017-01-01, a `to_date` of\n2017-01-07 and the status\
        \ qualifier (`from_to_status`) set\nto `delivered`, the response set might\
        \ contain envelopes\nthat were created during that time period, but not delivered\n\
        during the time period. As a workaround, check the envelope\nstatus values\
        \ in the result set as needed. \n"
      operationId: Envelopes_GetEnvelopes
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: ac_status
          in: query
          description: 'Specifies the Authoritative Copy Status for the envelopes. The
          possible values are: Unknown, Original, Transferred, AuthoritativeCopy,
          AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending,
          Deposited, DepositedEO, or DepositFailed.'
          schema:
            type: string
        - name: block
          in: query
          description: |
            Reserved for DocuSign.
          schema:
            type: string
        - name: cdse_mode
          in: query
          description: |
            Reserved for DocuSign.
          schema:
            type: string
        - name: continuation_token
          in: query
          description: A token returned in the response to a previous API call that
            is used to resume a search query from a specific point.
          schema:
            type: string
        - name: count
          in: query
          description: |
            Optional. Number of items to return. Currently there is no implicit maximum limit of the number of items that can be returned.
          schema:
            type: string
        - name: custom_field
          in: query
          description: "Optional. Specifies a envelope custom field name and value searched\
          \ for in the envelopes. Format: `custom_envelope_field_name=desired_value`\n\
          \nExample: If you have an envelope custom field named \"Region\" and you\
          \ want to search for all envelopes where the value is \"West\" you would\
          \ use set this parameter to `Region=West`. \n \n"
          schema:
            type: string
        - name: email
          in: query
          description: |
            Limit results to envelopes
            sent by the account user
            with this email address.

            `user_name` must be given as well,
            and both `email` and `user_name`
            must refer to an existing account user.
          schema:
            type: string
        - name: envelope_ids
          in: query
          description: Comma separated list of `envelopeId` values.
          schema:
            type: string
        - name: exclude
          in: query
          description: |-
            Excludes information from the response. Enter  as a comma-separated list (e.g., `folders,powerforms`). Valid values are:

            - `recipients`
            - `powerforms`
            - `folders`
          schema:
            type: string
        - name: folder_ids
          in: query
          description: "Returns the envelopes from specific folders. Enter as a comma-separated\
          \ list of either valid folder Guids or the following values: \n\n- `awaiting_my_signature`\n\
          - `completed`\n- `draft`\n- `drafts`\n- `expiring_soon`\n- `inbox`\n- `out_for_signature`\n\
          - `recyclebin`\n- `sentitems`\n- `waiting_for_others`"
          schema:
            type: string
        - name: folder_types
          in: query
          description: "A comma-separated list of folder types you want to retrieve\
          \ envelopes from. Valid values are: \n\n- `normal`\n- `inbox`\n- `sentitems`\n\
          - `draft`\n- `templates`"
          schema:
            type: string
        - name: from_date
          in: query
          description: |-
            Specifies the date and time
            to start looking for status changes.
            This parameter is required
            unless `envelopeIds` or `transactionIds`
            are set.


            Although you can use any date format
            supported by the .NET system library's
            [`DateTime.Parse()`][msoft] function,
            DocuSign recommends
            using [ISO 8601][] format dates
            with an explicit time zone offset
            If you do not provide
            a time zone offset,
            the method uses the server's time zone.

            For example, the following dates and times refer to the same instant:

            * `2017-05-02T01:44Z`
            * `2017-05-01T21:44-04:00`
            * `2017-05-01T18:44-07:00`


            [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse
            [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
          schema:
            type: string
        - name: from_to_status
          in: query
          description: "This is the status type checked for in the `from_date`/`to_date`\
          \ period. If `changed` is specified, then envelopes that changed status\
          \ during the period are found. If for example, `created` is specified, then\
          \ envelopes created during the period are found. Default is `changed`. \n\
          \nPossible values are: Voided, Changed, Created, Deleted, Sent, Delivered,\
          \ Signed, Completed, Declined, TimedOut and Processing."
          schema:
            type: string
        - name: include
          in: query
          description: |
            Specifies additional information to return  about the envelopes. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:

            - `custom_fields`: The custom fields associated with the envelope.
            - `documents`: The documents associated with the envelope.
            - `attachments`: The attachments associated with the envelope.
            - `extensions`: Information about the email settings associated with the envelope.
            - `folders`: The folders where the envelope exists.
            - `recipients`: The recipients associated with the envelope.
            - `powerform`: The PowerForms associated with the envelope.
            - `payment_tabs`: The payment tabs associated with the envelope.
          schema:
            type: string
        - name: include_purge_information
          in: query
          description: When set to **true**, information about envelopes that have been
            deleted is included in the response.
          schema:
            type: string
        - name: intersecting_folder_ids
          in: query
          description: "A comma-separated list of folders that you want want to get\
          \ envelopes from. Valid values are: \n\n- `normal`\n- `inbox`\n- `sentitems`\n\
          - `draft`\n- `templates`"
          schema:
            type: string
        - name: last_queried_date
          in: query
          description: "Returns envelopes that were modified prior to the specified\
          \ date and time. \n\nExample: `2020-05-09T21:56:12.2500000Z`"
          schema:
            type: string
        - name: order
          in: query
          description: Returns envelopes in either ascending (`asc`) or descending (`desc`)
            order.
          schema:
            type: string
        - name: order_by
          in: query
          description: |-
            Sorts results according to a specific property. Valid values are:

            - `last_modified`
            - `action_required`
            - `created`
            - `completed`
            - `envelope_name`
            - `expire`
            - `sent`
            - `signer_list`
            - `status`
            - `subject`
            - `user_name`
            - `status_changed`
            - `last_modified`
          schema:
            type: string
        - name: powerformids
          in: query
          description: A comma-separated list of `PowerFormId` values.
          schema:
            type: string
        - name: query_budget
          in: query
          description: The time in seconds that the query should run before returning
            data.
          schema:
            type: string
        - name: requester_date_format
          in: query
          schema:
            type: string
        - name: search_text
          in: query
          description: Free text search criteria that you can use to filter the list
            of envelopes that is returned.
          schema:
            type: string
        - name: start_position
          in: query
          description: |
            This value is supported and currently has no implicit maximum items.
          schema:
            type: string
        - name: status
          in: query
          description: |
            A comma-separated list of current envelope statuses to included in the response. Possible values are:

            * `completed`
            * `created`
            * `declined`
            * `deleted`
            * `delivered`
            * `processing`
            * `sent`
            * `signed`
            * `timedout`
            * `voided`

            The `any` value is equivalent to any status.
          schema:
            type: string
        - name: to_date
          in: query
          description: |
            Specifies the date and time
            to stop looking for status changes.
            The default is the current date and time.

            Although you can use any date format
            supported by the .NET system library's
            [`DateTime.Parse()`][msoft] function,
            DocuSign recommends
            using [ISO 8601][] format dates
            with an explicit time zone offset
            If you do not provide
            a time zone offset,
            the method uses the server's time zone.

            For example, the following dates and times refer to the same instant:

            * `2017-05-02T01:44Z`
            * `2017-05-01T21:44-04:00`
            * `2017-05-01T18:44-07:00`


            [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse
            [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
          schema:
            type: string
        - name: transaction_ids
          in: query
          description: "If included in the query string, this is a comma separated list\
          \ of envelope `transactionId`s. \n\nIf included in the `request_body`, this\
          \ is a list of envelope `transactionId`s. \n\n###### Note: `transactionId`s\
          \ are only valid in the DocuSign system for seven days.\n"
          schema:
            type: string
        - name: user_filter
          in: query
          description: |-
            Returns envelopes where the current user is the recipient, the sender, or the recipient only. (For example, `user_filter=sender`.) Valid values are:

            - `sender`
            - `recipient`
            - `recipient_only`
          schema:
            type: string
        - name: user_id
          in: query
          description: The ID of the user who created the envelopes to be retrieved.
            Note that an account can have multiple users, and any user with account
            access can retrieve envelopes by user_id from the account.
          schema:
            type: string
        - name: user_name
          in: query
          description: |
            Limit results to envelopes
            sent by the account user
            with this user name.

            `email` must be given as well,
            and both `email` and `user_name`
            must refer to an existing account user.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listStatusChanges
      x-ds-method: listStatusChanges
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |
            This example shows a how to get information about
            envelopes created since January 1, 2016 and before October 6, 2016.
            You can leave off the `to_date` parameter to get envelopes created from the `from_date` to today.

            The request for this endpoint has no payload.

            ### Request
            ```
            GET /restapi/v2.1/accounts/1703061/envelopes?from_date=2016-01-01&to_date=2016-10-06
            ```
          direction: response
          format: json
          response:
            endPosition: "1"
            envelopes:
              - certificateUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/certificate
                customFieldsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/custom_fields
                documentsCombinedUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/combined
                documentsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents
                envelopeId: 379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                envelopeUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                notificationUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/notification
                recipientsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/recipients
                status: completed
                statusChangedDateTime: 2016-10-04T15:26:28.2830000Z
                templatesUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/templates
              - certificateUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/certificate
                customFieldsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/custom_fields
                documentsCombinedUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/combined
                documentsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents
                envelopeId: 4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                envelopeUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                notificationUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/notification
                recipientsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/recipients
                status: sent
                statusChangedDateTime: 2016-10-05T01:04:58.7770000Z
                templatesUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/templates
            nextUri: ""
            previousUri: ""
            resultSetSize: "2"
            startPosition: "0"
            totalSetSize: "2"
          style: custom
          title: Get Status About Envelopes Since a Specified Date
    post:
      tags:
        - Envelopes
      summary: Creates an envelope.
      description: |
        Creates and sends an envelope or creates a draft envelope.
        Envelopes are fundamental resources in the DocuSign platform.

        With this method you can:

        * Create and send an envelope
          with [documents][], [recipients][], and [tabs][].
        * [Create and send an envelope from a template](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/).
        * [Create and send an envelope from
          a combination of documents and templates](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/composite/).
        * Create a draft envelope.


        When you use this method
        to create and send an envelope
        in a single request,
        the following parameters in the request body (an [`envelopeDefinition`][envelopeDefinition]) are required:

        | Parameter      | Description |
        | :--------      | :---------- |
        | `status`       | Set to `sent` to send the envelope to recipients.<br>Set to `created` (or don't set at all) to save the envelope as a draft. |
        | `emailSubject` | The subject of the email used to send the envelope. |
        | `documents`    | The [documents][] to be signed. |
        | `recipients`   | The email addresses of the envelope [recipients][]. |


        **Note**: If the envelope has a workflow definition
        and the `workflowStatus` is `paused`,
        the envelope will not be sent immediately,
        even if the envelope's `status` is `sent`.

        There are many ways to use envelopes.
        You can create and send an envelope
        with a single API request,
        or you can use several API requests
        to create, populate, and send envelopes.


        | See:                  | To learn about:                                                                                                                    |
        | :----------------------- | :--------------------------------------------------------------------------------------------------------------------------------- |
        | [Envelopes][envelopes]   | Envelopes, [adding documents][addingdocs], [tracking][], [locking][], [deleting][], [templates][]                                  |
        | [Documents][documents]   | Documents, [attachments][], [supplemental documents][supdocs], [authoritative copies][authcopies], [purging][]                     |
        | [Recipients][recipients] | Recipients, [recipient types][reciptypes], [recipient status][recipstatus]                                                         |
        | [Tabs][tabs]             | Tabs, [anchoring tabs][tabanchor],   [custom tabs][tabcustom], [payments][] |


        [addingdocs]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [attachments]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [authcopies]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [conoverview]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/overview
        [deleting]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [documents]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents
        [envelopeDefinition]:   https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/
        [envelopes]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes
        [locking]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [payments]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/payment/
        [purging]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [recipients]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients
        [recipstatus]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/
        [reciptypes]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/
        [supdocs]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [tabanchor]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place/
        [tabcustom]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/custom-tabs/
        [tabs]:                 https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs
        [tabtypes]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/
        [templates]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [tracking]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/

        **Note**: When you create an envelope by using a [composite template](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/composite/), you should specify the envelope custom fields in the inline template. Any custom fields that you specify at the root level are ignored.
      operationId: Envelopes_PostEnvelopes
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: cdse_mode
          in: query
          description: |
            Reserved for DocuSign.
          schema:
            type: string
        - name: change_routing_order
          in: query
          description: When true, users can define the routing order of recipients while
            sending documents for signature.
          schema:
            type: string
        - name: completed_documents_only
          in: query
          description: |
            Reserved for DocuSign.
          schema:
            type: string
        - name: merge_roles_on_draft
          in: query
          description: |-
            When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)

            **Note**: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createEnvelope
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |
            This example shows a request/response that includes:

            * A single PDF document to be signed
            * One tab positioned using anchor text
            * One recipient

            See [Requesting a Signature via Email](/esign-rest-api/code-examples/request-a-signature-via-email)
            for a full walkthrough of this example.
          direction: both
          format: json
          response:
            envelopeId: 63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
            status: sent
            statusDateTime: 2016-05-29T17:11:56.1800000Z
            uri: /envelopes/63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
          request:
            documents:
              - documentBase64: '[Document content (PDF File)]'
                documentId: "1"
                fileExtension: pdf
                name: NDA.pdf
            emailSubject: Please sign the NDA
            recipients:
              signers:
                - email: the_nda_signer@example.com
                  name: Darlene Petersen
                  recipientId: "1"
                  routingOrder: "1"
                  tabs:
                    dateSignedTabs:
                      - anchorString: signer1date
                        anchorYOffset: -6
                        fontSize: Size12
                        name: Date Signed
                        recipientId: "1"
                        tabLabel: date_signed
                    fullNameTabs:
                      - anchorString: signer1name
                        anchorYOffset: -6
                        fontSize: Size12
                        name: Full Name
                        recipientId: "1"
                        tabLabel: Full Name
                    signHereTabs:
                      - anchorString: signer1sig
                        anchorUnits: mms
                        anchorXOffset: "0"
                        anchorYOffset: "0"
                        name: Please sign here
                        optional: "false"
                        recipientId: "1"
                        scaleValue: 1
                        tabLabel: signer1sig
            status: sent
          style: custom
          title: Request Signature on Single Document by Email
        - description: |
            This example shows a request/response that includes:

            * Multiple documents, both pdf and Word docx files.
            * Multiple tabs including signing, fullName, dateSigned, and text tabs.
            * Tabs positioned using anchor text.
            * Two recipients, a signer and a cc recipient.

            For more information, and to try this request live, see the [API Recipe](https://www.docusign.com/developer-center/recipes/send-multiple-docs)
          direction: both
          format: json
          response:
            envelopeId: 63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
            status: sent
            statusDateTime: 2016-05-29T17:11:56.1800000Z
            uri: /envelopes/63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
          request:
            documents:
              - documentBase64: '[Document 1 content (PDF File)]'
                documentId: "1"
                fileExtension: pdf
                name: NDA.pdf
              - documentBase64: '[Document 2 content (PDF File)]'
                documentId: "2"
                fileExtension: pdf
                name: House.pdf
              - documentBase64: '[Document 3 content (Word file)]'
                documentId: "3"
                fileExtension: docx
                name: contractor_agreement.docx
            emailSubject: Please sign the house documentation package
            recipients:
              carbonCopies:
                - email: cody_vigil@worldwidecorp.example.com
                  name: Cody Vigil
                  recipientId: "2"
                  routingOrder: "2"
              signers:
                - email: darlene_petersen@newco.example.com
                  name: Darlene Petersen
                  recipientId: "1"
                  routingOrder: "1"
                  tabs:
                    dateSignedTabs:
                      - anchorString: signer1date
                        anchorYOffset: -6
                        fontSize: Size12
                        name: Date Signed
                        recipientId: "1"
                        tabLabel: date_signed
                      - documentId: "2"
                        fontSize: Size12
                        name: Date Signed
                        pageNumber: "1"
                        recipientId: "1"
                        tabLabel: doc3_date_signed
                        xPosition: "89"
                        yPosition: "100"
                    fullNameTabs:
                      - anchorString: signer1name
                        anchorYOffset: -6
                        fontSize: Size12
                        name: Full Name
                        recipientId: "1"
                        tabLabel: Full Name
                    signHereTabs:
                      - anchorString: signer1sig
                        anchorUnits: mms
                        anchorXOffset: "0"
                        anchorYOffset: "0"
                        name: Please sign here
                        optional: "false"
                        recipientId: "1"
                        scaleValue: 1
                        tabLabel: signer1sig
                      - documentId: "2"
                        name: Please sign here
                        optional: "false"
                        pageNumber: "1"
                        recipientId: "2"
                        scaleValue: 1
                        tabLabel: signer1_doc2
                        xPosition: "89"
                        yPosition: "40"
                      - anchorString: Client Signature
                        anchorUnits: mms
                        anchorXOffset: "0"
                        anchorYOffset: -4
                        name: Please sign here
                        optional: "false"
                        recipientId: "1"
                        scaleValue: 1
                        tabLabel: doc3_client_sig
                    textTabs:
                      - anchorString: signer1company
                        anchorYOffset: -8
                        fontSize: Size12
                        name: Company
                        recipientId: "1"
                        required: "true"
                        tabLabel: Company
                      - anchorString: Client Name
                        anchorYOffset: -38
                        fontSize: Size12
                        name: Company
                        recipientId: "1"
                        required: "true"
                        tabLabel: Company
                      - documentId: "3"
                        fontSize: Size10
                        name: Company
                        pageNumber: "1"
                        recipientId: "1"
                        required: "true"
                        tabLabel: Company
                        xPosition: "145"
                        yPosition: "195"
            status: sent
          style: custom
          title: Multiple Documents and Tabs, Signer and CC Recipients
        - description: |-
            For some documents, one or more signatures must be witnessed by an appointed [notary public](https://en.wikipedia.org/wiki/Notary_public).

            DocuSign supports eNotary services for many jurisdictions. This example demonstrates how to send an envelope to be signed by Susan Signer with her signature witnessed by Nancy Notary. You must know the name and email address of the signer and the notary public for a signature to be notarized.

            Note that the full legal name of the signer must be used. It will be checked against the signer's government-issued proof of identity by the notary public.

            Please see the [DocuSign eNotary resource page](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources) for further information. It lists the jurisdictions participating in the DocuSign eNotary program and additional reference information.

            Note that eNotary services are not included with all account types and are **not** included by default with demo/developer sandbox accounts. To enable eNotary service for your sandbox account, contact your DocuSign technical support person or DocuSign customer service.

            The example includes event notification via the Connect service.
          direction: both
          format: json
          response:
            envelopeId: aaaaaaaa-xxxx-xxxx-xxxx-52a86fb94be8
            uri: /envelopes/aaaaaaaa-xxxx-xxxx-xxxx-52a86fb94be8
            statusDateTime: 2017-06-15T11:02:39.3996430Z
            status: sent
          request:
            emailSubject: Important agreement for notarized signature
            status: sent
            recipients:
              inPersonSigners:
                - recipientId: 1
                  email: susan_signer@gmail.com
                  name: Susan Anne Signer
                  routingOrder: 1
                  inPersonSigningType: notary
                  notaryHost:
                    name: Nancy Notary
                    email: nancy@notary-svc.com
                    recipientId: 2
                  tabs:
                    signHereTabs:
                      - documentId: "1"
                        optional: "false"
                        recipientId: "1"
                        xPosition: "100"
                        yPosition: "100"
                        pageNumber: "1"
                        name: Please sign here
                        tabLabel: signer1sig
            documents:
              - documentId: "1"
                name: important document.docx
                fileExtension: docx
                documentBase64: '[Contents elided]'
            eventNotification:
              includeDocumentFields: "false"
              envelopeEvents:
                - envelopeEventStatusCode: Completed
                - envelopeEventStatusCode: Declined
                - envelopeEventStatusCode: Voided
              url: https://listener.example.com/docusign_notifications
              requireAcknowledgment: "true"
              includeSenderAccountAsCustomField: "true"
              loggingEnabled: "true"
              includeDocuments: "false"
              signMessageWithX509Cert: "true"
          style: custom
          title: Create a Notarized Signing Recipient
        - description: |
            DocuSign enables document signers use
            [electronic](https://www.docusign.com/products/electronic-signature) or
            [digital](https://www.docusign.com/how-it-works/electronic-signature/digital-signature) signatures.

            DocuSign has tightly integrated standard digital signatures into the DocuSign Signature platform. This enables a single envelope to include:

            * electronic signatures,
            * AES digital signatures using certificates from DocuSign or from your organization,
            * QES digital signatures from government certified Trust Service Providers (TSPs).

            This example enables the signer to create an eIDAS compliant AES signature with embedded signing. InPerson signers can also use SBS digital signatures.

            [More information on creating SBS digital signature requests.](/esign-rest-api/guides/standards-based-signatures)

            The `clientId` in the example tells DocuSign that the Signing Ceremony will be embedded.
            The example also includes an `eventNotification` object for receiving envelope status updates from DocuSign.

            ## Embedding the signing ceremony
            1. Send the `Envelopes: create` call as shown below in the Request/Response section.
            2. The response will include the `envelopeId`
            3. Use the [EnvelopeViews: createRecipient](../../EnvelopeViews/createRecipient) request to obtain the redirectURL as follows:

            `POST /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/recipient`

            ````
            {
                "clientUserId": "1000",
                "email": "Sam@spade.com",
                "userName": "Sam Spade",
                "returnUrl": "https://your_app.example.com",
                "AuthenticationMethod": "Password"
            }
            ````
            The response will include the `url`. Redirect the user's browser to the url to start the signing ceremony.

            **Note**: You must **immediately** redirect the user to the url you receive from DocuSign. The url is only valid for 5 minutes. Don't request a recipient view url until you are ready to redirect the user's browser.
          direction: both
          format: json
          response:
            envelopeId: caaaaaaa-xxxx-xxxx-xxxx-c171528e99c8
            uri: /envelopes/caaaaaaa-xxxx-xxxx-xxxx-c171528e99c8
            statusDateTime: 2017-06-22T06:44:49.1642220Z
            status: sent
          request:
            documents:
              - documentId: "1"
                name: ' Agreement'
                fileExtension: html
                documentBase64: '[Contents elided]'
            emailSubject: NewCo agreement for signature
            status: sent
            recipients:
              signers:
                - recipientId: "1"
                  clientUserId: "1000"
                  email: Sam@spade.com
                  name: Sam Spade
                  recipientSignatureProviders:
                    - signatureProviderName: UniversalSignaturePen_OpenTrust_Hash_TSP
                      signatureProviderOptions:
                        SMS: +33134567899
                  routingOrder: "1"
                  tabs:
                    signHereTabs:
                      - documentId: "1"
                        optional: "false"
                        recipientId: "1"
                        name: Please sign here
                        tabLabel: signer1sig
                        anchorString: signer1sig
            eventNotification:
              includeDocumentFields: "false"
              envelopeEvents:
                - envelopeEventStatusCode: Completed
                - envelopeEventStatusCode: Declined
                - envelopeEventStatusCode: Voided
              url: https://your_app.example.com/listener
              requireAcknowledgment: "true"
              includeSenderAccountAsCustomField: "true"
              loggingEnabled: "true"
              includeDocuments: "false"
              signMessageWithX509Cert: "true"
          style: custom
          title: Request an SBS digital signature, with an embedded signing ceremony
      x-codegen-request-body-name: envelopeDefinition
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}:
    get:
      tags:
        - Envelopes
      summary: Gets the status of a single envelope.
      description: |-
        Retrieves the overall status for the specified envelope.
        To get the status of a list of envelopes, use
        [Envelope: listStatusChanges ](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges/).
      operationId: Envelopes_GetEnvelope
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: advanced_update
          in: query
          description: When **true**, envelope information can be added or modified.
          schema:
            type: string
        - name: include
          in: query
          description: |
            Specifies additional information about the envelope to return. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:

            - `custom_fields`: The custom fields associated with the envelope.
            - `documents`: The documents associated with the envelope.
            - `attachments`: The attachments associated with the envelope.
            - `extensions`: Information about the email settings associated with the envelope.
            - `folders`: The folder where the envelope exists.
            - `recipients`: The recipients associated with the envelope.
            - `powerform`: The PowerForms associated with the envelope.
            - `tabs`: The tabs associated with the envelope.
            - `payment_tabs`: The payment tabs associated with the envelope.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelope'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getEnvelope
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |
            This example shows a how to get information about
            an envelope with a given envelope id.

            The request for this endpoint has no payload.

            ### Request
            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
            ```
          direction: response
          format: json
          response:
            allowMarkup: "false"
            autoNavigation: "true"
            brandId: 56502fe1-xxxx-xxxx-xxxx-97cb5c43176a
            certificateUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/certificate
            createdDateTime: 2016-10-05T01:04:58.1830000Z
            customFieldsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/custom_fields
            documentsCombinedUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/combined
            documentsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents
            emailSubject: Please sign the NDA
            enableWetSign: "true"
            envelopeId: 4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
            envelopeIdStamping: "true"
            envelopeUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
            initialSentDateTime: 2016-10-05T01:04:58.7770000Z
            is21CFRPart11: "false"
            isSignatureProviderEnvelope: "false"
            lastModifiedDateTime: 2016-10-05T01:04:58.1830000Z
            notificationUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/notification
            purgeState: unpurged
            recipientsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/recipients
            sentDateTime: 2016-10-05T01:04:58.7770000Z
            status: sent
            statusChangedDateTime: 2016-10-05T01:04:58.7770000Z
            templatesUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/templates
          style: custom
          title: Get Status About a Specific Envelope
        - description: |
            This example shows a how to get information about
            envelopes created since January 1, 2016 and before October 6, 2016.
            You can leave off the `to_date` parameter to get envelopes created from the `from_date` to today.

            The request for this endpoint has no payload.

            ### Request
            ```
            GET /restapi/v2.1/accounts/1703061/envelopes?from_date=2016-01-01&to_date=2016-10-06
            ```
          direction: response
          format: json
          response:
            endPosition: "1"
            envelopes:
              - certificateUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/certificate
                customFieldsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/custom_fields
                documentsCombinedUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/combined
                documentsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents
                envelopeId: 379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                envelopeUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                notificationUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/notification
                recipientsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/recipients
                status: completed
                statusChangedDateTime: 2016-10-04T15:26:28.2830000Z
                templatesUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/templates
              - certificateUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/certificate
                customFieldsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/custom_fields
                documentsCombinedUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/combined
                documentsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents
                envelopeId: 4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                envelopeUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                notificationUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/notification
                recipientsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/recipients
                status: sent
                statusChangedDateTime: 2016-10-05T01:04:58.7770000Z
                templatesUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/templates
            nextUri: ""
            previousUri: ""
            resultSetSize: "2"
            startPosition: "0"
            totalSetSize: "2"
          style: custom
          title: Get Status About Envelopes Since a Specified Date
    put:
      tags:
        - Envelopes
      summary: Send, void, or modify a draft envelope. Purge documents from a completed
        envelope.
      description: |-
        This method enables you to make changes to an envelope.
        You can use it to:

        * Send a draft envelope
        * Void an in-process envelope
        * Modify a draft envelope
        * Purge documents and envelope metadata from the DocuSign platform


        <div class="highlight highlight-info">
        <p markdown="1">

        Although the request body for this method
        is a complete envelope definition,
        you only need to provide
        the properties that
        you're updating.

        </p>
        </div>


        ## Sending a Draft Envelope

        To send a draft envelope, include the following code in the request body:

        ```json
        {
          "status": "sent"
        }
        ```

        You can attach a workflow before sending the envelope:

        ```json
        {
          "status": "sent",
          "workflow": {
            "workflowSteps": [
              {
                "action": "pause_before",
                "description": "pause_before routing order 2",
                "itemId": 2,
                "triggerOnItem": "routing_order"
              }
            ]
          }
        }
        ```

        ## Working with Workflows

        To unpause a workflow, the request body should include this:

        ```json
        {
          "workflow": {
            "workflowStatus": "in_progress"
          }
        }
        ```

        ## Voiding an In-Process Envelope

        To void an in-process envelope, include the following code in the request body:

        ```json
        {
          "status": "voided",
          "voidedReason": "The reason for voiding the envelope"
        }
        ```

        ## Modifying Envelope Email Information

        To change the email subject and message of a draft envelope,
        include the following code in the request body:

        ```json
        {
          "emailSubject": "new email subject",
          "emailBlurb": "new email message"
        }
        ```

        ## Purging Documents from DocuSign


        To place only the documents
        in the purge queue,
        leaving any
        corresponding attachments
        and tabs in the DocuSign platform,
        set the `purgeState` property
        to `documents_queued`.


        ```json
        {
          "purgeState": "documents_queued"
        }
        ```

        To place documents,
        attachments,
        and tabs
        in the purge queue,
        set the `purgeState` property
        to `documents_and_metadata_queued`.

        ```json
        {
          "purgeState": "documents_and_metadata_queued"
        }
        ```


        You can purge documents
        only from completed envelopes
        that are not marked as the authoritative copy.
        The user requesting the purge
        must have permission to purge documents
        and
        must be the sender or be acting on behalf of the sender.



        When the purge request is initiated
        the items to be purged
        are placed in the purge queue
        for deletion in 14 days.
        The sender
        and
        all recipients with DocuSign accounts
        associated with the envelope
        get an email notification
        the the documents will be deleted in 14 days.
        The notification contains a link
        to the documents.
        A second email notification
        is sent 7 days later.
        At the end of the 14-day period
        the documents are deleted from the system.
        Recipients without DocuSign accounts
        do not receive email notifications.


        If your account has a Document Retention policy,
        envelope documents
        are automatically placed
        in the purge queue,
        and notification emails are sent
        at the end of the retention period.
        Setting a Document Retention policy is the same as setting a
        schedule for purging documents.

        ## Removing Documents from the Purge Queue

        To remove documents from the purge queue, include the following code in the request body:

        ```
        {
          "purgeState": "documents_dequeued"
        }
        ```
      operationId: Envelopes_PutEnvelope
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: advanced_update
          in: query
          description: When set to **true**, allows the caller to update recipients,
            tabs, custom fields, notification, email settings and other envelope attributes.
          schema:
            type: string
        - name: resend_envelope
          in: query
          description: When set to **true**, sends the specified envelope again.
          schema:
            type: string
      requestBody:
        description: A container used to send documents to recipients. The envelope
          carries information about the sender and timestamps to indicate the progress
          of the delivery procedure. It can contain collections of Documents, Tabs
          and Recipients.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelope'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelope'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeUpdateSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: update
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelope
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments:
    get:
      tags:
        - EnvelopeAttachments
      summary: Returns a list of attachments associated with the specified envelope
      operationId: Attachments_GetAttachments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeAttachmentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAttachments
      x-ds-api-status: beta
      x-ds-method: list
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeAttachments
      summary: Add one or more attachments to a draft or in-process envelope.
      description: 'Supported attachment formats include: .asp, .bmp, .csv, .doc,
        .docm, .docx, .dot, .dotm, .dotx, .gif, .htm, .html, .jpeg, .jpg, .msg, .pdf,
        .png, .pot, .potx, .pps, .ppt, .pptm, .pptx, .ps, .rtf, .tif, .tiff, .txt,
        .wpd, .xls, .xlsm, .xlsx, .xml, and .xps. For more information about supported
        file formats, see [Supported File Formats](https://support.docusign.com/guides/ndse-user-guide-supported-file-formats).'
      operationId: Attachments_PutAttachments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeAttachmentsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeAttachmentsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeAttachmentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: putAttachments
      x-ds-api-status: beta
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeAttachmentsRequest
    delete:
      tags:
        - EnvelopeAttachments
      summary: Delete one or more attachments from a DRAFT envelope.
      operationId: Attachments_DeleteAttachments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeAttachmentsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeAttachmentsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeAttachmentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteAttachments
      x-ds-api-status: beta
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeAttachmentsRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}:
    get:
      tags:
        - EnvelopeAttachments
      summary: Retrieves an attachment from the envelope.
      operationId: Attachments_GetAttachment
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          description: The unique identifier for the attachment.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAttachment
      x-ds-api-status: beta
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeAttachments
      summary: Add an attachment to a DRAFT or IN-PROCESS envelope.
      operationId: Attachments_PutAttachment
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          description: The unique identifier for the attachment.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attachment'
          application/xml:
            schema:
              $ref: '#/components/schemas/attachment'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeAttachmentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: putAttachment
      x-ds-api-status: beta
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: attachment
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/audit_events:
    get:
      tags:
        - Envelopes
      summary: Gets the envelope audit events for an envelope.
      description: Gets the envelope audit events for the specified envelope.
      operationId: AuditEvents_GetAuditEvents
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeAuditEventResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listAuditEvents
      x-ds-method: listAuditEvents
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/comments/transcript:
    get:
      tags:
        - Comments
      summary: Gets a PDF transcript of all of the comments in an envelope.
      description: "Retrieves a PDF file containing all of the comments that senders\
        \ and recipients have added to the documents in an envelope.\n\n**Note**:\
        \ Comments are disabled by default. To use the comments feature, an account\
        \ administrator must enable comments on the account (in the `accountSettingsInformation`\
        \ object, set the `enableSigningExtensionComments` property to **true**). "
      operationId: Comments_GetCommentsTranscript
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: encoding
          in: query
          description: (Optional) The encoding to use for the file.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            application/pdf:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getCommentsTranscript
      x-ds-method: get
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/custom_fields:
    get:
      tags:
        - EnvelopeCustomFields
      summary: Gets the custom field information for the specified envelope.
      description: |-
        Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.

        There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
      operationId: CustomFields_GetCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customFieldsEnvelope'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listCustomFields
      x-ds-method: list
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeCustomFields
      summary: Updates envelope custom fields in an envelope.
      description: |
        Updates the envelope custom fields in draft and in-process envelopes.

        Each custom field used in an envelope must have a unique name.
      operationId: CustomFields_PutCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeCustomFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeCustomFields'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeCustomFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateCustomFields
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeCustomFields
    post:
      tags:
        - EnvelopeCustomFields
      summary: Creates envelope custom fields for an envelope.
      description: |
        Updates the envelope custom fields for draft and in-process envelopes.

        You may assign up to three envelope custom fields to an envelope. This limit does not include account (document) custom fields. Each custom field used in an envelope must have a unique name.
      operationId: CustomFields_PostCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeCustomFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeCustomFields'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeCustomFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createCustomFields
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeCustomFields
    delete:
      tags:
        - EnvelopeCustomFields
      summary: Deletes envelope custom fields for draft and in-process envelopes.
      description: Deletes envelope custom fields for draft and in-process envelopes.
      operationId: CustomFields_DeleteCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeCustomFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeCustomFields'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeCustomFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteCustomFields
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeCustomFields
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info:
    get:
      tags:
        - ApplianceInfo
      summary: Returns envelope and recipient information for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetApplianceInfo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getApplianceInfo
      x-ds-method: getApplianceInfo
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/account_info:
    get:
      tags:
        - ApplianceInfo
      summary: Returns envelope account information for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetAccount
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceAccount'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccount
      x-ds-method: getAccount
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/custom_fields:
    get:
      tags:
        - ApplianceInfo
      summary: Return custom fields information for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getCustomFields
      x-ds-method: getCustomFields
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/custom_fields/delete:
    post:
      tags:
        - ApplianceInfo
      summary: Deletes custom fields information for Display Appliance.
      operationId: EnvelopeApplianceInfo_DeleteCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteCustomFields
      x-ds-method: deleteCustomFields
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/date_signed:
    get:
      tags:
        - ApplianceInfo
      summary: Gets date signed information for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetDateSigned
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDateSigned
      x-ds-method: getDateSigned
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/document/{documentId}:
    put:
      tags:
        - ApplianceInfo
      summary: Updates document information for Display Applianc.
      operationId: EnvelopeApplianceInfo_PutDocument
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocument
      x-ds-method: updateDocument
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    delete:
      tags:
        - ApplianceInfo
      summary: Deletes document information for Display Appliance.
      operationId: EnvelopeApplianceInfo_DeleteDocument
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocument
      x-ds-method: deleteDocument
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/document_page_list:
    get:
      tags:
        - ApplianceInfo
      summary: Return document pages for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetDocumentPages
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocumentPages
      x-ds-method: getDocumentPages
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/image:
    post:
      tags:
        - ApplianceInfo
      summary: Returns images for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getImage
      x-ds-method: getImage
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/localepolicy/{userId}:
    post:
      tags:
        - ApplianceInfo
      summary: Returns locale policy information for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetLocalePolicy
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getLocalePolicy
      x-ds-method: getLocalePolicy
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/page_info:
    put:
      tags:
        - ApplianceInfo
      summary: Updates page information for Display Appliance.
      operationId: EnvelopeApplianceInfo_PutPageInfo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updatePageInfo
      x-ds-method: updatePageInfo
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    post:
      tags:
        - ApplianceInfo
      summary: Creates page information for Display Appliance.
      operationId: EnvelopeApplianceInfo_PostPageInfo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createPageInfo
      x-ds-method: createPageInfo
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/page_info/delete:
    post:
      tags:
        - ApplianceInfo
      summary: Deletes page information for Display Appliance.
      operationId: EnvelopeApplianceInfo_DeletePageInfo
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deletePageInfo
      x-ds-method: deletePageInfo
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/pdf:
    put:
      tags:
        - ApplianceInfo
      summary: Sets latest PDF for Display Appliance.
      operationId: EnvelopeApplianceInfo_PutPdf
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayAppliancePdf'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updatePdf
      x-ds-method: updatePdf
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/pdf/{pdfId}:
    get:
      tags:
        - ApplianceInfo
      summary: Return PDF for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetPdf
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: pdfId
          in: path
          description: "**Deprecated**. \n\nThe `pdfId` property in the consumer_disclosure\
          \ PUT request is deprecated. For security reasons going forward, any value\
          \ provided in the request packet must be ignored. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayAppliancePdf'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPdf
      x-ds-method: getPdf
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/pdf_blobs:
    get:
      tags:
        - ApplianceInfo
      summary: Returns PDF blobs for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetPdfBlob
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayAppliancePdf'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPdfBlob
      x-ds-method: getPdfBlob
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - ApplianceInfo
      summary: Updates PDF blobs for Display Appliance.
      operationId: EnvelopeApplianceInfo_PutPdfBlob
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updatePdfBlob
      x-ds-method: updatePdfBlob
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    post:
      tags:
        - ApplianceInfo
      summary: Adds PDF blobs for Display Appliance.
      operationId: EnvelopeApplianceInfo_PostPdfBlob
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayAppliancePdf'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createPdfBlob
      x-ds-method: createPdfBlob
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/recipient_denied_copy:
    put:
      tags:
        - ApplianceInfo
      summary: Updates RecipientDeniedDocumentCopy for Display Appliance.
      operationId: EnvelopeApplianceInfo_PutRecipientDeniedDocumentCopy
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRecipientDeniedDocumentCopy
      x-ds-method: updateRecipientDeniedDocumentCopy
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    delete:
      tags:
        - ApplianceInfo
      summary: Deletes RecipientDeniedDocumentCopy for Display Appliance.
      operationId: EnvelopeApplianceInfo_DeleteRecipientDeniedDocumentCopy
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteRecipientDeniedDocumentCopy
      x-ds-method: deleteRecipientDeniedDocumentCopy
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/signer_attachment_info:
    get:
      tags:
        - ApplianceInfo
      summary: Returns signer attachment information for Display Appliance.
      operationId: EnvelopeApplianceInfo_GetSignerAttachment
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceSignerAttachment'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getSignerAttachment
      x-ds-method: getSignerAttachment
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    delete:
      tags:
        - ApplianceInfo
      summary: Deletes signer attachment information for Display Appliance.
      operationId: EnvelopeApplianceInfo_DeleteSignerAttachment
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteSignerAttachment
      x-ds-method: deleteSignerAttachment
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents:
    get:
      tags:
        - EnvelopeDocuments
      summary: Gets a list of envelope documents.
      description: Retrieves a list of documents associated with the specified envelope.
      operationId: Documents_GetDocuments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: documents_by_userid
          in: query
          description: When set to **true**, allows recipients to get documents by their
            user id. For example, if a user is included in two different routing orders
            with different visibilities, using this parameter returns all of the documents
            from both routing orders.
          schema:
            type: string
        - name: include_document_size
          in: query
          schema:
            type: string
        - name: include_metadata
          in: query
          description: When set to **true**, the response includes metadata that indicates
            which properties the sender can edit.
          schema:
            type: string
        - name: include_tabs
          in: query
          description: When set to **true**, information about the tabs associated with
            the documents are included in the response.
          schema:
            type: string
        - name: recipient_id
          in: query
          description: Allows the sender to retrieve the documents as one of the recipients
            that they control. The `documents_by_userid` parameter must be set to **false**
            for this to work.
          schema:
            type: string
        - name: shared_user_id
          in: query
          description: The ID of a shared user that you want to impersonate in order
            to retrieve their view of the list of documents. This parameter is used
            in the context of a shared inbox (i.e., when you share envelopes from one
            user to another through the RADmin console).
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeDocumentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listDocuments
      x-ds-method: list
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |
            This example shows how
            to get a list
            of all the documents in an envelope.

            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents
            ```
          direction: response
          format: json
          response:
            envelopeDocuments:
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "1"
                includeInDownload: "true"
                name: NDA.pdf
                order: "1"
                pages: "3"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/1
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "2"
                includeInDownload: "true"
                name: House.pdf
                order: "2"
                pages: "1"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/2
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "3"
                includeInDownload: "true"
                name: contractor_agreement.docx
                order: "3"
                pages: "2"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/3
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: certificate
                includeInDownload: "true"
                name: Summary
                order: "999"
                pages: "4"
                signerMustAcknowledge: no_interaction
                type: summary
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/certificate
            envelopeId: 44efc9e6-xxxx-xxxx-xxxx-801410d6922d
          style: custom
          title: List All Documents in an Envelope
    put:
      tags:
        - EnvelopeDocuments
      summary: Adds one or more documents to an existing envelope document.
      description: |-
        Adds one or more documents to an existing envelope document.
        <p>**Note**: When adding or modifying documents for an in-process envelope, DocuSign recommends locking the envelope prior to making any changes.

        If the file name of a document contains unicode characters, you need to include a `Content-Disposition` header. Example:


        **Header**: `Content-Disposition`


        **Value**: `file; filename=\"name\";fileExtension=ext;documentId=1`
      operationId: Documents_PutDocuments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeDocumentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocuments
      x-ds-method: updateList
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeDefinition
    delete:
      tags:
        - EnvelopeDocuments
      summary: Deletes documents from a draft envelope.
      description: |+
        Deletes one or more documents from an existing envelope that has not yet been completed.

        To delete a document, use only the relevant parts of the [`envelopeDefinition`](#envelopeDefinition).
        For example, this request body specifies that you want to delete the document whose `documentId` is "1".


        ```text
        {
          "documents": [
            {
              "documentId": "1"
            }
          ]
        }
        ```

        The envelope status must be one of:

        - `created`
        - `sent`
        - `delivered`


      operationId: Documents_DeleteDocuments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeDocumentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocuments
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeDefinition
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}:
    get:
      tags:
        - EnvelopeDocuments
      summary: Gets a document from an envelope.
      description: Retrieves the specified document from the envelope. If the account
        has the Highlight Data Changes feature enabled, there is an option to request
        that any changes in the envelope be highlighted.
      operationId: Documents_GetDocument
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: |
            This parameter takes the following special keywords:

            - `combined`: Retrieves a PDF file that contains the combined content of all of the documents. If the account option **Attach certification of completion to envelope** is on, then the Certificate of Completion is also included in the PDF file. You set this account option in the Admin tool on the **Signing Settings** screen, or by setting the `attachCompletedEnvelope` property in the `accountSettings` object to **true**.
            - `archive`: Retrieves a ZIP archive that contains all of the PDF documents and the Certificate of Completion.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: certificate
          in: query
          description: When set to **false**, the envelope signing certificate is removed
            from the download.
          schema:
            type: string
        - name: documents_by_userid
          in: query
          description: When set to **true**, allows recipients to get documents by their
            user id. For example, if a user is included in two different routing orders
            with different visibilities, using this parameter returns all of the documents
            from both routing orders.
          schema:
            type: string
        - name: encoding
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
        - name: encrypt
          in: query
          description: When set to **true**, the PDF bytes returned in the response
            are encrypted for all the key managers configured on your DocuSign account.
            You can decrypt the documents by using the Key Manager DecryptDocument API
            method. For more information about Key Manager, see the DocuSign Security
            Appliance Installation Guide that your organization received from DocuSign.
          schema:
            type: string
        - name: language
          in: query
          description: 'Specifies the language for the Certificate of Completion in
          the response. The supported languages are: Chinese Simplified (zh_CN), Chinese
          Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de),
          Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil)
          (pt_BR), Russian (ru), Spanish (es). '
          schema:
            type: string
        - name: recipient_id
          in: query
          description: Allows the sender to retrieve the documents as one of the recipients
            that they control. The `documents_by_userid` parameter must be set to **false**
            for this functionality to work.
          schema:
            type: string
        - name: shared_user_id
          in: query
          description: The ID of a shared user that you want to impersonate in order
            to retrieve their view of the list of documents. This parameter is used
            in the context of a shared inbox (i.e., when you share envelopes from one
            user to another through the RADmin console).
          schema:
            type: string
        - name: show_changes
          in: query
          description: 'When set to **true**, any changed fields for the returned PDF
          are highlighted in yellow and optional signatures or initials outlined in
          red. '
          schema:
            type: string
        - name: watermark
          in: query
          description: 'When set to **true**, the account has the watermark feature
          enabled, and the envelope is not complete, then the watermark for the account
          is added to the PDF documents. This option can remove the watermark. '
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            application/pdf:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocument
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |+
            This example shows how to retrieve
            a single document from an envelope
            as a PDF file.


            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/3
            ```

          direction: response
          format: json
          response: PDF File
          style: custom
          title: Get a Single Document as a PDF File
        - description: |+
            If you use `combined` instead of a document id
            the response is a PDF file that contains
            all of the documents in the specified envelope.

            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/combined
            ```

          direction: response
          format: json
          response: PDF File
          style: custom
          title: Get All Documents as a Single PDF File
        - description: |
            This example shows how
            to get a list
            of all the documents in an envelope.

            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents
            ```
          direction: response
          format: json
          response:
            envelopeDocuments:
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "1"
                includeInDownload: "true"
                name: NDA.pdf
                order: "1"
                pages: "3"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/1
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "2"
                includeInDownload: "true"
                name: House.pdf
                order: "2"
                pages: "1"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/2
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "3"
                includeInDownload: "true"
                name: contractor_agreement.docx
                order: "3"
                pages: "2"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/3
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: certificate
                includeInDownload: "true"
                name: Summary
                order: "999"
                pages: "4"
                signerMustAcknowledge: no_interaction
                type: summary
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/certificate
            envelopeId: 44efc9e6-xxxx-xxxx-xxxx-801410d6922d
          style: custom
          title: List All Documents in an Envelope
    put:
      tags:
        - EnvelopeDocuments
      summary: Adds a document to an existing draft envelope.
      description: "Adds a document to an existing draft envelope. The bytes of the\
        \ document make up the body of the request. \n\n\n\n**Note**: When adding\
        \ or modifying documents for an in-process envelope, DocuSign recommends locking\
        \ the envelope prior to making any changes.\n\n\n\n\nIf the file name of the\
        \ document contains unicode characters, you need to include a `Content-Disposition`\
        \ header. Example:\n\n\n**Header**: `Content-Disposition`\n\n\n**Value**:\
        \ `file; filename=\\\"name\\\";fileExtension=ext;documentId=1`\n"
      operationId: Documents_PutDocument
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeDocument'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocument
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields:
    get:
      tags:
        - EnvelopeDocumentFields
      summary: Gets the custom document fields from an  existing envelope document.
      description: Retrieves the custom document field information from an existing
        envelope document.
      operationId: DocumentFields_GetDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeDocumentFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listDocumentFields
      x-ds-method: list
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeDocumentFields
      summary: Updates existing custom document fields in an existing envelope document.
      description: Updates existing custom document fields in an existing envelope
        document.
      operationId: DocumentFields_PutDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeDocumentFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeDocumentFields'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeDocumentFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocumentFields
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeDocumentFields
    post:
      tags:
        - EnvelopeDocumentFields
      summary: Creates custom document fields in an existing envelope document.
      description: Creates custom document fields in an existing envelope document.
      operationId: DocumentFields_PostDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeDocumentFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeDocumentFields'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeDocumentFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createDocumentFields
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeDocumentFields
    delete:
      tags:
        - EnvelopeDocumentFields
      summary: Deletes custom document fields from an existing envelope document.
      description: Deletes custom document fields from an existing envelope document.
      operationId: DocumentFields_DeleteDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeDocumentFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeDocumentFields'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeDocumentFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocumentFields
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeDocumentFields
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/html_definitions:
    get:
      tags:
        - EnvelopeDocumentHtmlDefinitions
      summary: |-
        Gets the Original HTML Definition used to
        generate the Responsive HTML for a given document.
      operationId: ResponsiveHtml_GetEnvelopeDocumentHtmlDefinitions
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitionOriginals'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getEnvelopeDocumentHtmlDefinitions
      x-ds-method: get
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages:
    get:
      tags:
        - Envelopes
      summary: Returns document page image(s) based on input.
      description: Returns images of the pages in a document for display based on
        the parameters that you specify.
      operationId: Pages_GetPageImages
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: The maximum number of results to return.
          schema:
            type: string
        - name: dpi
          in: query
          description: The number of dots per inch (DPI) for the resulting images. Valid
            values are 1-310 DPI. The default value is 94.
          schema:
            type: string
        - name: max_height
          in: query
          description: Sets the maximum height of the returned images in pixels.
          schema:
            type: string
        - name: max_width
          in: query
          description: Sets the maximum width of the returned images in pixels.
          schema:
            type: string
        - name: nocache
          in: query
          description: 'If **true**, using cache is disabled and image information is
          retrieved from a database. **True** is the default value. '
          schema:
            type: string
        - name: show_changes
          in: query
          description: If **true**, changes display in the user interface.
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values. The value **thumbnail** may be used to return the page
            image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/pageImages'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocumentPageImages
      x-ds-method: getPageImages
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}:
    delete:
      tags:
        - Envelopes
      summary: Deletes a page from a document in an envelope.
      description: Deletes a page from a document in an envelope based on the page
        number.
      operationId: Pages_DeletePage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocumentPage
      x-ds-method: deleteDocumentPage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image:
    get:
      tags:
        - Envelopes
      summary: Gets a page image from an envelope for display.
      description: Returns an image of a page in a document for display.
      operationId: Pages_GetPageImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
        - name: dpi
          in: query
          description: Sets the dots per inch (DPI) for the returned image.
          schema:
            type: string
        - name: max_height
          in: query
          description: Sets the maximum height for the page image in pixels. The DPI
            is recalculated based on this setting.
          schema:
            type: string
        - name: max_width
          in: query
          description: Sets the maximum width for the page image in pixels. The DPI
            is recalculated based on this setting.
          schema:
            type: string
        - name: show_changes
          in: query
          description: When **true**, changes display in the user interface.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/png:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocumentPageImage
      x-ds-method: getPageImage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - Envelopes
      summary: Rotates page image from an envelope for display.
      description: Rotates page image from an envelope for display. The page image
        can be rotated to the left or right.
      operationId: Pages_PutPageImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pageRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/pageRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: rotateDocumentPage
      x-ds-method: rotateDocumentPage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: pageRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/tabs:
    get:
      tags:
        - EnvelopeDocumentTabs
      summary: Returns tabs on the specified page.
      operationId: Tabs_GetPageTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeDocumentTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPageTabs
      x-ds-method: getByPage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/responsive_html_preview:
    post:
      tags:
        - DocumentResponsiveHtmlPreview
      summary: Creates a preview of the responsive version of a document.
      description: |-
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/)
        HTML version of a specific document.
        This method enables you to preview a PDF document
        conversion to responsive HTML across device types prior to sending.

        The request body is a `documentHtmlDefinition` object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
      operationId: ResponsiveHtml_PostDocumentResponsiveHtmlPreview
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitions'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createDocumentResponsiveHtmlPreview
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentHtmlDefinition
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/tabs:
    get:
      tags:
        - EnvelopeDocumentTabs
      summary: Returns the tabs on a document.
      description: This method returns the tabs associated with a document.
      operationId: Tabs_GetDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: include_metadata
          in: query
          description: When set to **true**, the response includes metadata indicating
            which properties are editable.
          schema:
            type: string
        - name: page_numbers
          in: query
          description: |-
            Filters for tabs that occur on the pages that you specify. Enter as a comma-separated list of page GUIDs.

            Example: `page_numbers=2,6`

            Note: You can only enter individual page numbers, and not a page range.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeDocumentTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocumentTabs
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeDocumentTabs
      summary: Updates the tabs for an envelope document.
      operationId: Tabs_PutDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        description: A list of tabs, which are represented graphically as symbols
          on documents at the time of signing. Tabs show recipients where to sign,
          initial, or enter data. They may also display data to the recipients.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/tabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocumentTabs
      x-ds-method: update
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: tabs
    post:
      tags:
        - EnvelopeDocumentTabs
      summary: Adds the tabs to an envelope document.
      operationId: Tabs_PostDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        description: A list of tabs, which are represented graphically as symbols
          on documents at the time of signing. Tabs show recipients where to sign,
          initial, or enter data. They may also display data to the recipients.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/tabs'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createDocumentTabs
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: tabs
    delete:
      tags:
        - EnvelopeDocumentTabs
      summary: Deletes tabs from an envelope document.
      operationId: Tabs_DeleteDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        description: A list of tabs, which are represented graphically as symbols
          on documents at the time of signing. Tabs show recipients where to sign,
          initial, or enter data. They may also display data to the recipients.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/tabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocumentTabs
      x-ds-method: delete
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: tabs
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates:
    get:
      tags:
        - EnvelopeTemplates
      summary: Gets the templates associated with a document in an existing envelope.
      description: Retrieves the templates associated with a document in the specified
        envelope.
      operationId: Templates_GetDocumentTemplates
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: |
            A comma-separated list that limits the results.
            Valid values are:

            * `applied`
            * `matched`
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listTemplatesForDocument
      x-ds-method: listByDocument
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    post:
      tags:
        - EnvelopeTemplates
      summary: Adds templates to a document in an  envelope.
      description: Adds templates to a document in the specified envelope.
      operationId: Templates_PostDocumentTemplates
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: preserve_template_recipient
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentTemplateList'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentTemplateList'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentTemplateList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: applyTemplateToDocument
      x-ds-method: applyToDocument
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentTemplateList
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates/{templateId}:
    delete:
      tags:
        - EnvelopeTemplates
      summary: Deletes a template from a document in an existing envelope.
      description: Deletes the specified template from a document in an existing envelope.
      operationId: Templates_DeleteDocumentTemplates
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteTemplatesFromDocument
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/email_settings:
    get:
      tags:
        - EnvelopeEmailSettings
      summary: Gets the email setting overrides for an envelope.
      description: Retrieves the email override settings for the specified envelope.
      operationId: EmailSettings_GetEmailSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/emailSettings'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getEmailSettings
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeEmailSettings
      summary: Updates the email setting overrides for an envelope.
      description: |-
        Updates the existing email override settings for the specified envelope. Note that modifying email settings will only affect email communications that occur after the modification was made.

        This can also be used to delete an individual email override setting by using an empty string for the value to be deleted.
      operationId: EmailSettings_PutEmailSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        description: A complex type that contains email settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailSettings'
          application/xml:
            schema:
              $ref: '#/components/schemas/emailSettings'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/emailSettings'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateEmailSettings
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: emailSettings
    post:
      tags:
        - EnvelopeEmailSettings
      summary: Adds email setting overrides to an envelope.
      description: |-
        Adds email override settings, changing the email address to reply to an email address, name, or the BCC for email archive information, for the envelope. Note that adding email settings will only affect email communications that occur after the addition was made.

        ### Important: The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options. To send a copy of the envelope to a recipient who does not need to sign, use a Carbon Copy or Certified Delivery recipient type.
      operationId: EmailSettings_PostEmailSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        description: A complex type that contains email settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailSettings'
          application/xml:
            schema:
              $ref: '#/components/schemas/emailSettings'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/emailSettings'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createEmailSettings
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: emailSettings
    delete:
      tags:
        - EnvelopeEmailSettings
      summary: Deletes the email setting overrides for an envelope.
      description: Deletes all existing email override settings for the envelope.
        If you want to delete an individual email override setting, use the PUT and
        set the value to an empty string. Note that deleting email settings will only
        affect email communications that occur after the deletion and the normal account
        email settings are used for future email communications.
      operationId: EmailSettings_DeleteEmailSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/emailSettings'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteEmailSettings
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/form_data:
    get:
      tags:
        - EnvelopeFormData
      summary: Returns envelope form data for an existing envelope.
      description: |-
        This method downloads the envelope and field data from any in-process, completed, or canceled envelope that you sent or that is shared with you. Recipients who are also full administrators on an account can view form data for any envelopes that another user on the account has sent to them.

        **Note**: To use this feature, the Sending Setting "Allow sender to download form data" must be enabled for the account.
      operationId: FormData_GetFormData
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeFormData'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getFormData
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/html_definitions:
    get:
      tags:
        - EnvelopeHtmlDefinitions
      summary: Gets the Original HTML Definition used to generate the Responsive HTML
        for the envelope.
      operationId: ResponsiveHtml_GetEnvelopeHtmlDefinitions
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitionOriginals'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getEnvelopeHtmlDefinitions
      x-ds-method: list
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/lock:
    get:
      tags:
        - EnvelopeLocks
      summary: Gets envelope lock information.
      description: |
        Retrieves general information about an envelope lock.

        The user requesting the information must be the same user
        who locked the envelope.

        You can use this method to recover the lock information,
        including the `lockToken`,
        for a locked envelope.
        The `X-DocuSign-Edit` header is included in the response.

        See [EnvelopeLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopelocks/create/)
        for a description of the `X-DocuSign-Edit` header.
      operationId: Lock_GetEnvelopeLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeLocks'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getLock
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeLocks
      summary: Updates an envelope lock.
      description: |+
        Updates the lock information for a locked envelope.

        You must include the `X-DocuSign-Edit` header
        as described in
        [EnvelopeLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopelocks/create/).


        Use this method to change the duration
        of the lock (`lockDurationInSeconds`)
        or the `lockedByApp` string.

        The request body is a full `lockRequest` object,
        but you only need to specify the
        properties that you are updating. For example:

        ```
        {
          "lockDurationInSeconds": "3600",
          "lockedByApp": "My Application"
        }
        ```

      operationId: Lock_PutEnvelopeLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/lockRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeLocks'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateLock
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: lockRequest
    post:
      tags:
        - EnvelopeLocks
      summary: Locks an envelope.
      description: |+
        This method locks the specified envelope and sets the time until
        the lock expires to prevent other users or recipients from
        changing the envelope.

        **Note**: To use this method, the envelope locking
        capability must be enabled for the user; that is, the user setting
        `canLockEnvelopes` must be set to **true**.

        The response to this request includes a `lockToken` parameter
        that you must use in the `X-DocuSign-Edit` header for
        every PUT method (typically a method that updates an envelope)
        while the envelope is locked.


        If you do not provide the `lockToken` when accessing
        a locked envelope, you will get the following
        error:

        ```
        {
           "errorCode": "EDIT_LOCK_NOT_LOCK_OWNER",
           "message": "The user is not the owner of the lock. The template is locked by another user or in another application"
        }
        ```


        ### The X-DocuSign-Edit header

        The `X-DocuSign-Edit` header looks like this
        and can be specified in either JSON or XML.

        **JSON**
        ```
        {
          "LockToken": "token-from-response",
          "LockDurationInSeconds": "600"
        }
        ```

        **XML**
        ```
        <DocuSignEdit>
          <LockToken>token-from-response</LockToken>
          <LockDurationInSeconds>600</LockDurationInSeconds>
        </DocuSignEdit>
        ```

        In the actual HTTP header, you would remove the linebreaks:

        ```
        X-DocuSign-Edit: {"LockToken": "token-from-response", "LockDurationInSeconds": "600" }
            or
        X-DocuSign-Edit:<DocuSignEdit><LockToken>token-from-response</LockToken><LockDurationInSeconds>600</LockDurationInSeconds></DocuSignEdit>
        ```


      operationId: Lock_PostEnvelopeLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/lockRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeLocks'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createLock
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: lockRequest
    delete:
      tags:
        - EnvelopeLocks
      summary: Deletes an envelope lock.
      description: |-
        Deletes the lock from the specified envelope.
        The user deleting the lock must be the same user
        who locked the envelope.

        You must include the `X-DocuSign-Edit` header
        as described in
        [EnvelopeLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopelocks/create/).

        This method takes an optional query paramter
        that lets you specify whether
        changes made while the envelope was locked
        are kept or discarded.


        | Query Parameter | Description                                                                                                                                                                         |
        | :-------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | `save_changes`  | (Optional) When set to **true** (the default), any changes made while the lock was active are saved. When set to **false**, any changes made while the envelope was locked are discarded. |
      operationId: Lock_DeleteEnvelopeLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeLocks'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteLock
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/notification:
    get:
      tags:
        - Envelopes
      summary: Gets envelope notification information.
      description: Retrieves the envelope notification, reminders and expirations,
        information for an existing envelope.
      operationId: Notification_GetEnvelopesEnvelopeIdNotification
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notification'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getNotificationSettings
      x-ds-method: getNotificationSettings
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - Envelopes
      summary: Sets envelope notifications for an existing envelope.
      description: |-
        This method sets the notifications (reminders and expirations) for an existing envelope. The request body sends a structure containing reminders and expirations settings. It also specifies whether to use the settings specified in the request, or the account default notification settings for the envelope.

        Note that this request only specifies when notifications are sent; it does not initiate sending of email messages.
      operationId: Notification_PutEnvelopesEnvelopeIdNotification
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeNotificationRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeNotificationRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notification'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateNotificationSettings
      x-ds-method: updateNotificationSettings
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeNotificationRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients:
    get:
      tags:
        - EnvelopeRecipients
      summary: Gets the status of recipients for an envelope.
      description: |-
        Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list. This method can also be used to retrieve the tab values.

        The `currentRoutingOrder` property of the response contains the `routingOrder` value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
      operationId: Recipients_GetRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: include_anchor_tab_locations
          in: query
          description: ' When set to **true** and `include_tabs` value is set to **true**,
          all tabs with anchor tab properties are included in the response. '
          schema:
            type: string
        - name: include_extended
          in: query
          description: ' When set to **true**, the extended properties are included
          in the response. '
          schema:
            type: string
        - name: include_metadata
          in: query
          description: Boolean value that specifies whether to include metadata associated
            with the recipients (for envelopes only, not templates).
          schema:
            type: string
        - name: include_tabs
          in: query
          description: When set to **true**, the tab information associated with the
            recipient is included in the response.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listRecipients
      x-ds-method: list
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |+
            This example shows the result of an envelope
            with one signer and a CC'ed recipient.


            ### Request
            The request for this endpoint has no payload.

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/recipients
            ```


          direction: response
          format: json
          response:
            agents: []
            carbonCopies:
              - email: aoneil@example.com
                name: Ariana O'Neill
                recipientId: "2"
                recipientIdGuid: 72edf9b6-xxxx-xxxx-xxxx-86bc5d598bb8
                requireIdLookup: "false"
                routingOrder: "2"
                status: completed
                userId: b72bd827-xxxx-xxxx-xxxx-64ab32f0a0eb
            certifiedDeliveries: []
            currentRoutingOrder: "1"
            editors: []
            inPersonSigners: []
            intermediaries: []
            recipientCount: "2"
            signers:
              - deliveredDateTime: 2016-10-05T21:18:12.3330000Z
                email: jallard@example.com
                isBulkRecipient: "false"
                name: Jennie Allard
                recipientId: "1"
                recipientIdGuid: 4575d5e9-xxxx-xxxx-xxxx-6c59ca7c43f8
                requireIdLookup: "false"
                routingOrder: "1"
                signedDateTime: 2016-10-05T21:18:41.6930000Z
                status: completed
                userId: ca45284a-xxxx-xxxx-xxxx-76035bd795b2
          style: custom
          title: List Recipients and CC-ed Recipients
        - description: |
            This example shows the method's response after the envelope was signed.

            The signer recipient successfully authenticated using:
            * An access code (a pre-shared secret between the sender and the signer)
            * Authentication via Facebook. The Facebook email address is recorded in the Certificate of Completion
          direction: response
          format: json
          response:
            agents: []
            carbonCopies: []
            certifiedDeliveries: []
            currentRoutingOrder: "1"
            editors: []
            inPersonSigners: []
            intermediaries: []
            recipientCount: "1"
            signers:
              - accessCode: "1234"
                deliveredDateTime: 2016-07-11T06:19:36.4200000Z
                email: larry@example.com
                idCheckConfigurationName: Facebook
                isBulkRecipient: "false"
                name: Larry Smithers
                recipientAuthenticationStatus:
                  accessCodeResult:
                    eventTimestamp: 2016-07-11T06:18:55.7170000Z
                    status: Passed
                  facebookResult:
                    eventTimestamp: 2016-07-11T06:19:28.3170000Z
                    status: Passed
                recipientId: "1"
                recipientIdGuid: 9670e679-xxxx-xxxx-xxxx-02b43027cb0a
                requireIdLookup: "true"
                routingOrder: "1"
                signInEachLocation: "false"
                signedDateTime: 2016-07-11T06:19:44.7470000Z
                status: completed
                userId: 57a7b68f-xxxx-xxxx-xxxx-381042d14ca5
          style: custom
          title: List Recipients Who Used Facebook and Access Code Authentication
    put:
      tags:
        - EnvelopeRecipients
      summary: Updates recipients in a draft envelope or corrects recipient information
        for an in-process envelope.
      description: "Updates the recipients of a draft envelope or corrects recipient\
        \ information for an in-process envelope. \n\nIf you send information for\
        \ a recipient that does not already exist in a draft envelope, the recipient\
        \ is added to the envelope (similar to the EnvelopeRecipients::Create method).\n\
        \nYou can also use this method to resend an envelope to a recipient by using\
        \ the `resend_envelope` option.\n\n**Updating Sent Envelopes**\n\nAfter an\
        \ envelope has been sent, you can edit only the following properties: \n\n\
        - `accessCode`\n- `agentCanEditName`\n- `agentCanEditEmail`\n- `customFields`\n\
        - `deliveryMethod`\n- `documentVisibility`\n- `email`\n- `emailNotification`\n\
        - `idCheckConfigurationName`\n- `name`\n- `note`\n- `phoneAuthentication`\n\
        - `recipientType` (For this to work, you must also change the recipient object\
        \ to match the recipient type.)\n- `requireIdLookup`\n- `routingOrder`\n-\
        \ `routingOrder`\n- `signingGroupId` (You can change this id to switch to\
        \ a different signing group and its corresponding set of recipients.)\n- `smsAuthentication`\n\
        - `suppressEmails`\n- `userName`"
      operationId: Recipients_PutRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: combine_same_order_recipients
          in: query
          description: When set to **true**, recipients are combined or merged with
            matching recipients. Recipient matching occurs as part of [template matching](https://docs.docusign.com/DocuSignHelp/Content/automatic-template-matching.htm),
            and is based on Recipient Role and Routing Order.
          schema:
            type: string
        - name: offline_signing
          in: query
          description: 'Indicates if offline signing is enabled for the recipient when
          a network connection is unavailable. '
          schema:
            type: string
        - name: resend_envelope
          in: query
          description: When set to **true**, resends the   envelope if the new recipient's
            routing order is before or the same as the envelope's next recipient.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipients'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipients'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/recipientsUpdateSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRecipients
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeRecipients
    post:
      tags:
        - EnvelopeRecipients
      summary: Adds one or more recipients to an envelope.
      description: |-
        Adds one or more recipients to an envelope.

        For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient's routing order is before or the same as the envelope's next recipient, an email is only sent if the optional `resend_envelope` query string is set to **true**.
      operationId: Recipients_PostRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: resend_envelope
          in: query
          description: When set to **true**, resends the   envelope if the new recipient's
            routing order is before or the same as the envelope's next recipient.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipients'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipients'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createRecipient
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeRecipients
    delete:
      tags:
        - EnvelopeRecipients
      summary: Deletes recipients from an envelope.
      description: |-
        Deletes one or more recipients from a draft or sent envelope. List the recipients that you want to delete in the body of the request. This method uses the `recipientId` as the key for deleting recipients.

        If the envelope is `In Process`, meaning that it has been sent and has not been completed or voided, recipients that have completed their actions cannot be deleted.
      operationId: Recipients_DeleteRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipients'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipients'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteRecipients
      x-ds-method: deleteList
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeRecipients
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}:
    delete:
      tags:
        - EnvelopeRecipients
      summary: Deletes a recipient from an envelope.
      description: |-
        Deletes a recipient from a `draft` or `sent` envelope.

        If the envelope is "In Process" (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
      operationId: Recipients_DeleteRecipient
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteRecipient
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure:
    get:
      tags:
        - EnvelopeConsumerDisclosures
      summary: Gets the default Electronic Record and Signature Disclosure for an
        envelope.
      description: "Retrieves the default, HTML-formatted Electronic Record and Signature\
        \ Disclosure (ERSD) for the envelope that you specify. \n\nThis is the default\
        \ ERSD disclosure that DocuSign provides for the convenience of U.S.-based\
        \ customers only. This default disclosure is only valid for transactions between\
        \ U.S.-based parties.\n\nTo set the language of the disclosure that you want\
        \ to retrieve, use the optional `langCode` query parameter."
      operationId: ConsumerDisclosure_GetConsumerDisclosureEnvelopeIdRecipientId
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: langCode
          in: query
          description: "(Optional) The code for the signer language version of the disclosure\
          \ that you want to retrieve. The following languages are supported:\n\n\
          - Arabic (`ar`)\n- Bulgarian (`bg`)\n- Czech (`cs`)\n- Chinese Simplified\
          \ (`zh_CN`)\n- Chinese Traditional (`zh_TW`)\n- Croatian (`hr`)\n- Danish\
          \ (`da`)\n- Dutch (`nl`)\n- English US (`en`)\n- English UK (`en_GB`)\n\
          - Estonian (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n- French (`fr`)\n-\
          \ French Canadian (`fr_CA`)\n- German (`de`)\n- Greek (`el`)\n- Hebrew (`he`)\n\
          - Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa Indonesian (`id`)\n- Italian\
          \ (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n- Latvian (`lv`)\n- Lithuanian\
          \ (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian (`no`)\n- Polish (`pl`)\n\
          - Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n- Romanian (`ro`)\n\
          - Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n- Slovenian (`sl`)\n\
          - Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n- Swedish (`sv`)\n\
          - Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`) \n- Vietnamese (`vi`)\n\
          \nAdditionally, you can automatically detect the browser language being\
          \ used by the viewer and display the disclosure in that language by setting\
          \ the value to `browser`."
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/consumerDisclosure'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getConsumerDisclosureDefault
      x-ds-method: getDefault
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure/{langCode}:
    get:
      tags:
        - EnvelopeConsumerDisclosures
      summary: Gets the Electronic Record and Signature Disclosure for a specific
        envelope recipient.
      description: |-
        Retrieves the HTML-formatted Electronic Record and Signature Disclosure (ERSD) for the envelope recipient that you specify. This disclosure might differ from the account-level disclosure, based on the signing brand applied to the envelope and the recipient's language settings.

        To set the language of the disclosure that you want to retrieve, specify the `langCode` as either a path or query parameter.
      operationId: ConsumerDisclosure_GetConsumerDisclosureEnvelopeIdRecipientIdLangCode
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: langCode
          in: path
          description: "(Optional) The code for the signer language version of the disclosure\
          \ that you want to retrieve, as a path parameter. The following languages\
          \ are supported:\n\n- Arabic (`ar`)\n- Bulgarian (`bg`)\n- Czech (`cs`)\n\
          - Chinese Simplified (`zh_CN`)\n- Chinese Traditional (`zh_TW`)\n- Croatian\
          \ (`hr`)\n- Danish (`da`)\n- Dutch (`nl`)\n- English US (`en`)\n- English\
          \ UK (`en_GB`)\n- Estonian (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n- French\
          \ (`fr`)\n- French Canadian (`fr_CA`)\n- German (`de`)\n- Greek (`el`)\n\
          - Hebrew (`he`)\n- Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa Indonesian\
          \ (`id`)\n- Italian (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n- Latvian\
          \ (`lv`)\n- Lithuanian (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian (`no`)\n\
          - Polish (`pl`)\n- Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n- Romanian\
          \ (`ro`)\n- Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n- Slovenian\
          \ (`sl`)\n- Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n- Swedish\
          \ (`sv`)\n- Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`) \n- Vietnamese\
          \ (`vi`)\n\nAdditionally, you can automatically detect the browser language\
          \ being used by the viewer and display the disclosure in that language by\
          \ setting the value to `browser`."
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: langCode
          in: query
          description: "(Optional) The code for the signer language version of the disclosure\
          \ that you want to retrieve, as a query parameter. The following languages\
          \ are supported:\n\n- Arabic (`ar`)\n- Bulgarian (`bg`)\n- Czech (`cs`)\n\
          - Chinese Simplified (`zh_CN`)\n- Chinese Traditional (`zh_TW`)\n- Croatian\
          \ (`hr`)\n- Danish (`da`)\n- Dutch (`nl`)\n- English US (`en`)\n- English\
          \ UK (`en_GB`)\n- Estonian (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n- French\
          \ (`fr`)\n- French Canadian (`fr_CA`)\n- German (`de`)\n- Greek (`el`)\n\
          - Hebrew (`he`)\n- Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa Indonesian\
          \ (`id`)\n- Italian (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n- Latvian\
          \ (`lv`)\n- Lithuanian (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian (`no`)\n\
          - Polish (`pl`)\n- Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n- Romanian\
          \ (`ro`)\n- Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n- Slovenian\
          \ (`sl`)\n- Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n- Swedish\
          \ (`sv`)\n- Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`) \n- Vietnamese\
          \ (`vi`)\n\nAdditionally, you can automatically detect the browser language\
          \ being used by the viewer and display the disclosure in that language by\
          \ setting the value to `browser`."
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/consumerDisclosure'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getConsumerDisclosure
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/document_visibility:
    get:
      tags:
        - EnvelopeDocumentVisibility
      summary: Returns document visibility for a recipient
      description: This method returns information about document visibility for a
        recipient.
      operationId: Recipients_GetRecipientDocumentVisibility
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentVisibilityList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getRecipientDocumentVisibility
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeDocumentVisibility
      summary: Updates document visibility for a recipient
      description: |-
        This method updates document visibility for a recipient.

        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutRecipientDocumentVisibility
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentVisibilityList'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentVisibilityList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentVisibilityList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRecipientDocumentVisibility
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentVisibilityList
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/identity_proof_token:
    post:
      tags:
        - EnvelopeRecipients
      summary: 'Creates a resource token for a sender to request ID Evidence data. '
      description: Creates a resource token for a sender. This token allows a sender
        to return identification data for a recipient using the [ID Evidence API](https://developers.docusign.com/docs/idevidence-api/).
      operationId: Recipients_PostRecipientProofFileResourceToken
      parameters:
        - name: accountId
          in: path
          description: The account ID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: The `recipientIdGuid`.
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/proofServiceResourceToken'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createRecipientProofFileResourceToken
      x-ds-api-status: beta
      x-ds-method: createRecipientProofFileResourceToken
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image:
    get:
      tags:
        - Envelopes
      summary: Gets the initials image for a user.
      description: "Retrieves the initials image for the specified user. The image\
        \ is returned in the same format as it was uploaded. In the request you can\
        \ specify if the chrome (the added line and identifier around the initial\
        \ image) is returned with the image.\n\nThe userId specified in the endpoint\
        \ must match the authenticated user's user id and the user must be a member\
        \ of the account.\n\nThe `signatureIdOrName` paramter accepts signature ID\
        \ or signature name. DocuSign recommends you use signature ID (`signatureId`),\
        \ since some names contain characters that do not properly URL encode. If\
        \ you use the user name, it is likely that the name includes spaces and you\
        \ might need to URL encode the name before using it in the endpoint. \n\n\
        For example: \"Bob Smith\" to \"Bob%20Smith\"\n\nOlder envelopes might only\
        \ contain chromed images. If getting the non-chromed image fails, try getting\
        \ the chromed image."
      operationId: Recipients_GetRecipientInitialsImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: include_chrome
          in: query
          description: 'The added line and identifier around the initial image. Note:
          Older envelopes might only have chromed images. If getting the non-chromed
          image fails, try getting the chromed image.'
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/gif:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/gif:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getRecipientInitialsImage
      x-ds-method: getRecipientInitialsImage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - Envelopes
      summary: Sets the initials image for an accountless signer.
      description: |-
        Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.

        For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.
      operationId: Recipients_PutRecipientInitialsImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRecipientInitialsImage
      x-ds-method: updateRecipientInitialsImage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature:
    get:
      tags:
        - Envelopes
      summary: Gets signature information for a signer or sign-in-person recipient.
      description: Retrieves signature information for a signer or sign-in-person
        recipient.
      operationId: Recipients_GetRecipientSignature
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getRecipientSignature
      x-ds-method: getRecipientSignature
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image:
    get:
      tags:
        - Envelopes
      summary: Retrieve signature image information for a signer/sign-in-person recipient.
      description: "Retrieves the specified user signature image. The image is returned\
        \ in the same format as uploaded. In the request you can specify if the chrome\
        \ (the added line and identifier around the initial image) is returned with\
        \ the image.\n\nThe userId specified in the endpoint must match the authenticated\
        \ user's user ID and the user must be a member of the account.\n\nThe `signatureIdOrName`\
        \ parameter accepts signature ID or signature name. DocuSign recommends you\
        \ use signature ID (`signatureId`), since some names contain characters that\
        \ don't properly URL encode. If you use the user name, it is likely that the\
        \ name includes spaces and you might need to URL encode the name before using\
        \ it in the endpoint. \n\nFor example: \"Bob Smith\" to \"Bob%20Smith\"\n\n\
        Older envelopes might only have chromed images. If getting the non-chromed\
        \ image fails, try getting the chromed image."
      operationId: Recipients_GetRecipientSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: include_chrome
          in: query
          description: When set to **true**, the response includes the chromed version
            of the signature image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/gif:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/gif:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getRecipientSignatureImage
      x-ds-method: getRecipientSignatureImage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - Envelopes
      summary: Sets the signature image for an accountless signer.
      description: |-
        Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.

        For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.
      operationId: Recipients_PutRecipientSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRecipientSignatureImage
      x-ds-method: updateRecipientSignatureImage
      x-ds-service: Envelopes
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs:
    get:
      tags:
        - EnvelopeRecipientTabs
      summary: Gets the tabs information for a signer or sign-in-person recipient
        in an envelope.
      description: |-
        Retrieves information about the tabs associated
        with a recipient. You can make a single API call
        to get all the tab values and information from a
        given, completed envelope in addition to draft
        ones.  Tab values can be retrieved by using the
        [EnvelopeRecipients:list method](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients/list/)
        with query parameter `include_tabs` set to **true**.
      operationId: Recipients_GetRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: include_anchor_tab_locations
          in: query
          description: When set to **true**, all tabs with anchor tab properties are
            included in the response. The default value is **false**.
          schema:
            type: string
        - name: include_metadata
          in: query
          description: When set to **true**, the response includes metadata indicating
            which properties are editable.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipientTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listTabs
      x-ds-method: list
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeRecipientTabs
      summary: |+
        Updates the tabs for a recipient.

      description: "Updates one or more tabs for a recipient in a draft envelope.\
        \ \n**Note**: The Update method can be used if the envelope is not yet complete.\
        \ To update an existing tab, the request body must include the `tabId`."
      operationId: Recipients_PutRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipientTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipientTabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipientTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateTabs
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeRecipientTabs
    post:
      tags:
        - EnvelopeRecipientTabs
      summary: Adds tabs for a recipient.
      description: Adds one or more tabs for a recipient.
      operationId: Recipients_PostRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipientTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipientTabs'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipientTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createTabs
      x-ds-method: create
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeRecipientTabs
    delete:
      tags:
        - EnvelopeRecipientTabs
      summary: Deletes the tabs associated with a recipient.
      description: Deletes one or more tabs associated with a recipient in a draft
        envelope.
      operationId: Recipients_DeleteRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipientTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnvelopeRecipientTabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeRecipientTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteTabs
      x-ds-method: delete
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: EnvelopeRecipientTabs
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/views/identity_manual_review:
    post:
      tags:
        - EnvelopeRecipients
      summary: Create the link to the page for manually reviewing IDs.
      description: 'This method returns the URL of the page that allows a sender to
        [manually review](https://support.docusign.com/en/guides/ndse-user-guide-send-documents-with-id-verification)
        the ID of a recipient. '
      operationId: Views_PostRecipientManualReviewView
      parameters:
        - name: accountId
          in: path
          description: A value that identifies your account. This value is automatically
            generated by DocuSign for any account you create. Copy the value from the
            API Account ID field in the [AppsI and Keys](https://support.docusign.com/en/guides/ndse-admin-guide-api-and-keys)
            page.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: "A GUID value that DocuSign assigns to identify each recipient\
          \ in an envelope. This value is globally unique for all recipients, not\
          \ just those in your account.\n\nThe specified recipient must belong to\
          \ a workflow that allows the [manual review](https://support.docusign.com/en/guides/Identity-Verification-DocuSign-eSignature-Admin-Guide)\
          \ of IDs. In addition, the status of the automatic verification for this\
          \ recipient must return `Failed` and the value of the `vendorFailureStatusCode`\
          \ field must be `MANUAL_REVIEW_STARTED` as shown in the following extract\
          \ of a response to the [GET ENVELOPE](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopes/get/)\
          \ method:\n<p>\n\n```\n\"recipientAuthenticationStatus\": {\n       \"identityVerificationResult\"\
          : { \n             \"status\": \"Failed\",\n             \"eventTimestamp\"\
          : \"2020-09-04T16:59:42.8045667Z\",\n             \"vendorFailureStatusCode\"\
          : \"MANUAL_REVIEW_STARTED\"\n        }\n  }\n```"
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/viewUrl'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createRecipientManualReviewView
      x-ds-method: createRecipientManualReviewView
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/document_visibility:
    put:
      tags:
        - EnvelopeRecipients
      summary: Updates document visibility for recipients
      description: |-
        This method updates document visibility for one or more recipients based on the `recipientId` and `visible` values that you include in the request body.

        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutRecipientsDocumentVisibility
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentVisibilityList'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentVisibilityList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentVisibilityList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRecipientsDocumentVisibility
      x-ds-method: updateRecipientsDocumentVisibility
      x-ds-service: EnvelopeDocumentVisibility
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentVisibilityList
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/responsive_html_preview:
    post:
      tags:
        - ResponsiveHtmlPreview
      summary: Creates a preview of the responsive versions of all of the documents
        in an envelope.
      description: |
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/),
        HTML versions of all of the documents in an
        envelope. This method enables you to preview the
        PDF document conversions to responsive HTML across
        device types prior to sending.

        The request body is a `documentHtmlDefinition`
        object, which holds the responsive signing
        parameters that define how to generate the HTML
        version of the documents.
      operationId: ResponsiveHtml_PostResponsiveHtmlPreview
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitions'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createResponsiveHtmlPreview
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentHtmlDefinition
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/tabs_blob:
    get:
      tags:
        - TabsBlob
      summary: Gets encrypted tabs for envelope.
      operationId: TabsBlob_GetTabsBlob
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getTabsBlob
      x-ds-method: getTabsBlob
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - TabsBlob
      summary: Updates encrypted tabs for envelope.
      operationId: TabsBlob_PutTabsBlob
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: putTabsBlob
      x-ds-method: putTabsBlob
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/templates:
    get:
      tags:
        - EnvelopeTemplates
      summary: Get List of Templates used in an Envelope
      description: |
        This returns a list of the server-side templates, their name and ID, used in an envelope.
      operationId: Templates_GetEnvelopeTemplates
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: The possible value is `matching_applied`, which returns template
            matching information for the template.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listTemplates
      x-ds-method: list
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    post:
      tags:
        - EnvelopeTemplates
      summary: Adds templates to an envelope.
      description: Adds templates to the specified envelope.
      operationId: Templates_PostEnvelopeTemplates
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
        - name: preserve_template_recipient
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentTemplateList'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentTemplateList'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentTemplateList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: applyTemplate
      x-ds-method: apply
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentTemplateList
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/correct:
    post:
      tags:
        - EnvelopeViews
      summary: Returns a URL to the envelope correction UI.
      description: "Returns a URL that allows you to embed the envelope correction\
        \ view of the DocuSign UI in your applications.\n\n**Important**: Due to screen\
        \ space issues, iFrames should not be used for embedded operations on mobile\
        \ devices. For iOS devices, DocuSign recommends using a WebView. \n\n**Note**:\
        \ You can revoke this URL by making the DELETE call to the same URL with no\
        \ request body. \n\n<blockquote>\n<p><b>Information Security notice</b>: This\
        \ method provides full access to the sending account. When you use this view,\
        \ the current user has full access to the account. If the account has administrative\
        \ privileges, then this method also provides administrator access.</p>\n\n\
        <p>If your use case needs to enable a sender to update a draft envelope before\
        \ it is sent or make other changes, take one of the following steps:</p>\n\
        \n<ul>\n<li>Configure each sender to have their own individual user account\
        \ to use this API method.</li>\n<li>Enhance your API integration so that this\
        \ method is not needed. Your integration can create the tabs, recipients,\
        \ and other envelope settings as needed.</li>\n</ul>\n</blockquote>"
      operationId: Views_PostEnvelopeCorrectView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/correctViewRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/correctViewRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeViews'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createCorrectView
      x-ds-method: createCorrect
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: correctViewRequest
    delete:
      tags:
        - EnvelopeViews
      summary: Revokes the correction view URL to the Envelope UI.
      operationId: Views_DeleteEnvelopeCorrectView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/correctViewRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/correctViewRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteEnvelopeCorrectView
      x-ds-method: deleteEnvelopeCorrectView
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: correctViewRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/edit:
    post:
      tags:
        - EnvelopeViews
      summary: Returns a URL to the edit view UI.
      description: "Returns a URL that enables you to embed the edit view of the DocuSign\
        \ UI in your applications. This is a one-time use login token that allows\
        \ the user to be placed into the DocuSign editing view. \n\nUpon sending completion,\
        \ the user is returned to the return URL provided by the API application.\n\
        \n**Important**: Due to screen space issues, iFrames should not be used for\
        \ embedded operations on mobile devices. For iOS devices, DocuSign recommends\
        \ using a WebView. \n\n**Note**: You can revoke this URL by making the DELETE\
        \ call to the same URL with no request body. \n\n<blockquote>\n<p><b>Information\
        \ Security notice</b>: This method provides full access to the sending account.\
        \ When you use this view, the current user has full access to the account.\
        \ If the account has administrative privileges, then this method also provides\
        \ administrator access.</p>\n\n<p>If your use case needs to enable a sender\
        \ to update a draft envelope before it is sent or make other changes, take\
        \ one of the following steps:</p>\n\n<ul>\n<li>Configure each sender to have\
        \ their own individual user account to use this API method.</li>\n<li>Enhance\
        \ your API integration so that this method is not needed. Your integration\
        \ can create the tabs, recipients, and other envelope settings as needed.</li>\n\
        </ul>\n</blockquote>"
      operationId: Views_PostEnvelopeEditView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/returnUrlRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/returnUrlRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeViews'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createEditView
      x-ds-method: createEdit
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |+
            The response contains the URL
            of the embeddable edit view
            for a specified envelope.

            The request body contains
            a `returnUrl`.
            This is the URL
            that the DocuSign platform
            will redirect the user to
            when the view is closed.

          direction: both
          format: json
          response:
            url: https://demo.docusign.net/Member/StartInSession.aspx?StartConsole=1&t=c8dc7c1e-xxxx-xxxx-xxxx-405ba1f7d38b&DocuEnvelope=4b728be4-xxxx-xxxx-xxxx-d63e23f822b6&send=1
          request:
            returnUrl: https://dsapp.example.com/return/from/edit/view
          style: custom
          title: Getting an Edit View URL and Setting a Return URL
      x-codegen-request-body-name: returnUrlRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/recipient:
    post:
      tags:
        - EnvelopeViews
      summary: Returns a URL to the recipient view UI.
      description: "Returns a URL that enables you to embed the recipient view of\
        \ the DocuSign UI in your applications. If the recipient is a signer, then\
        \ the view will provide the signing ceremony.\n\n**Note**: Please redirect\
        \ the client to the URL. iFrames should not be used, especially if the recipient\
        \ is using a mobile or tablet. \n\nThis method is only used with envelopes\
        \ in the `sent` status.\n\nYour application is responsible for authenticating\
        \ the identity of the recipient or signer when you use this method. Use the\
        \ parameters `assertionId`, `authenticationInstant`, `authenticationMethod`,\
        \ `clientUserId`, and `securityDomain` to record information on how the recipient\
        \ was authenticated. At a minimum, `authenticationMethod` and `clientUserId`\
        \ are required. The information that you provide is included in the envelope's\
        \ certificate of completion.\n\n## Redirects\nAfter the signer completes or\
        \ ends the signing ceremony, DocuSign will redirect the user's browser back\
        \ to your app via the `returnUrl` that you supply. (The user is redirected\
        \ through a different subdomain, depending on the region of the account sending\
        \ the envelope. Please [verify your domain whitelist](https://www.docusign.com/trust/security/whitelists).)\
        \ \n\n### The event status parameter\nDocuSign appends an `event` query parameter\
        \ to the URL with the outcome of the signing ceremony. Your app can use this\
        \ event parameter to determine the next step for the envelope. Do not fetch\
        \ the envelope status by using Envelopes::get or a similar method because\
        \ doing so could break the DocuSign rule against polling.\n\n**Note**: Because\
        \ a user can cancel redirection, close their browser after signing, or spoof\
        \ the landing URL. Hitting the `ReturnUrl` should not be the single source\
        \ of truth for envelope status for your integration.\n\n## The URL is time-limited\n\
        The URL returned by this method is valid for one use, and you must use or\
        \ display it within a couple of minutes after it is generated. AFter the recipient\
        \ is redirected to the recipient view, they must interact with the DocuSign\
        \ system periodically or their session will time out.\n\nBecause the URL is\
        \ time-limited, it should not be stored or sent through email. After you receive\
        \ it, immediately redirect the user's browser to the URL.\n\nIf you want to\
        \ invite someone to an embedded signing session via email, the email invitation's\
        \ URL must be to your application. When invoked, your app should request a\
        \ recipientView URL from DocuSign and then redirect the signer to that URL.\n\
        \n## Maintaining State\nAfter the recipient completes the recipient view (or\
        \ signing ceremony), they are redirected to your application. Your application\
        \ can recover state information about the transaction by storing information\
        \ in a cookie, or by including query parameters in the `returnUrl` field.\
        \ Eg, `https://myapp.eg.com/docusign_return?myState=12345` When the user is\
        \ redirected to your app, the `event` query parameter will be appended. In\
        \ this example, prevent spoofing by not using a guessable value as the state\
        \ value.\n\n**Note**: You can revoke the URL by making the DELETE call to\
        \ the same URL with no request body. "
      operationId: Views_PostEnvelopeRecipientView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipientViewRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/recipientViewRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeViews'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createRecipientView
      x-ds-method: createRecipient
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: recipientViewRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/recipient_preview:
    post:
      tags:
        - EnvelopeRecipients
      summary: Creates an envelope recipient preview.
      description: |-
        This method returns a URL for an envelope recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients' experience.

        For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
      operationId: Views_PostEnvelopeRecipientPreview
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipientPreviewRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/recipientPreviewRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/viewUrl'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createEnvelopeRecipientPreview
      x-ds-method: createEnvelopeRecipientPreview
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: recipientPreviewRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/sender:
    post:
      tags:
        - EnvelopeViews
      summary: Returns a URL to the sender view UI.
      description: "Returns a URL that enables you to embed the sender view of the\
        \ DocuSign UI in your applications.\n\nThe returned URL can only be redirected\
        \ to immediately after it is generated. It can only be used once.\nTherefore,\
        \ request the URL immediately before you redirect your user to it.\n\nFor\
        \ the best user experience, don't use an iFrame. For iOS devices DocuSign\
        \ recommends using a WebView.\n\nMultiple solutions are available for maintaining\
        \ your\nclient state. See the **Maintaining State** section of the [Embedded\
        \ Signing introduction.](https://developers.docusign.com/esign-rest-api/guides/embedded-signing)\n\
        \nAfter the user has completed the sending view, the browser is redirected\
        \ to the `returnUrl` supplied.\n\nBy default, if the envelope already contains\
        \ one or more documents, DocuSign will initially show the document tagging\
        \ view when you redirect to the URL. \n\nTo start with the envelope's recipients\
        \ and documents view instead, examine the URL in the method's response. \n\
        Then change the query parameter from `send=1` to `send=0` to start with the\
        \ recipients/documents view.\n\n**Note**: You can revoke the URL by making\
        \ the DELETE call to the same URL with no request body. \n\n<blockquote>\n\
        <p><b>Information Security notice</b>: This method provides full access to\
        \ the sending account. When you use this view, the current user has full access\
        \ to the account. If the account has administrative privileges, then this\
        \ method also provides administrator access.</p>\n\n<p>If your use case needs\
        \ to enable a sender to update a draft envelope before it is sent or make\
        \ other changes, take one of the following steps:</p>\n\n<ul>\n<li>Configure\
        \ each sender to have their own individual user account to use this API method.</li>\n\
        <li>Enhance your API integration so that this method is not needed. Your integration\
        \ can create the tabs, recipients, and other envelope settings as needed.</li>\n\
        </ul>\n</blockquote>"
      operationId: Views_PostEnvelopeSenderView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/returnUrlRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/returnUrlRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeViews'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createSenderView
      x-ds-method: createSender
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: returnUrlRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/shared:
    post:
      tags:
        - EnvelopeViews
      summary: Returns a URL to the shared recipient view UI for an envelope.
      description: "Returns a URL that enables you to embed the DocuSign UI recipient\
        \ view of a [shared envelope](https://support.docusign.com/en/guides/ndse-admin-guide-share-envelopes)\
        \ in your applications. This is the view that a user sees of an envelope that\
        \ a recipient on the same account has shared with them.\n\n**Important**:\
        \ Due to screen space issues, iFrames should not be used for embedded operations\
        \ on mobile devices. For iOS devices, DocuSign recommends using a WebView.\n\
        \n**Note**: You can revoke this URL by making the DELETE call to the same\
        \ URL with no request body. \n"
      operationId: Views_PostEnvelopeRecipientSharedView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipientViewRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/recipientViewRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/viewUrl'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createEnvelopeRecipientSharedView
      x-ds-method: createSharedRecipient
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: recipientViewRequest
  /v2.1/accounts/{accountId}/envelopes/{envelopeId}/workflow:
    get:
      tags:
        - EnvelopeWorkflowDefinition
      summary: Gets an envelope's workflow definition.
      description: Returns an envelope's workflow definition if the envelope specified
        by `envelopeId` has one.
      operationId: EnvelopeWorkflowDefinition_GetEnvelopeWorkflowDefinition
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workflow'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getEnvelopeWorkflowDefinition
      x-ds-method: getEnvelopeWorkflowDefinition
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeWorkflowDefinition
      summary: Updates an envelope's workflow definition.
      description: Updates the specified envelope's workflow definition if  it has
        one.
      operationId: EnvelopeWorkflowDefinition_PutEnvelopeWorkflowDefinition
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workflow'
          application/xml:
            schema:
              $ref: '#/components/schemas/workflow'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workflow'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateEnvelopeWorkflowDefinition
      x-ds-method: updateEnvelopeWorkflowDefinition
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: workflow
    delete:
      tags:
        - EnvelopeWorkflowDefinition
      summary: Deletes an envelope's workflow definition.
      description: |
        Deletes the specified envelope's workflow definition if it has one.
      operationId: EnvelopeWorkflowDefinition_DeleteEnvelopeWorkflowDefinition
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeId
          in: path
          description: "The envelope's GUID. \n\nExample: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`\n"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteEnvelopeWorkflowDefinition
      x-ds-method: deleteEnvelopeWorkflowDefinition
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/envelopes/status:
    put:
      tags:
        - Envelopes
      summary: Gets envelope statuses for a set of envelopes.
      description: |-
        Retrieves envelope statuses for a set of envelopes.

        You must specify _one_ of the following query parameters:

        | Parameter         | Description                                                                      |
        | :---------------- | :------------------------------------------------------------------------------- |
        | `from_date`       | a valid UTC DateTime:  `2016-01-01`                                              |
        | `envelope_ids`    | A comma-separated list of envelope IDs<br>or the special value `request_body`    |
        | `transaction_ids` | A comma-separated list of transaction IDs<br>or the special value `request_body` |

        When you use the special value `request_body`, the request body looks like this:

        ```
        {
          "envelopeIds": [
            "44c5ad6c-xxxx-xxxx-xxxx-ebda5e2dfe15",
            "8e26040d-xxxx-xxxx-xxxx-1e29b924d237",
            "c8b40a2d-xxxx-xxxx-xxxx-4fe56fe10f95"
          ]
        }
        ```

        **Note**: It is an error omit the request body altogether.
        The request body must be at least `{}`.

        ### You can find an example of using this API endpoint in the following how-to:

        * [How to list envelope status changes](https://developers.docusign.com/docs/esign-rest-api/how-to/list-envelope-status-changes/)
      operationId: Envelopes_PutStatus
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: ac_status
          in: query
          description: "Specifies the Authoritative Copy Status for the envelopes. The\
          \ possible values are: \n\n- `Unknown`\n- `Original`\n- `Transferred`\n\
          - `AuthoritativeCopy`\n- `AuthoritativeCopyExportPending`\n- `AuthoritativeCopyExported`\n\
          - `DepositPending`\n- `Deposited`\n- `DepositedEO`\n- `DepositFailed`"
          schema:
            type: string
        - name: block
          in: query
          description: If set to **true**, removes any results that match one of the
            provided `transaction_ids`.
          schema:
            type: string
        - name: count
          in: query
          description: The maximum number of results to return.
          schema:
            type: string
        - name: email
          in: query
          description: The email address of the sender.
          schema:
            type: string
        - name: envelope_ids
          in: query
          description: |-
            The envelope IDs to include in the results.

            The value of this property can be:
            - A comma-separated list of envelope IDs
            - The special value `request_body`. In this case, the method uses the envelope IDs in the request body.
          schema:
            type: string
        - name: from_date
          in: query
          description: "The date/time setting that specifies when the request begins\
          \ checking for status changes for envelopes in the account. This is required\
          \ unless parameters `envelope_ids` and/or `transaction_Ids` are provided.\
          \ \n\n****Note****: This parameter must be set to a valid  `DateTime`, or\
          \  `envelope_ids` and/or `transaction_ids` must be specified."
          schema:
            type: string
        - name: from_to_status
          in: query
          description: "The envelope status that you are checking for. Possible values\
          \ are:\n\n\n- `Changed` (default)\n- `Completed`\n- `Created`\n- `Declined`\n\
          - `Deleted`\n- `Delivered`\n- `Processing`\n- `Sent`\n- `Signed`\n- `TimedOut`\n\
          - `Voided`\n\nFor example, if you specify `Changed`, this method\nreturns\
          \ a list of envelopes that changed status\nduring the `from_date` to `to_date`\
          \ time period. \n"
          schema:
            type: string
        - name: start_position
          in: query
          description: The starting index position for search.
          schema:
            type: string
        - name: status
          in: query
          description: |
            A comma-separated list of envelope status to search for. Possible values are:

            - `completed`
            - `created`
            - `declined`
            - `deleted`
            - `delivered`
            - `processing`
            - `sent`
            - `signed`
            - `template`
            - `voided`
          schema:
            type: string
        - name: to_date
          in: query
          description: "Optional date/time setting\nthat specifies the last date/time\
          \ \nor envelope status changes in the result set. \n\nThe default value\
          \ is the time that you call the method. \n"
          schema:
            type: string
        - name: transaction_ids
          in: query
          description: |-
            The transaction IDs to include in the results. Note that transaction IDs are valid for seven days.

            The value of this property can be:
            - A list of comma-separated transaction IDs
            - The special value `request_body`. In this case, this method uses the transaction IDs in the request body.
          schema:
            type: string
        - name: user_name
          in: query
          description: |
            Limits results to envelopes
            sent by the account user
            with this user name.

            `email` must be given as well,
            and both `email` and `user_name`
            must refer to an existing account user.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeIdsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeIdsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listStatus
      x-ds-method: listStatus
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeIdsRequest
  /v2.1/accounts/{accountId}/envelopes/transfer_rules:
    get:
      tags:
        - EnvelopeTransferRules
      summary: Gets envelope transfer rules.
      description: |-
        This method retrieves a list of envelope transfer rules associated with an account.

        **Note**: Only Administrators can create and use envelope transfer rules. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_GetEnvelopeTransferRules
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: (Optional) The maximum number of results to return.
          schema:
            type: string
        - name: start_position
          in: query
          description: (Optional) The position within the total result set from which
            to start returning values. The value **thumbnail** may be used to return
            the page image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeTransferRuleInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: get
      x-ds-method: get
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeTransferRules
      summary: Changes the status of multiple envelope transfer rules.
      description: |-
        This method changes the status for one or more envelope transfer rules based on the `envelopeTransferRuleId`s in the request body. You use this method to change whether or not the rules are enabled.

        **Note**: You cannot change any other information about the envelope transfer rule. Only Administrators can update envelope transfer rules. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_PutEnvelopeTransferRules
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeTransferRuleInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeTransferRuleInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeTransferRuleInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: update
      x-ds-method: update
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeTransferRuleInformation
    post:
      tags:
        - EnvelopeTransferRules
      summary: Creates an envelope transfer rule.
      description: "This method creates an envelope transfer rule.\n\nWhen you create\
        \ an envelope transfer rule, you specify the following properties: \n\n- `eventType`\n\
        - `fromGroups`\n- `toUser`\n- `toFolder`\n- `carbonCopyOriginalOwner`\n- `enabled`\n\
        \n**Note**: Only Administrators can create envelope transfer rules. In addition,\
        \ to use envelope transfer rules, the **Transfer Custody** feature must be\
        \ enabled for your account."
      operationId: EnvelopeTransferRules_PostEnvelopeTransferRules
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeTransferRuleRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeTransferRuleRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeTransferRuleInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: create
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeTransferRuleRequest
  /v2.1/accounts/{accountId}/envelopes/transfer_rules/{envelopeTransferRuleId}:
    put:
      tags:
        - EnvelopeTransferRules
      summary: Changes the status of an envelope transfer rule.
      description: |-
        This method changes the status of an envelope transfer rule. You use this method to change whether or not the rule is enabled.

        You must include the `envelopeTransferRuleId` both as a query parameter, and in the request body.

        **Note**: You cannot change any other information about the envelope transfer rule. Only Administrators can update an envelope transfer rule. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_PutEnvelopeTransferRule
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeTransferRuleId
          in: path
          description: The id of the envelope transfer rule. The system generates this
            id when the rule is first created.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeTransferRule'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeTransferRule'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeTransferRule'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateEnvelopeTransferRule
      x-ds-method: updateEnvelopeTransferRule
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeTransferRule
    delete:
      tags:
        - EnvelopeTransferRules
      summary: Deletes an envelope transfer rule.
      description: |-
        This method deletes an envelope transfer rule.

        **Note**: Only Administrators can delete envelope transfer rules. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_DeleteEnvelopeTransferRules
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: envelopeTransferRuleId
          in: path
          description: The id of the envelope transfer rule. The system generates this
            id when the rule is first created.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: delete
      x-ds-method: delete
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/favorite_templates:
    get:
      tags:
        - FavoriteTemplates
      summary: Retrieves the list of favorited templates for this caller.
      operationId: FavoriteTemplates_GetFavoriteTemplates
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/favoriteTemplatesInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getFavoriteTemplates
      x-ds-api-status: beta
      x-ds-method: getFavoriteTemplates
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - FavoriteTemplates
      summary: |
        Sets a template as a favorite.
      operationId: FavoriteTemplates_PutFavoriteTemplate
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favoriteTemplatesInfo'
          application/xml:
            schema:
              $ref: '#/components/schemas/favoriteTemplatesInfo'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/favoriteTemplatesInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateFavoriteTemplate
      x-ds-api-status: beta
      x-ds-method: updateFavoriteTemplate
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: favoriteTemplatesInfo
    delete:
      tags:
        - FavoriteTemplates
      summary: Unfavorites a template.
      operationId: FavoriteTemplates_UnFavoriteTemplate
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favoriteTemplatesInfo'
          application/xml:
            schema:
              $ref: '#/components/schemas/favoriteTemplatesInfo'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/favoriteTemplatesInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: unFavoriteTemplate
      x-ds-api-status: beta
      x-ds-method: unFavoriteTemplate
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: favoriteTemplatesInfo
  /v2.1/accounts/{accountId}/folders:
    get:
      tags:
        - Folders
      summary: Gets a list of the folders for the account.
      description: Retrieves a list of the folders for the account, including the
        folder hierarchy. You can specify whether to return just the template folder
        or template folder and normal folders by setting the `template` query string
        parameter.
      operationId: Folders_GetFolders
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: "A comma-separated list of folder types to include in the response.\n\
          Valid values are:\n\n- `envelope_folders`: Returns a list of envelope folders.\
          \ (Default)\n- `template_folders`: Returns a list of template folders. \n\
          - `shared_template_folders`: Returns a list of shared template folders.\n"
          schema:
            type: string
        - name: include_items
          in: query
          description: Indicates whether folder items are included in the response.
            If this parameter is omitted, the default is false.
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values.
          schema:
            type: string
        - name: template
          in: query
          description: This parameter is deprecated as of version 2.1. Use `include`
            instead.
          schema:
            type: string
        - name: user_filter
          in: query
          description: |
            Narrows down the resulting folder list by the following values:

            - `all`: Returns all templates owned or shared with the user. (default)
            - `owned_by_me`: Returns only  templates the user owns.
            - `shared_with_me`: Returns only templates that are shared with the user.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/foldersResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: list
      x-ds-method: list
      x-ds-service: Folders
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/folders/{folderId}:
    get:
      tags:
        - Folders
      summary: Gets a list of the envelopes in the specified folder.
      description: Retrieves a list of the envelopes in the specified folder. You
        can narrow the query by specifying search criteria in the query string parameters.
      operationId: Folders_GetFolderItems
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: from_date
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
        - name: include_items
          in: query
          description: Indicates whether folder items are included in the response.
            If this parameter is omitted, the default is false.
          schema:
            type: string
        - name: owner_email
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
        - name: owner_name
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
        - name: search_text
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
        - name: start_position
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
        - name: status
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
        - name: to_date
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/folderItemsResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listItems
      x-ds-method: listItems
      x-ds-service: Folders
      x-ds-in-sdk: true
    put:
      tags:
        - Folders
      summary: Moves an envelope from its current folder to the specified folder.
      description: "Moves an envelope from its current folder to the specified folder.\n\
        \nYou can use this method to delete envelopes by specifying `recyclebin` in\
        \ the `folderId` parameter.\nPlacing an in-process envelope (envelope status\
        \ of `sent` or `delivered`) in the recycle bin voids the envelope.\n\nYou\
        \ can also use this method to delete templates by specifying a template ID\
        \ instead of an envelope ID in the `envelopeIds` property and specifying `recyclebin`\
        \ in the `folderId` parameter. "
      operationId: Folders_PutFolderById
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/foldersRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/foldersRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/foldersResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: moveEnvelopes
      x-ds-method: moveEnvelopes
      x-ds-service: Folders
      x-ds-in-sdk: true
      x-codegen-request-body-name: foldersRequest
  /v2.1/accounts/{accountId}/groups:
    get:
      tags:
        - Groups
      summary: Gets information about groups associated with the account.
      description: Retrieves information about groups associated with the account.
      operationId: Groups_GetGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: Number of records to return. The number must be greater than
            1 and less than or equal to 100.
          schema:
            type: string
        - name: group_type
          in: query
          schema:
            type: string
        - name: include_usercount
          in: query
          description: When set to **true**, every group returned in the response includes
            a `userCount` property that contains the total number of users in the group.
            The default is **true**.
          schema:
            type: string
        - name: search_text
          in: query
          description: Filters the results of a GET request based on the text that you
            specify.
          schema:
            type: string
        - name: start_position
          in: query
          description: The starting value for the list.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/groupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listGroups
      x-ds-method: list
      x-ds-service: Groups
      x-ds-in-sdk: true
    put:
      tags:
        - Groups
      summary: Updates the group information for a group.
      description: Updates the group name and modifies, or sets, the permission profile
        for the group.
      operationId: Groups_PutGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/groupInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/groupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateGroups
      x-ds-method: update
      x-ds-service: Groups
      x-ds-in-sdk: true
      x-codegen-request-body-name: groupInformation
    post:
      tags:
        - Groups
      summary: Creates one or more groups for the account.
      description: |-
        Creates one or more groups for the account.

        Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the `userSettings` property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
      operationId: Groups_PostGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/groupInformation'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/groupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createGroups
      x-ds-method: create
      x-ds-service: Groups
      x-ds-in-sdk: true
      x-codegen-request-body-name: groupInformation
    delete:
      tags:
        - Groups
      summary: Deletes an existing user group.
      description: |
        Deletes an existing user group.

        When you delete a group, you include only the `groupId` in the request body.

        Example:

        ```
        {
          "groups": [
            {
              "groupId": "12345"
            }
        }
        ```
      operationId: Groups_DeleteGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/groupInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/groupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteGroups
      x-ds-method: delete
      x-ds-service: Groups
      x-ds-in-sdk: true
      x-codegen-request-body-name: groupInformation
  /v2.1/accounts/{accountId}/groups/{groupId}/brands:
    get:
      tags:
        - GroupBrands
      summary: Gets the brand information for a group.
      description: This method returns information about the brands associated with
        a group.
      operationId: Brands_GetGroupBrands
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: The id of the group.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupBrands'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBrands
      x-ds-method: get
      x-ds-service: Groups
      x-ds-in-sdk: true
    put:
      tags:
        - GroupBrands
      summary: Adds an existing brand to a group.
      description: This method adds one or more existing brands to a group based on
        the `groupId`.
      operationId: Brands_PutGroupBrands
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: The ID of the group being accessed.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/brandsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/brandsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupBrands'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateBrands
      x-ds-method: update
      x-ds-service: Groups
      x-ds-in-sdk: true
      x-codegen-request-body-name: brandsRequest
    delete:
      tags:
        - GroupBrands
      summary: Deletes brand information from a group.
      description: This method deletes one or more brands from a group.
      operationId: Brands_DeleteGroupBrands
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: The id of the group.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/brandsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/brandsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupBrands'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteBrands
      x-ds-method: delete
      x-ds-service: Groups
      x-ds-in-sdk: true
      x-codegen-request-body-name: brandsRequest
  /v2.1/accounts/{accountId}/groups/{groupId}/users:
    get:
      tags:
        - GroupUsers
      summary: Gets a list of users in a group.
      description: Retrieves a list of users in a group.
      operationId: Groups_GetGroupUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: The ID of the group being accessed.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: 'Number of records to return. The number must be greater than
          1 and less than or equal to 100. '
          schema:
            type: string
        - name: start_position
          in: query
          description: Starting value for the list.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/usersResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listGroupUsers
      x-ds-method: list
      x-ds-service: Groups
      x-ds-in-sdk: true
    put:
      tags:
        - GroupUsers
      summary: Adds one or more users to an existing group.
      description: Adds one or more existing DocuSign users to an existing group.
      operationId: Groups_PutGroupUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: The ID of the group being accessed.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfoList'
          application/xml:
            schema:
              $ref: '#/components/schemas/userInfoList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/usersResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateGroupUsers
      x-ds-method: update
      x-ds-service: Groups
      x-ds-in-sdk: true
      x-codegen-request-body-name: userInfoList
    delete:
      tags:
        - GroupUsers
      summary: Deletes one or more users from a group
      description: |
        Deletes one or more users from a group. This request takes a `userInfoList` that contains the users that you want to delete.
      operationId: Groups_DeleteGroupUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: The ID of the group being accessed.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfoList'
          application/xml:
            schema:
              $ref: '#/components/schemas/userInfoList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/usersResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteGroupUsers
      x-ds-method: delete
      x-ds-service: Groups
      x-ds-in-sdk: true
      x-codegen-request-body-name: userInfoList
  /v2.1/accounts/{accountId}/identity_verification:
    get:
      tags:
        - IdentityVerifications
      summary: Retrieves the Identity Verification workflows available to an account.
      description: |-
        This method returns a list of Identity Verification workflows that are available to an account.

        **Note**: To use this method, you must either be an account administrator or a sender.
      operationId: AccountIdentityVerification_GetAccountIdentityVerification
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountIdentityVerificationResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccountIdentityVerification
      x-ds-method: list
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/payment_gateway_accounts:
    get:
      tags:
        - PaymentGatewayAccounts
      summary: List payment gateway accounts
      description: This method returns a list of payment gateway accounts and basic
        information about them.
      operationId: PaymentGatewayAccounts_GetAllPaymentGatewayAccounts
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/paymentGatewayAccountsInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAllPaymentGatewayAccounts
      x-ds-api-status: beta
      x-ds-method: list
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/permission_profiles:
    get:
      tags:
        - AccountPermissionProfiles
      summary: Gets a list of permission profiles.
      description: This method returns a list of permission profiles that are associated
        with an account.
      operationId: PermissionProfiles_GetPermissionProfiles
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: |
            A comma-separated list of additional properties to return in the response. Valid values are:

            - `user_count`: The total number of users associated with the permission profile.
            - `closed_users`: Includes closed users in the `user_count`.
            - `account_management`: The account management settings.
            - `metadata`: Metadata indicating whether the properties associated with the account permission profile are editable.

            Example: `user_count,closed_users`
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/permissionProfileInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listPermissions
      x-ds-method: list
      x-ds-service: Accounts
      x-ds-in-sdk: true
    post:
      tags:
        - AccountPermissionProfiles
      summary: Creates a new permission profile for an account.
      description: This method creates a new permission profile for an account.
      operationId: PermissionProfiles_PostPermissionProfiles
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: A comma-separated list of additional properties to return in
            the response. The only valid value for this request is `metadata`, which
            returns metadata indicating whether the properties associated with the account
            permission profile are editable.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/permissionProfile'
          application/xml:
            schema:
              $ref: '#/components/schemas/permissionProfile'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/permissionProfile'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createPermissionProfile
      x-ds-method: create
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: permissionProfile
  /v2.1/accounts/{accountId}/permission_profiles/{permissionProfileId}:
    get:
      tags:
        - AccountPermissionProfiles
      summary: Returns a permission profile for an account.
      description: This method returns information about a specific permission profile
        that is associated with an account.
      operationId: PermissionProfiles_GetPermissionProfile
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: permissionProfileId
          in: path
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: A comma-separated list of additional properties to return in
            the response. The only valid value for this request is `metadata`, which
            returns metadata indicating whether the properties associated with the account
            permission profile are editable.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/permissionProfile'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPermissionProfile
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountPermissionProfiles
      summary: Updates a permission profile.
      description: This method updates an account permission profile.
      operationId: PermissionProfiles_PutPermissionProfiles
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: permissionProfileId
          in: path
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: A comma-separated list of additional properties to return in
            the response. The only valid value for this request is `metadata`, which
            returns metadata indicating whether the properties associated with the account
            permission profile are editable.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/permissionProfile'
          application/xml:
            schema:
              $ref: '#/components/schemas/permissionProfile'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/permissionProfile'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updatePermissionProfile
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: permissionProfile
    delete:
      tags:
        - AccountPermissionProfiles
      summary: Deletes a permission profile from an account.
      description: |-
        This method deletes a permission profile from an account.

        To delete a permission profile, it must not have any users associated with it. When you use this method to delete a permission profile, you can reassign the users associated with it to a new permission profile at the same time by using the `move_users_to` query parameter.
      operationId: PermissionProfiles_DeletePermissionProfiles
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: permissionProfileId
          in: path
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          required: true
          schema:
            type: string
        - name: move_users_to
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deletePermissionProfile
      x-ds-method: delete
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/powerforms:
    get:
      tags:
        - PowerForms
      summary: Returns a list of PowerForms.
      description: This method returns a list of PowerForms that are available to
        the user.
      operationId: PowerForms_GetPowerFormsList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: from_date
          in: query
          description: |-
            (Optional) The start date for a date range.

            **Note**: If no value is provided, no date filtering is applied.
          schema:
            type: string
        - name: order
          in: query
          description: "(Optional) The order in which to sort the results.\n\nValid\
          \ values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. "
          schema:
            type: string
        - name: order_by
          in: query
          description: "(Optional) The file attribute to use to sort the results.\n\n\
          Valid values are: \n\n* `modified`\n* `name`"
          schema:
            type: string
        - name: to_date
          in: query
          description: |-
            (Optional) The end date for a date range.

            **Note**: If no value is provided, this property defaults to the current date.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/powerFormsResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listPowerForms
      x-ds-method: list
      x-ds-service: PowerForms
      x-ds-in-sdk: true
    post:
      tags:
        - PowerForms
      summary: Creates a new PowerForm
      description: |+
        This method creates a new PowerForm.

        You create a PowerForm from an existing DocuSign [template](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templates/create/), based on the `templateId` in the request body.

         PowerForms that you create from a template are referred to as *web PowerForms*.

        **Note**: The RADmin console also supports creating a PowerForm by uploading a PDF file that has active form fields (referred to as a *PDF PowerForm*). However, PDF PowerForms are deprecated and are not supported in the API.

        **Note**: A PowerForm can have only one sender. (Because PowerForms are not necessarily sent by email, this user is also referred to as the PowerForm *initiator*.) If you need to associate multiple senders with a PowerForm, create multiple copies of the PowerForm by using the same template (one copy for each sender). By default, the sender is the PowerForm Administrator who creates the PowerForm.


        ### Signing modes

        You can use one of the following signing modes for a PowerForm:

        **`email`**

        This mode verifies the recipient's identity by using email authentication before the recipient can sign a document. The recipient enters their email address on the landing page and then clicks **Begin Signing** to begin the signing process. The system then sends an email message with a validation code to the recipient. If the recipient does not provide a valid email address, they do not receive the email message containing the access code and are not able to open and sign the document.

        Alternatively, you can make the process easier for signers by using email authentication only and omitting the access code. To do this, you append the `activateonly` flag to the PowerForm URL and set it to true by passing in the value `1`.  When the flag is active, the first recipient receives an email with a link that initiates the signing session without having to enter access code.

        Example: `activateonly=1`

        **`direct`**

        This mode does not require any verification. After a recipient enters their email address on the landing page and clicks **Begin Signing**, a new browser tab opens and the recipient can immediately begin the signing process.

        Because the `direct` signing mode does not verify the recipient's identity by using email authentication, we strongly recommend that you use this mode only when the PowerForm is accessible behind a secure portal where the recipient's identity is already authenticated, or where another form of authentication is specified for the recipient in the DocuSign template (for example, an access code, phone authentication, or ID check).

        **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.

        ### Redirect URLs

        You can control the URL to which signers are redirected after signing your PowerForm. However, the URL is specified elsewhere, outside of the PowerForm creation process. For details, see [How do I specify a URL to redirect to when a PowerForm is completed?](https://support.docusign.com/en/articles/How-do-I-specify-a-URL-to-redirect-to-when-a-Powerform-is-completed).

        ### More information

        For more information about creating PowerForms, see [Create a PowerForm](https://support.docusign.com/en/guides/ndse-user-guide-create-a-powerform).

      operationId: PowerForms_PostPowerForm
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        description: Information about any PowerForms that are included in the envelope.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/powerForm'
          application/xml:
            schema:
              $ref: '#/components/schemas/powerForm'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/powerForm'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createPowerForm
      x-ds-method: create
      x-ds-service: PowerForms
      x-ds-in-sdk: true
      x-codegen-request-body-name: powerForm
    delete:
      tags:
        - PowerForms
      summary: Deletes one or more PowerForms.
      description: This method deletes one or more PowerForms. The request body takes
        an array of PowerForm objects that are deleted based on the `powerFormId`.
      operationId: PowerForms_DeletePowerFormsList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/powerFormsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/powerFormsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/powerFormsResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deletePowerForms
      x-ds-method: deleteList
      x-ds-service: PowerForms
      x-ds-in-sdk: true
      x-codegen-request-body-name: powerFormsRequest
  /v2.1/accounts/{accountId}/powerforms/{powerFormId}:
    get:
      tags:
        - PowerForms
      summary: Returns a single PowerForm.
      description: This method returns detailed information about a specific PowerForm.
      operationId: PowerForms_GetPowerForm
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: powerFormId
          in: path
          description: The id of the PowerForm.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/powerForm'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPowerForm
      x-ds-method: get
      x-ds-service: PowerForms
      x-ds-in-sdk: true
    put:
      tags:
        - PowerForms
      summary: Updates an existing PowerForm.
      description: This method updates an existing PowerForm.
      operationId: PowerForms_PutPowerForm
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: powerFormId
          in: path
          description: The id of the PowerForm.
          required: true
          schema:
            type: string
      requestBody:
        description: Information about any PowerForms that are included in the envelope.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/powerForm'
          application/xml:
            schema:
              $ref: '#/components/schemas/powerForm'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/powerForm'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updatePowerForm
      x-ds-method: update
      x-ds-service: PowerForms
      x-ds-in-sdk: true
      x-codegen-request-body-name: powerForm
    delete:
      tags:
        - PowerForms
      summary: Deletes a PowerForm.
      description: This method deletes a PowerForm.
      operationId: PowerForms_DeletePowerForm
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: powerFormId
          in: path
          description: The id of the PowerForm.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deletePowerForm
      x-ds-method: delete
      x-ds-service: PowerForms
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/powerforms/{powerFormId}/form_data:
    get:
      tags:
        - PowerFormData
      summary: Returns the data that users entered in a PowerForm.
      description: |-
        This method enables Powerform Administrators or the sender of a PowerForm to download the data that recipients have entered into a PowerForm.

        You specify the format in which you want to retrieve the data in the `Accept` header. This header accepts the following values:


        - `application/json`: JSON format
        - `application/xml`: XML format
        - `text/csv`: Comma-separated value (CSV) format

        **Note**: Only PowerForm Administrators or the PowerForm Sender can download the data associated with a PowerForm.
      operationId: PowerForms_GetPowerFormFormData
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: powerFormId
          in: path
          description: The id of the PowerForm.
          required: true
          schema:
            type: string
        - name: data_layout
          in: query
          description: |-
            The layout in which to return the PowerForm data. Valid values are:

            - `Native`
            - `Csv_Classic`
            - `Csv_One_Envelope_Per_Line`
            - `Xml_Classic`
          schema:
            type: string
        - name: from_date
          in: query
          description: |-
            The start date for a date range in UTC DateTime format.

            **Note**: If this property is null, no date filtering is applied.
          schema:
            type: string
        - name: to_date
          in: query
          description: The end date of a date range in UTC DateTime format. The default
            value is `UtcNow`.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/powerFormsFormDataResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPowerFormData
      x-ds-method: list
      x-ds-service: PowerForms
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/powerforms/senders:
    get:
      tags:
        - PowerForms
      summary: Gets PowerForm senders.
      description: This method returns a list of users who have sent PowerForms.
      operationId: PowerForms_GetPowerFormsSenders
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values. The value **thumbnail** may be used to return the page
            image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/powerFormSendersResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listPowerFormSenders
      x-ds-method: listSenders
      x-ds-service: PowerForms
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/recipient_names:
    get:
      tags:
        - Accounts
      summary: Gets the recipient names associated with an email address.
      description: Retrieves a list of all of the names associated with the email
        address that you pass in. This list can include variants of a single recipient's
        name that are used for signing, as well as the names of multiple different
        recipients.
      operationId: RecipientNames_GetRecipientNames
      parameters:
        - name: accountId
          in: path
          description: (Required) The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: The email address for which you want to retrieve recipient names.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/recipientNamesResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listRecipientNamesByEmail
      x-ds-method: listRecipientNamesByEmail
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/reports:
    get:
      tags:
        - Reports
      summary: |-
        Gets the descriptors for all of
        an account's active reports (for listings).
      operationId: ReportsInProduct_GetReportInProductList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reportInProductList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getReportInProductList
      x-ds-method: getReportInProductList
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    post:
      tags:
        - Reports
      summary: Creates a customized report.
      operationId: ReportsInProduct_PostReportInProductCreate
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportInProductRunRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/reportInProductRunRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reportInProductSaveResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createReportInProductCreate
      x-ds-method: createReportInProductCreate
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: reportInProductRunRequest
  /v2.1/accounts/{accountId}/reports/{id}:
    get:
      tags:
        - Reports
      summary: Gets the specified report.
      operationId: ReportsInProduct_GetReportInProduct
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique ID for the Salesforce object.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reportInProductGet'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getReportInProduct
      x-ds-method: getReportInProduct
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - Reports
      summary: Saves a customized report.
      operationId: ReportsInProduct_PutReportInProductSave
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique ID for the Salesforce object.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportInProductRunRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/reportInProductRunRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reportInProductSaveResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateReportInProductSave
      x-ds-method: updateReportInProductSave
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: reportInProductRunRequest
    delete:
      tags:
        - Reports
      summary: Removes a customized report.
      operationId: ReportsInProduct_DeleteReportInProduct
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique ID for the Salesforce object.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reportInProductSaveResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteReportInProduct
      x-ds-method: deleteReportInProduct
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/reports/report_results:
    put:
      tags:
        - Reports
      summary: Returns the result set from running the specified report.
      operationId: ReportsInProduct_PutReportInProductRunResults
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportInProductRunRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/reportInProductRunRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reportInProductRunResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateReportInProductRunResults
      x-ds-method: updateReportInProductRunResults
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: reportInProductRunRequest
  /v2.1/accounts/{accountId}/reports/report_results_csv:
    put:
      tags:
        - Reports
      summary: Returns the specified report as a CSV string.
      operationId: ReportsInProduct_PutReportResultsCsv
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportInProductCsvRunRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/reportInProductCsvRunRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateReportResultsCsv
      x-ds-method: updateReportResultsCsv
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: reportInProductCsvRunRequest
  /v2.1/accounts/{accountId}/seals:
    get:
      tags:
        - AccountSealProviders
      summary: Returns available seals for specified account.
      operationId: AccountSignatureProviders_GetSealProviders
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccountSealProviders'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getSealProviders
      x-ds-method: list
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/search_folders/{searchFolderId}:
    get:
      tags:
        - Folders
      summary: Gets a list of envelopes in folders matching the specified criteria.
      description: |-
        **This method is deprecated in API v2.1.**

        Use  [Envelopes::listStatusChanges](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges) instead.

        Retrieves a list of items that match the criteria specified in the query.

        If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
      operationId: SearchFolders_GetSearchFolderContents
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: searchFolderId
          in: path
          description: 'Specifies the envelope group that is searched by the request.
          These are logical groupings, not actual folder names. Valid values are:
          drafts, awaiting_my_signature, completed, out_for_signature.'
          required: true
          schema:
            type: string
        - name: all
          in: query
          description: Specifies that all envelopes that match the criteria are returned.
          schema:
            type: string
        - name: count
          in: query
          description: Specifies the number of records returned in the cache. The number
            must be greater than 0 and less than or equal to 100.
          schema:
            type: string
        - name: from_date
          in: query
          description: Specifies the start of the date range to return. If no value
            is provided, the default search is the previous 30 days.
          schema:
            type: string
        - name: include_recipients
          in: query
          description: When set to **true**, the recipient information is returned in
            the response.
          schema:
            type: string
        - name: order
          in: query
          description: 'Specifies the order in which the list is returned. Valid values
          are: `asc` for ascending order, and `desc` for descending order.'
          schema:
            type: string
        - name: order_by
          in: query
          description: 'Specifies the property used to sort the list. Valid values are:
          `action_required`, `created`, `completed`, `sent`, `signer_list`, `status`,
          or `subject`.'
          schema:
            type: string
        - name: start_position
          in: query
          description: Specifies the the starting location in the result set of the
            items that are returned.
          schema:
            type: string
        - name: to_date
          in: query
          description: Specifies the end of the date range to return.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/folderItemResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: search
      x-ds-method: search
      x-ds-service: Folders
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/settings:
    get:
      tags:
        - Accounts
      summary: Gets account settings information.
      description: Retrieves the account settings information for the specified account.
      operationId: Settings_GetSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSettingsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listSettings
      x-ds-method: listSettings
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - Accounts
      summary: Updates the account settings for an account.
      description: Updates the account settings for the specified account.
      operationId: Settings_PutSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSettingsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/accountSettingsInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateSettings
      x-ds-method: updateSettings
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: accountSettingsInformation
  /v2.1/accounts/{accountId}/settings/bcc_email_archives:
    get:
      tags:
        - BCCEmailArchive
      summary: Gets the BCC email archive configurations for an account.
      description: This method retrieves all of the BCC email archive configurations
        associated with an account.
      operationId: BCCEmailArchive_GetBCCEmailArchiveList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: (Optional) The maximum number of results to return.
          schema:
            type: string
        - name: start_position
          in: query
          description: (Optional) The index position within the total result set from
            which to start returning values. The default value is `0`.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bccEmailArchiveList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: list
      x-ds-method: list
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    post:
      tags:
        - BCCEmailArchive
      summary: Creates a BCC email archive configuration.
      description: |
        This method creates a BCC email archive configuration for an account (adds a BCC email address to the account for archiving the emails that DocuSign generates).

        The only property that you must set in the request body is the BCC email address that you want to use.

        **Note**: An account can have up to five active and pending email archive addresses combined, but you must use this method to add them to the account one at a time. Each email address is considered a separate BCC email archive configuration.
      operationId: BCCEmailArchive_PostBCCEmailArchive
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        description: Boolean that specifies whether BCC for Email Archive is enabled
          for the account. BCC for Email Archive allows you to set up an archive email
          address so that a BCC copy of an envelope is sent only to that address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bccEmailArchive'
          application/xml:
            schema:
              $ref: '#/components/schemas/bccEmailArchive'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bccEmailArchive'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: create
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: bccEmailArchive
  /v2.1/accounts/{accountId}/settings/bcc_email_archives/{bccEmailArchiveId}:
    get:
      tags:
        - BCCEmailArchive
      summary: Gets a BCC email archive configuration and its history.
      description: This method returns a specific BCC email archive configuration
        for an account, as well as the history of changes to the email address.
      operationId: BCCEmailArchive_GetBCCEmailArchiveHistoryList
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bccEmailArchiveId
          in: path
          description: The id of the BCC email archive configuration.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: (Optional) The maximum number of results (changes) to return.
          schema:
            type: string
        - name: start_position
          in: query
          description: (Optional) The index position within the total result set from
            which to start returning values. The default value is `0`.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bccEmailArchiveHistoryList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: get
      x-ds-method: get
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    delete:
      tags:
        - BCCEmailArchive
      summary: Deletes a BCC email archive configuration.
      description: |
        This method deletes a BCC email archive configuration from an account.

        When you use this method, the status of the BCC email archive configuration switches to `closed` and the BCC email address is no longer used to archive DocuSign-generated email messages.
      operationId: BCCEmailArchive_DeleteBCCEmailArchive
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: bccEmailArchiveId
          in: path
          description: The id of the BCC email archive configuration.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: delete
      x-ds-method: delete
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/settings/enote_configuration:
    get:
      tags:
        - ENoteConfigurations
      summary: Returns the configuration information for the eNote eOriginal integration.
      operationId: ENoteConfiguration_GetENoteConfiguration
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/eNoteConfiguration'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getENoteConfiguration
      x-ds-api-status: beta
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - ENoteConfigurations
      summary: Updates configuration information for the eNote eOriginal integration.
      operationId: ENoteConfiguration_PutENoteConfiguration
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eNoteConfiguration'
          application/xml:
            schema:
              $ref: '#/components/schemas/eNoteConfiguration'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/eNoteConfiguration'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateENoteConfiguration
      x-ds-api-status: beta
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: eNoteConfiguration
    delete:
      tags:
        - ENoteConfigurations
      summary: Deletes configuration information for the eNote eOriginal integration.
      operationId: ENoteConfiguration_DeleteENoteConfiguration
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteENoteConfiguration
      x-ds-api-status: beta
      x-ds-method: delete
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/settings/envelope_purge_configuration:
    get:
      tags:
        - Accounts
      summary: Gets the envelope purge configuration for an account.
      description: |-
        An envelope purge configuration enables account administrators to permanently remove documents and their field data from completed and voided envelopes after a specified retention period (`retentionDays`). This method retrieves the current envelope purge configuration for your account.

        **Note**: To use this method, you must be an account administrator.
      operationId: EnvelopePurgeConfiguration_GetEnvelopePurgeConfiguration
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopePurgeConfiguration'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getEnvelopePurgeConfiguration
      x-ds-api-status: beta
      x-ds-method: getEnvelopePurgeConfiguration
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - Accounts
      summary: Sets the envelope purge configuration for an account.
      description: |-
        An envelope purge configuration enables account administrators to permanently remove documents and their field data from completed and voided envelopes after a specified retention period (`retentionDays`). This method sets the envelope purge configuration for your account.

        **Note**: To use this method, you must be an account administrator.

        For more information, see [Purge Envelopes](https://support.docusign.com/en/guides/ndse-user-guide-purge-envelopes).
      operationId: EnvelopePurgeConfiguration_PutEnvelopePurgeConfiguration
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopePurgeConfiguration'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopePurgeConfiguration'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopePurgeConfiguration'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateEnvelopePurgeConfiguration
      x-ds-api-status: beta
      x-ds-method: updateEnvelopePurgeConfiguration
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopePurgeConfiguration
  /v2.1/accounts/{accountId}/settings/notification_defaults:
    get:
      tags:
        - Accounts
      summary: Gets envelope notification defaults.
      description: This method returns the default settings for the email notifications
        that signers and senders receive about envelopes.
      operationId: NotificationDefaults_GetNotificationDefaults
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notificationDefaults'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getNotificationDefaults
      x-ds-method: getNotificationDefaults
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - Accounts
      summary: Updates envelope notification default settings.
      description: This method changes the default settings for the email notifications
        that signers and senders receive about envelopes.
      operationId: NotificationDefaults_PutNotificationDefaults
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notificationDefaults'
          application/xml:
            schema:
              $ref: '#/components/schemas/notificationDefaults'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notificationDefaults'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateNotificationDefaults
      x-ds-method: updateNotificationDefaults
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: notificationDefaults
  /v2.1/accounts/{accountId}/settings/password_rules:
    get:
      tags:
        - AccountPasswordRules
      summary: Gets the password rules for an account.
      description: This method retrieves the password rules for an account.
      operationId: AccountPasswordRules_GetAccountPasswordRules
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountPasswordRules'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccountPasswordRules
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountPasswordRules
      summary: Updates the password rules for an account.
      description: |-
        This method updates the password rules for an account.

        **Note**: To update the password rules for an account, you must be an account administrator.
      operationId: AccountPasswordRules_PutAccountPasswordRules
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountPasswordRules'
          application/xml:
            schema:
              $ref: '#/components/schemas/accountPasswordRules'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountPasswordRules'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateAccountPasswordRules
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: accountPasswordRules
  /v2.1/accounts/{accountId}/settings/tabs:
    get:
      tags:
        - AccountTabSettings
      summary: Returns tab settings list for specified account
      description: This method returns information about the tab types and tab functionality
        that is currently enabled for an account.
      operationId: TabSettings_GetTabSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabAccountSettings'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccountTabSettings
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountTabSettings
      summary: Modifies tab settings for specified account
      description: This method modifies the tab types and tab functionality that is
        enabled for an account.
      operationId: TabSettings_PutSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        description: Account-wide tab settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tabAccountSettings'
          application/xml:
            schema:
              $ref: '#/components/schemas/tabAccountSettings'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabAccountSettings'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateAccountTabSettings
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: tabAccountSettings
  /v2.1/accounts/{accountId}/shared_access:
    get:
      tags:
        - Accounts
      summary: 'Reserved: Gets the shared item status for one or more users.'
      description: |-
        Retrieves shared item status for one or more users and types of items.

        Users with account administration privileges can retrieve shared access information for all account users. Users without account administrator privileges can only retrieve shared access information for themselves, and the returned information is limited to retrieving the status of the members of the account that are sharing their folders to the user. This is equivalent to setting the `shared` parameter to `shared_from`.
      operationId: SharedAccess_GetSharedAccess
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: Specifies the maximum number of results included in the response.
            If no value is specified, this defaults to 1000.
          schema:
            type: string
        - name: envelopes_not_shared_user_status
          in: query
          description: |-
            This query parameter works in conjunction with `user_ids`. When you specify one of the following user statuses, the query limits the results to only users that match the specified status:
            - `ActivationRequired`: Membership Activation required
            - `ActivationSent`: Membership activation sent to user
            - `Active`: User Membership is active
            - `Closed`: User Membership is closed
            - `Disabled`: User Membership is disabled
          schema:
            type: string
        - name: folder_ids
          in: query
          description: A comma-separated list of folder IDs for which to return shared
            item information. If `item_type` is set to `folders`, at least one folder
            ID is required.
          schema:
            type: string
        - name: item_type
          in: query
          description: |
            Specifies the type of shared item being requested. The possible values are:

            - `envelopes`: Get information about envelope sharing between users.
            - `templates`: Get information about template sharing among users and groups.
            - `folders`: Get information about folder sharing among users and groups.
          schema:
            type: string
        - name: search_text
          in: query
          description: Filter user names based on the specified string. The wild-card
            '*' (asterisk) can be used in the string.
          schema:
            type: string
        - name: shared
          in: query
          description: "A comma-separated list of sharing filters that specifies which\
          \ users appear in the response. \n\n- `not_shared`: The response lists users\
          \ who do not share items of `item_type` with the current user.\n\n- `shared_to`:\
          \ The response lists users in `user_list` who are sharing items to current\
          \ user.\n\n- `shared_from`: The response lists users in `user_list` who\
          \ are sharing items from the current user.\n\n- `shared_to_and_from`: The\
          \ response lists users in `user_list` who are sharing items to and from\
          \ the current user.\n\nIf the current user does not have administrative\
          \ privileges, only the `shared_to` option is valid."
          schema:
            type: string
        - name: start_position
          in: query
          description: If the number of responses is greater than `count`, this specifies
            the number of responses to skip. Typically this value is a multiple of `count`.
            The default is 0.
          schema:
            type: string
        - name: user_ids
          in: query
          description: A comma-separated list of user IDs for whom the shared item information
            is being requested.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSharedAccess'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listSharedAccess
      x-ds-method: listSharedAccess
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - Accounts
      summary: 'Reserved: Sets the shared access information for users.'
      description: |+
        This sets the shared access status for one or more users or templates.

        When setting user shared access, only users with account administration privileges can set shared access status for envelopes.

        When setting template shared access, only users who own a template and have sharing permission or with account administration privileges can set shared access for templates.

        Changes to the shared items status are not additive. The change always replaces the current status.

        To change template shared access, add the query parameter `item_type` = `templates` to the request. When this is set, the user and envelopes properties are not required.

        **Note**: This functionality is a newer version of the [Update Group Share](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/updateGroupShare) functionality.

      operationId: SharedAccess_PutSharedAccess
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: item_type
          in: query
          description: |
            Specifies the type of shared item being set:
            - `envelopes`: Set envelope sharing between users.
            - `templates`: Set information about template sharing among users and groups.
            - `folders`: Get information about folder sharing among users and groups.
          schema:
            type: string
        - name: preserve_existing_shared_access
          in: query
          description: When **true**, preserve the existing shared access settings.
          schema:
            type: string
        - name: user_ids
          in: query
          description: A comma-separated list of IDs for users whose shared item access
            is being set.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSharedAccess'
          application/xml:
            schema:
              $ref: '#/components/schemas/accountSharedAccess'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSharedAccess'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateSharedAccess
      x-ds-method: updateSharedAccess
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: accountSharedAccess
  /v2.1/accounts/{accountId}/signatureProviders:
    get:
      tags:
        - AccountSignatureProviders
      summary: Gets the available signature providers for an account.
      description: Returns a list of signature providers that the specified account
        can use.
      operationId: AccountSignatureProviders_GetSignatureProviders
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignatureProviders'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listSignatureProviders
      x-ds-method: list
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/signatures:
    get:
      tags:
        - AccountSignatures
      summary: Returns the managed signature definitions for the account
      operationId: AccountSignatures_GetAccountSignatures
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: stamp_format
          in: query
          schema:
            type: string
        - name: stamp_name
          in: query
          schema:
            type: string
        - name: stamp_type
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignaturesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccountSignatures
      x-ds-method: getAccountSignatures
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - AccountSignatures
      summary: |
        Updates an account signature.
      operationId: AccountSignatures_PutAccountSignature
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSignaturesInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/accountSignaturesInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignaturesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateAccountSignature
      x-ds-method: updateAccountSignature
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: accountSignaturesInformation
    post:
      tags:
        - AccountSignatures
      summary: |-
        Adds or updates one or more account signatures.
        This request may include images in multi-part format.
      operationId: AccountSignatures_PostAccountSignatures
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: decode_only
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSignaturesInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/accountSignaturesInformation'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignaturesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createAccountSignatures
      x-ds-method: createAccountSignatures
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: accountSignaturesInformation
  /v2.1/accounts/{accountId}/signatures/{signatureId}:
    get:
      tags:
        - AccountSignatures
      summary: Returns information about the specified signature.
      operationId: AccountSignatures_GetAccountSignature
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccountSignature
      x-ds-method: getAccountSignature
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - AccountSignatures
      summary: Updates an account signature.
      operationId: AccountSignatures_PutAccountSignatureById
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: close_existing_signature
          in: query
          description: When set to **true**, closes the current signature.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSignatureDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/accountSignatureDefinition'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateAccountSignatureById
      x-ds-method: updateAccountSignatureById
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: accountSignatureDefinition
    delete:
      tags:
        - AccountSignatures
      summary: Close the specified signature by ID.
      operationId: AccountSignatures_DeleteAccountSignature
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteAccountSignature
      x-ds-method: deleteAccountSignature
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/signatures/{signatureId}/{imageType}:
    get:
      tags:
        - AccountSignatures
      summary: Returns a signature image, initials, or stamp.
      operationId: AccountSignatures_GetAccountSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: imageType
          in: path
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: include_chrome
          in: query
          description: When **true**, the chrome (or frame containing the added line
            and identifier) is included with the signature image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/gif:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/gif:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccountSignatureImage
      x-ds-method: getAccountSignatureImage
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - AccountSignatures
      summary: Sets a signature image, initials, or stamp.
      operationId: AccountSignatures_PutAccountSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: imageType
          in: path
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: transparent_png
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateAccountSignatureImage
      x-ds-method: updateAccountSignatureImage
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    delete:
      tags:
        - AccountSignatures
      summary: Deletes a signature image, initials, or stamp.
      operationId: AccountSignatures_DeleteAccountSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: imageType
          in: path
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/accountSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteAccountSignatureImage
      x-ds-method: deleteAccountSignatureImage
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/signing_groups:
    get:
      tags:
        - SigningGroups
      summary: Gets a list of the Signing Groups in an account.
      description: Retrieves a list of all signing groups in the specified account.
      operationId: SigningGroups_GetSigningGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: group_type
          in: query
          schema:
            type: string
        - name: include_users
          in: query
          description: 'When set to **true**, the response includes the signing group
          members. '
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: list
      x-ds-method: list
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
    put:
      tags:
        - SigningGroups
      summary: Updates signing group names.
      description: 'Updates the name of one or more existing signing groups. '
      operationId: SigningGroups_PutSigningGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signingGroupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/signingGroupInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateList
      x-ds-method: updateList
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: signingGroupInformation
    post:
      tags:
        - SigningGroups
      summary: 'Creates a signing group. '
      description: "Creates one or more signing groups. \n\nMultiple signing groups\
        \ can be created in one call. Only users with account administrator privileges\
        \ can create signing groups. \n\nAn account can have a maximum of 50 signing\
        \ groups. Each signing group can have a maximum of 50 group members.\n \n\
        Signing groups can be used by any account user."
      operationId: SigningGroups_PostSigningGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signingGroupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/signingGroupInformation'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createList
      x-ds-method: create
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: signingGroupInformation
    delete:
      tags:
        - SigningGroups
      summary: Deletes one or more signing groups.
      description: Deletes one or more signing groups in the specified account.
      operationId: SigningGroups_DeleteSigningGroups
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signingGroupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/signingGroupInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteList
      x-ds-method: delete
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: signingGroupInformation
  /v2.1/accounts/{accountId}/signing_groups/{signingGroupId}:
    get:
      tags:
        - SigningGroups
      summary: 'Gets information about a signing group. '
      description: 'Retrieves information, including group member information, for
        the specified signing group. '
      operationId: SigningGroups_GetSigningGroup
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signingGroupId
          in: path
          description: "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\
          \n**Note**: When you send an envelope to a signing group, anyone in the\
          \ group can open it and sign it with their own signature. For this reason,\
          \ we recommend that you do not include non-signer recipients (such as carbon\
          \ copy recipients) in the same signing group as signer recipients. However,\
          \ you could create a second signing group for the non-signer recipients\
          \ and change the default action of Needs to Sign to a different value, such\
          \ as Receives a Copy. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroup'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: get
      x-ds-method: get
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
    put:
      tags:
        - SigningGroups
      summary: 'Updates a signing group. '
      description: 'Updates signing group name and member information. You can also
        add new members to the signing group. A signing group can have a maximum of
        50 members. '
      operationId: SigningGroups_PutSigningGroup
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signingGroupId
          in: path
          description: "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\
          \n**Note**: When you send an envelope to a signing group, anyone in the\
          \ group can open it and sign it with their own signature. For this reason,\
          \ we recommend that you do not include non-signer recipients (such as carbon\
          \ copy recipients) in the same signing group as signer recipients. However,\
          \ you could create a second signing group for the non-signer recipients\
          \ and change the default action of Needs to Sign to a different value, such\
          \ as Receives a Copy. "
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signingGroup'
          application/xml:
            schema:
              $ref: '#/components/schemas/signingGroup'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroup'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: update
      x-ds-method: update
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: signingGroup
  /v2.1/accounts/{accountId}/signing_groups/{signingGroupId}/users:
    get:
      tags:
        - SigningGroupUsers
      summary: Gets a list of members in a Signing Group.
      description: Retrieves the list of members in the specified Signing Group.
      operationId: SigningGroups_GetSigningGroupUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signingGroupId
          in: path
          description: "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\
          \n**Note**: When you send an envelope to a signing group, anyone in the\
          \ group can open it and sign it with their own signature. For this reason,\
          \ we recommend that you do not include non-signer recipients (such as carbon\
          \ copy recipients) in the same signing group as signer recipients. However,\
          \ you could create a second signing group for the non-signer recipients\
          \ and change the default action of Needs to Sign to a different value, such\
          \ as Receives a Copy. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroupUsers'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listUsers
      x-ds-method: list
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
    put:
      tags:
        - SigningGroupUsers
      summary: 'Adds members to a signing group. '
      description: 'Adds one or more new members to a signing group. A signing group
        can have a maximum of 50 members. '
      operationId: SigningGroups_PutSigningGroupUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signingGroupId
          in: path
          description: "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\
          \n**Note**: When you send an envelope to a signing group, anyone in the\
          \ group can open it and sign it with their own signature. For this reason,\
          \ we recommend that you do not include non-signer recipients (such as carbon\
          \ copy recipients) in the same signing group as signer recipients. However,\
          \ you could create a second signing group for the non-signer recipients\
          \ and change the default action of Needs to Sign to a different value, such\
          \ as Receives a Copy. "
          required: true
          schema:
            type: string
      requestBody:
        description: A complex type that contains information about users in the signing
          group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signingGroupUsers'
          application/xml:
            schema:
              $ref: '#/components/schemas/signingGroupUsers'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroupUsers'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateUsers
      x-ds-method: update
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: signingGroupUsers
    delete:
      tags:
        - SigningGroupUsers
      summary: Deletes  one or more members from a signing group.
      description: 'Deletes  one or more members from the specified signing group. '
      operationId: SigningGroups_DeleteSigningGroupUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signingGroupId
          in: path
          description: "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\
          \n**Note**: When you send an envelope to a signing group, anyone in the\
          \ group can open it and sign it with their own signature. For this reason,\
          \ we recommend that you do not include non-signer recipients (such as carbon\
          \ copy recipients) in the same signing group as signer recipients. However,\
          \ you could create a second signing group for the non-signer recipients\
          \ and change the default action of Needs to Sign to a different value, such\
          \ as Receives a Copy. "
          required: true
          schema:
            type: string
      requestBody:
        description: A complex type that contains information about users in the signing
          group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signingGroupUsers'
          application/xml:
            schema:
              $ref: '#/components/schemas/signingGroupUsers'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/signingGroupUsers'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteUsers
      x-ds-method: delete
      x-ds-service: SigningGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: signingGroupUsers
  /v2.1/accounts/{accountId}/supported_languages:
    get:
      tags:
        - Accounts
      summary: Gets the supported languages for envelope recipients.
      description: |-
        Retrieves a list of supported languages that you can set for an individual recipient when creating an envelope, as well as their simple type enumeration values. These are the languages that you can set for the standard email format and signing view for each recipient.

        For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign. It also determines the language used for buttons and tabs in both the email notification and the signing experience.

        **Note**: Setting a language for a recipient affects only the DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.

        For more information, see [Set Recipient Language and Specify Custom Email Messages](https://support.docusign.com/en/guides/ndse-user-guide-recipient-language).
      operationId: SupportedLanguages_GetSupportedLanguages
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/supportedLanguages'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getSupportedLanguages
      x-ds-method: listSupportedLanguages
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/tab_definitions:
    get:
      tags:
        - CustomTabs
      summary: Gets a list of all account tabs.
      description: Retrieves a list of all tabs associated with the account.
      operationId: Tabs_GetTabDefinitions
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: custom_tab_only
          in: query
          description: 'When set to **true**, only custom tabs are returned in the response. '
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabMetadataList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: list
      x-ds-method: list
      x-ds-service: CustomTabs
      x-ds-in-sdk: true
    post:
      tags:
        - CustomTabs
      summary: Creates a custom tab.
      description: |-
        Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.

        Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
      operationId: Tabs_PostTabDefinitions
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tabMetadata'
          application/xml:
            schema:
              $ref: '#/components/schemas/tabMetadata'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabMetadata'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: create
      x-ds-method: create
      x-ds-service: CustomTabs
      x-ds-in-sdk: true
      x-codegen-request-body-name: tabMetadata
  /v2.1/accounts/{accountId}/tab_definitions/{customTabId}:
    get:
      tags:
        - CustomTabs
      summary: Gets custom tab information.
      description: Retrieves information about the requested custom tab on the specified
        account.
      operationId: Tab_GetCustomTab
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: customTabId
          in: path
          description: The DocuSign-generated custom tab id for the custom tab to be
            applied. This can only be used when adding new tabs for a recipient. When
            used, the new tab inherits all the custom tab properties.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabMetadata'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: get
      x-ds-method: get
      x-ds-service: CustomTabs
      x-ds-in-sdk: true
    put:
      tags:
        - CustomTabs
      summary: |+
        Updates custom tab information.

      description: Updates the information in a custom tab for the specified account.
      operationId: Tab_PutCustomTab
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: customTabId
          in: path
          description: The DocuSign-generated custom tab id for the custom tab to be
            applied. This can only be used when adding new tabs for a recipient. When
            used, the new tab inherits all the custom tab properties.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tabMetadata'
          application/xml:
            schema:
              $ref: '#/components/schemas/tabMetadata'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabMetadata'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: update
      x-ds-method: update
      x-ds-service: CustomTabs
      x-ds-in-sdk: true
      x-codegen-request-body-name: tabMetadata
    delete:
      tags:
        - CustomTabs
      summary: Deletes custom tab information.
      description: Deletes the custom from the specified account.
      operationId: Tab_DeleteCustomTab
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: customTabId
          in: path
          description: The DocuSign-generated custom tab id for the custom tab to be
            applied. This can only be used when adding new tabs for a recipient. When
            used, the new tab inherits all the custom tab properties.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: delete
      x-ds-method: delete
      x-ds-service: CustomTabs
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/templates:
    get:
      tags:
        - Templates
      summary: Gets template definitions.
      description: Retrieves the list of templates for the specified account. The
        request can be limited to a specific folder.
      operationId: Templates_GetTemplates
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: The number of records to return in the cache.
          schema:
            type: string
        - name: created_from_date
          in: query
          description: Lists templates created on or after this date.
          schema:
            type: string
        - name: created_to_date
          in: query
          description: Lists templates modified before this date.
          schema:
            type: string
        - name: folder_ids
          in: query
          description: A comma-separated list of folder id GUIDs.
          schema:
            type: string
        - name: folder_types
          in: query
          description: |
            The type of folder to return templates for. Possible values are:

            - `templates`: Templates in the **My Templates** folder.
              Templates in the **Shared Templates**  and **All Template** folders (if the request id from and Admin) are excluded.
            - `templates_root`: Templates in the root level of the **My Templates** folder, but not in an actual folder. Note that the **My Templates** folder is not a real folder.
            - `recylebin`: Templates that have been deleted.
          schema:
            type: string
        - name: from_date
          in: query
          description: Start of the search date range. Only returns templates created
            on or after this date/time. If no value is specified, there is no limit
            on the earliest date created.
          schema:
            type: string
        - name: include
          in: query
          description: |-
            A comma-separated list
            of additional template attributes
            to include in the response.
            Valid values are:

            - `powerforms`: Includes details about the PowerForms associated with the templates.
            - `documents`: Includes information about template documents.
            - `folders`: Includes information about the folder that holds the template.
            - `favorite_template_status`: Includes the template `favoritedByMe` property. **Note**: You can mark a template as a favorite only in eSignature v2.1.
            - `advanced_templates`: Includes information about advanced templates.
            - `recipients`: Includes information about template recipients.
            - `custom_fields`: Includes information about template custom fields.
            - `notifications`: Includes information about the notification settings for templates.
          schema:
            type: string
        - name: is_deleted_template_only
          in: query
          schema:
            type: string
        - name: is_download
          in: query
          description: |-
            When set to **true**, downloads the templates listed in `template_ids` as a collection of JSON definitions in a single zip file.

            The `Content-Disposition` header is set in the response. The value of the header provides the filename of the file.

            The default is **false**.

            **Note**: This parameter only works when you specify a list of templates in the `template_ids` parameter.
          schema:
            type: string
        - name: modified_from_date
          in: query
          description: Lists templates modified on or after this date.
          schema:
            type: string
        - name: modified_to_date
          in: query
          description: Lists templates modified before this date.
          schema:
            type: string
        - name: order
          in: query
          description: |-
            Specifies the sort order of the search results.
            Valid values are:

            - `asc`: Ascending (A to Z)
            - `desc`: Descending (Z to A)
          schema:
            type: string
        - name: order_by
          in: query
          description: |-
            Specifies how the search results are listed.
            Valid values are:

            - `name`: template name
            - `modified`: date/time template was last modified
            - `used`: date/time the template was last used.
          schema:
            type: string
        - name: search_fields
          in: query
          description: |
            A comma-separated list of additional template properties to search.


            - `sender`: Include sender name and email in the search.
            - `recipients`: Include recipient names and emails in the search.
            - `envelope`: Not used in template searches.
          schema:
            type: string
        - name: search_text
          in: query
          description: The search text to use to search the names of templates.
          schema:
            type: string
        - name: shared_by_me
          in: query
          description: If **true**, the response only includes templates shared by the
            user. If false, the response only returns template not shared by the user.
            If not specified, the response is not affected.
          schema:
            type: string
        - name: start_position
          in: query
          description: The starting zero-based index position for the first template
            to show in the response. This value must be greater than or equal to `0`
            (zero).
          schema:
            type: string
        - name: template_ids
          in: query
          description: A comma-separated list of template ids to download. This value
            is valid only when `is_download` is **true**.
          schema:
            type: string
        - name: to_date
          in: query
          description: |-
            The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.

            **Note**: If this property is null, the value defaults to the current date.
          schema:
            type: string
        - name: used_from_date
          in: query
          description: Start of the search date range. Only returns templates used or
            edited on or after this date/time. If no value is specified, there is no
            limit on the earliest date used.
          schema:
            type: string
        - name: used_to_date
          in: query
          description: End of the search date range. Only returns templates used or
            edited up to this date/time. If no value is provided, this defaults to the
            current date.
          schema:
            type: string
        - name: user_filter
          in: query
          description: "Filters the templates in the response. Valid values are: \n\n\
          - `owned_by_me`: Results include only templates owned by the user.\n- `shared_with_me`:\
          \ Results include only templates owned by the user.  \n- `all`:  Results\
          \ include all templates owned or shared with the user."
          schema:
            type: string
        - name: user_id
          in: query
          description: The id of the user.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeTemplateResults'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: ListTemplates
      x-ds-method: list
      x-ds-service: Templates
      x-ds-in-sdk: true
    post:
      tags:
        - Templates
      summary: Creates one or more templates.
      description: "Creates one or more template definitions, using a multipart request\
        \ for each template.\n\nTemplates help streamline the sending process when\
        \ you frequently send the same or similar documents, or send different documents\
        \ to the same group of people.\n\nWhen you create a template, you define placeholder\
        \ roles. Rather than specifying a person, you specify a role that regularly\
        \ participates in a transaction that uses the template. Then, when you create\
        \ or send an envelope based on the template, you assign actual recipients\
        \ to the template roles. The recipients automatically inherit all of the workflow\
        \ that is defined for that role in the template, such as the tabs and routing\
        \ information.\n\nFor code examples and more information, see [REST API Templates](https://developers.docusign.com/esign-rest-api/guides/features/templates#sending-from-a-template).\n\
        \n## Template Email Subject Merge Fields\n\nPlaceholder roles have associated\
        \ merge fields that personalize the email notification that DocuSign sends.\
        \ For example, the template automatically personalizes the email message by\
        \ adding placeholders for the recipient's name and email address within the\
        \ email subject line, based on the recipient's role. When the sender adds\
        \ the name and email information for the recipient and sends the envelope,\
        \ the recipient information is automatically merged into the appropriate fields\
        \ in the email subject line.\n\nBoth the sender and the recipients will see\
        \ the information in the email subject line for any emails associated with\
        \ the template. This provides an easy way for senders to organize their envelope\
        \ emails without having to open an envelope to find out who the recipient\
        \ is.\n\n**Warning: If merging the recipient information into the subject\
        \ line causes the subject line to exceed 100 characters, then any characters\
        \ over the 100 character limit are not included in the subject line. For cases\
        \ where you expect the recipient name or email to be long, you should consider\
        \ placing the merge field at the start of the email subject.**\n\nTo insert\
        \ a recipient's name into the subject line, add the following text in the\
        \ `emailSubject` property when you create the template:\n\n`[[<roleName>_UserName]]`\n\
        \nExample:\n\n`\"emailSubject\":\"[[Signer 1_UserName]], Please sign this\
        \ NDA\",`\n\nTo add a recipient's email address in the subject line, add the\
        \ following text in the `emailSubject` property when you create the template\
        \ or send an envelope from the template:\n\n`[[<roleName>_Email]]`\n\nExample:\n\
        \n`\"emailSubject\":\"[[Signer 1_Email]], Please sign this NDA\",`\n\nIn these\
        \ examples, the role name specified in the template  is “Signer 1”.  When\
        \ the envelope is sent, the placeholder will be dynamically substituted with\
        \ the recipient's name or email.\n\n## Creating multiple templates\n\nTo create\
        \ multiple templates, you provide a zip file of JSON files. You can also use\
        \ the Templates::ListTemplates method with the `is_download` query parameter\
        \ to download a zip file containing your existing templates and use that as\
        \ a guide. The API supports both .zip and .gzip file formats as input.\n\n\
        You also need to set the following headers:\n\n- `Content-Length`\n- `Content-Type`\n\
        - `Content-Disposition`\n\nExample: \n\n`Content-Length: 71068`\n\n`Content-Type:\
        \ application/zip`\n\n`Content-Disposition: file; filename=\"DocuSignTemplates_Nov_25_2019_20_40_21.zip\"\
        ; fileExtension=.zip`"
      operationId: Templates_PostTemplates
      parameters:
        - name: accountId
          in: path
          description: (Required) The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeTemplate'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeTemplate'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createTemplate
      x-ds-method: create
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeTemplate
  /v2.1/accounts/{accountId}/templates/{templateId}:
    get:
      tags:
        - Templates
      summary: Gets a specific template associated with a specified account.
      description: Retrieves the definition of the specified template.
      operationId: Templates_GetTemplate
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: |-
            A comma-separated list
            of additional template attributes
            to include in the response.
            Valid values are:

            - `powerforms`: Includes information about PowerForms.
            - `tabs`: Includes information about tabs.
            - `documents`: Includes information about documents.
            - `favorite_template_status`: : Includes the template `favoritedByMe` property in the response. **Note**: You can mark a template as a favorite only in eSignature v2.1.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeTemplate'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: get
      x-ds-method: get
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - Templates
      summary: Updates an existing template.
      description: Updates an existing template.
      operationId: Templates_PutTemplate
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeTemplate'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeTemplate'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateUpdateSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: update
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeTemplate
  /v2.1/accounts/{accountId}/templates/{templateId}/{templatePart}:
    put:
      tags:
        - Templates
      summary: Shares a template with a group.
      description: |-
        Shares a template with the specified members group.

        **Note**: For a newer version of this functionality, see [Accounts::Update Shared Access](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/updateSharedAccess).
      operationId: Templates_PutTemplatePart
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: templatePart
          in: path
          description: Currently, the only defined part is **groups**.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/groupInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/groupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateGroupShare
      x-ds-method: updateGroupShare
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: groupInformation
    delete:
      tags:
        - Templates
      summary: Removes a member group's sharing permissions for a template.
      description: Removes a member group's sharing permissions for a specified template.
      operationId: Templates_DeleteTemplatePart
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: templatePart
          in: path
          description: Currently, the only defined part is **groups**.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/groupInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/groupInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteGroupShare
      x-ds-method: deleteGroupShare
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: groupInformation
  /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields:
    get:
      tags:
        - TemplateCustomFields
      summary: Gets the custom document fields from a template.
      description: Retrieves the custom document field information from an existing
        template.
      operationId: CustomFields_GetTemplateCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listCustomFields
      x-ds-method: list
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateCustomFields
      summary: Updates envelope custom fields in a template.
      description: |-
        Updates the custom fields in a template.

        Each custom field used in a template must have a unique name.
      operationId: CustomFields_PutTemplateCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateCustomFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateCustomFields'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateCustomFields
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateCustomFields
    post:
      tags:
        - TemplateCustomFields
      summary: Creates custom document fields in an existing template document.
      description: Creates custom document fields in an existing template document.
      operationId: CustomFields_PostTemplateCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateCustomFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateCustomFields'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createCustomFields
      x-ds-method: create
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateCustomFields
    delete:
      tags:
        - TemplateCustomFields
      summary: Deletes envelope custom fields in a template.
      description: Deletes envelope custom fields in a template.
      operationId: CustomFields_DeleteTemplateCustomFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateCustomFields'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateCustomFields'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customFields'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteCustomFields
      x-ds-method: delete
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateCustomFields
  /v2.1/accounts/{accountId}/templates/{templateId}/documents:
    get:
      tags:
        - TemplateDocuments
      summary: Gets a list of documents associated with a template.
      description: Retrieves a list of documents associated with the specified template.
      operationId: Documents_GetTemplateDocuments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: include_tabs
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateDocumentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listDocuments
      x-ds-method: list
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateDocuments
      summary: Adds documents to a template document.
      description: Adds one or more documents to an existing template document.
      operationId: Documents_PutTemplateDocuments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateDocumentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocuments
      x-ds-method: updateList
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeDefinition
    delete:
      tags:
        - TemplateDocuments
      summary: Deletes documents from a template.
      description: |-
        This method deletes one or more documents from an existing template.

        To delete a document, use only the relevant parts of the [`envelopeDefinition`](#envelopeDefinition).
        For example, this request body specifies that you want to delete the document whose `documentId` is "1".


        ```text
        {
          "documents": [
            {
              "documentId": "1"
            }
          ]
        }
        ```
      operationId: Documents_DeleteTemplateDocuments
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateDocumentsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocuments
      x-ds-method: delete
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeDefinition
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}:
    get:
      tags:
        - TemplateDocuments
      summary: Gets PDF documents from a template.
      description: |-
        This method retrieves one or more PDF documents from the template that you specify.

        You can specify the ID of the document to retrieve, or pass in the value `combined` to retrieve all documents in the template as a single PDF file.
      operationId: Documents_GetTemplateDocument
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: encrypt
          in: query
          description: When set to **true**, the PDF bytes returned in the response
            are encrypted for all the key managers configured on your DocuSign account.
            You can decrypt the documents by using the Key Manager DecryptDocument API
            method. For more information about Key Manager, see the DocuSign Security
            Appliance Installation Guide that your organization received from DocuSign.
          schema:
            type: string
        - name: show_changes
          in: query
          description: When set to **true**, any document fields that a recipient changed
            are highlighted in yellow in the returned PDF document, and optional signatures
            or initials are outlined in red.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            application/pdf:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocument
      x-ds-method: get
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateDocuments
      summary: Updates a template document.
      description: This methods updates an existing template document.
      operationId: Documents_PutTemplateDocument
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: is_envelope_definition
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/envelopeDefinition'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/envelopeDocument'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocument
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: envelopeDefinition
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields:
    get:
      tags:
        - TemplateDocumentFields
      summary: Gets the custom document fields for a an existing template document.
      description: This method retrieves the custom document fields for an existing
        template document.
      operationId: DocumentFields_GetTemplateDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentFieldsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listDocumentFields
      x-ds-method: list
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateDocumentFields
      summary: Updates existing custom document fields in an existing template document.
      description: Updates existing custom document fields in an existing template
        document.
      operationId: DocumentFields_PutTemplateDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentFieldsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentFieldsInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentFieldsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateDocumentFields
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentFieldsInformation
    post:
      tags:
        - TemplateDocumentFields
      summary: Creates custom document fields in an existing template document.
      description: Creates custom document fields in an existing template document.
      operationId: DocumentFields_PostTemplateDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentFieldsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentFieldsInformation'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentFieldsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createDocumentFields
      x-ds-method: create
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentFieldsInformation
    delete:
      tags:
        - TemplateDocumentFields
      summary: Deletes custom document fields from an existing template document.
      description: Deletes custom document fields from an existing template document.
      operationId: DocumentFields_DeleteTemplateDocumentFields
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentFieldsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentFieldsInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentFieldsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocumentFields
      x-ds-method: delete
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentFieldsInformation
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/html_definitions:
    get:
      tags:
        - TemplateDocumentHtmlDefinitions
      summary: Gets the Original HTML Definition used to generate the Responsive HTML
        for a given document in a template.
      operationId: ResponsiveHtml_GetTemplateDocumentHtmlDefinitions
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitionOriginals'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getTemplateDocumentHtmlDefinitions
      x-ds-method: list
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages:
    get:
      tags:
        - Templates
      summary: Returns document page image(s) based on input.
      description: Returns images of the pages in a template document for display
        based on the parameters that you specify.
      operationId: Pages_GetTemplatePageImages
      parameters:
        - name: accountId
          in: path
          description: (Required) The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: (Required) The ID of the document.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: (Required) The ID of the template.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: The maximum number of results to return.
          schema:
            type: string
        - name: dpi
          in: query
          description: The number of dots per inch (DPI) for the resulting images. Valid
            values are 1-310 DPI. The default value is 94.
          schema:
            type: string
        - name: max_height
          in: query
          description: Sets the maximum height of the returned images in pixels.
          schema:
            type: string
        - name: max_width
          in: query
          description: Sets the maximum width of the returned images in pixels.
          schema:
            type: string
        - name: nocache
          in: query
          description: 'If **true**, using cache is disabled and image information is
          retrieved from a database. **True** is the default value. '
          schema:
            type: string
        - name: show_changes
          in: query
          description: If **true**, changes display in the user interface.
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values. The value **thumbnail** may be used to return the page
            image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/pageImages'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocumentPageImages
      x-ds-method: getPageImages
      x-ds-service: Templates
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}:
    delete:
      tags:
        - Templates
      summary: Deletes a page from a document in an template.
      description: Deletes a page from a document in a template based on the page
        number.
      operationId: Pages_DeleteTemplatePage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pageRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/pageRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocumentPage
      x-ds-method: deleteDocumentPage
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: pageRequest
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image:
    get:
      tags:
        - Templates
      summary: Gets a page image from a template for display.
      description: Retrieves a page image for display from the specified template.
      operationId: Pages_GetTemplatePageImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: dpi
          in: query
          description: The number of dots per inch (DPI) for the resulting images. Valid
            values are 1-310 DPI. The default value is 94.
          schema:
            type: string
        - name: max_height
          in: query
          description: Sets the maximum height of the returned images in pixels.
          schema:
            type: string
        - name: max_width
          in: query
          description: Sets the maximum width of the returned images in pixels.
          schema:
            type: string
        - name: show_changes
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/png:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocumentPageImage
      x-ds-method: getDocumentPageImage
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - Templates
      summary: Rotates page image from a template for display.
      description: Rotates page image from a template for display. The page image
        can be rotated to the left or right.
      operationId: Pages_PutTemplatePageImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pageRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/pageRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: rotateDocumentPage
      x-ds-method: rotateDocumentPage
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: pageRequest
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/tabs:
    get:
      tags:
        - TemplateDocumentTabs
      summary: Returns tabs on the specified page.
      operationId: Tabs_GetTemplatePageTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: pageNumber
          in: path
          description: The page number being accessed.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TemplateDocumentTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPageTabs
      x-ds-method: getByPage
      x-ds-service: Templates
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/responsive_html_preview:
    post:
      tags:
        - TemplateDocumentResponsiveHtmlPreview
      summary: Creates a preview of the responsive version of a template document.
      description: |-
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/),
        HTML version of a specific template document. This
        method enables you to preview a PDF document
        conversion to responsive HTML across device types
        prior to sending.

        The request body is a `documentHtmlDefinition`
        object, which holds the responsive signing
        parameters that define how to generate the HTML
        version of the signing document.
      operationId: ResponsiveHtml_PostTemplateDocumentResponsiveHtmlPreview
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitions'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createTemplateDocumentResponsiveHtmlPreview
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentHtmlDefinition
  /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs:
    get:
      tags:
        - TemplateDocumentTabs
      summary: Returns tabs on the document.
      operationId: Tabs_GetTemplateDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: page_numbers
          in: query
          description: |-
            Filters for tabs that occur on the pages that you specify. Enter as a comma-separated list of page Guids.

            Example: `page_numbers=2,6`
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TemplateDocumentTabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getDocumentTabs
      x-ds-method: get
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateDocumentTabs
      summary: Updates the tabs for a template.
      operationId: Tabs_PutTemplateDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateTabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: putDocumentTabs
      x-ds-method: update
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateTabs
    post:
      tags:
        - TemplateDocumentTabs
      summary: Create Template Document Tabs
      description: This method creates Template Document Tabs.
      operationId: Tabs_PostTemplateDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateTabs'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: postDocumentTabs
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateTabs
    delete:
      tags:
        - TemplateDocumentTabs
      summary: Deletes tabs from an envelope document.
      operationId: Tabs_DeleteTemplateDocumentTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: The `documentId` is set by the API client. It is an integer that
            falls between `1` and 2,147,483,647. The value is encoded as a string without
            commas. The values `1`, `2`, `3`, and so on are typically used to identify
            the first few documents in an envelope. Tab definitions include a `documentId`
            property that specifies the document on which to place the tab.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateTabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteDocumentTabs
      x-ds-method: delete
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateTabs
  /v2.1/accounts/{accountId}/templates/{templateId}/html_definitions:
    get:
      tags:
        - TemplateHtmlDefinitions
      summary: Gets the Original HTML Definition used to generate the Responsive HTML
        for the template.
      operationId: ResponsiveHtml_GetTemplateHtmlDefinitions
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitionOriginals'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getTemplateHtmlDefinitions
      x-ds-method: list
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/templates/{templateId}/lock:
    get:
      tags:
        - TemplateLocks
      summary: Gets template lock information.
      description: |
        Retrieves general information about a template lock.

        The user requesting the information must be the same user
        who locked the template.

        You can use this method to recover the lock information,
        including the `lockToken`,
        for a locked template.
        The `X-DocuSign-Edit` header is included in the response.

        See
        [TemplateLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templatelocks/create/)
        for a description of the `X-DocuSign-Edit` header.
      operationId: Lock_GetTemplateLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/lockInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getLock
      x-ds-method: get
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateLocks
      summary: Updates a template lock.
      description: |+
        Updates the lock information for a locked template.

        You must include the `X-DocuSign-Edit` header
        as described in
        [TemplateLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templatelocks/create/).


        Use this method to change the duration
        of the lock (`lockDurationInSeconds`)
        or the `lockedByApp` string.

        The request body is a full `lockRequest` object,
        but you only need to specify the
        properties that you are updating. For example:

        ```
        {
          "lockDurationInSeconds": "3600",
          "lockedByApp": "My Application"
        }
        ```

      operationId: Lock_PutTemplateLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/lockRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/lockInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateLock
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: lockRequest
    post:
      tags:
        - TemplateLocks
      summary: Locks a template.
      description: |+
        This method locks the specified template and sets the time until
        the lock expires to prevent other users or recipients from
        changing the template.

        **Note**: To use this method, the envelope locking
        capability must be enabled for the user; that is, the user setting
        `canLockEnvelopes` must be set to **true**.

        The response to this request includes a `lockToken` parameter
        that you must use in the `X-DocuSign-Edit` header for
        every PUT method (typically a method that updates a template)
        while the template is locked.


        If you do not provide the `lockToken` when accessing
        a locked template, you will get the following
        error:

        ```
        {
           "errorCode": "EDIT_LOCK_NOT_LOCK_OWNER",
           "message": "The user is not the owner of the lock. The template is locked by another user or in another application"
        }
        ```


        ### The X-DocuSign-Edit header

        The `X-DocuSign-Edit` header looks like this
        and can be specified in either JSON or XML.

        **JSON**
        ```
        {
          "LockToken": "token-from-response",
          "LockDurationInSeconds": "600"
        }
        ```

        **XML**
        ```
        <DocuSignEdit>
          <LockToken>token-from-response</LockToken>
          <LockDurationInSeconds>600</LockDurationInSeconds>
        </DocuSignEdit>
        ```

        In the actual HTTP header, you would remove the linebreaks:

        ```
        X-DocuSign-Edit: {"LockToken": "token-from-response", "LockDurationInSeconds": "600" }
            or
        X-DocuSign-Edit:<DocuSignEdit><LockToken>token-from-response</LockToken><LockDurationInSeconds>600</LockDurationInSeconds></DocuSignEdit>
        ```


      operationId: Lock_PostTemplateLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/lockRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/lockInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createLock
      x-ds-method: create
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: lockRequest
    delete:
      tags:
        - TemplateLocks
      summary: Deletes a template lock.
      description: |
        Deletes the lock from the specified template.
        The user deleting the lock must be the same user
        who locked the template.

        You must include the `X-DocuSign-Edit` header
        as described in
        [TemplateLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templatelocks/create/).

        This method takes an optional query paramter
        that lets you specify whether
        changes made while the template was locked
        are kept or discarded.


        | Query Parameter | Description                                                                                                                                                                         |
        | :-------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | `save_changes`  | (Optional) When set to **true** (the default), any changes made while the lock was active are saved. When set to **false**, any changes made while the template was locked are discarded. |
      operationId: Lock_DeleteTemplateLock
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/lockRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/lockInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteLock
      x-ds-method: delete
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: lockRequest
  /v2.1/accounts/{accountId}/templates/{templateId}/notification:
    get:
      tags:
        - Templates
      summary: Gets template notification information.
      description: Retrieves the envelope notification, reminders and expirations,
        information for an existing template.
      operationId: Notification_GetTemplatesTemplateIdNotification
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notification'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getNotificationSettings
      x-ds-method: getNotificationSettings
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - Templates
      summary: Updates the notification  structure for an existing template.
      description: Updates the notification structure for an existing template. Use
        this endpoint to set reminder and expiration notifications.
      operationId: Notification_PutTemplatesTemplateIdNotification
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateNotificationRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateNotificationRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notification'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateNotificationSettings
      x-ds-method: updateNotificationSettings
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateNotificationRequest
  /v2.1/accounts/{accountId}/templates/{templateId}/recipients:
    get:
      tags:
        - TemplateRecipients
      summary: Gets recipient information from a template.
      description: Retrieves the information for all recipients in the specified template.
      operationId: Recipients_GetTemplateRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: include_anchor_tab_locations
          in: query
          description: ' When set to **true** and `include_tabs` is set to **true**,
          all tabs with anchor tab properties are included in the response. '
          schema:
            type: string
        - name: include_extended
          in: query
          description: ' When set to **true**, the extended properties are included
          in the response. '
          schema:
            type: string
        - name: include_tabs
          in: query
          description: When set to **true**, the tab information associated with the
            recipient is included in the response.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/recipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listRecipients
      x-ds-method: list
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateRecipients
      summary: Updates recipients in a template.
      description: "Updates recipients in a template. \n\nYou can edit the following\
        \ properties: `email`, `userName`, `routingOrder`, `faxNumber`, `deliveryMethod`,\
        \ `accessCode`, and `requireIdLookup`."
      operationId: Recipients_PutTemplateRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: resend_envelope
          in: query
          description: |-
            When set to **true**, resends the envelope to the recipients that you specify in the request body. You use this parameter to resend the envelope to a recipient who deleted the original email notification.

            **Note**: Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateRecipients'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateRecipients'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/recipientsUpdateSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRecipients
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateRecipients
    post:
      tags:
        - TemplateRecipients
      summary: Adds tabs for a recipient.
      description: Adds one or more recipients to a template.
      operationId: Recipients_PostTemplateRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: resend_envelope
          in: query
          description: |-
            When set to **true**, resends the envelope to the recipients that you specify in the request body. You use this parameter to resend the envelope to a recipient who deleted the original email notification.

            **Note**: Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateRecipients'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateRecipients'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/recipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createRecipients
      x-ds-method: create
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateRecipients
    delete:
      tags:
        - TemplateRecipients
      summary: Deletes recipients from a template.
      description: Deletes one or more recipients from a template. Recipients to be
        deleted are listed in the request, with the `recipientId` being used as the
        key for deleting recipients.
      operationId: Recipients_DeleteTemplateRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateRecipients'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateRecipients'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/recipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteRecipients
      x-ds-method: deleteList
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateRecipients
  /v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}:
    delete:
      tags:
        - TemplateRecipients
      summary: Deletes the specified recipient file from a template.
      description: Deletes the specified recipient file from the specified template.
      operationId: Recipients_DeleteTemplateRecipient
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateRecipients'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateRecipients'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/recipients'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteRecipient
      x-ds-method: delete
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateRecipients
  /v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/bulk_recipients:
    get:
      tags:
        - TemplateBulkRecipients
      summary: Gets the bulk recipient file from a template.
      description: Retrieves the bulk recipient file information from a template that
        has a bulk recipient.
      operationId: Recipients_GetTemplateBulkRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: include_tabs
          in: query
          description: When set to **true**, the tab information associated with the
            recipient is included in the response. If you do not specify this parameter,
            the effect is the default behavior (**false**).
          schema:
            type: string
        - name: start_position
          in: query
          description: The starting position of the results set.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkRecipientsResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listBulkRecipients
      x-ds-method: list
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateBulkRecipients
      summary: Adds or replaces the bulk recipients list in a template.
      description: |-
        Updates the bulk recipients in a template using a file upload. The Content-Type supported for uploading a bulk recipient file is CSV (text/csv).

        The REST API does not support modifying individual rows or values in the bulk recipients file. It only allows the entire file to be added or replaced with a new file.
      operationId: Recipients_PutTemplateBulkRecipients
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkRecipientsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/bulkRecipientsRequest'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkRecipientsSummaryResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateBulkRecipients
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: bulkRecipientsRequest
    delete:
      tags:
        - TemplateBulkRecipients
      summary: Deletes the bulk recipient list on a template.
      description: Deletes the bulk recipient list on a template.
      operationId: Recipients_DeleteTemplateBulkRecipientsFile
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/bulkRecipientsUpdateResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteBulkRecipients
      x-ds-method: delete
      x-ds-service: Templates
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/document_visibility:
    get:
      tags:
        - TemplateDocumentVisibility
      summary: Returns document visibility for a template recipient
      description: This method returns information about document visibility for a
        template recipient.
      operationId: Recipients_GetTemplateRecipientDocumentVisibility
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentVisibilityList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getTemplateRecipientDocumentVisibility
      x-ds-method: get
      x-ds-service: Envelopes
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateDocumentVisibility
      summary: Updates document visibility for a template recipient
      description: |-
        This method updates the document visibility for a template recipient.

        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutTemplateRecipientDocumentVisibility
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateDocumentVisibilityList'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateDocumentVisibilityList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateDocumentVisibilityList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateTemplateRecipientDocumentVisibility
      x-ds-method: update
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateDocumentVisibilityList
  /v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs:
    get:
      tags:
        - TemplateRecipientTabs
      summary: Gets the tabs information for a signer or sign-in-person recipient
        in a template.
      description: Gets the tabs information for a signer or sign-in-person recipient
        in a template.
      operationId: Recipients_GetTemplateRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
        - name: include_anchor_tab_locations
          in: query
          description: When set to **true**, all tabs with anchor tab properties are
            included in the response. The default value is **false**.
          schema:
            type: string
        - name: include_metadata
          in: query
          description: When set to **true**, the response includes metadata indicating
            which properties are editable.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listTabs
      x-ds-method: list
      x-ds-service: Templates
      x-ds-in-sdk: true
    put:
      tags:
        - TemplateRecipientTabs
      summary: Updates the tabs for a recipient.
      description: Updates one or more tabs for a recipient in a template.
      operationId: Recipients_PutTemplateRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateTabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateTabs
      x-ds-method: update
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateTabs
    post:
      tags:
        - TemplateRecipientTabs
      summary: Adds tabs for a recipient.
      description: Adds one or more tabs for a recipient.
      operationId: Recipients_PostTemplateRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateTabs'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createTabs
      x-ds-method: create
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateTabs
    delete:
      tags:
        - TemplateRecipientTabs
      summary: Deletes the tabs associated with a recipient in a template.
      description: Deletes one or more tabs associated with a recipient in a template.
      operationId: Recipients_DeleteTemplateRecipientTabs
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: recipientId
          in: path
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId` of
            `1`.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateTabs'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateTabs'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tabs'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteTabs
      x-ds-method: delete
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateTabs
  /v2.1/accounts/{accountId}/templates/{templateId}/recipients/document_visibility:
    put:
      tags:
        - TemplateDocumentVisibility
      summary: Updates document visibility for template recipients
      description: |-
        This method updates document visibility for one or more template recipients based on the `recipientId` and `visible` values that you include in the request body.


        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutTemplateRecipientsDocumentVisibility
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templateDocumentVisibilityList'
          application/xml:
            schema:
              $ref: '#/components/schemas/templateDocumentVisibilityList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/templateDocumentVisibilityList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateTemplateRecipientsDocumentVisibility
      x-ds-method: updateList
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-codegen-request-body-name: templateDocumentVisibilityList
  /v2.1/accounts/{accountId}/templates/{templateId}/responsive_html_preview:
    post:
      tags:
        - TemplateResponsiveHtmlPreview
      summary: Creates a preview of the responsive versions of all of the documents
        associated with a template.
      description: |-
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/),
        HTML versions of all of the documents associated
        with a template. This method enables you to
        preview the PDF document conversions to responsive
        HTML across device types prior to sending.

        The request body is a `documentHtmlDefinition`
        object, which holds the responsive signing
        parameters that define how to generate the HTML
        version of the documents.
      operationId: ResponsiveHtml_PostTemplateResponsiveHtmlPreview
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/documentHtmlDefinition'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/documentHtmlDefinitions'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createTemplateResponsiveHtmlPreview
      x-ds-method: create
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: documentHtmlDefinition
  /v2.1/accounts/{accountId}/templates/{templateId}/views/edit:
    post:
      tags:
        - TemplateViews
      summary: Gets a URL for a template edit view.
      description: This method returns a URL for starting an edit view of a template
        that uses the DocuSign Template UI.
      operationId: Views_PostTemplateEditView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/returnUrlRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/returnUrlRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/viewUrl'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createEditView
      x-ds-method: createEdit
      x-ds-service: Templates
      x-ds-in-sdk: true
      x-codegen-request-body-name: returnUrlRequest
  /v2.1/accounts/{accountId}/templates/{templateId}/views/recipient_preview:
    post:
      tags:
        - TemplateRecipients
      summary: Creates a template recipient preview.
      description: |-
        This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients' experience.

        For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
      operationId: Views_PostTemplateRecipientPreview
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipientPreviewRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/recipientPreviewRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/viewUrl'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createTemplateRecipientPreview
      x-ds-method: createTemplateRecipientPreview
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: recipientPreviewRequest
  /v2.1/accounts/{accountId}/templates/{templateId}/workflow:
    get:
      tags:
        - EnvelopeWorkflowDefinition
      summary: Gets template's workflow definition.
      description: Returns template's workflow definition if the template specified
        by `templateId` has one.
      operationId: EnvelopeWorkflowDefinition_GetTemplateWorkflowDefinition
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workflow'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getTemplateWorkflowDefinition
      x-ds-method: getTemplateWorkflowDefinition
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - EnvelopeWorkflowDefinition
      summary: Update a template's workflow definiton.
      description: Updates the specified template's workflow definition if  it has
        one.
      operationId: EnvelopeWorkflowDefinition_PutTemplateWorkflowDefinition
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workflow'
          application/xml:
            schema:
              $ref: '#/components/schemas/workflow'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workflow'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateTemplateWorkflowDefinition
      x-ds-method: updateTemplateWorkflowDefinition
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: workflow
    delete:
      tags:
        - EnvelopeWorkflowDefinition
      summary: Deletes a template's workflow definition.
      description: Deletes the specified template's workflow definition if it has
        one.
      operationId: EnvelopeWorkflowDefinition_DeleteTemplateWorkflowDefinition
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: templateId
          in: path
          description: The id of the template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteTemplateWorkflowDefinition
      x-ds-method: deleteTemplateWorkflowDefinition
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/unsupported_file_types:
    get:
      tags:
        - Accounts
      summary: Gets a list of unsupported file types.
      description: Retrieves a list of file types (mime-types and file-extensions)
        that are not supported for upload through the DocuSign system.
      operationId: UnsupportedFileTypes_GetUnsupportedFileTypes
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/fileTypeList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listUnsupportedFileTypes
      x-ds-method: listUnsupportedFileTypes
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/users:
    get:
      tags:
        - Users
      summary: Retrieves the list of users for the specified account.
      description: |-
        Retrieves the list of users for the specified account.

        The response returns the list of users for the account, with information about the result set. If the `additional_info` query is added to the endpoint and set to **true**, full user information is returned for each user.
      operationId: Users_GetUsers
      parameters:
        - name: accountId
          in: path
          description: (Required) The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: additional_info
          in: query
          description: When set to **true**, the custom settings information is returned
            for each user in the account. If this parameter is omitted, the default
            behavior is **false**.
          schema:
            type: string
        - name: count
          in: query
          description: 'The number of records to return. This number must be greater
          than `0` and less than or equal to `100`. '
          schema:
            type: string
        - name: email
          in: query
          description: "Filters results based on the email address associated with the\
          \ user that you want to return.\n\n**Note**: You can use either this parameter\
          \ or the `email_substring` parameter, but not both. For older accounts,\
          \ this parameter might return multiple users who are associated with a single\
          \ email address. "
          schema:
            type: string
        - name: email_substring
          in: query
          description: "Filters results based on a fragment of an email address. For\
          \ example, you could enter `gmail` to return all users who have Gmail addresses.\n\
          \n**Note**: You do not use a wildcard character with this parameter. You\
          \ can use either this parameter or the `email` parameter, but not both. "
          schema:
            type: string
        - name: group_id
          in: query
          description: Filters results based on one or more group IDs.
          schema:
            type: string
        - name: include_usersettings_for_csv
          in: query
          description: When set to **true**, the response includes the `userSettings`
            object data in CSV format.
          schema:
            type: string
        - name: login_status
          in: query
          description: When set to **true**, the response includes the login status
            of each user.
          schema:
            type: string
        - name: not_group_id
          in: query
          description: Return user records excluding the specified group IDs.
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values.
          schema:
            type: string
        - name: status
          in: query
          description: |
            Filters results by user account status. Possible values are:

            * `ActivationRequired`
            * `ActivationSent`
            * `Active`
            * `Closed`
            * `Disabled`
          schema:
            type: string
        - name: user_name_substring
          in: query
          description: |-
            Filters results based on a full or partial user name.

            **Note**: When you enter a partial user name, you do not use a wildcard character.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userInformationList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: list
      x-ds-method: list
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - Users
      summary: Changes one or more users in the specified account.
      description: This method updates the information about one or more account users.
      operationId: Users_PutUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInformationList'
          application/xml:
            schema:
              $ref: '#/components/schemas/userInformationList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userInformationList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateUsers
      x-ds-method: updateList
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userInformationList
    post:
      tags:
        - Users
      summary: Adds new users to the specified account.
      description: |
        Adds new users to an account.

        The body of this request is an array of `newUsers` objects. For each new user, you must provide at least the `userName` and `email` properties.

        The `userSettings` property specifies the actions users can perform. In the example below, Tal Mason will be able to send envelopes, and the activation email will be in French because the `locale` is set to `fr`.


        ```
        POST /restapi/v2.1/accounts/{accountId}/users
        Content-Type: application/json
        ```
        ```
        {
          "newUsers": [
            {
              "userName": "Claire Horace",
              "email": "claire@example.com"
            },
            {
              "userName": "Tal Mason",
              "email": "talmason@example.com",
              "company": "TeleSel",
              "userSettings": {
                "locale": "fr",
                "canSendEnvelope": true
              }
            }
          ]
        }
        ```

        A successful response is a `newUsers` array with information about the newly created users. If there was a problem in creating a user, that user entry will contain an `errorDetails` property that describes what went wrong.

        ```json
        {
          "newUsers": [
            {
              "userId": "18f3be12-xxxx-xxxx-xxxx-883d8f9b8ade",
              "uri": "/users/18f3be12-xxxx-xxxx-xxxx-883d8f9b8ade",
              "email": "claire@example.com",
              "userName": "Claire Horace",
              "createdDateTime": "0001-01-01T08:00:00.0000000Z",
              "errorDetails": {
                "errorCode": "USER_ALREADY_EXISTS_IN_ACCOUNT",
                "message": "Username and email combination already exists for this account."
              }
            },
            {
              "userId": "be9899a3-xxxx-xxxx-xxxx-2c8dd7156e33",
              "uri": "/users/be9899a3-xxxx-xxxx-xxxx-2c8dd7156e33",
              "email": "talmason@example.com",
              "userName": "Tal Mason",
              "userStatus": "ActivationSent",
              "createdDateTime": "2020-05-26T23:25:30.7330000Z"
            }
          ]
        }
        ```
      operationId: Users_PostUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUsersDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/newUsersDefinition'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/newUsersSummary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: create
      x-ds-method: create
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: newUsersDefinition
    delete:
      tags:
        - Users
      summary: Removes users account privileges.
      description: |-
        Closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.

        The response specifies whether the API execution succeeded (200 - OK) or failed (400 - Error). The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an `errorDetails` property with `errorCode` and `message` properties.
      operationId: Users_DeleteUsers
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: delete
          in: query
          description: 'ID of the user to delete. This parameter takes a comma-separated
          list of values in the format: `Groups,PermissionSet,SigningGroupsEmail`.'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfoList'
          application/xml:
            schema:
              $ref: '#/components/schemas/userInfoList'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/usersResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: delete
      x-ds-method: delete
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userInfoList
  /v2.1/accounts/{accountId}/users/{userId}:
    get:
      tags:
        - Users
      summary: Gets the user information for a specified user.
      description: "Retrieves the user information for the specified user. \n\nTo\
        \ return additional user information that details the last login date, login\
        \ status, and the user's password expiration date, set the optional `additional_info`\
        \ query string parameter to **true**."
      operationId: User_GetUser
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: additional_info
          in: query
          description: Setting this parameter has no effect in this operation.
          schema:
            type: string
        - name: email
          in: query
          description: Setting this parameter has no effect in this operation.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getInformation
      x-ds-method: get
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - Users
      summary: Updates user information for the specified user.
      description: To update user information for a specific user, submit a [Users](#Users)
        object with updated field values in the request body of this operation.
      operationId: User_PutUser
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/userInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateUser
      x-ds-method: update
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userInformation
  /v2.1/accounts/{accountId}/users/{userId}/cloud_storage:
    get:
      tags:
        - CloudStorageProviders
      summary: Get the Cloud Storage Provider configuration for the specified user.
      description: |
        Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
      operationId: CloudStorage_GetCloudStorageProviders
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: redirectUrl
          in: query
          description: " The URL the user is redirected to after the cloud storage provider\
          \ authenticates the user. Using this will append the redirectUrl to the\
          \ authenticationUrl.\n\nThe redirectUrl is restricted to URLs in the docusign.com\
          \ or docusign.net domains.\n "
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/cloudStorageProviders'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listProviders
      x-ds-method: list
      x-ds-service: CloudStorage
      x-ds-in-sdk: true
    post:
      tags:
        - CloudStorageProviders
      summary: Configures the redirect URL information  for one or more cloud storage
        providers for the specified user.
      description: Configures the redirect URL information  for one or more cloud
        storage providers for the specified user. The redirect URL is added to the
        authentication URL to complete the return route.
      operationId: CloudStorage_PostCloudStorage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cloudStorageProviders'
          application/xml:
            schema:
              $ref: '#/components/schemas/cloudStorageProviders'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/cloudStorageProviders'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createProvider
      x-ds-method: create
      x-ds-service: CloudStorage
      x-ds-in-sdk: true
      x-codegen-request-body-name: cloudStorageProviders
    delete:
      tags:
        - CloudStorageProviders
      summary: Deletes the user authentication information for one or more cloud storage
        providers.
      description: Deletes the user authentication information for one or more cloud
        storage providers. The next time the user tries to access the cloud storage
        provider, they must pass normal authentication.
      operationId: CloudStorage_DeleteCloudStorageProviders
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cloudStorageProviders'
          application/xml:
            schema:
              $ref: '#/components/schemas/cloudStorageProviders'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/cloudStorageProviders'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteProviders
      x-ds-method: deleteList
      x-ds-service: CloudStorage
      x-ds-in-sdk: true
      x-codegen-request-body-name: cloudStorageProviders
  /v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}:
    get:
      tags:
        - CloudStorageProviders
      summary: Gets the specified Cloud Storage Provider configuration for the User.
      description: Retrieves the list of cloud storage providers enabled for the account
        and the configuration information for the user.
      operationId: CloudStorage_GetCloudStorage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: "The ID of the service to access. \n\nValid values are the service\
          \ name (\"Box\") or the numerical serviceId (\"4136\")."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: redirectUrl
          in: query
          description: " The URL the user is redirected to after the cloud storage provider\
          \ authenticates the user. Using this will append the redirectUrl to the\
          \ authenticationUrl.\n\nThe redirectUrl is restricted to URLs in the docusign.com\
          \ or docusign.net domains.\n "
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/cloudStorageProviders'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getProvider
      x-ds-method: get
      x-ds-service: CloudStorage
      x-ds-in-sdk: true
    delete:
      tags:
        - CloudStorageProviders
      summary: Deletes the user authentication information for the specified cloud
        storage provider.
      description: Deletes the user authentication information for the specified cloud
        storage provider. The next time the user tries to access the cloud storage
        provider, they must pass normal authentication for this cloud storage provider.
      operationId: CloudStorage_DeleteCloudStorage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: "The ID of the service to access. \n\nValid values are the service\
          \ name (\"Box\") or the numerical serviceId (\"4136\")."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/cloudStorageProviders'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteProvider
      x-ds-method: delete
      x-ds-service: CloudStorage
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders:
    get:
      tags:
        - CloudStorage
      summary: Retrieves a list of all the items in a specified folder from the specified
        cloud storage provider.
      description: 'Retrieves a list of all the items in a specified folder from the
        specified cloud storage provider. '
      operationId: CloudStorageFolder_GetCloudStorageFolderAll
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: "The ID of the service to access. \n\nValid values are the service\
          \ name (\"Box\") or the numerical serviceId (\"4136\")."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: cloud_storage_folder_path
          in: query
          description: 'A comma separated list of folder IDs included in the request. '
          schema:
            type: string
        - name: count
          in: query
          description: "An optional value that sets how many items are included in the\
          \ response. \n\nThe default setting for this is 25. "
          schema:
            type: string
        - name: order
          in: query
          description: "(Optional) The order in which to sort the results.\n\nValid\
          \ values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. "
          schema:
            type: string
        - name: order_by
          in: query
          description: "(Optional) The file attribute to use to sort the results.\n\n\
          Valid values are: \n\n* `modified`\n* `name`"
          schema:
            type: string
        - name: search_text
          in: query
          description: Use this parameter to search for specific text.
          schema:
            type: string
        - name: start_position
          in: query
          description: 'Indicates the starting point of the first item included in the
          response set. It uses a 0-based index. The default setting for this is 0.  '
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/externalFolder'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listFolders
      x-ds-method: listFolders
      x-ds-service: CloudStorage
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}:
    get:
      tags:
        - CloudStorage
      summary: Gets a list of items from a cloud storage provider.
      description: "Retrieves a list of the user's items from the specified cloud\
        \ storage provider. \n\nTo limit the scope of the items returned, provide\
        \ a comma-separated list of folder ids in the request."
      operationId: CloudStorageFolder_GetCloudStorageFolder
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: "The ID of the service to access. \n\nValid values are the service\
          \ name (\"Box\") or the numerical serviceId (\"4136\")."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: cloud_storage_folder_path
          in: query
          description: The file path to a cloud storage folder.
          schema:
            type: string
        - name: cloud_storage_folderid_plain
          in: query
          description: A plain-text folder id that you can use as an alternative to
            the existing folder id. This property is mainly used for rooms. Enter multiple
            folder ids as a comma-separated list.
          schema:
            type: string
        - name: count
          in: query
          description: "An optional value that sets how many items are included in the\
          \ response. \n\nThe default setting for this is 25. "
          schema:
            type: string
        - name: order
          in: query
          description: "(Optional) The order in which to sort the results.\n\nValid\
          \ values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. "
          schema:
            type: string
        - name: order_by
          in: query
          description: "(Optional) The file attribute to use to sort the results.\n\n\
          Valid values are: \n\n* `modified`\n* `name`"
          schema:
            type: string
        - name: search_text
          in: query
          description: Use this parameter to search for specific text.
          schema:
            type: string
        - name: start_position
          in: query
          description: The starting index position in the result set from which to start
            returning values. The default setting is `0`.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/externalFolder'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: list
      x-ds-method: list
      x-ds-service: CloudStorage
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/users/{userId}/custom_settings:
    get:
      tags:
        - UserCustomSettings
      summary: Retrieves the custom user settings for a specified user.
      description: |-
        Retrieves a list of custom user settings for a single user.

        Custom settings provide a flexible way to store and retrieve custom user information that can be used in your own system.

        **Note**: Custom user settings are not the same as user account settings.

        ###Getting Grouped Custom User Settings###

        If the custom user settings you want to retrieve are grouped, you must include the following information in the header, after Content-Type, in the request:

        `X-DocuSign-User-Settings-Key:group_name`

        Where the `group_name` is your designated name for the group of customer user settings.

        If the extra header information is not included, only the custom user settings that were added without a group are retrieved.
      operationId: UserCustomSettings_GetCustomSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customSettingsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listCustomSettings
      x-ds-method: list
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - UserCustomSettings
      summary: Adds or updates custom user settings for the specified user.
      description: |-
        Adds or updates custom user settings for the specified user.

        ***Note**: Custom user settings are not the same as user account settings.

        Custom settings provide a flexible way to store and retrieve custom user information that you can use in your own system.

        **Important**: There is a limit on the size for all the custom user settings for a single user. The limit is 4,000 characters, which includes the XML and JSON structure for the settings.

        ### Grouping Custom User Settings ###

        You can group custom user settings when adding them. Grouping allows you to retrieve settings that are in a specific group, instead of retrieving all the user custom settings.

        To group custom user settings, add the following information in the header, after Content-Type:

        `X-DocuSign-User-Settings-Key:group_name`

        Where the `group_name` is your designated name for the group of customer user settings. Grouping is shown in the Example Request Body below.

        When getting or deleting grouped custom user settings, you must include the extra header information.

        Grouping custom user settings is not required and if the extra header information is not included, the custom user settings are added normally and can be retrieved or deleted without including the additional header.
      operationId: UserCustomSettings_PutCustomSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customSettingsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/customSettingsInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customSettingsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateCustomSettings
      x-ds-method: update
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: customSettingsInformation
    delete:
      tags:
        - UserCustomSettings
      summary: Deletes custom user settings for a specified user.
      description: |-
        Deletes the specified custom user settings for a single user.

        ###Deleting Grouped Custom User Settings###

        If the custom user settings you want to delete are grouped, you must include the following information in the header, after Content-Type, in the request:

        `X-DocuSign-User-Settings-Key:group_name`

        Where the `group_name` is your designated name for the group of customer user settings.

        If the extra header information is not included, only the custom user settings that were added without a group are deleted.
      operationId: UserCustomSettings_DeleteCustomSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customSettingsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/customSettingsInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/customSettingsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteCustomSettings
      x-ds-method: delete
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: customSettingsInformation
  /v2.1/accounts/{accountId}/users/{userId}/profile:
    get:
      tags:
        - UserProfiles
      summary: Retrieves the user profile for a specified user.
      description: |-
        Retrieves the user profile information, the privacy settings and personal information (address, phone number, etc.) for the specified user.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.
      operationId: UserProfile_GetProfile
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userProfile'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getProfile
      x-ds-method: get
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - UserProfiles
      summary: Updates the user profile information for the specified user.
      description: |-
        Updates the user's detail information, profile information, privacy settings, and personal information in the user ID card.

        You can also change a user's name by changing the information in the `userDetails` property. When changing a user's name, you can either change the information in the `userName` property OR change the information in `firstName`, `middleName`, `lastName, suffixName`, and `title` properties. Changes to `firstName`, `middleName`, `lastName`, `suffixName`, and `title` properties take precedence over changes to the `userName` property.
      operationId: UserProfile_PutProfile
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userProfile'
          application/xml:
            schema:
              $ref: '#/components/schemas/userProfile'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateProfile
      x-ds-method: update
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userProfile
  /v2.1/accounts/{accountId}/users/{userId}/profile/image:
    get:
      tags:
        - Users
      summary: Retrieves the user profile image for the specified user.
      description: |-
        Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.

        If successful, the response returns a 200 - OK and the user profile image.
      operationId: UserProfileImage_GetUserProfileImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: encoding
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/gif:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/gif:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getProfileImage
      x-ds-method: getProfileImage
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - Users
      summary: Updates the user profile image for a specified user.
      description: |-
        Updates the user profile image by uploading an image to the user profile.

        The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
      operationId: UserProfileImage_PutUserProfileImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateProfileImage
      x-ds-method: updateProfileImage
      x-ds-service: Users
      x-ds-in-sdk: true
    delete:
      tags:
        - Users
      summary: Deletes the user profile image for the specified user.
      description: |-
        Deletes the user profile image from the  specified user's profile.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.
      operationId: UserProfileImage_DeleteUserProfileImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteProfileImage
      x-ds-method: deleteProfileImage
      x-ds-service: Users
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/users/{userId}/settings:
    get:
      tags:
        - Users
      summary: Gets the user account settings for a specified user.
      description: |+
        Retrieves a list of the account settings and email
        notification information for the specified user.

        The response returns the account setting
        name/value information and the email notification
        settings for the specified user. For more
        information, see
        [Users:create](https://developers.docusign.com/docs/esign-rest-api/reference/Users/Users/create/).


      operationId: UserSettings_GetUserSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSettingsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getSettings
      x-ds-method: getSettings
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - Users
      summary: Updates the user account settings for a specified user.
      description: Updates the account settings list and email notification types
        for the specified user.
      operationId: UserSettings_PutUserSettings
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSettingsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/userSettingsInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateSettings
      x-ds-method: updateSettings
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userSettingsInformation
  /v2.1/accounts/{accountId}/users/{userId}/signatures:
    get:
      tags:
        - UserSignatures
      summary: Retrieves a list of signature definitions for a user.
      description: "This method retrieves the signature definitions for the user that\
        \ you specify.\n\nThe `userId` parameter specified in the endpoint must match\
        \ the authenticated user's user ID, and the user must be a member of the account.\n\
        \nThe `signatureId` parameter accepts a signature ID or a signature name.\
        \ DocuSign recommends you use signature ID (`signatureId`), since some names\
        \ contain characters that do not properly encode into a URL. If you use the\
        \ user name, it is likely that the name includes spaces. In that case, URL\
        \ encode the name before using it in the endpoint. \n\nFor example, encode\
        \ \"Bob Smith\" as \"Bob%20Smith\"."
      operationId: UserSignatures_GetUserSignatures
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: stamp_type
          in: query
          description: |-
            The type of stamps to return. Valid values are:

            - `signature`: Returns information about signature images only. This is the default value.
            - `stamp`: Returns information about eHanko and custom stamps only.
            - null
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignaturesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listSignatures
      x-ds-method: list
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - UserSignatures
      summary: Adds/updates a user signature.
      operationId: UserSignatures_PutUserSignature
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSignaturesInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/userSignaturesInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignaturesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateSignatures
      x-ds-method: updateList
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userSignaturesInformation
    post:
      tags:
        - UserSignatures
      summary: Adds user Signature and initials images to a Signature.
      description: "Adds a user signature image and/or user initials image to the\
        \ specified user. \n\nThe userId property specified in the endpoint must match\
        \ the authenticated user's `userId` and the user must be a member of the account.\n\
        \nThe rules and processes associated with this are:\n\n* If `Content-Type`\
        \ is set to `application/json`, then the default behavior for creating a default\
        \ signature image, based on the name and a DocuSign font, is used.\n* If `Content-Type`\
        \ is set to `multipart/form-data`, then the request must contain a first part\
        \ with the user signature information, followed by parts that contain the\
        \ images.\n\nFor each Image part, the Content-Disposition header has a \"\
        filename\" value that is used to map to the `signatureName` and/or `signatureInitials`\
        \ properties in the JSON to the image. \n\nFor example: \n`Content-Disposition:\
        \ file; filename=\"Ron Test20121127083900\"`\n\nIf no matching image (by filename\
        \ value) is found, then the image is not set. One, both, or neither of the\
        \ signature and initials images can be set with this call.\n\nThe Content-Transfer-Encoding:\
        \ base64 header, set in the header for the part containing the image, can\
        \ be set to indicate that the images are formatted as base64 instead of as\
        \ binary.\n\nIf successful, 200-OK is returned, and a JSON structure containing\
        \ the signature information is provided, note that the signatureId can change\
        \ with each API POST, PUT, or DELETE since the changes to the signature structure\
        \ cause the current signature to be closed, and a new signature record to\
        \ be created."
      operationId: UserSignatures_PostUserSignatures
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSignaturesInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/userSignaturesInformation'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignaturesInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createSignatures
      x-ds-method: create
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userSignaturesInformation
  /v2.1/accounts/{accountId}/users/{userId}/signatures/{signatureId}:
    get:
      tags:
        - UserSignatures
      summary: Gets the user signature information for the specified user.
      description: "Retrieves the structure of a single signature with a known signature\
        \ name.\n\nThe userId specified in the endpoint must match the authenticated\
        \ user's user ID and the user must be a member of the account.\n\nThe `signatureId`\
        \ parameter accepts a signature ID or a signature name. DocuSign recommends\
        \ you use signature ID (`signatureId`), since some names contain characters\
        \ that do not properly encode into a URL. If you use the user name, it is\
        \ likely that the name includes spaces. In that case, URL encode the name\
        \ before using it in the endpoint. \n\nFor example encode \"Bob Smith\" as\
        \ \"Bob%20Smith\"."
      operationId: UserSignatures_GetUserSignature
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getSignature
      x-ds-method: get
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - UserSignatures
      summary: Updates the user signature for a specified user.
      description: |-
        Creates, or updates, the signature font and initials for the specified user. When creating a signature, you use this resource to create the signature name and then add the signature and initials images into the signature.

        **Note**: This will also create a default signature for the user when one does not exist.

        The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint.

        For example encode "Bob Smith" as "Bob%20Smith".
      operationId: UserSignatures_PutUserSignatureById
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: close_existing_signature
          in: query
          description: When set to **true**, closes the current signature.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSignatureDefinition'
          application/xml:
            schema:
              $ref: '#/components/schemas/userSignatureDefinition'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateSignature
      x-ds-method: update
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: userSignatureDefinition
    delete:
      tags:
        - UserSignatures
      summary: Removes removes signature information for the specified user.
      description: "Removes the signature information for the user.\n\nThe userId\
        \ parameter specified in the endpoint must match the authenticated user's\
        \ user ID and the user must be a member of the account.\n\nThe `signatureId`\
        \ accepts a signature ID or a signature name. DocuSign recommends you use\
        \ signature ID (`signatureId`), since some names contain characters that do\
        \ not properly encode into a URL. If you use the user name, it is likely that\
        \ the name includes spaces. In that case, URL encode the name before using\
        \ it in the endpoint. \n\nFor example encode \"Bob Smith\" as \"Bob%20Smith\"\
        ."
      operationId: UserSignatures_DeleteUserSignature
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteSignature
      x-ds-method: delete
      x-ds-service: Users
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/users/{userId}/signatures/{signatureId}/{imageType}:
    get:
      tags:
        - UserSignatures
      summary: Retrieves the user initials image or the  user signature image for
        the specified user.
      description: |-
        Retrieves the specified initials image or signature image for the specified user. The image is returned in the same format in which it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.

        The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint.

        For example encode "Bob Smith" as "Bob%20Smith".

        **Note**: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
      operationId: UserSignatures_GetUserSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: imageType
          in: path
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: include_chrome
          in: query
          description: When **true**, the chrome (or frame containing the added line
            and identifier) is included with the signature image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            image/gif:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            image/gif:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getSignatureImage
      x-ds-method: getImage
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
        - UserSignatures
      summary: Updates the user signature image or user initials image for the specified
        user.
      description: "Updates the user signature image or user initials image for the\
        \ specified user. The supported image formats for this file are: gif, png,\
        \ jpeg, and bmp. The file must be less than 200K.\n\nThe userId property specified\
        \ in the endpoint must match the authenticated user's user ID and the user\
        \ must be a member of the account.\n\nThe `signatureId` parameter accepts\
        \ a signature ID or a signature name. DocuSign recommends you use signature\
        \ ID (`signatureId`), since some names contain characters that do not properly\
        \ encode into a URL. If you use the user name, it is likely that the name\
        \ includes spaces. In that case, URL encode the name before using it in the\
        \ endpoint. \n\nFor example encode \"Bob Smith\" as \"Bob%20Smith\".\n"
      operationId: UserSignatures_PutUserSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: imageType
          in: path
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
        - name: transparent_png
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateSignatureImage
      x-ds-method: updateImage
      x-ds-service: Users
      x-ds-in-sdk: true
    delete:
      tags:
        - UserSignatures
      summary: Deletes the user initials image or the  user signature image for the
        specified user.
      description: "Deletes the specified initials image or signature image for the\
        \ specified user.\n\nThe function deletes one or the other of the image types,\
        \ to delete both the initials image and signature image you must call the\
        \ endpoint twice.\n\nThe userId parameter specified in the endpoint must match\
        \ the authenticated user's user ID and the user must be a member of the account.\n\
        \nThe `signatureId` parameter accepts a signature ID or a signature name.\
        \ DocuSign recommends you use signature ID (`signatureId`), since some names\
        \ contain characters that do not properly encode into a URL. If you use the\
        \ user name, it is likely that the name includes spaces. In that case, URL\
        \ encode the name before using it in the endpoint. \n\nFor example encode\
        \ \"Bob Smith\" as \"Bob%20Smith\"."
      operationId: UserSignatures_DeleteUserSignatureImage
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: imageType
          in: path
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          required: true
          schema:
            type: string
        - name: signatureId
          in: path
          description: The ID of the signature being accessed.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userSignature'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteSignatureImage
      x-ds-method: deleteImage
      x-ds-service: Users
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/views/console:
    post:
      tags:
        - EnvelopeViews
      summary: Returns a URL to the authentication view UI.
      description: "Returns a URL that enables you to embed the authentication view\
        \ of the DocuSign UI in your applications.\n\n**Note**: You can revoke this\
        \ URL by making the DELETE call to the same URL with no request body. \n\n\
        <blockquote>\n<p><b>Information Security notice</b>: This method provides\
        \ full administrator access to the account.</p>"
      operationId: Views_PostAccountConsoleView
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/consoleViewRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/consoleViewRequest'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvelopeViews'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createConsoleView
      x-ds-method: createConsole
      x-ds-service: Envelopes
      x-ds-in-sdk: true
      x-ds-examples:
        - description: |+
            The response contains the URL
            of the the account's cosole.

            The request body contains
            a `returnUrl`.
            This is the URL
            that the DocuSign platform
            will redirect the user to
            when the view is closed.

          direction: both
          format: json
          response:
            url: https://demo.docusign.net/Member/StartInSession.aspx?StartConsole=1&t=644ea697-xxxx-xxxx-xxxx-d95a5c23340b&accountid=624e3e00-xxxx-xxxx-xxxx-43918c520dab
          request:
            returnUrl: https://dsapp.example.com/return/from/console/view
          style: custom
          title: Getting a Console View URL and Setting a Return URL
      x-codegen-request-body-name: consoleViewRequest
  /v2.1/accounts/{accountId}/watermark:
    get:
      tags:
        - AccountWatermarks
      summary: Get watermark information.
      operationId: Watermark_GetWatermark
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/watermark'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getWatermark
      x-ds-method: get
      x-ds-service: Accounts
      x-ds-in-sdk: true
    put:
      tags:
        - AccountWatermarks
      summary: Update watermark information.
      operationId: Watermark_PutWatermark
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        description: 'When set to **true**, the account has the watermark feature
          enabled, and the envelope is not complete, then the watermark for the account
          is added to the PDF documents. This option can remove the watermark. '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watermark'
          application/xml:
            schema:
              $ref: '#/components/schemas/watermark'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/watermark'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateWatermark
      x-ds-method: update
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: watermark
  /v2.1/accounts/{accountId}/watermark/preview:
    put:
      tags:
        - AccountWatermarks
      summary: Get watermark preview.
      operationId: WatermarkPreview_PutWatermarkPreview
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        description: 'When set to **true**, the account has the watermark feature
          enabled, and the envelope is not complete, then the watermark for the account
          is added to the PDF documents. This option can remove the watermark. '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watermark'
          application/xml:
            schema:
              $ref: '#/components/schemas/watermark'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/watermark'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getWatermarkPreview
      x-ds-method: preview
      x-ds-service: Accounts
      x-ds-in-sdk: true
      x-codegen-request-body-name: watermark
  /v2.1/accounts/{accountId}/workspaces:
    get:
      tags:
        - Workspaces
      summary: List Workspaces
      description: Gets information about the Workspaces that have been created.
      operationId: Workspace_GetWorkspaces
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspaceList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listWorkspaces
      x-ds-method: list
      x-ds-service: Workspaces
      x-ds-in-sdk: true
    post:
      tags:
        - Workspaces
      summary: Create a Workspace
      description: This method creates a new workspace.
      operationId: Workspace_PostWorkspace
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workspace'
          application/xml:
            schema:
              $ref: '#/components/schemas/workspace'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspace'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createWorkspace
      x-ds-method: create
      x-ds-service: Workspaces
      x-ds-in-sdk: true
      x-codegen-request-body-name: workspace
  /v2.1/accounts/{accountId}/workspaces/{workspaceId}:
    get:
      tags:
        - Workspaces
      summary: Get Workspace
      description: 'Retrives properties about a workspace given a unique workspaceId. '
      operationId: Workspace_GetWorkspace
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspace'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getWorkspace
      x-ds-method: get
      x-ds-service: Workspaces
      x-ds-in-sdk: true
    put:
      tags:
        - Workspaces
      summary: Update Workspace
      description: Updates information about a specific workspace.
      operationId: Workspace_PutWorkspace
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workspace'
          application/xml:
            schema:
              $ref: '#/components/schemas/workspace'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspace'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateWorkspace
      x-ds-method: update
      x-ds-service: Workspaces
      x-ds-in-sdk: true
      x-codegen-request-body-name: workspace
    delete:
      tags:
        - Workspaces
      summary: Delete Workspace
      description: Deletes an existing workspace (logically).
      operationId: Workspace_DeleteWorkspace
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspace'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteWorkspace
      x-ds-method: delete
      x-ds-service: Workspaces
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}:
    get:
      tags:
        - WorkspaceItems
      summary: List workspace folder contents
      description: This method returns the contents of a workspace folder, which can
        include sub-folders and files.
      operationId: WorkspaceFolder_GetWorkspaceFolder
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: The maximum number of results to be returned by this request.
          schema:
            type: string
        - name: include_files
          in: query
          description: When set to **true**, the response includes file information
            (in addition to folder information). The default is **false**.
          schema:
            type: string
        - name: include_sub_folders
          in: query
          description: When set to **true**, the response includes information about
            the sub-folders of the current folder. The default is **false**.
          schema:
            type: string
        - name: include_thumbnails
          in: query
          description: When set to **true**, the response returns thumbnails.  The default
            is **false**.
          schema:
            type: string
        - name: include_user_detail
          in: query
          description: When set to **true**, the response includes extended details
            about the user. The default is **false**.
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values.
          schema:
            type: string
        - name: workspace_user_id
          in: query
          description: If set, the response only includes results associated with the
            `userId` that you specify.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspaceFolderContents'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listWorkspaceFolderItems
      x-ds-method: listFolderItems
      x-ds-service: Workspaces
      x-ds-in-sdk: true
    delete:
      tags:
        - WorkspaceItems
      summary: Deletes files or sub-folders from a workspace.
      description: |-
        This method deletes one or more files or sub-folders from a workspace folder or root.

        Note: To delete items from a workspace, the `status` of the workspace must be `active`.
      operationId: WorkspaceFolder_DeleteWorkspaceItems
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workspaceItemList'
          application/xml:
            schema:
              $ref: '#/components/schemas/workspaceItemList'
        required: false
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteWorkspaceFolderItems
      x-ds-method: deleteFolderItems
      x-ds-service: Workspaces
      x-ds-in-sdk: true
      x-codegen-request-body-name: workspaceItemList
  /v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files:
    post:
      tags:
        - WorkspaceItems
      summary: Creates a workspace file.
      description: This method adds a file to a workspace.
      operationId: WorkspaceFile_PostWorkspaceFiles
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspaceItem'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createWorkspaceFile
      x-ds-method: createFIle
      x-ds-service: Workspaces
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}:
    get:
      tags:
        - WorkspaceItems
      summary: Gets a workspace file
      description: This method returns a binary version of a file in a workspace.
      operationId: WorkspaceFile_GetWorkspaceFile
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: The id of the file.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
        - name: is_download
          in: query
          description: When set to **true**, the `Content-Disposition` header is set
            in the response. The value of the header provides the filename of the file.
            The default is **false**.
          schema:
            type: string
        - name: pdf_version
          in: query
          description: When set to **true** the file is returned in PDF format.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getWorkspaceFile
      x-ds-method: getFile
      x-ds-service: Workspaces
      x-ds-in-sdk: true
    put:
      tags:
        - WorkspaceItems
      summary: Update workspace file or folder metadata
      description: This method updates the metadata for one or more specific files
        or folders in a workspace.
      operationId: WorkspaceFile_PutWorkspaceFile
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: The id of the file.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/workspaceItem'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateWorkspaceFile
      x-ds-method: updateFile
      x-ds-service: Workspaces
      x-ds-in-sdk: true
  /v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}/pages:
    get:
      tags:
        - WorkspaceItems
      summary: List File Pages
      description: This method returns a workspace file as rasterized pages.
      operationId: WorkspaceFilePages_GetWorkspaceFilePages
      parameters:
        - name: accountId
          in: path
          description: The external account number (int) or account ID GUID.
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: The id of the file.
          required: true
          schema:
            type: string
        - name: folderId
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The id of the workspace.
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: The maximum number of results to be returned by this request.
          schema:
            type: string
        - name: dpi
          in: query
          description: The number of dots per inch (DPI) for the resulting images. Valid
            values are 1-310 DPI. The default value is 94.
          schema:
            type: string
        - name: max_height
          in: query
          description: Sets the maximum height of the returned images in pixels.
          schema:
            type: string
        - name: max_width
          in: query
          description: Sets the maximum width of the returned images in pixels.
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values. The value **thumbnail** may be used to return the page
            image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/pageImages'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listWorkspaceFilePages
      x-ds-method: listFilePages
      x-ds-service: Workspaces
      x-ds-in-sdk: true
  /v2.1/accounts/provisioning:
    get:
      tags:
        - Accounts
      summary: Retrieves the account provisioning information for the account.
      description: Retrieves the account provisioning information for the account.
      operationId: Accounts_GetProvisioning
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/provisioningInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getProvisioning
      x-ds-method: getProvisioning
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/billing_plans:
    get:
      tags:
        - BillingPlans
      summary: Gets a list of available billing plans.
      description: Retrieves a list of the billing plans associated with a distributor.
      operationId: BillingPlans_GetBillingPlans
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingPlansResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listBillingPlans
      x-ds-method: list
      x-ds-service: Billing
      x-ds-in-sdk: true
  /v2.1/billing_plans/{billingPlanId}:
    get:
      tags:
        - BillingPlans
      summary: Gets billing plan details.
      description: Retrieves the billing plan details for the specified billing plan
        ID.
      operationId: BillingPlans_GetBillingPlan
      parameters:
        - name: billingPlanId
          in: path
          description: The ID of the billing plan being accessed.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/billingPlanResponse'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getBillingPlan
      x-ds-method: get
      x-ds-service: Billing
      x-ds-in-sdk: true
  /v2.1/current_user/notary:
    get:
      tags:
        - Notary
      summary: Gets settings for a  notary user.
      description: |-
        Gets settings for a notary user.
        The current user must be a notary.
      operationId: Notary_GetNotary
      parameters:
        - name: include_jurisdictions
          in: query
          description: If **true**, the response will include a `jurisdiction` property
            that contains an array of all supported jurisdictions for the current user.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notaryResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getNotary
      x-ds-method: getNotary
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - Notary
      summary: Updates notary information for the current user.
      description: Updates notary information for the current user.
      operationId: Notary_PutNotary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notary'
          application/xml:
            schema:
              $ref: '#/components/schemas/notary'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateNotary
      x-ds-method: updateNotary
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: notary
    post:
      tags:
        - Notary
      summary: Registers the current user as a notary.
      description: Registers the current user as a notary.
      operationId: Notary_PostNotary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notary'
          application/xml:
            schema:
              $ref: '#/components/schemas/notary'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notary'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createNotary
      x-ds-method: createNotary
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: notary
  /v2.1/current_user/notary/journals:
    get:
      tags:
        - NotaryJournals
      summary: Gets notary jurisdictions for a user.
      operationId: NotaryJournals_GetNotaryJournals
      parameters:
        - name: count
          in: query
          description: The maximum number of results to return.
          schema:
            type: string
        - name: search_text
          in: query
          description: Use this parameter to search for specific text.
          schema:
            type: string
        - name: start_position
          in: query
          description: The position within the total result set from which to start
            returning values. The value **thumbnail** may be used to return the page
            image.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notaryJournalList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listNotaryJournals
      x-ds-method: list
      x-ds-service: Notary
      x-ds-in-sdk: true
  /v2.1/current_user/notary/jurisdictions:
    get:
      tags:
        - NotaryJurisdiction
      summary: Returns a list of jurisdictions that the notary is registered in.
      description: |-
        Returns a list of jurisdictions that the notary is registered in.
        The current user must be a notary.
      operationId: NotaryJurisdictions_GetNotaryJurisdictions
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notaryJurisdictionList'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getNotaryJurisdictions
      x-ds-method: getNotaryJurisdictions
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    post:
      tags:
        - NotaryJurisdiction
      summary: Creates a jurisdiction object.
      description: Creates a jurisdiction object.
      operationId: NotaryJurisdictions_PostNotaryJurisdictions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notaryJurisdiction'
          application/xml:
            schema:
              $ref: '#/components/schemas/notaryJurisdiction'
        required: false
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notaryJurisdiction'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createNotaryJurisdictions
      x-ds-method: createNotaryJurisdictions
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: notaryJurisdiction
  /v2.1/current_user/notary/jurisdictions/{jurisdictionId}:
    get:
      tags:
        - NotaryJurisdiction
      summary: Gets a jurisdiction object for the current user. The user must be a
        notary.
      description: |
        Gets a jurisdiction object for the current user.  The following restrictions apply:

        - The current user must be a notary.
        - The `jurisdictionId` must be a jurisdiction that the notary is registered for.
      operationId: NotaryJurisdictions_GetNotaryJurisdiction
      parameters:
        - name: jurisdictionId
          in: path
          description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notaryJurisdiction'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getNotaryJurisdiction
      x-ds-method: getNotaryJurisdiction
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
    put:
      tags:
        - NotaryJurisdiction
      summary: Updates the jurisdiction information about a notary.
      description: |
        Updates the jurisdiction information about a notary.

        The following restrictions apply:

        - The current user must be a notary.
        - The `jurisdictionId` path parameter must be a jurisdiction that the notary is registered for.
        - The `jurisdictionId` path parameter must match the request body's `jurisdiction.jurisdictionId`.

        The request body must have a full `jurisdiction` object for the jurisdiction property.
        The best way to do this is to use `getNotaryJurisdiction` to obtain the current values and update the properties you want to change.

        For example, assume `getNotaryJurisdiction` returns this:

        ```
        {
            "jurisdiction": {
                "jurisdictionId": "15",
                "name": "Iowa",
                "county": "",
                "enabled": "true",
                "countyInSeal": "false",
                "commissionIdInSeal": "true",
                "stateNameInSeal": "true",
                "notaryPublicInSeal": "true",
                "allowSystemCreatedSeal": "true",
                "allowUserUploadedSeal": "false"
            },
            "commissionId": "123456",
            "commissionExpiration": "2020-08-31T07:00:00.0000000Z",
            "registeredName": "Bob Notary",
            "county": "Adams",
            "sealType": "system_created"
        }
        ```

        If you want to change the name of the notary from "Bob Notary" to "Robert Notary", your request body would be:

        ```
        {
            "jurisdiction": {
                "jurisdictionId": "15",
                "name": "Iowa",
                "county": "",
                "enabled": "true",
                "countyInSeal": "false",
                "commissionIdInSeal": "true",
                "stateNameInSeal": "true",
                "notaryPublicInSeal": "true",
                "allowSystemCreatedSeal": "true",
                "allowUserUploadedSeal": "false"
            },
            "commissionId": "123456",
            "commissionExpiration": "2020-08-31T07:00:00.0000000Z",
            "registeredName": "Robert Notary",
            "county": "Adams",
            "sealType": "system_created"
        }
        ```
      operationId: NotaryJurisdictions_PutNotaryJurisdiction
      parameters:
        - name: jurisdictionId
          in: path
          description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notaryJurisdiction'
          application/xml:
            schema:
              $ref: '#/components/schemas/notaryJurisdiction'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notaryJurisdiction'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateNotaryJurisdiction
      x-ds-method: updateNotaryJurisdiction
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
      x-codegen-request-body-name: notaryJurisdiction
    delete:
      tags:
        - NotaryJurisdiction
      summary: Deletes the specified jurisdiction.
      description: Deletes the specified jurisdiction.
      operationId: NotaryJurisdictions_DeleteNotaryJurisdiction
      parameters:
        - name: jurisdictionId
          in: path
          description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteNotaryJurisdiction
      x-ds-method: deleteNotaryJurisdiction
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/current_user/password_rules:
    get:
      tags:
        - AccountPasswordRules
      summary: Gets membership account password rules.
      operationId: PasswordRules_GetPasswordRules
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/userPasswordRules'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getPasswordRules
      x-ds-method: getForUser
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2.1/diagnostics/request_logs:
    get:
      tags:
        - RequestLogs
      summary: Gets the API request logging log files.
      description: "Retrieves a list of log entries as a JSON or xml object or as\
        \ a zip file containing the entries.\n\nIf the Accept header is set to application/zip,\
        \ the response is a zip file containing individual text files, each representing\
        \ an API request.\n\nIf the Accept header is set to `application/json` or\
        \ `application/xml`, the response returns list of log entries in either JSON\
        \ or XML. An example JSON response body is shown below. "
      operationId: APIRequestLog_GetRequestLogs
      parameters:
        - name: encoding
          in: query
          description: Reserved for DocuSign.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/apiRequestLogsResult'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: listRequestLogs
      x-ds-method: list
      x-ds-service: Diagnostics
      x-ds-in-sdk: true
    delete:
      tags:
        - RequestLogs
      summary: Deletes the request log files.
      description: Deletes the request log files.
      operationId: APIRequestLog_DeleteRequestLogs
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: deleteRequestLogs
      x-ds-method: delete
      x-ds-service: Diagnostics
      x-ds-in-sdk: true
  /v2.1/diagnostics/request_logs/{requestLogId}:
    get:
      tags:
        - RequestLogs
      summary: Gets a request logging log file.
      description: |-
        Retrieves information for a single log entry.

        **Request**
        The `requestLogfId` property can be retrieved by getting the list of log entries. The Content-Transfer-Encoding header can be set to base64 to retrieve the API request/response as base 64 string. Otherwise the bytes of the request/response are returned.

        **Response**
        If the Content-Transfer-Encoding header was set to base64, the log is returned as a base64 string.
      operationId: APIRequestLog_GetRequestLog
      parameters:
        - name: requestLogId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            text/plain:
              schema:
                type: string
                format: binary
        400:
          description: Error encountered.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getRequestLog
      x-ds-method: get
      x-ds-service: Diagnostics
      x-ds-in-sdk: true
  /v2.1/diagnostics/settings:
    get:
      tags:
        - RequestLogs
      summary: Gets the API request logging settings.
      description: |-
        Retrieves the current API request logging setting for the user and remaining log entries.

        **Response**
        The response includes the current API request logging setting for the user, along with the maximum log entries and remaining log entries.
      operationId: APIRequestLog_GetRequestLogSettings
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/diagnosticsSettingsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getRequestLogSettings
      x-ds-method: getSettings
      x-ds-service: Diagnostics
      x-ds-in-sdk: true
    put:
      tags:
        - RequestLogs
      summary: Enables or disables API request logging for troubleshooting.
      description: |
        Enables or disables API request logging for troubleshooting.

        When enabled (`apiRequestLogging` is **true**), REST API requests and responses for the user are added to a log. A log can have up to 50 requests/responses and the current number of log entries can be determined by getting the settings. Logging is automatically disabled when the log limit of 50 is reached.

        You can call [Diagnostics::getRequestLog
        ](https://developers.docusign.com/esign-rest-api/reference/Diagnostics/RequestLogs/get) or [Diagnostics::listRequestLogs](https://developers.docusign.com/esign-rest-api/reference/Diagnostics/RequestLogs/list) to download the log files (individually or as a zip file). Call [Diagnostics::deleteRequestLogs
        ](https://developers.docusign.com/esign-rest-api/reference/Diagnostics/RequestLogs/delete) to clear the log by deleting current entries.

        Private information, such as passwords and integrator key information, which is normally located in the call header is omitted from the request/response log.

        API request logging only captures requests from the authenticated user. Any call that does not authenticate the user and resolve a userId is not logged.
      operationId: APIRequestLog_PutRequestLogSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/diagnosticsSettingsInformation'
          application/xml:
            schema:
              $ref: '#/components/schemas/diagnosticsSettingsInformation'
        required: false
      responses:
        200:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/diagnosticsSettingsInformation'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: updateRequestLogSettings
      x-ds-method: updateSettings
      x-ds-service: Diagnostics
      x-ds-in-sdk: true
      x-codegen-request-body-name: diagnosticsSettingsInformation
  /v2.1/display_appliance_info/error:
    post:
      tags:
        - ApplianceInfo
      summary: Uploads Kazmon error for Display Appliance.
      operationId: EnvelopeApplianceInfo_PostError
      responses:
        201:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createError
      x-ds-method: createError
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/display_appliance_info/redeem:
    post:
      tags:
        - ApplianceInfo
      summary: Returns signing URL for Display Appliance.
      operationId: EnvelopeApplianceInfo_PostRedeem
      responses:
        201:
          description: Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/displayApplianceInfo'
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: createRedeem
      x-ds-method: createRedeem
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
  /v2.1/organization_exports/{organizationId}/account_settings/{resultId}:
    get:
      tags:
        - Accounts
      summary: Retrieves an account settings comparison.
      operationId: OrganizationExports_GetAccountSettingsExport
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: resultId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content: {}
        400:
          description: Error encountered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorDetails'
      deprecated: false
      x-ds-methodname: getAccountSettingsExport
      x-ds-api-status: beta
      x-ds-method: getAccountSettingsExport
      x-ds-service: Uncategorized
      x-ds-in-sdk: true
components:
  schemas:
    accessCodeFormat:
      type: object
      properties:
        formatRequired:
          type: string
          description: Boolean specifying whether this format configuration is required.
        formatRequiredMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        letterRequired:
          type: string
          description: Boolean specifying whether alphabetical characters are required
            in the access code string.
        letterRequiredMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        minimumLength:
          type: string
          description: Minimum length of the access code string.
        minimumLengthMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        numberRequired:
          type: string
          description: Boolean specifying whether numerical characters (0-9) are required
            in the access code string.
        numberRequiredMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        specialCharacterRequired:
          type: string
          description: Boolean specifying whether special characters are required
            in the access code string. The string cannot contain the special characters
            '<', '>', '&', or '#'.
        specialCharacterRequiredMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: Object specifying the format of the string provided to a recipient
        in order to access an envelope.
      x-ds-definition-name: accessCodeFormat
      x-ms-summary: Object specifying the format of the string provided to a recipient
        in order to access an envelope.
    accountAddress:
      type: object
      properties:
        address1:
          type: string
          description: 'The first line of the address. Maximum length: 100 characters.'
        address2:
          type: string
          description: 'The second line of the address. Maximum length: 100 characters.'
        city:
          type: string
          description: 'The city associated with the address. Maximum length: 40 characters.'
        country:
          type: string
          description: 'The country associated with the address. Maximum length: 50
            characters.'
        email:
          type: string
          description: The email address associated with the account.
        fax:
          type: string
          description: The fax number associated with the account.
        firstName:
          type: string
          description: 'The first name of the user associated with the account. Maximum
            Length: 50 characters.'
        lastName:
          type: string
          description: The last name of the user associated with the account.
        phone:
          type: string
          description: The phone number associated with the account.
        postalCode:
          type: string
          description: 'The postal code associated with the address. Maximum length:
            20 characters.'
        state:
          type: string
          description: 'The state or province associated with the address. Maximum
            length: 40 characters.'
        supportedCountries:
          type: array
          description: An array of supported countries associated with the account.
          items:
            $ref: '#/components/schemas/country'
      description: Contains information about the address associated with the account.
      x-ds-definition-name: accountAddress
      x-ms-summary: Contains information about the address associated with the account.
    accountBillingPlan:
      type: object
      properties:
        addOns:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/addOn'
        appStoreReceiptExpirationDate:
          type: string
          description: ""
        appStoreReceiptPurchaseDate:
          type: string
          description: ""
        canCancelRenewal:
          type: string
          description: Reserved for DocuSign.
        canUpgrade:
          type: string
          description: When set to **true**, specifies that you can upgrade the account
            through the API. For GET methods, you must set the `include_metadata`
            query parameter to **true** for this property to appear in the response.
        currencyCode:
          type: string
          description: Specifies the ISO currency code to use for the account.
        downgradePlanInformation:
          $ref: '#/components/schemas/downgradePlanUpdateResponse'
        enableSupport:
          type: string
          description: When set to **true**, customer support is provided as part
            of the account plan.
        includedSeats:
          type: string
          description: The number of seats (users) included in the plan.
        incrementalSeats:
          type: string
          description: Reserved for DocuSign.
        isDowngrade:
          type: string
          description: When **true**, the account has been downgraded from a premium
            account type. Otherwise **false**.
        notificationType:
          type: string
          description: ""
        otherDiscountPercent:
          type: string
          description: ' Any other percentage discount for the plan. '
        paymentCycle:
          type: string
          description: "The payment cycle associated with the plan. The possible values\
            \ are: \n\n- `Monthly`\n- `Annually` "
        paymentMethod:
          type: string
          description: ' The payment method used with the plan. The possible values
            are: CreditCard, PurchaseOrder, Premium, or Freemium. '
        perSeatPrice:
          type: string
          description: |-
            The per-seat price associated with the plan.

            Example: `"456.0000"`
        planClassification:
          type: string
          description: "Identifies the type of plan. Examples include:\n\n- `business`\n\
            - `corporate`\n- `enterprise` \n- `free`"
        planFeatureSets:
          type: array
          description: |
            A complex type that sets the feature sets for the account. It contains the following information (all string content):

            * currencyFeatureSetPrices - Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, seatFee that are configured for this plan feature set.
            * envelopeFee - An incremental envelope cost for plans with envelope overages (when isEnabled=true).
            * featureSetId - A unique ID for the feature set.
            * fixedFee - A one-time fee associated with the plan (when isEnabled=true).
            * isActive - Specifies whether the feature set is actively set as part of the plan.
            * isEnabled - Specifies whether the feature set is actively enabled as part of the plan.
            * name - The name of the feature set.
            * seatFee - An incremental seat cost for seat-based plans (when isEnabled=true).
          items:
            $ref: '#/components/schemas/featureSet'
        planId:
          type: string
          description: DocuSign's id for the account plan.
        planName:
          type: string
          description: "The name of the billing plan used for the account.\n\nExamples:\
            \ \n\n- `Personal - Annual`\n- `Unlimited Envelope Subscription - Annual\
            \ Billing`"
        renewalStatus:
          type: string
          description: |-
            The renewal status for the account. Valid values are:

            * `auto`: The account automatically renews.
            * `queued_for_close`: The account will be closed at the `billingPeriodEndDate`.
            * `queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`.

            **Note**: For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
        seatDiscounts:
          type: array
          description: "\n "
          items:
            $ref: '#/components/schemas/seatDiscount'
        supportIncidentFee:
          type: string
          description: |-
            The support incident fee charged for each support incident.

            Example: `"$0.00"`
        supportPlanFee:
          type: string
          description: |-
            The support plan fee charged for this plan.

            Example: `"$0.00"`
      description: Contains information about an account billing plan.
      x-ds-definition-name: accountBillingPlan
      x-ms-summary: Contains information about an account billing plan.
    accountBillingPlanResponse:
      type: object
      properties:
        billingAddress:
          $ref: '#/components/schemas/accountAddress'
        billingAddressIsCreditCardAddress:
          type: string
          description: When set to **true**, the credit card address information is
            the same as that returned as the billing address. If false, then the billing
            address is considered a billing contact address, and the credit card address
            can be different.
        billingPlan:
          $ref: '#/components/schemas/accountBillingPlan'
        creditCardInformation:
          $ref: '#/components/schemas/creditCardInformation'
        directDebitProcessorInformation:
          $ref: '#/components/schemas/directDebitProcessorInformation'
        downgradePlanInformation:
          $ref: '#/components/schemas/downgradePlanUpdateResponse'
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        paymentProcessorInformation:
          $ref: '#/components/schemas/paymentProcessorInformation'
        referralInformation:
          $ref: '#/components/schemas/referralInformation'
        successorPlans:
          type: array
          description: A list of billing plans that the current billing plan can be
            rolled into.
          items:
            $ref: '#/components/schemas/billingPlan'
      description: Defines an account billing plan response object.
      x-ds-definition-name: accountBillingPlanResponse
      x-ms-summary: Defines an account billing plan response object.
    accountIdentityInputOption:
      type: object
      properties:
        isRequired:
          type: boolean
          description: ""
        optionName:
          type: string
          description: ""
        valueType:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: accountIdentityInputOption
      x-ms-summary: ""
    accountIdentityVerificationResponse:
      type: object
      properties:
        identityVerification:
          type: array
          description: ' '
          items:
            $ref: '#/components/schemas/accountIdentityVerificationWorkflow'
      description: ""
      x-ds-definition-name: accountIdentityVerificationResponse
      x-ms-summary: ""
    accountIdentityVerificationStep:
      type: object
      properties:
        name:
          type: string
          description: The name of the Identity Verification workflow step.
        type:
          type: string
          description: Reserved for DocuSign.
      description: Information about a specific step in an Identity Verification workflow.
      x-ds-definition-name: accountIdentityVerificationStep
      x-ms-summary: Information about a specific step in an Identity Verification
        workflow.
    accountIdentityVerificationWorkflow:
      type: object
      properties:
        defaultDescription:
          type: string
          description: Text describing the purpose of the Identity Verification workflow.
        defaultName:
          type: string
          description: The name of the Identity Verification workflow.
        inputOptions:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/accountIdentityInputOption'
        signatureProvider:
          $ref: '#/components/schemas/accountSignatureProvider'
        workflowId:
          type: string
          description: |-
            Workflow unique ID</br>This is the ID you must specify when setting ID Verification in an envelope using the `identityVerification`
            [core recipient parameter](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#core-recipient-parameters)
        workflowResourceKey:
          type: string
          description: Reserved for DocuSign.
      description: Specifies an Identity Verification workflow.
      x-ds-definition-name: accountIdentityVerificationWorkflow
      x-ms-summary: Specifies an Identity Verification workflow.
    accountInformation:
      type: object
      properties:
        accountIdGuid:
          type: string
          description: The GUID associated with the account ID.
        accountName:
          type: string
          description: The name on the account.
        accountSettings:
          $ref: '#/components/schemas/accountSettingsInformation'
        allowTransactionRooms:
          type: string
          description: When set to **true**, the transaction rooms feature exposed
            through the Workspaces API is enabled.
        billingPeriodDaysRemaining:
          type: string
          description: Number of days remaining in the current billing period.
        billingPeriodEndDate:
          type: string
          description: The billing period end date in UTC timedate format.
        billingPeriodEnvelopesAllowed:
          type: string
          description: The number of envelopes that can be sent in the current billing
            period (can be unlimited).
        billingPeriodEnvelopesSent:
          type: string
          description: The number of envelopes that have been sent in the current
            billing period.
        billingPeriodStartDate:
          type: string
          description: The billing period start date in UTC timedate format.
        billingProfile:
          type: string
          description: "The type of billing method on the account. Valid values are:\
            \ \n\n- `direct`\n- `web`"
        canUpgrade:
          type: string
          description: When set to **true**, specifies that you can upgrade the account
            through the API. For GET methods, you must set the `include_metadata`
            query parameter to **true** for this property to appear in the response.
        connectPermission:
          type: string
          description: ""
        createdDate:
          type: string
          description: The creation date of the account in UTC timedate format.
        currencyCode:
          type: string
          description: The currency code for the account, based on the [ISO 4217 currency
            code](https://www.iso.org/iso-4217-currency-codes.html).
        currentPlanId:
          type: string
          description: ID of the plan used to create this account.
        displayApplianceStartUrl:
          type: string
          description: ""
        displayApplianceUrl:
          type: string
          description: ""
        distributorCode:
          type: string
          description: The code that identifies the billing plan groups and plans
            for the new account.
        docuSignLandingUrl:
          type: string
          description: URL of the landing page used to create the account.
        dssValues:
          type: object
          additionalProperties:
            type: string
          description: ""
        envelopeSendingBlocked:
          type: string
          description: When **true**, the ability to send envelopes is blocked. When
            **false**, envelopes can be sent.
        envelopeUnitPrice:
          type: string
          description: The price of sending an envelope, represented in the account's
            local currency.
        externalAccountId:
          type: string
          description: The Account ID displayed on the user's Account page.
        forgottenPasswordQuestionsCount:
          type: string
          description: ' A complex element that contains up to four Question/Answer
            pairs for forgotten password information for a user.'
        isDowngrade:
          type: string
          description: When **true**, the account has been downgraded from a premium
            account type. Otherwise **false**.
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        planClassification:
          type: string
          description: "Identifies the type of plan. Examples include:\n\n- `business`\n\
            - `corporate`\n- `enterprise` \n- `free`"
        planEndDate:
          type: string
          description: The date that the current plan will end.
        planName:
          type: string
          description: "The name of the billing plan used for the account.\n\nExamples:\
            \ \n\n- `Personal - Annual`\n- `Unlimited Envelope Subscription - Annual\
            \ Billing`"
        planStartDate:
          type: string
          description: The date that the Account started using the current plan.
        recipientDomains:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/recipientDomain'
        seatsAllowed:
          type: string
          description: The number of active users the account can have at one time.
        seatsInUse:
          type: string
          description: The number of users currently active on the account.
        status21CFRPart11:
          type: string
          description: The status of the account content per (Title 21 CFR Part 11)[https://www.fda.gov/regulatory-information/search-fda-guidance-documents/part-11-electronic-records-electronic-signatures-scope-and-application].
            This regulation defines the criteria under which electronic records and
            electronic signatures are considered trustworthy.
        suspensionDate:
          type: string
          description: The date on which the account was suspended.
        suspensionStatus:
          type: string
          description: Indicates whether the account is currently suspended.
        useDisplayAppliance:
          type: boolean
          description: ""
      description: Contains account Information.
      x-ds-definition-name: accountInformation
      x-ms-summary: Contains account Information.
    accountMinimumPasswordLength:
      type: object
      properties:
        maximumLength:
          type: string
          description: The maximum number of entry characters supported by the custom
            tab.
        minimumLength:
          type: string
          description: Minimum length of the access code string.
      description: ""
      x-ds-definition-name: accountMinimumPasswordLength
      x-ms-summary: ""
    accountNotification:
      type: object
      properties:
        expirations:
          $ref: '#/components/schemas/expirations'
        reminders:
          $ref: '#/components/schemas/reminders'
        userOverrideEnabled:
          type: string
          description: When **true**, the user can override envelope expirations.
      description: A complex element that specifies notifications (expirations and
        reminders) for the envelope.
      x-ds-definition-name: accountNotification
      x-ms-summary: A complex element that specifies notifications (expirations and
        reminders) for the envelope.
    accountPasswordExpirePasswordDays:
      type: object
      properties:
        maximumDays:
          type: string
          description: ""
        minimumDays:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: accountPasswordExpirePasswordDays
      x-ms-summary: ""
    accountPasswordLockoutDurationMinutes:
      type: object
      properties:
        maximumMinutes:
          type: string
          description: ""
        minimumMinutes:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: accountPasswordLockoutDurationMinutes
      x-ms-summary: ""
    accountPasswordLockoutDurationType:
      type: object
      properties:
        options:
          type: array
          description: An array of option strings supported by this setting.
          items:
            type: string
      description: ""
      x-ds-definition-name: accountPasswordLockoutDurationType
      x-ms-summary: ""
    accountPasswordMinimumPasswordAgeDays:
      type: object
      properties:
        maximumAge:
          type: string
          description: ""
        minimumAge:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: accountPasswordMinimumPasswordAgeDays
      x-ms-summary: ""
    accountPasswordQuestionsRequired:
      type: object
      properties:
        maximumQuestions:
          type: string
          description: The maximum number of password reset questions allowed for
            the account. This number must be between `0` and `4`, and equal to or
            greater than `minimumQuestions`.
        minimumQuestions:
          type: string
          description: The minimum number of password reset questions allowed for
            the account. This number must be between `0` and `4`, and equal to or
            less than `maximumQuestions`.
      description: Information about the number of password questions required (0
        to 4) to confirm a user's identity when a user needs to reset their password.
      x-ds-definition-name: accountPasswordQuestionsRequired
      x-ms-summary: Information about the number of password questions required (0
        to 4) to confirm a user's identity when a user needs to reset their password.
    accountPasswordRules:
      type: object
      properties:
        expirePassword:
          type: string
          description: When set to **true**, passwords expire. The default value is
            `false`.
        expirePasswordDays:
          type: string
          description: The number of days before passwords expire. To use this property,
            the `expirePassword` property must be set to **true**.
        expirePasswordDaysMetadata:
          $ref: '#/components/schemas/accountPasswordExpirePasswordDays'
        lockoutDurationMinutes:
          type: string
          description: The number of minutes a user is locked out of the system after
            three (?) failed login attempts. The default value is `2`.
        lockoutDurationMinutesMetadata:
          $ref: '#/components/schemas/accountPasswordLockoutDurationMinutes'
        lockoutDurationType:
          type: string
          description: |-
            The interval associated with the user lockout after a failed login attempt.

            Possible values are: (?????)

            - `minutes` (default)
            - `hours`
            - `days`
        lockoutDurationTypeMetadata:
          $ref: '#/components/schemas/accountPasswordLockoutDurationType'
        minimumPasswordAgeDays:
          type: string
          description: The minimum number of days after a password is set before it
            can be changed. This value can be `0` or more days. The default value
            is `0`.
        minimumPasswordAgeDaysMetadata:
          $ref: '#/components/schemas/accountPasswordMinimumPasswordAgeDays'
        minimumPasswordLength:
          type: string
          description: The minimum number of characters in the password. This value
            must be a number between `6` and `15`. The default value is `6`.
        minimumPasswordLengthMetadata:
          $ref: '#/components/schemas/accountMinimumPasswordLength'
        passwordIncludeDigit:
          type: string
          description: When set to **true**, passwords must include a digit. The default
            value is `false`.
        passwordIncludeDigitOrSpecialCharacter:
          type: string
          description: |-
            When set to **true**, passwords must include either a digit or a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
        passwordIncludeLowerCase:
          type: string
          description: When set to **true**, passwords must include a lowercase letter.
            The default value is `false`.
        passwordIncludeSpecialCharacter:
          type: string
          description: |-
            When set to **true**, passwords must include a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
        passwordIncludeUpperCase:
          type: string
          description: When set to **true**, passwords must include an uppercase letter.
            The default value is `false`.
        passwordStrengthType:
          type: string
          description: |-
            The type of password strength. Possible values are:

            - `basic`: The minimum password length is 6 characters with no other password requirements.
            - `medium`: The minimum password length is 7 characters. Passwords must also have one uppercase letter, one lowercase letter, and one number or special character.
            - `strong`: The minimum password length is 9 characters. Passwords must also have one uppercase letter, one lowercase letter, one number, and one special character.
            - `custom`: This option enables you to customize password requirements, including the following properties:

               - `minimumPasswordLength`
               - `minimumPasswordAgeDays`
               - `passwordIncludeDigit`
               - `passwordIncludeDigitOrSpecialCharacter`
               - `passwordIncludeLowerCase`
               - `passwordIncludeSpecialCharacter`
               - `passwordIncludeUpperCase`
               - `questionsRequired`
        passwordStrengthTypeMetadata:
          $ref: '#/components/schemas/accountPasswordStrengthType'
        questionsRequired:
          type: string
          description: The number of security questions required to confirm the user’s
            identity before the user can reset their password. The default value is
            `0`.
        questionsRequiredMetadata:
          $ref: '#/components/schemas/accountPasswordQuestionsRequired'
      description: ""
      x-ds-definition-name: accountPasswordRules
      x-ms-summary: ""
    accountPasswordStrengthType:
      type: object
      properties:
        options:
          type: array
          description: An array of option strings supported by this setting.
          items:
            $ref: '#/components/schemas/accountPasswordStrengthTypeOption'
      description: ""
      x-ds-definition-name: accountPasswordStrengthType
      x-ms-summary: ""
    accountPasswordStrengthTypeOption:
      type: object
      properties:
        minimumLength:
          type: string
          description: Minimum length of the access code string.
        name:
          type: string
          description: ""
        passwordIncludeDigit:
          type: string
          description: When set to **true**, passwords must include a digit. The default
            value is `false`.
        passwordIncludeDigitOrSpecialCharacter:
          type: string
          description: |-
            When set to **true**, passwords must include either a digit or a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
        passwordIncludeLowerCase:
          type: string
          description: When set to **true**, passwords must include a lowercase letter.
            The default value is `false`.
        passwordIncludeSpecialCharacter:
          type: string
          description: |-
            When set to **true**, passwords must include a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
        passwordIncludeUpperCase:
          type: string
          description: When set to **true**, passwords must include an uppercase letter.
            The default value is `false`.
      description: ""
      x-ds-definition-name: accountPasswordStrengthTypeOption
      x-ms-summary: ""
    accountRoleSettings:
      type: object
      properties:
        allowAccountManagement:
          type: string
          description: When **true**, users have full administrative access to the
            account.
        allowAccountManagementMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowApiAccess:
          type: string
          description: When **true**, users can manage documents by using the API.
        allowApiAccessMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowApiAccessToAccount:
          type: string
          description: When **true**, users can access the account by using the eSignature
            API.
        allowApiAccessToAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowApiSendingOnBehalfOfOthers:
          type: string
          description: When **true**, users can send envelopes on behalf of others.
        allowApiSendingOnBehalfOfOthersMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowApiSequentialSigning:
          type: string
          description: When **true**, users may specify sequential signing recipients
            when they send documents by using the API.
        allowApiSequentialSigningMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAutoTagging:
          type: string
          description: ' If **true**, auto-tagging is enabled for the account.'
        allowAutoTaggingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowBulkSending:
          type: string
          description: When **true**, bulk sending is enabled for users.
        allowBulkSendingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowDocuSignDesktopClient:
          type: string
          description: |
            When **true**, the DocuSign Desktop Client is enabled for users.
        allowDocuSignDesktopClientMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowedAddressBookAccess:
          type: string
          description: |
            Specifies the level of access that users have to the account's address book. Valid values are:

            - `personal`
            - `useShared`
            - `usePersonalAndShared`
            - `personalAndShared`
        allowedAddressBookAccessMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowedClickwrapsAccess:
          type: string
          description: ""
        allowedClickwrapsAccessMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowedTemplateAccess:
          type: string
          description: "Specifies the level of access that users have to account templates.\
            \ Valid values are: \n\n- `none` \n- `use`\n- `create`\n- `share`"
        allowedTemplateAccessMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowedToBeEnvelopeTransferRecipient:
          type: string
          description: 'When **true**, users can be recipients of envelopes transferred
            to them by administrators of other accounts. '
        allowedToBeEnvelopeTransferRecipientMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEnvelopeSending:
          type: string
          description: When **true**, users can send envelopes.
        allowEnvelopeSendingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowESealRecipients:
          type: string
          description: When **true**, users can add electronic seal ([eSeal](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals))
            recipients.
        allowESealRecipientsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowPowerFormsAdminToAccessAllPowerFormEnvelopes:
          type: string
          description: When **true**, PowerForm Administrators can access all of the
            PowerForm envelopes associated with the account.
        allowPowerFormsAdminToAccessAllPowerFormEnvelopesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSendersToSetRecipientEmailLanguage:
          type: string
          description: When **true**, senders can set the language of the email that
            is sent to recipients.
        allowSendersToSetRecipientEmailLanguageMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSignerAttachments:
          type: string
          description: When **true**, users can add requests for attachments from
            signers.
        allowSignerAttachmentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSupplementalDocuments:
          type: string
          description: When **true**, senders can include supplemental documents.
        allowSupplementalDocumentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowTaggingInSendAndCorrect:
          type: string
          description: When **true**, the tagger palette is visible during the sending
            and correct flows and users can add tabs to documents.
        allowTaggingInSendAndCorrectMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowVaulting:
          type: string
          description: Reserved for DocuSign.
        allowVaultingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowWetSigningOverride:
          type: string
          description: When **true**, users can override the default account setting
            that controls whether recipients can sign documents on paper. The option
            to overrride this setting occurs during the sending process on a per-envelope
            basis.
        allowWetSigningOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canCreateWorkspaces:
          type: string
          description: Reserved for DocuSign.
        canCreateWorkspacesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableDocumentUpload:
          type: string
          description: When **true**, users cannot upload documents.
        disableDocumentUploadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableOtherActions:
          type: string
          description: When **true**, users can access the **Other Actions** menu.
        disableOtherActionsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableApiRequestLogging:
          type: string
          description: |-
            When **true**, API request logging is enabled.

            **Note**: Logging limits apply.
        enableApiRequestLoggingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableRecipientViewingNotifications:
          type: string
          description: When **true**, senders are notified when recipients view the
            documents that they send.
        enableRecipientViewingNotificationsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSequentialSigningInterface:
          type: string
          description: When **true**, the sequential signing user interface is enabled.
        enableSequentialSigningInterfaceMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableTransactionPointIntegration:
          type: string
          description: Reserved for DocuSign.
        enableTransactionPointIntegrationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        powerFormRole:
          type: string
          description: "The PowerForms rights associated with the account permission\
            \ profile. Valid values are:\n\n- `none` \n- `user` \n- `admin`\n"
        powerFormRoleMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        receiveCompletedSelfSignedDocumentsAsEmailLinks:
          type: string
          description: When **true**, senders receive emails about completed, self-signed
            documents that contain links to the completed documents instead of PDF
            attachments.
        receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signingUiVersionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustAccept:
          type: string
          description: When **true**, senders can require recipients to accept supplemental
            documents.
        supplementalDocumentsMustAcceptMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustRead:
          type: string
          description: When **true**, senders can require recipients to read supplemental
            documents.
        supplementalDocumentsMustReadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustView:
          type: string
          description: When **true**, users can require recipients to view supplemental
            documents.
        supplementalDocumentsMustViewMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useNewDocuSignExperienceInterface:
          type: string
          description: Reserved for DocuSign.
        useNewDocuSignExperienceInterfaceMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useNewSendingInterface:
          type: string
          description: Reserved for DocuSign.
        useNewSendingInterfaceMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        vaultingMode:
          type: string
          description: Reserved for DocuSign.
        vaultingModeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: 'This object defines account permissions for users who are associated
        with the account permission profile. '
      x-ds-definition-name: accountRoleSettings
      x-ms-summary: 'This object defines account permissions for users who are associated
        with the account permission profile. '
    accountSeals:
      type: object
      properties:
        seals:
          type: array
          description: A list of electronic seals to apply to documents.
          items:
            $ref: '#/components/schemas/sealIdentifier'
      description: ""
      x-ds-definition-name: accountSeals
      x-ms-summary: ""
    accountSettingsInformation:
      type: object
      properties:
        accessCodeFormat:
          $ref: '#/components/schemas/accessCodeFormat'
        accountDateTimeFormat:
          type: string
          description: UTC date/time format for the account.
        accountDateTimeFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        accountDefaultLanguage:
          type: string
          description: ""
        accountDefaultLanguageMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        accountName:
          type: string
          description: The name on the account.
        accountNameMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        accountNotification:
          $ref: '#/components/schemas/accountNotification'
        accountUISettings:
          $ref: '#/components/schemas/accountUISettings'
        adoptSigConfig:
          type: string
          description: "When set to **true**, [Signature Adoption Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-signature-adopt-config)\
            \ is enabled. \n\n**Note**: Only Admin users can change this setting."
        adoptSigConfigMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        advancedCorrect:
          type: string
          description: If **true**, the Advanced Correction feature is enabled for
            this account.
        advancedCorrectMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAccessCodeFormat:
          type: string
          description: |-
            When **true**, the configured [Access Code Format](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/get#accessCodeFormat) page is enabled for account administrators.

            **Note**: Only Admin users can change this setting.
        allowAccessCodeFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAccountManagementGranular:
          type: string
          description: |-
            When **true**, the account can be managed on a per-user basis.

            **Note**: Only Admin users can change this setting.
        allowAccountManagementGranularMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAccountMemberNameChange:
          type: string
          description: Boolean that specifies whether member names can be changed
            in the account.
        allowAccountMemberNameChangeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAdvancedRecipientRoutingConditional:
          type: string
          description: When set to **true**, [Conditional Routing](https://support.docusign.com/en/guides/ndse-user-guide-conditional-recipients)
            is enabled for the account as part of DocuSign's Advanced Recipient Routing
            feature.
        allowAdvancedRecipientRoutingConditionalMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAgentNameEmailEdit:
          type: string
          description: |2
              If **true**, an agent recipient can change the email addresses of recipients later in the signing order.
        allowAgentNameEmailEditMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAgreementActions:
          type: string
          description: ""
        allowAgreementActionsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAutoNavSettings:
          type: string
          description: |2
              If **true**, auto-navigation can be enabled for this account.
        allowAutoNavSettingsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAutoTagging:
          type: string
          description: ' If **true**, auto-tagging is enabled for the account.'
        allowAutoTaggingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowBulkSend:
          type: string
          description: |-
            When set to **true**, bulk send functionality is enabled for the account.

            **Note**: Only Admin users can change this setting.
        allowBulkSendMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowCDWithdraw:
          type: string
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
        allowCDWithdrawMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowConnectHttpListenerConfigs:
          type: string
          description: Boolean that specifies whether a Connect configuration can
            use HTTP listeners.
        allowConnectSendFinishLater:
          type: string
          description: Reserved for DocuSign.
        allowConnectSendFinishLaterMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowConnectUnifiedPayloadUI:
          type: string
          description: ""
        allowConsumerDisclosureOverride:
          type: string
          description: |
            If **true**,
            the account has the ability to change the
            [Consumer Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure)
            setting.
        allowConsumerDisclosureOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowDataDownload:
          type: string
          description: |
            When set to **true**, senders can download form data from the envelopes that they send.

            **Note**: Only Admin users can change this setting.
        allowDataDownloadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowDocumentDisclosures:
          type: string
          description: Boolean that specifies whether disclosure documents can be
            included in envelopes.
        allowDocumentDisclosuresMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowDocumentsOnSignedEnvelopes:
          type: string
          description: Boolean that specifies whether notifications can include the
            envelope's signed document.
        allowDocumentsOnSignedEnvelopesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowDocumentVisibility:
          type: string
          description: |
            When **true**, the [Document Visibility](https://support.docusign.com/guides/ndse-user-guide-document-visibility) feature is enabled for the account.
        allowDocumentVisibilityMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEHankoStamps:
          type: string
          description: |
            When **true**,
            [eHanko stamps](https://support.docusign.com/en/guides/ndse-user-guide-manage-your-stamps)
            are enabled.
        allowEHankoStampsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowENoteEOriginal:
          type: string
          description: |
            Specifies whether eNote eOriginal integration is enabled.
        allowENoteEOriginalMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEnvelopeCorrect:
          type: string
          description: |
            When set to **true**, the envelope correction feature is enabled.

            **Note**: Only Admin users can change this setting.
        allowEnvelopeCorrectMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEnvelopeCustodyTransfer:
          type: string
          description: |+
            Specifies whether the account is able to
            manage rules that [transfer ownership](https://support.docusign.com/en/guides/ndse-admin-guide-custody-transfer)
            of envelopes within the same account.



        allowEnvelopeCustodyTransferMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEnvelopeCustomFields:
          type: string
          description: |
            Specifies whether
            [envelope custom fields](https://support.docusign.com/en/guides/ndse-user-guide-manage-custom-fields)
            are enabled.
        allowEnvelopeCustomFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEnvelopePublishReporting:
          type: string
          description: |
            When set to **true**, envelope publishing reporting is enabled.

            **Note**: Only Admin users can change this setting.
        allowEnvelopePublishReportingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEnvelopeReporting:
          type: string
          description: |
            Specifies whether the account has access to reports.
        allowEnvelopeReportingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowExpression:
          type: string
          description: |+
            If the account plan does not include calculated fields, this setting allows an account to use them.

        allowExpressionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowExpressSignerCertificate:
          type: string
          description: |
            When set to **true**, signers are required to use Express Digital Signatures.

            **Note**: Only Admin users can change this setting.
        allowExpressSignerCertificateMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowExtendedSendingResourceFile:
          type: string
          description: Boolean that specifies whether resource files can be used for
            extended sending.
        allowExtendedSendingResourceFileMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowExternalSignaturePad:
          type: string
          description: |
            When set to **true**, the account can
            configure and use signature pads for their recipients.

            **Note**: Only Admin users can change this setting.
        allowExternalSignaturePadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowIDVLevel1:
          type: string
          description: When set to **true**, IDV Level 1 is allowed. The default value
            is **false**.
        allowIDVLevel1Metadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowIDVLevel2:
          type: string
          description: ""
        allowIDVLevel2Metadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowIDVLevel3:
          type: string
          description: ""
        allowIDVLevel3Metadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowIDVPlatform:
          type: string
          description: ""
        allowIDVPlatformMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowInPerson:
          type: string
          description: |+
            When set to **true**, the account administrator can enable in-person signing.

            **Note**: Only SysAdmin users can change this setting.

        allowInPersonMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowManagedStamps:
          type: string
          description: When **true**, [Managed Stamps](https://support.docusign.com/en/guides/ndse-admin-guide-managed-stamps)
            are enabled.
        allowManagedStampsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowMarkup:
          type: string
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
        allowMarkupMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowMemberTimeZone:
          type: string
          description: |
            When set to **true**, account users can set their own
            [time zone settings](https://support.docusign.com/en/articles/How-do-I-modify-time-zone-settings-for-my-account).

            **Note**: Only Admin users can change this setting.
        allowMemberTimeZoneMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowMergeFields:
          type: string
          description: |
            When set to **true**, the account can use
            [merge fields](https://support.docusign.com/en/guides/dfs-user-guide-merge-fields-user)
            with DocuSign for Salesforce.
        allowMergeFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowMultipleBrandProfiles:
          type: string
          description: |
            Specifies whether the account supports multiple brands.
        allowMultipleBrandProfilesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowMultipleSignerAttachments:
          type: string
          description: |-
            When set to **true**, recipients can
            upload multiple signer attachments with a single attachment.

            **Note**: Only Admin users can change this setting.
        allowMultipleSignerAttachmentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowNonUSPhoneAuth:
          type: string
          description: |
            Specifies whether users can use
            international numbers
            for phone authentication.
        allowNonUSPhoneAuthMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowOcrOfEnvelopeDocuments:
          type: string
          description: ""
        allowOcrOfEnvelopeDocumentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowOfflineSigning:
          type: string
          description: |-
            When set to **true**,
            [offline signing](https://support.docusign.com/articles/Offline-access-with-the-DocuSign-Mobile-App-for-iOS-iPad-iPhone-iPod-Touch)
            is enabled for the account.

            **Note**: Only Admin users can change this setting.
        allowOfflineSigningMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowOpenTrustSignerCertificate:
          type: string
          description: |-
            When set to **true**, senders can use OpenTrust signer certificates.

            **Note**: Only Admin users can change this setting.
        allowOpenTrustSignerCertificateMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowOrganizations:
          type: string
          description: Boolean that specifies whether [DocuSign Admin](https://developers.docusign.com/orgadmin-api)
            is enabled for the account.
        allowOrganizationsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowPaymentProcessing:
          type: string
          description: |-
            When set to **true**, payment processing is enabled for the account.

            **Note**: Only Admin users can change this setting.
        allowPaymentProcessingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowPersonalSignerCertificate:
          type: string
          description: |-
            When set to **true**, signers can use personal signer certificates.

            **Note**: Only Admin users can change this setting.
        allowPersonalSignerCertificateMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowPhoneAuthentication:
          type: string
          description: Boolean that specifies whether phone authentication is enabled
            for the account.
        allowPhoneAuthenticationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowPhoneAuthOverride:
          type: string
          description: Boolean that specifies whether users can override phone authentication.
        allowPhoneAuthOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowPrivateSigningGroups:
          type: string
          description: Reserved for DocuSign. This property returns the value **false**
            when listing account settings. Read only.
        allowPrivateSigningGroupsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowRecipientConnect:
          type: string
          description: ""
        allowRecipientConnectMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowReminders:
          type: string
          description: |
            When set to **true**,
            an account administrator can to turn on reminders
            and expiration defaults for the account.

            **Note**: Only Admin users can change this setting.
        allowRemindersMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowRemoteNotary:
          type: string
          description: ""
        allowRemoteNotaryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowResourceFileBranding:
          type: string
          description: |
            If **true**,
            resource files can be uploaded in branding.
        allowResourceFileBrandingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSafeBioPharmaSignerCertificate:
          type: string
          description: |
            When set to **true**,
            account administrators can
            specify that signers are
            required to use SAFE-BioPharma digital signatures.

            **Note**: Only Admin users can change this setting.
        allowSafeBioPharmaSignerCertificateMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSecurityAppliance:
          type: string
          description: Boolean that specifies whether a DocuSign Signature Appliance
            can be used with the account.
        allowSecurityApplianceMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSendToCertifiedDelivery:
          type: string
          description: |
            If **true**,
            the account admin can enable the
            Send to Certified Delivery
            feature on the account.
        allowSendToCertifiedDeliveryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSendToIntermediary:
          type: string
          description: |
            If **true**,
            the account admin can enable the Send to Intermediary
            feature on the account.
        allowSendToIntermediaryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowServerTemplates:
          type: string
          description: |
            If **true**,
            the account can use templates.
        allowServerTemplatesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSetEmbeddedRecipientStartURL:
          type: string
          description: ""
        allowSetEmbeddedRecipientStartURLMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSharedTabs:
          type: string
          description: |
            When set to **true**,
            shared tabs are enabled for the account.

            **Note**: Only Admin users can change this setting.
        allowSharedTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSignatureStamps:
          type: string
          description: |-
            When set to **true**, Signature Stamps are enabled.

            **Note**: Only Admin users can change this setting.
        allowSignatureStampsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSignDocumentFromHomePage:
          type: string
          description: |-
            When set to **true**, recipients can sign documents from the home page.

            **Note**: Only Admin users can change this setting.
        allowSignDocumentFromHomePageMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSignerReassign:
          type: string
          description: |
            When set to **true**, the recipient of an envelope sent from this account can reassign it to another person.

            **Note**: Only Admin users can change this setting.
        allowSignerReassignMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSignerReassignOverride:
          type: string
          description: |-
            When set to **true**, an account administrator can override the ability of an envelope recipient to reassign it to another person.

            **Note**: Only Admin users can change this setting.
        allowSignerReassignOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSigningExtensions:
          type: string
          description: Boolean that specifies whether Signing and App Extensions are
            allowed.
        allowSigningExtensionsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSigningGroups:
          type: string
          description: When set to **true**, the account allows signing groups. This
            setting is only shown in responses that list account settings. Read only.
        allowSigningGroupsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSigningInsights:
          type: string
          description: ""
        allowSigningInsightsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSigningRadioDeselect:
          type: string
          description: Boolean that specifies whether the account supports radio buttons
            on tabs [Radio CustomTabType](https://developers.docusign.com/esign-soap-api/reference/Sending-Group/Tab).
        allowSigningRadioDeselectMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSignNow:
          type: string
          description: |
            If **true**,
            the account administrator can enable
            the Sign Now feature.
        allowSignNowMetadata:
          type: string
          description: |
            Metadata that indicates whether the `allowSignNow` property is editable.
        allowSMSDelivery:
          type: string
          description: ""
        allowSMSDeliveryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSocialIdLogin:
          type: string
          description: Deprecated.
        allowSocialIdLoginMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSupplementalDocuments:
          type: string
          description: When **true**, this user can include supplemental documents.
        allowSupplementalDocumentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowUsersToAccessDirectory:
          type: string
          description: ""
        allowUsersToAccessDirectoryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowValueInsights:
          type: string
          description: ""
        allowValueInsightsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        anchorPopulationScope:
          type: string
          description: "This property determines how template anchor tabs are applied.\n\
            \nValid values are:\n\n- `document`: Anchor tabs are applied only to the\
            \ document that you specify. \n- `envelope`: Anchor tabs are applied to\
            \ all of the documents in the envelope associated with the template.\n\
            \n**Note**: When you are using the `anchorPopulationScope` property with\
            \ a Composite Template, the value `document` is supported only with a\
            \ single server template and a single inline template.\n\n"
        anchorPopulationScopeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        anchorTagVersionedPlacementEnabled:
          type: string
          description: |
            Reserved for DocuSign.
        anchorTagVersionedPlacementMetadataEnabled:
          $ref: '#/components/schemas/settingsMetadata'
        attachCompletedEnvelope:
          type: string
          description: |-
            When set to **true**, envelope documents are included as a PDF file attachment to "signing completed" emails.

            **Note**: Only SysAdmin users can change this setting.
        attachCompletedEnvelopeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        authenticationCheck:
          type: string
          description: "Sets when authentication checks are applied for recipient\
            \ envelope access. This setting only applies to the following ID checks:\
            \ \n\n- Phone Authentication\n- SMS Authentication\n- Knowledge-Based\
            \ ID\n\nThis setting takes one of the following options: \n\n- `initial_access`:\
            \ The authentication check always applies the first time a recipient accesses\
            \ the documents. Recipients are not asked to authenticate again when they\
            \ access the documents from the same browser on the same device. If the\
            \ recipient attempts to access the documents from a different browser\
            \ or a different device, the recipient must pass authentication again.\
            \ Once authenticated, that recipient is not challenged again on the new\
            \ device or browser. The ability for a recipient to skip authentication\
            \ for documents is limited to documents sent from the same sending account.\n\
            - `each_access`: Authentication checks apply every time a recipient attempts\
            \ to access the envelope. However, you can configure the Authentication\
            \ Expiration setting to allow recipients to skip authentication when they\
            \ have recently passed authentication by setting a variable time frame.\n\
            \n**Note**: Only Admin users can change this setting.\n"
        authenticationCheckMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        autoNavRule:
          type: string
          description: |
            Specifies how auto-navigation works.
            Valid values are:

            - `off`
            - `required_fields`
            - `required_and_blank_fields`
            - `all_fields`
            - `page_then_required_fields`
            - `page_then_required_and_blank_fields`
            - `page_then_all_fields`
        autoNavRuleMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        autoProvisionSignerAccount:
          type: string
          description: Boolean that specifies whether to automatically provision a
            user membership in the account for accountless recipients. (Also known
            as Just-in-Time provisioning.)
        autoProvisionSignerAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        bccEmailArchive:
          type: string
          description: Boolean that specifies whether BCC for Email Archive is enabled
            for the account. BCC for Email Archive allows you to set up an archive
            email address so that a BCC copy of an envelope is sent only to that address.
        bccEmailArchiveMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        betaSwitchConfiguration:
          type: string
          description: |
            Reserved for DocuSign.
        betaSwitchConfigurationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        billingAddress:
          $ref: '#/components/schemas/addressInformation'
        billingAddressMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        bulkSend:
          type: string
          description: When **true**, this user can use the bulk send feature for
            the account.
        bulkSendMaxCopiesInBatch:
          type: string
          description: ""
        bulkSendMaxUnprocessedEnvelopesCount:
          type: string
          description: ""
        bulkSendMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canSelfBrandSend:
          type: string
          description: When set to **true**, account administrators can self-brand
            their sending console through the DocuSign console.
        canSelfBrandSendMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canSelfBrandSign:
          type: string
          description: When set to **true**, account administrators can self-brand
            their signing console through the DocuSign console.
        canSelfBrandSignMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canUseSalesforceOAuth:
          type: string
          description: ""
        canUseSalesforceOAuthMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        captureVoiceRecording:
          type: string
          description: Reserved for DocuSign.
        captureVoiceRecordingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        cfrUseWideImage:
          type: string
          description: Boolean that specifies whether to use a shorter/wider format
            when generating the CFR Part 11 signature image.
        cfrUseWideImageMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        checkForMultipleAdminsOnAccount:
          type: string
          description: ""
        checkForMultipleAdminsOnAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        chromeSignatureEnabled:
          type: string
          description: Boolean that specifies whether the signers of the envelopes
            from this account use a signature with a DocuSign chrome around it or
            not.
        chromeSignatureEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        commentEmailShowMessageText:
          type: string
          description: |-
            When set to **true**, the text of comments is included in email notifications when a comment is posted.

            **Note**:  If the envelope requires additional recipient authentication, comment text is not included.
        commentEmailShowMessageTextMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        commentsAllowEnvelopeOverride:
          type: string
          description: When set to **true** and comments are enabled for the account,
            senders can disable comments for an envelope through the **Advanced Options**
            menu that appears during the sending process.
        commentsAllowEnvelopeOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        conditionalFieldsEnabled:
          type: string
          description: |-
            When set to **true**, conditional fields can be used in documents.

            **Note**: Only Admin users can change this setting.
        conditionalFieldsEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        consumerDisclosureFrequency:
          type: string
          description: "Speficies how often to display the consumer disclosure.\n\n\
            Valid values are:\n\n- `once`: Per account, the supplemental document\
            \ is displayed once only per `userId`. \n- `always`: Per envelope, the\
            \ supplemental document is displayed once only per `userId`. \n- `each_access`:\
            \ Per envelope, the supplemental document is displayed once only per `recipientId`.\n"
        consumerDisclosureFrequencyMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        convertPdfFields:
          type: string
          description: Boolean that specifies whether to enable PDF form fields to
            get converted to DocuSign secure fields when the document is added or
            uploaded to an envelope.
        convertPdfFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dataPopulationScope:
          type: string
          description: "Specifies how data is shared for tabs with the same tabLabel.\
            \ Valid values are:\n\n- `document`: Tabs in a document with the same\
            \ label populate with the same data.\n- `envelope`: Tabs in all documents\
            \ in the envelope with the same label populate with the same data.\n\n\
            This setting applies to the following tab types: \n\n- Check box \n- Company\n\
            - Data field\n- Drop-down list\n- Full name \n- Formula\n- Note\n- Title\n\
            \n**Note**: Only Admin users can change this setting. Changing this setting\
            \ affects envelopes that have been sent but not completed.           \
            \                                                                    \
            \                                                                    \
            \                                                              "
        dataPopulationScopeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableAutoTemplateMatching:
          type: string
          description: ""
        disableAutoTemplateMatchingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableMobileApp:
          type: string
          description: When **true**, the mobile app distributor key is prevented
            from connecting for account users.
        disableMobileAppMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableMobilePushNotifications:
          type: string
          description: |-
            When set to **true**, push notifications are disabled for the account.

            **Note**: Only Admin users can change this setting.
        disableMobilePushNotificationsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableMobileSending:
          type: string
          description: |-
            When set to **true**, sending from a mobile application is disabled.

            **Note**: Only Admin users can change this setting.
        disableMobileSendingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableMultipleSessions:
          type: string
          description: |-
            When set to **true**, account users cannot be logged into multiple sessions at the same time.

            **Note**: Only Admin users can change this setting.
        disableMultipleSessionsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disablePurgeNotificationsForSenderMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableSignerCertView:
          type: string
          description: When **true**, signers cannot view certificates of completion.
        disableSignerCertViewMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableSignerHistoryView:
          type: string
          description: When **true**, signers cannot view envelope history.
        disableSignerHistoryViewMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableStyleSignature:
          type: string
          description: 'When **true**, the **Select Style** option is hidden from
            signers and they must draw their signature instead. '
        disableStyleSignatureMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableUploadSignature:
          type: string
          description: |-
            When set to **true**, signers cannot upload custom image files of their signature and initials.

            **Note**: Only Admin users can change this setting.
        disableUploadSignatureMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableUserSharing:
          type: string
          description: When **true**, the User Sharing feature is disabled for the
            account.
        disableUserSharingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        displayBetaSwitch:
          type: string
          description: Boolean that specifies whether to display a Beta switch for
            your app.
        displayBetaSwitchMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        documentConversionRestrictions:
          type: string
          description: |
            Sets the account document upload restriction for non-account administrators. Valid values are:

            - `no_restrictions`: There are no restrictions on the type of documents that can be uploaded.
            - `allow_pdf_only`: Non-administrators can only upload PDF files.
            - `no_upload`: Non-administrators cannot upload files.

            **Note**: Only Admin users can change this setting.
        documentConversionRestrictionsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        documentRetention:
          type: string
          description: Sets a document retention period, which controls the number
            of days that DocuSign retains documents after they have reached a completed,declined,
            or voided state. When document retention is enabled for the account, the
            default value is `356` days.
        documentRetentionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        documentRetentionPurgeTabs:
          type: string
          description: |-
            When set to **true** and `documentRetention` is set, document fields and metadata are also purged after the document retention period ends. The default value is **false**.

            **Note**: Only Admins can change this setting.
        documentVisibility:
          type: string
          description: |-
            Configures the Document Visibility feature for the account. Valid values are:

            - `Off`: Document Visibility is not active for the account.
            - `MustSignToViewUnlessSenderAccount`: Document Visibility is enabled for all envelopes sent from the account. Any member of the sending account can view all of the documents in an envelope.
            - `MustSignToViewUnlessSender`: Document Visibility is enabled for all envelopes sent from the account. Only the sender can view all of the documents in an envelope.
            - `SenderCanSetMustSignToViewUnlessSenderAccount`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents within it are still visible to any member of the sending account.
            Vd- `SenderCanSetMustSignToViewUnlessSender`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents in the envelope are visible only to the sender.

            **Note**: For this configuration to take effect, `allowDocumentVisibility` must be set to **true**.
        documentVisibilityMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        emailTemplateVersion:
          type: string
          description: Specifies the version of the email templates used in an account.
            If new signing is selected in a member's Admin page, the user is updated
            to the newest version (1.1), the minimum version of email supported for
            the account.
        emailTemplateVersionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableAccessCodeGenerator:
          type: string
          description: When **true**, enables Access Code Generator on the account.
        enableAccessCodeGeneratorMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableAdvancedPayments:
          type: string
          description: When **true**, enables Advanced Payments for the account.
        enableAdvancedPaymentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableAdvancedPowerForms:
          type: string
          description: When **true**, enables advanced PowerForms for the account.
        enableAdvancedPowerFormsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableAgreementActionsForCLM:
          type: string
          description: ""
        enableAgreementActionsForCLMMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableAgreementActionsForESign:
          type: string
          description: ""
        enableAgreementActionsForESignMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableAutoNav:
          type: string
          description: |-
            When **true**, enables the account to set the AutoNav rule setting, which enables a sender to override the auto-navigation setting per envelope.

            **Note**: To change this setting, you must be a SysAdmin user or `EnableAutoNavByDSAdmin must be set.
        enableAutoNavMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableCalculatedFields:
          type: string
          description: "When set to **true**, calculated fields are enabled for the\
            \ account. \n\n**Note**: This setting can be changed only by Admin users,\
            \ and only if the account-level setting `allowExpression` is set to **true**."
        enableCalculatedFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableClickwraps:
          type: string
          description: Boolean that specifies whether clickwraps are enabled in your
            app. A [clickwrap](https://developers.docusign.com/click-api/guides/)
            is an iframe that you embed in your own website or app.
        enableClickwrapsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableCommentsHistoryDownloadInSigning:
          type: string
          description: ""
        enableCommentsHistoryDownloadInSigningMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableCustomerSatisfactionMetricTracking:
          type: string
          description: When **true**, enables customer satisfaction metric tracking
            for the account.
        enableCustomerSatisfactionMetricTrackingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableDSPro:
          type: string
          description: Reserved for DocuSign.
        enableDSProMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableEnvelopeStampingByAccountAdmin:
          type: string
          description: |-
            When set to **true**, enables the account administrator to control envelope stamping for an account (stamping the `envelopeId` in the the document margins).

            **Note**: This setting can be changed only by Admin users, and only if the account-level setting `enableEnvelopeStampingByDSAdmin` is set to **true**.
        enableEnvelopeStampingByAccountAdminMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableEnvelopeStampingByDSAdmin:
          type: string
          description: When **true**, enables the DocuSign administrator to control
            envelope stamping for an account (placement of the `envelopeId`).
        enableEnvelopeStampingByDSAdminMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableEsignCommunities:
          type: string
          description: ""
        enableEsignCommunitiesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableInBrowserEditor:
          type: string
          description: ""
        enableInBrowserEditorMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enablePaymentProcessing:
          type: string
          description: |-
            When set to **true**, payment processing is enabled for this account.

            **Note**: This setting can be changed only by Admin users, and only if the account-level setting `allowPaymentProcessing` is set.
        enablePaymentProcessingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enablePowerForm:
          type: string
          description: |-
            When set to **true**, enables PowerForms for the account.

            **Note**: Only SysAdmin users can change this setting.
        enablePowerFormDirect:
          type: string
          description: |-
            When set to **true**, enables direct PowerForms for an account. Direct PowerForms are in-session PowerForms.

            **Note**: Only Admin users can change this setting.
        enablePowerFormDirectMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enablePowerFormMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableRecipientDomainValidation:
          type: string
          description: Reserved for DocuSign.
        enableRecipientDomainValidationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableReportLinks:
          type: string
          description: |-
            Enables direct links to envelopes in reports for administrators in the following scopes:
            - `NoEnvelopes`
            - `AllEnvelopes`
            - `OnlyOwnEnvelopes`
        enableReportLinksMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableRequireSignOnPaper:
          type: string
          description: |
            When set to **true**, the account can use the `requireSignOnPaper` option.

            **Note**: Only Admin users can change this setting.
        enableRequireSignOnPaperMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableReservedDomain:
          type: string
          description: |-
            When **true**, account administrators can reserve a web domain and users. Domains are organization-specific reserved internet domains, such as `@exampledomain.com`. You can define policy settings for users of each reserved domain within your organization, export lists of domain users for audit purposes, and manage domain users.

            - Domains may be claimed by an organization.
            - When a domain is claimed by an organization, all users within that domain are added to the organization, even if they have trial or free accounts.
            - You can set domain controls for all users of the domain.
            - You can export information about your organization’s users that are associated with your reserved domains.

            **Note**: Only SysAdmin users can change this setting.
        enableReservedDomainMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableResponsiveSigning:
          type: string
          description: When **true**, enables responsive signing.
        enableResponsiveSigningMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableScheduledRelease:
          type: string
          description: When set to **true**, scheduled releases are enabled. The default
            value is **false**.
        enableScheduledReleaseMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSearch:
          type: string
          description: ""
        enableSearchMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSearchUI:
          type: string
          description: ""
        enableSearchUIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSendingTagsFontSettings:
          type: string
          description: When **true**, enables fonts to be set on tags for the account.
        enableSendingTagsFontSettingsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSendToAgent:
          type: string
          description: |
            When **true**, this account can use the Agent recipient type.

            **Note**: Only SysAdmin users can change this setting.
        enableSendToAgentMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSendToIntermediary:
          type: string
          description: |
            When set to **true**, this account can use the Intermediary recipient type.

            **Note**: Only Admin users can change this setting, and only if `allowSendToIntermediary` is set.
        enableSendToIntermediaryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSendToManage:
          type: string
          description: |
            When set to **true**, this account can use the Editor recipient type.

            **Note**: Only Admin users can change this setting.
        enableSendToManageMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSequentialSigningAPI:
          type: string
          description: |-
            When set to **true**, the account can define the routing
            order of recipients for envelopes sent by using the eSignature API.

            **Note**: Only SysAdmin users can change this setting.
        enableSequentialSigningAPIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSequentialSigningUI:
          type: string
          description: |
            When set to **true**, the account can define the routing order
            of recipients for envelopes sent by using the DocuSign application.

            **Note**: Only SysAdmin users can change this setting.
        enableSequentialSigningUIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSignerAttachments:
          type: string
          description: |-
            When set to **true**, users can use the signing attachments feature to request attachments from signers.

            **Note**: Only Admin users can change this setting.
        enableSignerAttachmentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSigningExtensionComments:
          type: string
          description: When set to **true**, enables comments for the account so that
            signers and recipients can make and respond to comments in documents belonging
            to the envelopes that they are sent.
        enableSigningExtensionCommentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSigningExtensionConversations:
          type: string
          description: When **true**, enables conversation functionality.
        enableSigningExtensionConversationsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSigningOrderSettingsForAccount:
          type: string
          description: When **true**, switches Signing Order to On by default for
            new envelopes.
        enableSigningOrderSettingsForAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSignOnPaper:
          type: string
          description: |
            When set to **true**, a sender can allow signers to use the sign on paper option.

            **Note**: Only Admin users can change this setting.
        enableSignOnPaperMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSignOnPaperOverride:
          type: string
          description: |-
            When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.

            **Note**: Only Admin users can change this setting.
        enableSignOnPaperOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSignWithNotary:
          type: string
          description: |-
            When set to **true**, Sign with Notary functionality is enabled for the account.

            **Note**: Only Admin users can change this setting.
        enableSignWithNotaryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSmartContracts:
          type: string
          description: When set to **true**, blockchain-based [Smart Contracts](https://www.docusign.com/products/blockchain)
            are enabled. The default value is **false**.
        enableSmartContractsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSMSAuthentication:
          type: string
          description: |
            When set to **true**, the account can use SMS authentication.

            **Note**: Only Admin users can change this setting.
        enableSMSAuthenticationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSocialIdLogin:
          type: string
          description: Deprecated.
        enableSocialIdLoginMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableStrikeThrough:
          type: string
          description: When **true**, enables strikethrough formatting in documents.
        enableStrikeThroughMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableTransactionPoint:
          type: string
          description: Reserved for DocuSign.
        enableTransactionPointMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableVaulting:
          type: string
          description: When set to **true**, Vaulting is enabled for the account.
        enableVaultingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableWitnessing:
          type: string
          description: Reserved for DocuSign.
        enableWitnessingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enforceTemplateNameUniqueness:
          type: string
          description: When **true**, the template name must be unique.
        enforceTemplateNameUniquenessMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        envelopeIntegrationAllowed:
          type: string
          description: "Shows the envelope integration rule for the account, which\
            \ indicates whether custom admins can enable Connect for their accounts.\
            \ Enumeration values are: \n\n- `not_allowed`\n- `full` \n\n**Note**:\
            \ Only SysAdmin users can change this setting.                       \
            \                                                          "
        envelopeIntegrationAllowedMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        envelopeIntegrationEnabled:
          type: string
          description: |-
            When **true**, enables Connect for an account. Note that Connect integration requires additional configuration that must be set up for it to take effect; this switch is only the on/off control for the account.

            **Note**: Only Admin users can change this setting, and only when `envelopeIntegrationAllowed` is set.
        envelopeIntegrationEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        envelopeStampingDefaultValue:
          type: string
          description: When set to **true**, envelopes sent by this account automatically
            have the envelope ID stamped in the document margins, unless the sender
            selects not to have the documents stamped.
        envelopeStampingDefaultValueMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        expressSend:
          type: string
          description: Boolean that specifies whether a member of an account can express
            send (without tags) or must send with tags on documents.
        expressSendAllowTabs:
          type: string
          description: Boolean that specifies whether a member of an account can send
            templates without the tags being stripped out, even when the account is
            configured to let its users express send only (they cannot use the tagger).
        expressSendAllowTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        expressSendMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        externalDocumentSources:
          $ref: '#/components/schemas/externalDocumentSources'
        externalSignaturePadType:
          type: string
          description: |
            Specifies the signature pad type.
            Valid values are:

            - `none`
            - `topaz`
            - `e_padv9`
            - `e_pad_integrisign`
            - `topaz_sigplusextlite`

            **Note**: Only Admin users can change this setting.
        externalSignaturePadTypeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        faxOutEnabled:
          type: string
          description: |-
            When set to **true**, fax delivery to recipients is allowed for the account.

            **Note**: Only Admin users can change this setting.
        faxOutEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        guidedFormsHtmlAllowed:
          type: string
          description: When set to **true**, HTML used to implement [Guided Forms](https://www.docusign.com/products/guided-forms)
            is enabled for the account.
        guidedFormsHtmlAllowedMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        hideAccountAddressInCoC:
          type: string
          description: Boolean that specifies whether to hide the account address
            in the Certificate of Completion.
        hideAccountAddressInCoCMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        hidePricing:
          type: string
          description: Boolean that specifies whether to hide the pricing functionality
            for an account.
        hidePricingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        idCheckConfigurations:
          type: array
          description: A list of ID check configuration objects.
          items:
            $ref: '#/components/schemas/idCheckConfiguration'
        idCheckExpire:
          type: string
          description: |-
            Determines when a user's authentication with the account expires. Valid values are:

            - `always`: Users are required to authenticate each time.
            - `variable`: If the authentication for a user is valid and falls within the value for the `idCheckExpireDays` property, the user is not required to authenticate again.

            **Note**: Only Admin users can change this setting.
        idCheckExpireDays:
          type: string
          description: |-
            The number of days before user authentication credentials expire. A value of `0` specifies that users must re-authenticate for each new session.

            **Note**: Only Admin users can change this setting.
        idCheckExpireDaysMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        idCheckExpireMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        idCheckExpireMinutes:
          type: string
          description: The number of minutes before user authentication credentials
            expire.
        idCheckExpireMinutesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        idCheckRequired:
          type: string
          description: |-
            Indicates if authentication is configured for the account. Valid values are:

            - `always`: Authentication checks are performed on every envelope.
            - `never`: Authentication checks are not performed on any envelopes.
            - `optional`: Authentication is configurable per envelope.

            **Note**: Only Admin users can change this setting.
        idCheckRequiredMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        identityVerification:
          type: array
          description: ' '
          items:
            $ref: '#/components/schemas/accountIdentityVerificationWorkflow'
        identityVerificationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        ignoreErrorIfAnchorTabNotFound:
          type: string
          description: Reserved for DocuSign.
        ignoreErrorIfAnchorTabNotFoundMetadataEnabled:
          $ref: '#/components/schemas/settingsMetadata'
        inPersonIDCheckQuestion:
          type: string
          description: |-
            A text field containing the question that an in-person signing host uses to collect personal information from the recipient. The recipient's response to this question is saved and can be viewed in the certificate associated with the envelope.

            **Note**: Only Admin users can change this setting.
        inPersonIDCheckQuestionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        inPersonSigningEnabled:
          type: string
          description: When **true**, in-person signing is enabled for the account.
        inPersonSigningEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        inSessionEnabled:
          type: string
          description: |-
            When **true**, the account can send in-session (embedded) envelopes.

            **Note**: Only Admin users can change this setting.
        inSessionEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        inSessionSuppressEmails:
          type: string
          description: |-
            When set to **true**, emails are not sent to the in-session (embedded) recipients on an envelope.

            **Note**: Only Admin users can change this setting.
        inSessionSuppressEmailsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        maximumSigningGroups:
          type: string
          description: |-
            The maximum number of signing groups allowed on the account. The default value is `50`. This setting is only shown in responses that list account settings.

            **Note**: Only SysAdmin users can change this setting.
        maximumSigningGroupsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        maximumUsersPerSigningGroup:
          type: string
          description: |-
            The maximum number of users per signing group. The default value is `50`. This setting is only shown in responses that list account settings.

            **Note**: Only SysAdmin users can change this setting.
        maximumUsersPerSigningGroupMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        maxNumberOfCustomStamps:
          type: string
          description: The maximum number of custom stamps.
        mobileSessionTimeout:
          type: string
          description: |-
            The number of minutes of inactivity before a mobile user is automatically logged out of the system. Valid values are `1` to `120` minutes. The default value is `20` minutes.

            **Note**: Only Admin users can change this setting.
        mobileSessionTimeoutMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        numberOfActiveCustomStamps:
          type: string
          description: The number of active custom stamps associated with the account.
            DocuSign calculates this number automatically. This property is only visible
            to the DocuSign account manager.
        optInMobileSigningV02:
          type: string
          description: Boolean that specifies whether to opt in for Signing v02 on
            Mobile Devices functionality.
        optInMobileSigningV02Metadata:
          $ref: '#/components/schemas/settingsMetadata'
        optOutAutoNavTextAndTabColorUpdates:
          type: string
          description: Boolean that allows envelope senders to opt out of the recipient
            signing auto-navigation feature and opt out of updating tab font color.
        optOutAutoNavTextAndTabColorUpdatesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        optOutNewPlatformSeal:
          type: string
          description: Boolean that specifies whether to allow envelope senders to
            opt out of using the new platform seal.
        optOutNewPlatformSealPlatformMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        phoneAuthRecipientMayProvidePhoneNumber:
          type: string
          description: |-
            When set to **true**, senders can allow recipients to provide a phone number for the Phone Authentication process.

            **Note**: Only Admin users can change this setting.
        phoneAuthRecipientMayProvidePhoneNumberMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        pkiSignDownloadedPDFDocs:
          type: string
          description: "The policy for adding a digital certificate to downloaded,\
            \ printed, and emailed documents. \n\nPossible values are: \n\n- `no_sign`\n\
            - `no_sign_allow_user_override`\n- `yes_sign` (Specifies that PDF files\
            \ downloaded from the platform are signed.)\n\n**Note**: Only Admin users\
            \ can change this setting.\n"
        pkiSignDownloadedPDFDocsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        recipientsCanSignOffline:
          type: string
          description: |
            When set to **true**,
            recipients receiving envelopes from this account
            can sign offline.

            **Note**: Only Admin users can change this setting.
        recipientsCanSignOfflineMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        recipientSigningAutoNavigationControl:
          type: string
          description: |
            When set to **true**, recipients receiving envelopes from this account can override auto-navigation functionality.

            **Note**: Only Admin users can change this setting.
        recipientSigningAutoNavigationControlMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        require21CFRpt11Compliance:
          type: string
          description: |
            When set to **true**,
            recipients are required
            to use a 21 CFR part 11-compliant signing experience.

            **Note**: Only Admin users can change this setting.
        require21CFRpt11ComplianceMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        requireDeclineReason:
          type: string
          description: |
            When set to **true**, signers who decline to sign an envelope sent from this account
            are required to provide a reason for declining.

            **Note**: Only Admin users can change this setting.
        requireDeclineReasonMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        requireExternalUserManagement:
          type: string
          description: |
            When set to **true**, the account requires external management of users.

            **Note**: Only Admin users can change this setting.
        requireExternalUserManagementMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        requireSignerCertificateType:
          type: string
          description: |
            Sets the Digital Signature certificate requirements for sending envelopes.
            Valid values are:

            - `none`: A Digital Signature certificate is not required.
            - `docusign_express`: Signers must use a DocuSign Express certificate.
            - `docusign_personal`: Signers must use a DocuSign personal certificate.
            - `safe`
            - `open_trust`: Signers must use an OpenTrust certificate.
        requireSignerCertificateTypeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        rsaVeridAccountName:
          type: string
          description: |
            The RSA account name.

            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
        rsaVeridPassword:
          type: string
          description: |
            The password for the RSA account.


            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
        rsaVeridRuleset:
          type: string
          description: |
            The RSA rule set used with the account.

            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
        rsaVeridUserId:
          type: string
          description: |
            The user ID for the RSA account.

            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
        selfSignedRecipientEmailDocument:
          type: string
          description: |
            Sets how self-signed documents are presented to the email recipients.
            Valid values are:

            - `include_pdf`: A PDF of the completed document is attached to the email.
            - `include_link`: A secure link to the self-signed documents is included
               in the email.

            **Note**: Only Admin users can change this setting.
        selfSignedRecipientEmailDocumentMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        selfSignedRecipientEmailDocumentUserOverride:
          type: string
          description: |
            When set to **true**, the `selfSignedRecipientEmailDocument` user setting
            can be set for an individual user.
            The user setting overrides the account setting.

            **Note**: Only Admin users can change this account setting.
        selfSignedRecipientEmailDocumentUserOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        senderCanSignInEachLocation:
          type: string
          description: |
            When set to **true**, a signer can draw their signature in each
            location where a sign or initial tab exists. This functionality
            is typically used for mobile signing.

            **Note**: Only Admin users can change this setting.
        senderCanSignInEachLocationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        senderMustAuthenticateSigning:
          type: string
          description: |
            When set to **true**, a sender who is also a recipient of an envelope
            must follow the authentication requirements for the envelope.

            **Note**: Only Admin users can change this setting.
        senderMustAuthenticateSigningMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sendingTagsFontColor:
          type: string
          description: |
            The account-wide default font color to use for the content of the tab.

            Valid values are:

            - `Black`
            - `BrightBlue`
            - `BrightRed`
            - `DarkGreen`
            - `DarkRed`
            - `Gold`
            - `Green`
            - `NavyBlue`
            - `Purple`
            - `White`
        sendingTagsFontColorMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sendingTagsFontName:
          type: string
          description: |-
            The account-wide default font to be used for the tab value. Supported fonts include:

            - `Default`
            - `Arial`
            - `ArialNarrow`
            - `Calibri`
            - `CourierNew`
            - `Garamond`
            - `Georgia`
            - `Helvetica`
            - `LucidaConsole`
            - `MSGothic`
            - `MSMincho`
            - `OCR-A`
            - `Tahoma`
            - `TimesNewRoman`
            - `Trebuchet`
            - `Verdana`
        sendingTagsFontNameMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sendingTagsFontSize:
          type: string
          description: |-
            The account-wide default font size used for the information in the tab:

            - `Size7`
            - `Size8`
            - `Size9`
            - `Size10`
            - `Size11`
            - `Size12`
            - `Size14`
            - `Size16`
            - `Size18`
            - `Size20`
            - `Size22`
            - `Size24`
            - `Size26`
            - `Size28`
            - `Size36`
            - `Size48`
            - `Size72`
        sendingTagsFontSizeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sendToCertifiedDeliveryEnabled:
          type: string
          description: |
            When true,
            the account can use the
            certified deliveries recipient type.
        sendToCertifiedDeliveryEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sessionTimeout:
          type: string
          description: |
            The amount of idle activity time, in minutes, before a user is automatically logged out of the system. The minimum setting is 20 minutes and the maximum setting is 120 minutes.
        sessionTimeoutMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        setRecipEmailLang:
          type: string
          description: |
            When set to **true**, senders can set the email language to use for
            each recipient.

            **Note**: Only Admin users can change this setting.
        setRecipEmailLangMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        setRecipSignLang:
          type: string
          description: |
            If **true**,
            setting a unique language for a recipient
            not only affects the email language, but also the signing
            language they are presented with. If **false**, only the email will
            be affected when the sender specifies a unique language for a
            recipient.

            **Note**: Only Admin users can change this setting.
        setRecipSignLangMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sharedTemplateFolders:
          type: string
          description: Boolean that specifies whether an account can use Shared Template
            Folders.
        sharedTemplateFoldersMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        showCompleteDialogInEmbeddedSession:
          type: string
          description: Boolean that specifies whether complete dialogs are displayed
            directly within an application in embedded signing sessions.
        showCompleteDialogInEmbeddedSessionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        showConditionalRoutingOnSend:
          type: string
          description: When set to **true**, Conditional Routing options display to
            senders during the sending experience.
        showConditionalRoutingOnSendMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        showInitialConditionalFields:
          type: string
          description: Boolean that specifies whether conditional field options are
            initially displayed (before a user makes entries).
        showInitialConditionalFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        showLocalizedWatermarks:
          type: string
          description: Boolean that specifies whether localized watermarks are displayed.
        showLocalizedWatermarksMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        showTutorials:
          type: string
          description: |
            If **true**,
            show tutorials.
        showTutorialsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signatureProviders:
          type: array
          description: Names of electronic or digital signature providers that can
            be used.
          items:
            type: string
        signatureProvidersMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signDateFormat:
          type: string
          description: |
            The format for the signature date. Valid values are:

            - `d/M/yyyy`
            - `dd-MM-yy`
            - `dd-MMM-yy`
            - `dd-MM-yyyy`
            - `dd.MM.yyyy`
            - `dd-MMM-yyyy`
            - `dd MMMM yyyy`
            - `M/d/yyyy`
            - `MM-dd-yyyy`
            - `MM/dd/yyyy`
            - `MM/dd/yy`
            - `MMM-dd-yyyy`
            - `MMM d, yyyy`
            - `MMMM d, yyyy`
            - `yyyy-MM-dd`
            - `yyyy-MMM-dd`
            - `yyyy/MM/dd`
            - `yyyy MMMM d`

            **Note**: Only Admin users can change this setting.
        signDateFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerAttachCertificateToEnvelopePDF:
          type: string
          description: |
            When set to **true**,
            the Certificate of Completion is included in the PDF of the envelope documents
            when it is downloaded.

            **Note**: Only Admin users can change this setting.
        signerAttachCertificateToEnvelopePDFMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerAttachConcat:
          type: string
          description: |
            When set to **true**, signer attachments are added to the parent document
            that contains the attachment.
            The default behavior creates
            a new document in the envelope for every signer attachment.

            **Note**: Only Admin users can change this setting.
        signerAttachConcatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerCanCreateAccount:
          type: string
          description: |
            When set to **true**,
            a signer can create a DocuSign account
            after signing.

            **Note**: Only Admin users can change this setting.
        signerCanCreateAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerCanSignOnMobile:
          type: string
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
        signerCanSignOnMobileMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerInSessionUseEnvelopeCompleteEmail:
          type: string
          description: |
            When set to **true**, an "envelope complete" email is sent to an in-session
            (embedded) or offline signer after DocuSign processes the envelope
            if in-session emails are not suppressed.

            **Note**: Only Admin users can change this setting.
        signerInSessionUseEnvelopeCompleteEmailMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerLoginRequirements:
          type: string
          description: |
            Sets the login requirements for signers. Valid values are:

            - `login_not_required`: Signers are not required to log in.
            - `login_required_if_account_holder`: If the signer has a DocuSign account,
              they must log in to sign the document.
            - `login_required_per_session`: The sender cannot send an envelope to anyone
              who does not have a DocuSign account.
            - `login_required_per_envelope`: The sender cannot send an envelope to anyone
              who does not have a DocuSign account, and the signer must also log in for
              each envelope they will sign.


            **Note**: Only Admin users can change this setting. If you use Direct PowerForms
            or captive (embedded signers), the "Account required" settings are bypassed for
            those signers. If your workflow requires that the signer have an account,
            you should not use those methods.
        signerLoginRequirementsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerMustHaveAccount:
          type: string
          description: |
            When set to **true**, senders can only send an envelope to a recipient
            that has a DocuSign account.

            **Note**: Only Account Administrators can change this setting.
        signerMustHaveAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerMustLoginToSign:
          type: string
          description: |
            When set to **true**,
            signers must log in to the DocuSign platform to sign an envelope.

            **Note**: Only Admin users can change this setting.
        signerMustLoginToSignMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signerShowSecureFieldInitialValues:
          type: string
          description: |
            When set to **true**, the initial values of all SecureFields are written
            to the document when it is sent.

            **Note**: Only Admin users can change this setting.
        signerShowSecureFieldInitialValuesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signingSessionTimeout:
          type: string
          description: |
            The number of minutes
            that a signing session stays
            alive without any activity.
        signingSessionTimeoutMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signingUiVersion:
          type: string
          description: |
            Reserved for DocuSign.
        signingUiVersionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signTimeFormat:
          type: string
          description: |
            The format for the signature time. Valid values are:

            - `none`
            - `HH:mm`
            - `h:mm`
            - `HH:mm:ss`
            - `h:mm:ss`
        signTimeFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signTimeShowAmPm:
          type: string
          description: |
            If **true**,
            the time shows the AM or PM indicator.
        signTimeShowAmPmMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        simplifiedSendingEnabled:
          type: string
          description: When set to **true**, simplified sending is enabled for the
            account. The default value is **false**.
        simplifiedSendingEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        singleSignOnEnabled:
          type: string
          description: |
            If **true**,
            single sign-on (SSO) is enabled.
        singleSignOnEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        skipAuthCompletedEnvelopes:
          type: string
          description: |
            If **true**,
            do not require authentication prompt for viewing completed envelopes
        skipAuthCompletedEnvelopesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        socialIdRecipAuth:
          type: string
          description: |
            If **true**,
            recipients can use
            [social ids](https://support.docusign.com/guides/signer-authentication)
            when signing
        socialIdRecipAuthMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        specifyDocumentVisibility:
          type: string
          description: |
            When **true**, senders can specify the visibility of the documents in an envelope at the recipient level.
        specifyDocumentVisibilityMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        startInAdvancedCorrect:
          type: string
          description: |
            If **true**,
            when initiating correction of an in-flight envelope
            the sender starts in advanced correct mode.
        startInAdvancedCorrectMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustAccept:
          type: string
          description: When set to **true**, account users must accept supplemental
            documents when signing.
        supplementalDocumentsMustAcceptMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustRead:
          type: string
          description: When set to **true**, account users must both view and accept
            supplemental documents when signing.
        supplementalDocumentsMustReadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustView:
          type: string
          description: When set to **true**, account users must view supplemental
            documents when signing.
        supplementalDocumentsMustViewMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        suppressCertificateEnforcement:
          type: string
          description: Boolean that specifies whether or not API calls require a x509
            cert in the header of the call.
        suppressCertificateEnforcementMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabAccountSettings:
          $ref: '#/components/schemas/tabAccountSettings'
        timezoneOffsetAPI:
          type: string
          description: |
            Specifies the time zone
            to use with the API.

            Valid values are:

            - `TZ_01_AfghanistanStandardTime`
            - `TZ_02_AlaskanStandardTime`
            - `TZ_03_ArabStandardTime`
            - `TZ_04_ArabianStandardTime`
            - `TZ_05_ArabicStandardTime`
            - `TZ_06_ArgentinaStandardTime`
            - `TZ_07_AtlanticStandardTime`
            - `TZ_08_AUS_CentralStandardTime`
            - `TZ_09_AUS_EasternStandardTime`
            - `TZ_10_AzerbaijanStandardTime`
            - `TZ_11_AzoresStandardTime`
            - `TZ_12_BangladeshStandardTime`
            - `TZ_13_CanadaCentralStandardTime`
            - `TZ_14_CapeVerdeStandardTime`
            - `TZ_15_CaucasusStandardTime`
            - `TZ_16_CentralAustraliaStandardTime`
            - `TZ_17_CentralAmericaStandardTime`
            - `TZ_18_CentralAsiaStandardTime`
            - `TZ_19_CentralBrazilianStandardTime`
            - `TZ_20_CentralEuropeStandardTime`
            - `TZ_21_CentralEuropeanStandardTime`
            - `TZ_22_CentralPacificStandardTime`
            - `TZ_23_CentralStandardTime`
            - `TZ_24_CentralStandardTimeMexico`
            - `TZ_25_ChinaStandardTime`
            - `TZ_26_DatelineStandardTime`
            - `TZ_27_E_AfricaStandardTime`
            - `TZ_28_E_AustraliaStandardTime`
            - `TZ_29_E_EuropeStandardTime`
            - `TZ_30_E_SouthAmericaStandardTime`
            - `TZ_31_EasternStandardTime`
            - `TZ_32_EgyptStandardTime`
            - `TZ_33_EkaterinburgStandardTime`
            - `TZ_34_FijiStandardTime`
            - `TZ_35_FLE_StandardTime`
            - `TZ_36_GeorgianStandardTime`
            - `TZ_37_GMT_StandardTime`
            - `TZ_38_GreenlandStandardTime`
            - `TZ_39_GreenwichStandardTime`
            - `TZ_40_GTB_StandardTime`
            - `TZ_41_HawaiianStandardTime`
            - `TZ_42_IndiaStandardTime`
            - `TZ_43_IranStandardTime`
            - `TZ_44_IsraelStandardTime`
            - `TZ_45_JordanStandardTime`
            - `TZ_46_KaliningradStandardTime`
            - `TZ_47_KamchatkaStandardTime`
            - `TZ_48_KoreaStandardTime`
            - `TZ_49_MagadanStandardTime`
            - `TZ_50_MauritiusStandardTime`
            - `TZ_51_MidAtlanticStandardTime`
            - `TZ_52_MiddleEastStandardTime`
            - `TZ_53_MontevideoStandardTime`
            - `TZ_54_MoroccoStandardTime`
            - `TZ_55_MountainStandardTime`
            - `TZ_56_MountainStandardTimeMMexico`
            - `TZ_57_MyanmarStandardTime`
            - `TZ_58_N_CentralAsiaStandardTime`
            - `TZ_59_NamibiaStandardTime`
            - `TZ_60_NepalStandardTime`
            - `TZ_61_NewZealandStandardTime`
            - `TZ_62_NewfoundlandStandardTime`
            - `TZ_63_NorthAsiaEastStandardTime`
            - `TZ_64_NorthAsiaStandardTime`
            - `TZ_65_PacificSAStandardTime`
            - `TZ_66_PacificStandardTime`
            - `TZ_67_PacificStandardTimeMexico`
            - `TZ_68_PakistanStandardTime`
            - `TZ_69_ParaguayStandardTime`
            - `TZ_70_RomanceStandardTime`
            - `TZ_71_RussianStandardTime`
            - `TZ_72_SAEasternStandardTime`
            - `TZ_73_SAPacificStandardTime`
            - `TZ_74_SAWesternStandardTime`
            - `TZ_75_SamoaStandardTime`
            - `TZ_76_SE_AsiaStandardTime`
            - `TZ_77_SingaporeStandardTime`
            - `TZ_78_SouthAfricaStandardTime`
            - `TZ_79_SriLankaStandardTime`
            - `TZ_80_SyriaStandardTime`
            - `TZ_81_TaipeiStandardTime`
            - `TZ_82_TasmaniaStandardTime`
            - `TZ_83_TokyoStandardTime`
            - `TZ_84_TongaStandardTime`
            - `TZ_85_TurkeyStandardTime`
            - `TZ_86_UlaanbaatarStandardTime`
            - `TZ_87_US_EasternStandardTime`
            - `TZ_88_USMountainStandardTime`
            - `TZ_89_VenezuelaStandardTime`
            - `TZ_90_VladivostokStandardTime`
            - `TZ_91_W_AustraliaStandardTime`
            - `TZ_92_W_CentralAfricaStandardTime`
            - `TZ_93_W_EuropeStandardTime`
            - `TZ_94_WestAsiaStandardTime`
            - `TZ_95_WestPacificStandardTime`
            - `TZ_96_YakutskStandardTime`
        timezoneOffsetAPIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timezoneOffsetUI:
          type: string
          description: |
            Specifies the time zone
            to use in the UI.

            Valid values are:

            - `TZ_01_AfghanistanStandardTime`
            - `TZ_02_AlaskanStandardTime`
            - `TZ_03_ArabStandardTime`
            - `TZ_04_ArabianStandardTime`
            - `TZ_05_ArabicStandardTime`
            - `TZ_06_ArgentinaStandardTime`
            - `TZ_07_AtlanticStandardTime`
            - `TZ_08_AUS_CentralStandardTime`
            - `TZ_09_AUS_EasternStandardTime`
            - `TZ_10_AzerbaijanStandardTime`
            - `TZ_11_AzoresStandardTime`
            - `TZ_12_BangladeshStandardTime`
            - `TZ_13_CanadaCentralStandardTime`
            - `TZ_14_CapeVerdeStandardTime`
            - `TZ_15_CaucasusStandardTime`
            - `TZ_16_CentralAustraliaStandardTime`
            - `TZ_17_CentralAmericaStandardTime`
            - `TZ_18_CentralAsiaStandardTime`
            - `TZ_19_CentralBrazilianStandardTime`
            - `TZ_20_CentralEuropeStandardTime`
            - `TZ_21_CentralEuropeanStandardTime`
            - `TZ_22_CentralPacificStandardTime`
            - `TZ_23_CentralStandardTime`
            - `TZ_24_CentralStandardTimeMexico`
            - `TZ_25_ChinaStandardTime`
            - `TZ_26_DatelineStandardTime`
            - `TZ_27_E_AfricaStandardTime`
            - `TZ_28_E_AustraliaStandardTime`
            - `TZ_29_E_EuropeStandardTime`
            - `TZ_30_E_SouthAmericaStandardTime`
            - `TZ_31_EasternStandardTime`
            - `TZ_32_EgyptStandardTime`
            - `TZ_33_EkaterinburgStandardTime`
            - `TZ_34_FijiStandardTime`
            - `TZ_35_FLE_StandardTime`
            - `TZ_36_GeorgianStandardTime`
            - `TZ_37_GMT_StandardTime`
            - `TZ_38_GreenlandStandardTime`
            - `TZ_39_GreenwichStandardTime`
            - `TZ_40_GTB_StandardTime`
            - `TZ_41_HawaiianStandardTime`
            - `TZ_42_IndiaStandardTime`
            - `TZ_43_IranStandardTime`
            - `TZ_44_IsraelStandardTime`
            - `TZ_45_JordanStandardTime`
            - `TZ_46_KaliningradStandardTime`
            - `TZ_47_KamchatkaStandardTime`
            - `TZ_48_KoreaStandardTime`
            - `TZ_49_MagadanStandardTime`
            - `TZ_50_MauritiusStandardTime`
            - `TZ_51_MidAtlanticStandardTime`
            - `TZ_52_MiddleEastStandardTime`
            - `TZ_53_MontevideoStandardTime`
            - `TZ_54_MoroccoStandardTime`
            - `TZ_55_MountainStandardTime`
            - `TZ_56_MountainStandardTimeMMexico`
            - `TZ_57_MyanmarStandardTime`
            - `TZ_58_N_CentralAsiaStandardTime`
            - `TZ_59_NamibiaStandardTime`
            - `TZ_60_NepalStandardTime`
            - `TZ_61_NewZealandStandardTime`
            - `TZ_62_NewfoundlandStandardTime`
            - `TZ_63_NorthAsiaEastStandardTime`
            - `TZ_64_NorthAsiaStandardTime`
            - `TZ_65_PacificSAStandardTime`
            - `TZ_66_PacificStandardTime`
            - `TZ_67_PacificStandardTimeMexico`
            - `TZ_68_PakistanStandardTime`
            - `TZ_69_ParaguayStandardTime`
            - `TZ_70_RomanceStandardTime`
            - `TZ_71_RussianStandardTime`
            - `TZ_72_SAEasternStandardTime`
            - `TZ_73_SAPacificStandardTime`
            - `TZ_74_SAWesternStandardTime`
            - `TZ_75_SamoaStandardTime`
            - `TZ_76_SE_AsiaStandardTime`
            - `TZ_77_SingaporeStandardTime`
            - `TZ_78_SouthAfricaStandardTime`
            - `TZ_79_SriLankaStandardTime`
            - `TZ_80_SyriaStandardTime`
            - `TZ_81_TaipeiStandardTime`
            - `TZ_82_TasmaniaStandardTime`
            - `TZ_83_TokyoStandardTime`
            - `TZ_84_TongaStandardTime`
            - `TZ_85_TurkeyStandardTime`
            - `TZ_86_UlaanbaatarStandardTime`
            - `TZ_87_US_EasternStandardTime`
            - `TZ_88_USMountainStandardTime`
            - `TZ_89_VenezuelaStandardTime`
            - `TZ_90_VladivostokStandardTime`
            - `TZ_91_W_AustraliaStandardTime`
            - `TZ_92_W_CentralAfricaStandardTime`
            - `TZ_93_W_EuropeStandardTime`
            - `TZ_94_WestAsiaStandardTime`
            - `TZ_95_WestPacificStandardTime`
            - `TZ_96_YakutskStandardTime`
        timezoneOffsetUIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        universalSignatureOptIn:
          type: string
          description: |
            Reserved for DocuSign.
        useAccountLevelEmail:
          type: string
          description: |
            Reserved for DocuSign.
        useAccountLevelEmailMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useConsumerDisclosure:
          type: string
          description: |
            When set to **true**, the account uses an Electronic Record and
            Signature Disclosure Statement.

            **Note**: Only Admin users can change this setting.
        useConsumerDisclosureMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useConsumerDisclosureWithinAccount:
          type: string
          description: When set to **true**, specifies that recipients in the same
            account as the sender must agree to eSign an Electronic Record and Signature
            Disclosure Statement.
        useConsumerDisclosureWithinAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useDerivedKeys:
          type: string
          description: |
            Reserved for DocuSign.
        useDerivedKeysMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useDocuSignExpressSignerCertificate:
          type: string
          description: |
            If **true**,
            signers
            are required to use Express Digital Signatures.
        useDocuSignExpressSignerCertificateMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useMultiAppGroupsData:
          type: string
          description: ""
        useMultiAppGroupsDataMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useNewBlobForPdf:
          type: string
          description: |
            Reserved for DocuSign.
        useNewBlobForPdfMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useSAFESignerCertificates:
          type: string
          description: |
            If **true**,
            signers are
            required to use SAFE digital signatures.
        useSAFESignerCertificatesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        usesAPI:
          type: string
          description: |
            When set to **true**,
            the account can use the API.

            **Note**: Only SysAdmin users can change this setting.
        usesAPIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        useSignatureProviderPlatform:
          type: string
          description: Boolean that specifies whether the account uses the digital
            signature provider platform to eSign.
        useSignatureProviderPlatformMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        validationsAllowed:
          type: string
          description: Boolean that specifies whether validations on recipient email
            domains are allowed.
        validationsAllowedMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        validationsBrand:
          type: string
          description: |
            Valid values are:

            - `docusign`
            - `account`
        validationsBrandMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        validationsCadence:
          type: string
          description: |
            Valid values are:

            - `none`
            - `monthly`
        validationsCadenceMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        validationsEnabled:
          type: string
          description: |
            If **true**,
            enables validations.
        validationsEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        validationsReport:
          type: string
          description: |
            Valid values are:

            - `none`
            - `life_sciences_part11`
        validationsReportMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        waterMarkEnabled:
          type: string
          description: |
            If **true**,
            the
            [watermark feature](https://support.docusign.com/en/articles/How-do-I-manage-the-watermark-for-In-Process-envelopes-sent-from-my-account)
            is enabled for the account.
        waterMarkEnabledMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        writeReminderToEnvelopeHistory:
          type: string
          description: |-
            If **true**,
            sent reminders are included in the envelope history.
        writeReminderToEnvelopeHistoryMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        wurflMinAllowableScreenSize:
          type: string
          description: The smallest screen allowed.
        wurflMinAllowableScreenSizeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: Contains account settings information. Used in requests to set
        property values. Used in responses to report property values.
      x-ds-definition-name: accountSettingsInformation
      x-ms-summary: Contains account settings information. Used in requests to set
        property values. Used in responses to report property values.
    accountSharedAccess:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the envelope.
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        sharedAccess:
          type: array
          description: A list of shared access information of envelope and templates
            for the users specified in the request.
          items:
            $ref: '#/components/schemas/memberSharedItems'
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: Contains shared access information.
      x-ds-definition-name: accountSharedAccess
      x-ms-summary: Contains shared access information.
    accountSignature:
      type: object
      properties:
        adoptedDateTime:
          type: string
          description: The UTC date and time when the user adopted the signature.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customField:
          type: string
          description: ""
        dateStampProperties:
          $ref: '#/components/schemas/dateStampProperties'
        disallowUserResizeStamp:
          type: string
          description: When set to **true**, users may not resize the stamp.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        externalID:
          type: string
          description: Optionally specify an external identifier for the user's signature.
        imageBase64:
          type: string
          description: ""
        imageType:
          type: string
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
        initials150ImageId:
          type: string
          description: The ID of the user's initials image.
        initialsImageUri:
          type: string
          description: The URI for retrieving the image of the user's initials.
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        nrdsId:
          type: string
          description: The National Association of Realtors (NAR) membership ID for
            a user who is a realtor.
        nrdsLastName:
          type: string
          description: The realtor's last name.
        nrdsStatus:
          type: string
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
        phoneticName:
          type: string
          description: The phonetic spelling of the `signatureName`.
        signature150ImageId:
          type: string
          description: The ID of the user's signature image.
        signatureFont:
          type: string
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
        signatureGroups:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/signatureGroup'
        signatureId:
          type: string
          description: Specifies the signature ID associated with the signature name.
            You can use the signature ID in the URI in place of the signature name,
            and the value stored in the `signatureName` property in the body is used.
            This allows the use of special characters (such as "&", "<", ">") in a
            the signature name. Note that with each update to signatures, the returned
            signature ID might change, so the caller will need to trigger off the
            signature name to get the new signature ID.
        signatureImageUri:
          type: string
          description: An endpoint URI that you can use to retrieve the user's signature
            image.
        signatureInitials:
          type: string
          description: Specifies the user's signature in initials format.
        signatureName:
          type: string
          description: Specifies the user's signature name.
        signatureRights:
          type: string
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
        signatureType:
          type: string
          description: Specifies the type of signature.
        signatureUsers:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/signatureUser'
        stampFormat:
          type: string
          description: "The format of a stamp. Valid values are:\n\n- `NameHanko`:\
            \ The stamp represents only the signer's name.\n- `NameDateHanko`: The\
            \ stamp represents the signer's name and the date. "
        stampImageUri:
          type: string
          description: The URI for retrieving the image of the user's stamp.
        stampSizeMM:
          type: string
          description: The physical height of the stamp image (in millimeters) that
            the stamp vendor recommends for displaying the image in PDF documents.
        stampType:
          type: string
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
      description: ""
      x-ds-definition-name: accountSignature
      x-ms-summary: ""
    accountSignatureDefinition:
      type: object
      properties:
        dateStampProperties:
          $ref: '#/components/schemas/dateStampProperties'
        disallowUserResizeStamp:
          type: string
          description: When set to **true**, users may not resize the stamp.
        externalID:
          type: string
          description: Optionally specify an external identifier for the user's signature.
        imageType:
          type: string
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        nrdsId:
          type: string
          description: The National Association of Realtors (NAR) membership ID for
            a user who is a realtor.
        nrdsLastName:
          type: string
          description: The realtor's last name.
        phoneticName:
          type: string
          description: The phonetic spelling of the `signatureName`.
        signatureFont:
          type: string
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
        signatureGroups:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/signatureGroupDef'
        signatureId:
          type: string
          description: Specifies the signature ID associated with the signature name.
            You can use the signature ID in the URI in place of the signature name,
            and the value stored in the `signatureName` property in the body is used.
            This allows the use of special characters (such as "&", "<", ">") in a
            the signature name. Note that with each update to signatures, the returned
            signature ID might change, so the caller will need to trigger off the
            signature name to get the new signature ID.
        signatureInitials:
          type: string
          description: Specifies the user's signature in initials format.
        signatureName:
          type: string
          description: Specifies the user's signature name.
        signatureUsers:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/signatureUserDef'
        stampFormat:
          type: string
          description: "The format of a stamp. Valid values are:\n\n- `NameHanko`:\
            \ The stamp represents only the signer's name.\n- `NameDateHanko`: The\
            \ stamp represents the signer's name and the date. "
        stampSizeMM:
          type: string
          description: The physical height of the stamp image (in millimeters) that
            the stamp vendor recommends for displaying the image in PDF documents.
      description: ""
      x-ds-definition-name: accountSignatureDefinition
      x-ms-summary: ""
    accountSignatureProvider:
      type: object
      properties:
        isRequired:
          type: string
          description: Reserved for DocuSign.
        priority:
          type: string
          description: Reserved for DocuSign.
        signatureProviderDisplayName:
          type: string
          description: Reserved for DocuSign.
        signatureProviderId:
          type: string
          description: Reserved for DocuSign.
        signatureProviderName:
          type: string
          description: |+
            The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures). You can also retrieve the list by using the [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/) method.

            Example: `universalsignaturepen_default`

        signatureProviderOptionsMetadata:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/accountSignatureProviderOption'
        signatureProviderRequiredOptions:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/signatureProviderRequiredOption'
      description: "Contains information abotu the signature provider associated with\
        \ the Identity Verification workflow. \nIf empty, then this specific workflow\
        \ is not intended for signers.\n"
      x-ds-definition-name: accountSignatureProvider
      x-ms-summary: "Contains information abotu the signature provider associated\
        \ with the Identity Verification workflow. \nIf empty, then this specific\
        \ workflow is not intended for signers.\n"
    accountSignatureProviderOption:
      type: object
      properties:
        signatureProviderOptionDisplayName:
          type: string
          description: Reserved for DocuSign.
        signatureProviderOptionId:
          type: string
          description: Reserved for DocuSign.
        signatureProviderOptionName:
          type: string
          description: Reserved for DocuSign.
      description: Reserved for DocuSign.
      x-ds-definition-name: accountSignatureProviderOption
      x-ms-summary: Reserved for DocuSign.
    accountSignatureProviders:
      type: object
      properties:
        signatureProviders:
          type: array
          description: Names of electronic or digital signature providers that can
            be used.
          items:
            $ref: '#/components/schemas/accountSignatureProvider'
      description: ""
      x-ds-definition-name: accountSignatureProviders
      x-ms-summary: ""
    accountSignaturesInformation:
      type: object
      properties:
        accountSignatures:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/accountSignature'
      description: ""
      x-ds-definition-name: accountSignaturesInformation
      x-ms-summary: ""
    accountUISettings:
      type: object
      properties:
        adminMessage:
          $ref: '#/components/schemas/adminMessage'
        askAnAdmin:
          $ref: '#/components/schemas/askAnAdmin'
        enableAdminMessage:
          type: string
          description: ""
        enableAdminMessageMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableAdvancedPaymentsReactEdit:
          type: string
          description: ""
        enableEasySignCanUseMultiTemplateApply:
          type: string
          description: ""
        enableEasySignCanUseMultiTemplateApplyMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableEasySignTemplateUpload:
          type: string
          description: ""
        enableEasySignTemplateUploadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableEnvelopeCopyWithData:
          type: string
          description: ""
        enableEnvelopeCopyWithDataMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableLegacyHomepageLink:
          type: string
          description: ""
        enableLegacyHomepageLinkMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        hideSendAnEnvelope:
          type: string
          description: ""
        hideSendAnEnvelopeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        hideUseATemplate:
          type: string
          description: When set to **true**, the **Templates** menu is hidden from
            account users who are not Admins. The default value is **false**.
        hideUseATemplateInPrepare:
          type: string
          description: ""
        hideUseATemplateInPrepareMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        hideUseATemplateMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        orderBasedRecipientIdGeneration:
          type: string
          description: ""
        orderBasedRecipientIdGenerationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        removeEnvelopeForwarding:
          type: string
          description: ""
        removeEnvelopeForwardingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        shouldRedactAccessCode:
          type: string
          description: ""
        shouldRedactAccessCodeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        uploadNewImageToSignOrInitial:
          type: string
          description: ""
        uploadNewImageToSignOrInitialMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: An object that defines the options that are available to non-administrators
        in the UI.
      x-ds-definition-name: accountUISettings
      x-ms-summary: An object that defines the options that are available to non-administrators
        in the UI.
    addOn:
      type: object
      properties:
        active:
          type: string
          description: Reserved for DocuSign.
        addOnId:
          type: string
          description: Reserved for DocuSign.
        id:
          type: string
          description: A unique ID for the Salesforce object.
        name:
          type: string
          description: Reserved for DocuSign.
      description: Contains information about add ons.
      x-ds-definition-name: addOn
      x-ms-summary: Contains information about add ons.
    addressInformation:
      type: object
      properties:
        address1:
          type: string
          description: |-
            The first line of the user's address.
            Maximum length: 100 characters.
        address2:
          type: string
          description: |-
            The second line of the user's address.
            Maximum length: 100 characters.
        city:
          type: string
          description: 'The user''s city. Maximum length: 40 characters.'
        country:
          type: string
          description: 'The user''s country. Maximum length: 50 characters.'
        fax:
          type: string
          description: A fax number associated with the address, if one is available.
        phone:
          type: string
          description: A phone number associated with the address.
        postalCode:
          type: string
          description: 'The user''s postal code. Maximum length: 20 characters.'
        stateOrProvince:
          type: string
          description: 'The user''s state or province. Maximum length: 40 characters.'
        zipPlus4:
          type: string
          description: ""
      description: Contains address information.
      x-ds-definition-name: addressInformation
      x-ms-summary: Contains address information.
    addressInformationInput:
      type: object
      properties:
        addressInformation:
          $ref: '#/components/schemas/addressInformation'
        displayLevelCode:
          type: string
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
        receiveInResponse:
          type: string
          description: A Boolean value that specifies whether the information must
            be returned in the response.
      description: Contains address input information.
      x-ds-definition-name: addressInformationInput
      x-ms-summary: Contains address input information.
    adminMessage:
      type: object
      properties:
        baseMessage:
          type: string
          description: ""
        moreInformation:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: adminMessage
      x-ms-summary: ""
    agent:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: "The email id of the agent. Notification of the document to\
            \ sign is sent to this email id. \n\nMaximum length: 100 characters. "
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: 'The recipient''s first name. Maximum Length: 50 characters.'
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        lastName:
          type: string
          description: The recipient's last name.
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`."
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: Contains information about an agent recipient. An agent is a recipient
        who can add name and email information for recipients that appear after the
        agent in routing order.
      x-ds-definition-name: agent
      x-ms-summary: Contains information about an agent recipient. An agent is a recipient
        who can add name and email information for recipients that appear after the
        agent in routing order.
    apiRequestLog:
      type: object
      properties:
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        description:
          type: string
          description: |
            A sender-defined description of the line item.
        requestLogId:
          type: string
          description: ""
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
      description: Contains API request log information.
      x-ds-definition-name: apiRequestLog
      x-ms-summary: Contains API request log information.
    apiRequestLogsResult:
      type: object
      properties:
        apiRequestLogs:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/apiRequestLog'
      description: Contains information about mutiple API request logs.
      x-ds-definition-name: apiRequestLogsResult
      x-ms-summary: Contains information about mutiple API request logs.
    approve:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        buttonText:
          type: string
          description: ' Specifies the approval text that displays in the tab. '
        buttonTextMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab ID for the custom tab to
            be applied. You can only use this when adding new tabs for a recipient.
            When used, the new tab inherits all of the properties of the custom tab.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        pageNumber:
          type: string
          description: |
            Specifies the page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to approve documents
        without placing a signature or initials on the
        document.
      x-ds-definition-name: approve
      x-ms-summary: |
        A tab that allows the recipient to approve documents
        without placing a signature or initials on the
        document.
    appStoreProduct:
      type: object
      properties:
        marketPlace:
          type: string
          description: ""
        productId:
          type: string
          description: The Product ID from the AppStore.
      description: Contains information about an APP store product.
      x-ds-definition-name: appStoreProduct
      x-ms-summary: Contains information about an APP store product.
    appStoreReceipt:
      type: object
      properties:
        productId:
          type: string
          description: The Product ID from the AppStore.
        receiptData:
          type: string
          description: 'Reserved: TBD'
      description: Contains information about an APP store receipt.
      x-ds-definition-name: appStoreReceipt
      x-ms-summary: Contains information about an APP store receipt.
    askAnAdmin:
      type: object
      properties:
        email:
          type: string
          description: ""
        message:
          type: string
          description: ""
        name:
          type: string
          description: ""
        phone:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: askAnAdmin
      x-ms-summary: ""
    attachment:
      type: object
      properties:
        accessControl:
          type: string
          description: Valid values are `sender` and `senderAndAllRecipients`.
        attachmentId:
          type: string
          description: The unique identifier for the attachment.
        attachmentType:
          type: string
          description: Specifies the type of the attachment for the recipient.
        data:
          type: string
          description: A Base64-encoded representation of the attachment that is used
            to upload and download the file. File attachments may be up to 50 MB in
            size.
        label:
          type: string
          description: "A label for the attachment. Potential values include: \n\n\
            - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms)\
            \ provide a step-by-step, mobile-ready experience to help signers easily\
            \ complete long or complex forms.\n- `eventNotifications`: A list of envelope-level\
            \ event statuses that trigger Connect to send updates to the endpoint\
            \ specified in the `url` property. \n"
        name:
          type: string
          description: The name of the attachment.
        remoteUrl:
          type: string
          description: The URL of a previously staged chunked upload. Using a chunked
            upload enables you to stage a large, chunkable temp file. You then use
            the `remoteUrl` property to reference the chunked upload as the content
            in attachment and document-related requests. The `remoteUrl` property
            cannot be used for downloads.
      description: Contains information about an attachment.
      x-ds-definition-name: attachment
      x-ms-summary: Contains information about an attachment.
    authenticationMethod:
      type: object
      properties:
        authenticationType:
          type: string
          description: 'Indicates the type of authentication. Valid values are: PhoneAuth,
            STAN, ISCheck, OFAC, AccessCode, AgeVerify, or SSOAuth. '
        lastProvider:
          type: string
          description: 'The last provider that authenticated the user. '
        lastTimestamp:
          type: string
          description: ' The data and time the user last used the authentication method. '
        totalCount:
          type: string
          description: 'The number of times the authentication method was used. '
      description: Contains information about the method used for authentication.
      x-ds-definition-name: authenticationMethod
      x-ms-summary: Contains information about the method used for authentication.
    authenticationStatus:
      type: object
      properties:
        accessCodeResult:
          $ref: '#/components/schemas/eventResult'
        ageVerifyResult:
          $ref: '#/components/schemas/eventResult'
        anySocialIDResult:
          $ref: '#/components/schemas/eventResult'
        facebookResult:
          $ref: '#/components/schemas/eventResult'
        googleResult:
          $ref: '#/components/schemas/eventResult'
        identityVerificationResult:
          $ref: '#/components/schemas/eventResult'
        idLookupResult:
          $ref: '#/components/schemas/eventResult'
        idQuestionsResult:
          $ref: '#/components/schemas/eventResult'
        linkedinResult:
          $ref: '#/components/schemas/eventResult'
        liveIDResult:
          $ref: '#/components/schemas/eventResult'
        ofacResult:
          $ref: '#/components/schemas/eventResult'
        openIDResult:
          $ref: '#/components/schemas/eventResult'
        phoneAuthResult:
          $ref: '#/components/schemas/eventResult'
        salesforceResult:
          $ref: '#/components/schemas/eventResult'
        signatureProviderResult:
          $ref: '#/components/schemas/eventResult'
        smsAuthResult:
          $ref: '#/components/schemas/eventResult'
        sTANPinResult:
          $ref: '#/components/schemas/eventResult'
        twitterResult:
          $ref: '#/components/schemas/eventResult'
        yahooResult:
          $ref: '#/components/schemas/eventResult'
      description: A complex element that contains information about a user's authentication
        status.
      x-ds-definition-name: authenticationStatus
      x-ms-summary: A complex element that contains information about a user's authentication
        status.
    bccEmailAddress:
      type: object
      properties:
        bccEmailAddressId:
          type: string
          description: "Only users with canManageAccount setting can use this option.\
            \ An array of up to 5 email addresses the envelope is sent to as a BCC\
            \ email. \n \nExample: If your account has BCC for Email Archive set up\
            \ for the email address 'archive@mycompany.com' and you send an envelope\
            \ using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com',\
            \ then a copy of the envelope is only sent to the 'salesarchive@mycompany.com'\
            \ email address."
        email:
          type: string
          description: "Specifies the BCC email address. DocuSign verifies that the\
            \ email format is correct, but does not verify that the email is active.Using\
            \ this overrides the BCC for Email Archive information setting for this\
            \ envelope.\n\nMaximum of length: 100 characters. "
      description: Contains information about the BCC email address.
      x-ds-definition-name: bccEmailAddress
      x-ms-summary: Contains information about the BCC email address.
    bccEmailArchive:
      type: object
      properties:
        accountId:
          type: string
          description: The id of the account that owns the BCC email archive configuration.
        bccEmailArchiveId:
          type: string
          description: The id of the BCC email archive configuration.
        created:
          type: string
          description: The UTC DateTime when the BCC email archive configuration was
            created.
        createdBy:
          $ref: '#/components/schemas/userInfo'
        email:
          type: string
          description: |-
            The BCC email address to use for archiving DocuSign messages.

            Example: customer_bcc@example.com
        emailNotificationId:
          type: string
          description: The GUID of the activation email message sent to the BCC email
            address.
        modified:
          type: string
          description: The UTC DateTime when the BCC email archive configuration was
            last modified.
        modifiedBy:
          $ref: '#/components/schemas/userInfo'
        status:
          type: string
          description: |-
            The status of the BCC email address. Possible values are:

            - `activation_sent`: An activation link has been sent to the BCC email address.
            - `active`: The BCC email address is actively used for archiving.
            - `closed`: The BCC email address is no longer used for archiving.
        uri:
          type: string
          description: The helper URI for retrieving the BCC email archive.
      description: This object contains information abut a BCC email archive configuration
        (a BCC email address used to archive DocuSign-generated emails).
      x-ds-definition-name: bccEmailArchive
      x-ms-summary: This object contains information abut a BCC email archive configuration
        (a BCC email address used to archive DocuSign-generated emails).
    bccEmailArchiveHistory:
      type: object
      properties:
        accountId:
          type: string
          description: The id of the account that owns the BCC email archive configuration.
        action:
          type: string
          description: "The action taken on the BCC email archive configuration.\n\
            \nExamples: \n\n- `CREATED`: The BCC email archive configuration has been\
            \ created.\n- `UPDATED`: The BCC email address has been activated by clicking\
            \ on the activation link in the activation email message.\n- `CLOSED`:\
            \ The BCC email address has been marked as closed is no longer used for\
            \ archiving."
        email:
          type: string
          description: "The BCC email address used to archive the emails that DocuSign\
            \ generates. \n\nExample: customer_bcc@example.com"
        modified:
          type: string
          description: The UTC DateTime when the BCC email address was last modified.
        modifiedBy:
          $ref: '#/components/schemas/userInfo'
        status:
          type: string
          description: |-
            The status of the BCC email address. Possible values are:

            - `activation_sent`: An activation link has been sent to the BCC email address.
            - `active`: The BCC email address is actively used for archiving.
            - `closed`: The BCC email address is no longer used for archiving.
      description: Contains details about the history of the BCC email archive configuration.
      x-ds-definition-name: bccEmailArchiveHistory
      x-ms-summary: Contains details about the history of the BCC email archive configuration.
    bccEmailArchiveHistoryList:
      type: object
      properties:
        bccEmailArchiveHistory:
          type: array
          description: A list of changes to the BCC email archive configuration.
          items:
            $ref: '#/components/schemas/bccEmailArchiveHistory'
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: bccEmailArchiveHistoryList
      x-ms-summary: ""
    bccEmailArchiveList:
      type: object
      properties:
        bccEmailArchives:
          type: array
          description: A list of  BCC email archive configurations.
          items:
            $ref: '#/components/schemas/bccEmailArchive'
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: Contains a list of BCC email archive configurations.
      x-ds-definition-name: bccEmailArchiveList
      x-ms-summary: Contains a list of BCC email archive configurations.
    billingCharge:
      type: object
      properties:
        allowedQuantity:
          type: string
          description: 'Reserved: TBD'
        blocked:
          type: string
          description: 'Reserved: TBD'
        chargeName:
          type: string
          description: |-
            Provides information on what services the charge item is for.

            The following table provides a description of the different chargeName values available at this time.

            | chargeName | Description |
            | --- | --- |
            | id_check | ID Check Charge |
            | in_person_signing | In Person Signing charge |
            | envelopes Included | Sent Envelopes for the account |
            | age_verify | Age verification check |
            | ofac | OFAC Check |
            | id_confirm | ID confirmation check |
            | student_authentication | STAN PIN authentication check |
            | wet_sign_fax | Pages for returning signed documents by fax |
            | attachment_fax | Pages for returning attachments by fax |
            | phone_authentication | Phone authentication charge |
            | powerforms | PowerForm envelopes sent |
            | signer_payments | Payment processing charge |
            | outbound_fax | Send by fax charge |
            | bulk_recipient_envelopes | Bulk Recipient Envelopes sent |
            | sms_authentications | SMS authentication charge |
            | saml_authentications | SAML authentication charge |
            | express_signer_certificate | DocuSign Express Certificate charge |
            | personal_signer_certificate | Personal Signer Certificate charge |
            | safe_certificate | SAFE BioPharma Signer Certificate charge |
            | seats | Included active seats charge |
            | open_trust_certificate | OpenTrust Signer Certificate charge |
        chargeType:
          type: string
          description: 'Reserved: TBD'
        chargeUnitOfMeasure:
          type: string
          description: 'Reserved: TBD'
        discounts:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/billingDiscount'
        firstEffectiveDate:
          type: string
          description: ""
        includedQuantity:
          type: string
          description: ""
        incrementalQuantity:
          type: string
          description: 'Reserved: TBD'
        lastEffectiveDate:
          type: string
          description: ""
        prices:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/billingPrice'
        unitPrice:
          type: string
          description: 'Reserved: TBD'
        usedQuantity:
          type: string
          description: ""
      description: Contains information about a billing charge.
      x-ds-definition-name: billingCharge
      x-ms-summary: Contains information about a billing charge.
    billingChargeResponse:
      type: object
      properties:
        billingChargeItems:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingCharge'
      description: Defines a billing charge response object.
      x-ds-definition-name: billingChargeResponse
      x-ms-summary: Defines a billing charge response object.
    billingDiscount:
      type: object
      properties:
        beginQuantity:
          type: string
          description: 'Reserved: TBD'
        discount:
          type: string
          description: ""
        endQuantity:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: billingDiscount
      x-ms-summary: ""
    billingInvoice:
      type: object
      properties:
        amount:
          type: string
          description: The total amount of the purchase.
        balance:
          type: string
          description: 'Reserved: TBD'
        dueDate:
          type: string
          description: 'Reserved: TBD'
        invoiceId:
          type: string
          description: 'Reserved: TBD'
        invoiceItems:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingInvoiceItem'
        invoiceNumber:
          type: string
          description: 'Reserved: TBD'
        invoiceUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            invoice information.
        nonTaxableAmount:
          type: string
          description: ""
        pdfAvailable:
          type: string
          description: ""
        taxableAmount:
          type: string
          description: ""
      description: Contains information about a billing invoice.
      x-ds-definition-name: billingInvoice
      x-ms-summary: Contains information about a billing invoice.
    billingInvoiceItem:
      type: object
      properties:
        chargeAmount:
          type: string
          description: 'Reserved: TBD'
        chargeName:
          type: string
          description: 'Reserved: TBD'
        invoiceItemId:
          type: string
          description: 'Reserved: TBD'
        quantity:
          type: string
          description: The quantity of envelopes to add to the account.
        unitPrice:
          type: string
          description: 'Reserved: TBD'
      description: Contains information about an item on a billing invoice.
      x-ds-definition-name: billingInvoiceItem
      x-ms-summary: Contains information about an item on a billing invoice.
    billingInvoicesResponse:
      type: object
      properties:
        billingInvoices:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingInvoice'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
      description: Defines a billing invoice response object.
      x-ds-definition-name: billingInvoicesResponse
      x-ms-summary: Defines a billing invoice response object.
    billingInvoicesSummary:
      type: object
      properties:
        billingInvoices:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingInvoice'
        pastDueBalance:
          type: string
          description: ""
        paymentAllowed:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: billingInvoicesSummary
      x-ms-summary: ""
    billingPayment:
      type: object
      properties:
        amount:
          type: string
          description: 'Reserved: TBD'
        invoiceId:
          type: string
          description: 'Reserved: TBD'
        paymentId:
          type: string
          description: ""
      description: Contains information on a billing plan.
      x-ds-definition-name: billingPayment
      x-ms-summary: Contains information on a billing plan.
    billingPaymentItem:
      type: object
      properties:
        amount:
          type: string
          description: The total amount of the purchase.
        description:
          type: string
          description: |
            A sender-defined description of the line item.
        paymentDate:
          type: string
          description: ""
        paymentId:
          type: string
          description: ""
        paymentNumber:
          type: string
          description: "When set to **true**, a PDF version of the invoice is available.\
            \ \n\nTo get the PDF, make the call again and change \"Accept:\" in the\
            \ header to \"Accept: application/pdf\"."
      description: Defines a billing payment request object.
      x-ds-definition-name: billingPaymentItem
      x-ms-summary: Defines a billing payment request object.
    billingPaymentRequest:
      type: object
      properties:
        paymentAmount:
          type: string
          description: The payment amount for the past due invoices. This value must
            match the pastDueBalance value retrieved using Get Past Due Invoices.
      description: ""
      x-ds-definition-name: billingPaymentRequest
      x-ms-summary: ""
    billingPaymentResponse:
      type: object
      properties:
        billingPayments:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingPayment'
      description: Defines an billing payment response object.
      x-ds-definition-name: billingPaymentResponse
      x-ms-summary: Defines an billing payment response object.
    billingPaymentsResponse:
      type: object
      properties:
        billingPayments:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingPaymentItem'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
      description: Defines a billing payments response object.
      x-ds-definition-name: billingPaymentsResponse
      x-ms-summary: Defines a billing payments response object.
    billingPlan:
      type: object
      properties:
        appStoreProducts:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/appStoreProduct'
        currencyPlanPrices:
          type: array
          description: Contains the `currencyCode` and `currencySymbol` for the alternate
            currency values for `envelopeFee`, `fixedFee`, and `seatFee` that are
            configured for this plan feature set.
          items:
            $ref: '#/components/schemas/currencyPlanPrice'
        enableSupport:
          type: string
          description: When set to **true**, customer support is provided as part
            of the account plan.
        includedSeats:
          type: string
          description: The number of seats (users) included in the plan.
        otherDiscountPercent:
          type: string
          description: |-
            Any other percentage discount for the plan.

            Example: `"0.00"`
        paymentCycle:
          type: string
          description: ' The payment cycle associated with the plan. The possible
            values are: Monthly or Annually. '
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        perSeatPrice:
          type: string
          description: The per seat price for the plan.
        planClassification:
          type: string
          description: "Identifies the type of plan. Examples include:\n\n- `business`\n\
            - `corporate`\n- `enterprise` \n- `free`"
        planFeatureSets:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/featureSet'
        planId:
          type: string
          description: DocuSign's id for the account plan.
        planName:
          type: string
          description: |2+

        seatDiscounts:
          type: array
          description: A complex type that returns information about any seat discounts.
            It contains the information `BeginSeatCount`, `EndSeatCount` and `SeatDiscountPercent`.
          items:
            $ref: '#/components/schemas/seatDiscount'
        supportIncidentFee:
          type: string
          description: |-
            The support incident fee charged for each support incident.

            Example: `"$0.00"`
        supportPlanFee:
          type: string
          description: |-
            The support plan fee charged for this plan.

            Example: `"$0.00"`
      description: Contains information about a billing plan.
      x-ds-definition-name: billingPlan
      x-ms-summary: Contains information about a billing plan.
    billingPlanInformation:
      type: object
      properties:
        appStoreReceipt:
          $ref: '#/components/schemas/appStoreReceipt'
        billingAddress:
          $ref: '#/components/schemas/accountAddress'
        creditCardInformation:
          $ref: '#/components/schemas/creditCardInformation'
        directDebitProcessorInformation:
          $ref: '#/components/schemas/directDebitProcessorInformation'
        downgradeReason:
          type: string
          description: (Optional) The user's reason for downgrading their billing
            plan.
        enableSupport:
          type: string
          description: When set to **true**, customer support is provided as part
            of the account plan.
        includedSeats:
          type: string
          description: The number of seats (users) included in the plan.
        incrementalSeats:
          type: string
          description: Reserved for DocuSign.
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        paymentProcessorInformation:
          $ref: '#/components/schemas/paymentProcessorInformation'
        planInformation:
          $ref: '#/components/schemas/planInformation'
        referralInformation:
          $ref: '#/components/schemas/referralInformation'
        renewalStatus:
          type: string
          description: "The renewal status of the account. Possible values are:\n\n\
            - `auto`: The account automatically renews. \n- `queued_for_close`: The\
            \ account will be closed at the billingPeriodEndDate. \n- queued_for_downgrade`:\
            \ The account will be downgraded at the `billingPeriodEndDate`."
        saleDiscountAmount:
          type: string
          description: Reserved for DocuSign.
        saleDiscountFixedAmount:
          type: string
          description: Reserved for DocuSign.
        saleDiscountPercent:
          type: string
          description: Reserved for DocuSign.
        saleDiscountPeriods:
          type: string
          description: Reserved for DocuSign.
        saleDiscountSeatPriceOverride:
          type: string
          description: Reserved for DocuSign.
      description: This object contains details about a billing plan.
      x-ds-definition-name: billingPlanInformation
      x-ms-summary: This object contains details about a billing plan.
    billingPlanPreview:
      type: object
      properties:
        currencyCode:
          type: string
          description: Specifies the ISO currency code for the account.
        invoice:
          $ref: '#/components/schemas/billingInvoice'
        isProrated:
          type: string
          description: When set to **true**, the billing plan is prorated.
        subtotalAmount:
          type: string
          description: ""
        taxAmount:
          type: string
          description: ""
        totalAmount:
          type: string
          description: ""
      description: Information used to provide a preview of a billing plan.
      x-ds-definition-name: billingPlanPreview
      x-ms-summary: Information used to provide a preview of a billing plan.
    billingPlanResponse:
      type: object
      properties:
        billingPlan:
          $ref: '#/components/schemas/billingPlan'
        successorPlans:
          type: array
          description: A list of billing plans that the current billing plan can be
            rolled into.
          items:
            $ref: '#/components/schemas/billingPlan'
      description: Defines a billing plan response object.
      x-ds-definition-name: billingPlanResponse
      x-ms-summary: Defines a billing plan response object.
    billingPlansResponse:
      type: object
      properties:
        billingPlans:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingPlan'
      description: Defines a billing plans response object.
      x-ds-definition-name: billingPlansResponse
      x-ms-summary: Defines a billing plans response object.
    billingPlanUpdateResponse:
      type: object
      properties:
        accountPaymentMethod:
          type: string
          description: "The type of payment method used for the account. Valid values\
            \ are:\n\n- `credit_card`\n- "
        billingPlanPreview:
          $ref: '#/components/schemas/billingPlanPreview'
        currencyCode:
          type: string
          description: Specifies the ISO currency code for the account.
        includedSeats:
          type: string
          description: The number of seats (users) included in the plan.
        paymentCycle:
          type: string
          description: "The payment cycle associated with the plan. The possible values\
            \ are: \n\n- `Monthly`\n- `Annually` "
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        planId:
          type: string
          description: DocuSign's id for the account plan.
        planName:
          type: string
          description: "The name of the billing plan used for the account.\n\nExamples:\
            \ \n\n- `Personal - Annual`\n- `Unlimited Envelope Subscription - Annual\
            \ Billing`"
      description: Defines a billing plan update response object.
      x-ds-definition-name: billingPlanUpdateResponse
      x-ms-summary: Defines a billing plan update response object.
    billingPrice:
      type: object
      properties:
        beginQuantity:
          type: string
          description: 'Reserved: TBD'
        endQuantity:
          type: string
          description: ""
        unitPrice:
          type: string
          description: 'Reserved: TBD'
      description: ""
      x-ds-definition-name: billingPrice
      x-ms-summary: ""
    brand:
      type: object
      properties:
        brandCompany:
          type: string
          description: The name of the company associated with the brand.
        brandId:
          type: string
          description: The ID used to identify a specific brand in API calls.
        brandLanguages:
          type: array
          description: |-
            An array of two-letter codes for the languages that you want to use with the brand. The supported languages are:

            - Arabic (`ar`)
            - Armenian (`hy`)
            - Bahasa Indonesia (`id`)
            - Bahasa Malay (`ms`)
            - Bulgarian (`bg`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Czech (`cs`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English UK (`en_GB`)
            - English US (`en`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canada (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brasil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukranian (`uk`)
            - Vietnamese (`vi`)
          items:
            type: string
        brandName:
          type: string
          description: The name of the brand.
        colors:
          type: array
          description: |-
            An array of name-value pairs specifying the colors that the brand uses for the following elements:

            - Button background
            - Button text
            - Header background
            - Header text
          items:
            $ref: '#/components/schemas/nameValue'
        defaultBrandLanguage:
          type: string
          description: |-
            The two-letter code for the language that you want to use as the brand default. The supported languages are:

            - Arabic (`ar`)
            - Armenian (`hy`)
            - Bahasa Indonesia (`id`)
            - Bahasa Malay (`ms`)
            - Bulgarian (`bg`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Czech (`cs`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English UK (`en_GB`)
            - English US (`en`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canada (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brasil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukranian (`uk`)
            - Vietnamese (`vi`)
        emailContent:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/brandEmailContent'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        isOverridingCompanyName:
          type: boolean
          description: When **true**, the `brandCompany` property is overriding the
            name of the company in the account settings.
        isSendingDefault:
          type: boolean
          description: When **true**, the sending brand is the default brand for sending
            new envelopes.
        isSigningDefault:
          type: boolean
          description: When **true**, the siging brand is the default brand for the
            signing experience.
        landingPages:
          type: array
          description: |-
            An array of name/value pairs specifying the pages to which the user is redirected after the following events occur:

            - Signing Completed
            - Viewed Exit
            - Finish Later
            - Decline
            - Session Timeout
            - Authentication Failure

            If you do not specify landing pages, the DocuSign default pages are used.
          items:
            $ref: '#/components/schemas/nameValue'
        links:
          type: array
          description: An array of `brandLink` objects that contain information about
            the links that the brand uses.
          items:
            $ref: '#/components/schemas/brandLink'
        logos:
          $ref: '#/components/schemas/brandLogos'
        resources:
          $ref: '#/components/schemas/brandResourceUrls'
      description: Information about a brand that is associated with an account. A
        brand applies custom styles and text to an envelope.
      x-ds-definition-name: brand
      x-ms-summary: Information about a brand that is associated with an account.
        A brand applies custom styles and text to an envelope.
    brandEmailContent:
      type: object
      properties:
        content:
          type: string
          description: Deprecated.
        emailContentType:
          type: string
          description: Deprecated.
        emailToLink:
          type: string
          description: Deprecated.
        linkText:
          type: string
          description: Deprecated.
      description: Deprecated.
      x-ds-definition-name: brandEmailContent
      x-ms-summary: Deprecated.
    brandLink:
      type: object
      properties:
        linkText:
          type: string
          description: The text used for the link.
        linkType:
          type: string
          description: |-
            The type of link. Valid values include:

            - `aboutDocusign`
            - `closeButton`
        showLink:
          type: string
          description: When **true**, the link displays to the recipient.
        urlOrMailTo:
          type: string
          description: The URL or mailto address of the link.
      description: Information about a link that a brand uses.
      x-ds-definition-name: brandLink
      x-ms-summary: Information about a link that a brand uses.
    brandLogos:
      type: object
      properties:
        email:
          type: string
          description: The URI for the logo that the brand uses in the header of email
            messages.
        primary:
          type: string
          description: The URI for the brand's primary logo.
        secondary:
          type: string
          description: The URI for the brand's secondary logo.
      description: Information about the logos associated with the brand.
      x-ds-definition-name: brandLogos
      x-ms-summary: Information about the logos associated with the brand.
    brandRequest:
      type: object
      properties:
        brandId:
          type: string
          description: The ID of the brand used in API calls
      description: This request object contains information about a specific brand.
      x-ds-definition-name: brandRequest
      x-ms-summary: This request object contains information about a specific brand.
    brandResources:
      type: object
      properties:
        createdByUserInfo:
          $ref: '#/components/schemas/userInfo'
        createdDate:
          type: string
          description: The date and time that the brand resource was created.
        dataNotSavedNotInMaster:
          type: array
          description: Deprecated.
          items:
            type: string
        modifiedByUserInfo:
          $ref: '#/components/schemas/userInfo'
        modifiedDate:
          type: string
          description: The date on which this user record was last modified.
        modifiedTemplates:
          type: array
          description: |-
            This property is returned in the response to the [AccountBrands::listResources][listResources] request. It contains a list of any email templates that have been modified to differ from the master resource files.

            [listResources]: https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/AccountBrands/listResources
          items:
            type: string
        resourcesContentType:
          type: string
          description: |-
            The type of brand resource file. A brand uses a different resource file to control each of the following experiences:

            - Sending (`sending`)
            - Signing (`signing`)
            - Email messages (`email`)
            - Captive (embedded) signing (`signing_captive`)

            You can modify the default email messages and formats in these files and upload them to your brand to customize the user experience.
        resourcesContentUri:
          type: string
          description: The URI for the brand resource file.
      description: Information about the resource files that the brand uses for the
        email, signing, sending, and captive (embedded) signing experiences.
      x-ds-definition-name: brandResources
      x-ms-summary: Information about the resource files that the brand uses for the
        email, signing, sending, and captive (embedded) signing experiences.
    brandResourcesList:
      type: object
      properties:
        resourcesContentTypes:
          type: array
          description: A list of resources that the brand uses.
          items:
            $ref: '#/components/schemas/brandResources'
      description: ""
      x-ds-definition-name: brandResourcesList
      x-ms-summary: ""
    brandResourceUrls:
      type: object
      properties:
        email:
          type: string
          description: The URI for the email resource file that the brand uses.
        sending:
          type: string
          description: The URI for the sending resource file that the brand uses.
        signing:
          type: string
          description: The URI for the signing resource file that the brand uses.
        signingCaptive:
          type: string
          description: The URI for the captive (embedded) signing resource file that
            the brand uses.
      description: "Brands use resource files to style the following experiences:\
        \ \n\n- Email\n- Sending\n- Signing\n- Captive (embedded) signing \n\nYou\
        \ can modify these resource files to customize these experiences."
      x-ds-definition-name: brandResourceUrls
      x-ms-summary: "Brands use resource files to style the following experiences:\
        \ \n\n- Email\n- Sending\n- Signing\n- Captive (embedded) signing \n\nYou\
        \ can modify these resource files to customize these experiences."
    brandsRequest:
      type: object
      properties:
        brands:
          type: array
          description: A list of brands.
          items:
            $ref: '#/components/schemas/brandRequest'
      description: Details about one or more brands.
      x-ds-definition-name: brandsRequest
      x-ms-summary: Details about one or more brands.
    brandsResponse:
      type: object
      properties:
        brands:
          type: array
          description: A list of brands.
          items:
            $ref: '#/components/schemas/brand'
        recipientBrandIdDefault:
          type: string
          description: The brand that envelope recipients see when a brand is not
            explicitly set.
        senderBrandIdDefault:
          type: string
          description: The brand that envelope senders see when a brand is not explicitly
            set.
      description: ""
      x-ds-definition-name: brandsResponse
      x-ms-summary: ""
    bulkEnvelope:
      type: object
      properties:
        bulkRecipientRow:
          type: string
          description: The row of the recipient in the CSV file used to create the
            bulk recipient list.
        bulkStatus:
          type: string
          description: |-
            Indicates the status of the bulk send operation. Returned values can be:
            - `queued`
            - `processing`
            - `sent`
            - `failed`
        email:
          type: string
          description: The email address of the recipient assigned to this envelope
            transaction.
        envelopeId:
          type: string
          description: GUID of the bulk envelope.
        envelopeUri:
          type: string
          description: The URI for retrieving the envelope or envelopes.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        name:
          type: string
          description: The name of the recipient assigned to this envelope transaction.
        submittedDateTime:
          type: string
          description: The date and time on which the bulk envelope was created.
        transactionId:
          type: string
          description: Identifier for the envelope transaction. The ID is a sender-generated
            value and is valid in the DocuSign system for 7 days. We recommend that
            you use a transaction ID for offline signing to ensure that an envelope
            is not sent multiple times. You can use the transaction ID to determine
            an envelope's status (queued, processing, sent, or failed) in cases where
            the Internet connection is lost before envelope status is returned.
      description: ""
      x-ds-definition-name: bulkEnvelope
      x-ms-summary: ""
    bulkEnvelopeStatus:
      type: object
      properties:
        batchId:
          type: string
          description: Specifies an identifier which can be used to retrieve a more
            detailed status of individual bulk recipient batches.
        batchSize:
          type: string
          description: The number of items returned in this response.
        bulkEnvelopes:
          type: array
          description: A list of bulk envelope objects.
          items:
            $ref: '#/components/schemas/bulkEnvelope'
        bulkEnvelopesBatchUri:
          type: string
          description: URI at which you can retrieve the batch envelopes.
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        failed:
          type: string
          description: 'The number of entries with a status of failed. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        queued:
          type: string
          description: 'The number of entries with a status of queued. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        sent:
          type: string
          description: The number of entries with a status of sent.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        submittedDate:
          type: string
          description: The date on which the bulk envelope was created.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: bulkEnvelopeStatus
      x-ms-summary: ""
    bulkRecipient:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        email:
          type: string
          description: "Specifies the recipient's email address. \n\nMaximum length:\
            \ 100 characters."
        errorDetails:
          type: array
          description: Array or errors.
          items:
            $ref: '#/components/schemas/errorDetails'
        identification:
          type: string
          description: |-
            Specifies the authentication check used for the signer. If blank then no authentication check is required for the signer. Only one value can be used in this field.

            The acceptable values are:

            * KBA: Enables the normal ID check authentication set up for your account.
            * Phone: Enables phone authentication.
            * SMS: Enables SMS authentication.
        name:
          type: string
          description: "Specifies the recipient's name. \n\nMaximum length: 50 characters."
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        phoneNumber:
          type: string
          description: |-
            This is only used if the Identification field value is Phone or SMS. The value for this field can be a valid telephone number or, if Phone, usersupplied (SMS authentication cannot use a user supplied number). Parenthesis and dashes can be used in the telephone number.

            If `usersupplied` is used, the signer supplies his or her own telephone number.
        recipientSignatureProviderInfo:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/bulkRecipientSignatureProvider'
        rowNumber:
          type: string
          description: ""
        tabLabels:
          type: array
          description: |-
            Specifies values used to populate recipient tabs with information. This allows each bulk recipient signer to have different values for their associated tabs. Any number of `tabLabel` columns can be added to the bulk recipient file.

            The information used in the bulk recipient file header must be the same as the `tabLabel` for the tab.

            The values entered in this column are automatically inserted into the corresponding tab for the recipient in the same row.

            Note that this option cannot be used for tabs that do not have data or that are automatically populated data such as Signature, Full Name, Email Address, Company, Title, and Date Signed tabs.
          items:
            $ref: '#/components/schemas/bulkRecipientTabLabel'
      description: ""
      x-ds-definition-name: bulkRecipient
      x-ms-summary: ""
    bulkRecipientSignatureProvider:
      type: object
      properties:
        name:
          type: string
          description: ""
        value:
          type: string
          description: 'Specifies the value of the tab. '
      description: ""
      x-ds-definition-name: bulkRecipientSignatureProvider
      x-ms-summary: ""
    bulkRecipientsRequest:
      type: object
      properties:
        bulkRecipients:
          type: array
          description: A complex type containing information about the bulk recipients
            in the request.
          items:
            $ref: '#/components/schemas/bulkRecipient'
      description: ""
      x-ds-definition-name: bulkRecipientsRequest
      x-ms-summary: ""
    bulkRecipientsResponse:
      type: object
      properties:
        bulkRecipients:
          type: array
          description: A complex type containing information about the bulk recipients
            in the response.
          items:
            $ref: '#/components/schemas/bulkRecipient'
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: bulkRecipientsResponse
      x-ms-summary: ""
    bulkRecipientsSummaryResponse:
      type: object
      properties:
        bulkRecipients:
          type: array
          description: A complex type containing information about the bulk recipients
            in the response.
          items:
            $ref: '#/components/schemas/bulkRecipient'
        bulkRecipientsCount:
          type: string
          description: The number of items returned in this response.
        bulkRecipientsUri:
          type: string
          description: Reserved for DocuSign.
        errorDetails:
          type: array
          description: Array or errors.
          items:
            $ref: '#/components/schemas/errorDetails'
      description: ""
      x-ds-definition-name: bulkRecipientsSummaryResponse
      x-ms-summary: ""
    bulkRecipientsUpdateResponse:
      type: object
      properties:
        signer:
          $ref: '#/components/schemas/signer'
      description: ""
      x-ds-definition-name: bulkRecipientsUpdateResponse
      x-ms-summary: ""
    bulkRecipientTabLabel:
      type: object
      properties:
        name:
          type: string
          description: ""
        value:
          type: string
          description: 'Specifies the value of the tab. '
      description: ""
      x-ds-definition-name: bulkRecipientTabLabel
      x-ms-summary: ""
    bulkSendBatchRequest:
      type: object
      properties:
        batchName:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: bulkSendBatchRequest
      x-ms-summary: ""
    bulkSendBatchStatus:
      type: object
      properties:
        batchId:
          type: string
          description: The batch ID.
        batchName:
          type: string
          description: The batch name.
        batchSize:
          type: string
          description: |
            The number of of bulk envelopes submitted in the current batch
        bulkErrors:
          type: array
          description: An array of error statuses.
          items:
            $ref: '#/components/schemas/bulkSendErrorStatus'
        envelopeIdOrTemplateId:
          type: string
          description: |
            The ID of the draft envelope or template that was used to create the batch.
        envelopesUri:
          type: string
          description: |
            The URI to get all envelopes sent in the batch.
        failed:
          type: string
          description: |
            The number of envelopes that failed to process or send.
        mailingListId:
          type: string
          description: The id of the mailing list used to create the batch.
        ownerUserId:
          type: string
          description: ""
        queued:
          type: string
          description: |
            The number of envelopes waiting in pending queue
        senderUserId:
          type: string
          description: The id of the sender.
        sent:
          type: string
          description: The number of envelopes sent successfully.
        submittedDate:
          type: string
          description: |+
            The timestamp of  when the batch was submitted in ISO-8601 format.

      description: Result of `getBulkSendBatchStatus`
      x-ds-definition-name: bulkSendBatchStatus
      x-ms-summary: Result of `getBulkSendBatchStatus`
    bulkSendBatchSummaries:
      type: object
      properties:
        batchSizeLimit:
          type: string
          description: The maximum number of envelopes the account is permitted to
            submit in a given batch.
        bulkBatchSummaries:
          type: array
          description: An array of batch summaries.
          items:
            $ref: '#/components/schemas/bulkSendBatchSummary'
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        queueLimit:
          type: string
          description: Maximum number of envelopes an account is permitted to have
            in the queue at any one time.
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalQueued:
          type: string
          description: The number of envelopes currently pending processing for the
            entire account.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: 'A list of bulk send batch summaries. '
      x-ds-definition-name: bulkSendBatchSummaries
      x-ms-summary: 'A list of bulk send batch summaries. '
    bulkSendBatchSummary:
      type: object
      properties:
        batchId:
          type: string
          description: The batch ID.
        batchName:
          type: string
          description: The name of the batch.
        batchSize:
          type: string
          description: The number of envelopes in the batch.
        batchUri:
          type: string
          description: The batch details URI.
        failed:
          type: string
          description: Number of envelopes that failed to send.
        queued:
          type: string
          description: |
            Number of envelopes peding processing.
        sent:
          type: string
          description: Number of envelopes that have been sent.
        submittedDate:
          type: string
          description: The time stamp of when the batch was created in ISO-8601 format.
      description: Summary status of a single batch.
      x-ds-definition-name: bulkSendBatchSummary
      x-ms-summary: Summary status of a single batch.
    bulkSendErrorStatus:
      type: object
      properties:
        created:
          type: string
          description: The timestamp of when the error occurred in ISO-8601 format.
        errorMessage:
          type: string
          description: |
            The error message generated during processing, if any.
        recipientEmails:
          type: array
          description: |
            An array of email addresses for the failed bulk envelope.

            Recipient email/info of the failed bulk envelope.
          items:
            type: string
      description: A single bulk send error report.
      x-ds-definition-name: bulkSendErrorStatus
      x-ms-summary: A single bulk send error report.
    bulkSendingCopy:
      type: object
      properties:
        customFields:
          type: array
          description: |-
            The custom fields for this copy of the envelope.

            **Note**: These custom fields must also be included in the original envelope or template that you want to send.
          items:
            $ref: '#/components/schemas/bulkSendingCopyCustomField'
        emailBlurb:
          type: string
          description: The email body for this copy of the envelope.
        emailSubject:
          type: string
          description: |-
            The email subject line for this copy of the envelope.
            For information about adding merge field information to the email subject,
            see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templates/create/).
        recipients:
          type: array
          description: Information about the recipients associated with this copy
            of the envelope.
          items:
            $ref: '#/components/schemas/bulkSendingCopyRecipient'
      description: This object contains the details to use for a specific copy, or
        instance, of the envelope. When you send an envelope by using a bulk send
        list, you can customize these properties for each instance.
      x-ds-definition-name: bulkSendingCopy
      x-ms-summary: This object contains the details to use for a specific copy, or
        instance, of the envelope. When you send an envelope by using a bulk send
        list, you can customize these properties for each instance.
    bulkSendingCopyCustomField:
      type: object
      properties:
        name:
          type: string
          description: The name of the custom field.
        value:
          type: string
          description: The value of the custom field.
      description: This object contains details about a custom field for a bulk send
        copy. In a bulk send request, each custom field in the bulk send list must
        match a custom field in the envelope or template that you want to send.
      x-ds-definition-name: bulkSendingCopyCustomField
      x-ms-summary: This object contains details about a custom field for a bulk send
        copy. In a bulk send request, each custom field in the bulk send list must
        match a custom field in the envelope or template that you want to send.
    bulkSendingCopyRecipient:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        email:
          type: string
          description: The recipient's email address.
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        hostEmail:
          type: string
          description: |
            The email address of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `email` instead.

            Maximum Length: 100 characters.
        hostName:
          type: string
          description: |
            The name of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identificationMethod:
          type: string
          description: ""
        name:
          type: string
          description: ""
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientSignatureProviders:
          type: array
          description: The default signature provider is the DocuSign Electronic signature
            system. This parameter is used to specify one or more Standards Based
            Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: '#/components/schemas/recipientSignatureProvider'
        roleName:
          type: string
          description: The name of the role associated with the recipient. This property
            is optional and is only used in place of a `recipientId`.
        signerName:
          type: string
          description: |
            The in-person signer's full legal name.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
        signingGroupId:
          type: string
          description: "Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).\n\
            \n**Note**: When you send an envelope to a signing group, anyone in the\
            \ group can open it and sign it with their own signature. For this reason,\
            \ we recommend that you do not include non-signer recipients (such as\
            \ carbon copy recipients) in the same signing group as signer recipients.\
            \ However, you could create a second signing group for the non-signer\
            \ recipients and change the default action of Needs to Sign to a different\
            \ value, such as Receives a Copy. "
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        tabs:
          type: array
          description: |-
            A list of tabs associated with the recipient. In a bulk send request, each of these recipient tabs must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

            For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.

             You can use the following types of tabs to match bulk send recipients to an envelope:

            - Text tabs
            - Radio group tabs (where the name of the `radioGroup` on the envelope is used as the `tabLabel` in the bulk send list)
            - List tabs
          items:
            $ref: '#/components/schemas/bulkSendingCopyTab'
      description: This object contains details about a bulk send recipient.
      x-ds-definition-name: bulkSendingCopyRecipient
      x-ms-summary: This object contains details about a bulk send recipient.
    bulkSendingCopyTab:
      type: object
      properties:
        initialValue:
          type: string
          description: The initial value that you want to assign to the tab.
        tabLabel:
          type: string
          description: |-
            The label associated with the recipient tab. In a bulk send request, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

            Maximum Length: 500 characters.
      description: |-
        A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

        For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
      x-ds-definition-name: bulkSendingCopyTab
      x-ms-summary: |-
        A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

        For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
    bulkSendingList:
      type: object
      properties:
        bulkCopies:
          type: array
          description: An array of `bulkCopy` objects. Each object represents an instance
            or copy of an envelope and contains details such as the recipient, custom
            fields, tabs, and other information.
          items:
            $ref: '#/components/schemas/bulkSendingCopy'
        listId:
          type: string
          description: The GUID of the bulk send list.
        name:
          type: string
          description: The name of the bulk send list.
      description: This object contains the details for the bulk send list.
      x-ds-definition-name: bulkSendingList
      x-ms-summary: This object contains the details for the bulk send list.
    bulkSendingListSummaries:
      type: object
      properties:
        bulkListSummaries:
          type: array
          description: An array of `bulkSendingListSummary` objects where each summary
            provides basic information about a bulk send list that belongs to the
            current user.
          items:
            $ref: '#/components/schemas/bulkSendingListSummary'
      description: This complex type contains summaries that provide basic information
        about the bulk send lists that belong to the current user.
      x-ds-definition-name: bulkSendingListSummaries
      x-ms-summary: This complex type contains summaries that provide basic information
        about the bulk send lists that belong to the current user.
    bulkSendingListSummary:
      type: object
      properties:
        bulkSendListId:
          type: string
          description: The GUID of the bulk send list. This property is created after
            you post a new bulk send list.
        createdByUser:
          type: string
          description: The GUID of the user who created the bulk send list.
        createdDate:
          type: string
          description: The UTC DateTime that the bulk send list was created.
        name:
          type: string
          description: The name of the bulk send list.
      description: This object contains basic information about a bulk send list.
      x-ds-definition-name: bulkSendingListSummary
      x-ms-summary: This object contains basic information about a bulk send list.
    bulkSendRequest:
      type: object
      properties:
        batchName:
          type: string
          description: ""
        envelopeOrTemplateId:
          type: string
          description: The GUID of the envelope or template that you want to send
            in bulk.
      description: This object contains information about the envelope or template
        that you want to send in bulk.
      x-ds-definition-name: bulkSendRequest
      x-ms-summary: This object contains information about the envelope or template
        that you want to send in bulk.
    bulkSendResponse:
      type: object
      properties:
        batchId:
          type: string
          description: A batch identifier that you can use to get the status of the
            batch.
        batchName:
          type: string
          description: ""
        batchSize:
          type: string
          description: The total number of items in the batch being queried.
        envelopeOrTemplateId:
          type: string
          description: The GUID of the envelope or template that was sent.
        errorDetails:
          type: array
          description: A human-readable object that describes errors that occur. It
            is only valid for responses and ignored in requests.
          items:
            type: string
        errors:
          type: array
          description: A list of errors that occurred. This information is intended
            to be parsed by machine.
          items:
            type: string
        queueLimit:
          type: string
          description: ""
        totalQueued:
          type: string
          description: ""
      description: The object contains the response to a bulk send request.
      x-ds-definition-name: bulkSendResponse
      x-ms-summary: The object contains the response to a bulk send request.
    bulkSendTestResponse:
      type: object
      properties:
        canBeSent:
          type: boolean
          description: |-
            When **true**, the envelope or template is compatible with the bulk send list and can be sent by using the [BulkSend::createBulkSendRequest][BulkSendRequest] method.

            **Note**: This property is only returned in responses and ignored in requests.

            [BulkSendRequest]: https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendRequest
        validationErrorDetails:
          type: array
          description: Human-readable details about any validation errors that occurred.
          items:
            type: string
        validationErrors:
          type: array
          description: |-
            A list of validation errors that were encountered during the bulk send test.

            **Note**: This information is intended to be parsed by machine.
          items:
            type: string
      description: This object contains the results of a bulk send test.
      x-ds-definition-name: bulkSendTestResponse
      x-ms-summary: This object contains the results of a bulk send test.
    captiveRecipient:
      type: object
      properties:
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        email:
          type: string
          description: The email address associated with the captive recipient.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        userName:
          type: string
          description: The username associated with the captive recipient.
      description: This object contains details about a captive (embedded) recipient.
      x-ds-definition-name: captiveRecipient
      x-ms-summary: This object contains details about a captive (embedded) recipient.
    captiveRecipientInformation:
      type: object
      properties:
        captiveRecipients:
          type: array
          description: A complex type containing information about one or more captive
            recipients.
          items:
            $ref: '#/components/schemas/captiveRecipient'
      description: Contains information about captive (embedded) recipients.
      x-ds-definition-name: captiveRecipientInformation
      x-ms-summary: Contains information about captive (embedded) recipients.
    carbonCopy:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        agentCanEditEmail:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            email address. This element is only active if enabled for the account.
        agentCanEditName:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            name. This element is only active if enabled for the account.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        clientUserId:
          type: string
          description: Not applicable for Carbon Copy recipients.
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: "The recipient's email address. Notification of the document\
            \ to sign is sent to this email address. \n\nMaximum length: 100 characters. "
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: 'The recipient''s first name. Maximum Length: 50 characters.'
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        lastName:
          type: string
          description: The recipient's last name.
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        proofFile:
          $ref: '#/components/schemas/recipientProofFile'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`."
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: 'Contains information about a carbon copy recipient. Carbon copy
        recipients get a copy of the envelope but don''t need to sign, initial, date
        or add information to any of the documents. '
      x-ds-definition-name: carbonCopy
      x-ms-summary: 'Contains information about a carbon copy recipient. Carbon copy
        recipients get a copy of the envelope but don''t need to sign, initial, date
        or add information to any of the documents. '
    certifiedDelivery:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        agentCanEditEmail:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            email address. This element is only active if enabled for the account.
        agentCanEditName:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            name. This element is only active if enabled for the account.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: The recipient's email address.
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: 'The recipient''s first name. Maximum Length: 50 characters.'
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        lastName:
          type: string
          description: The recipient's last name.
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        proofFile:
          $ref: '#/components/schemas/recipientProofFile'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The status of the recipient. Read only. \n\nPossible values:\n\
            \n- `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`."
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: Contains information about a certified delivery recipient. Certified
        delivery recipients must receive the completed documents for the envelope
        to be completed. However, they don't need to sign, initial, date or add information
        to any of the documents.
      x-ds-definition-name: certifiedDelivery
      x-ms-summary: Contains information about a certified delivery recipient. Certified
        delivery recipients must receive the completed documents for the envelope
        to be completed. However, they don't need to sign, initial, date or add information
        to any of the documents.
    checkbox:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab ID for the custom tab to
            apply. This property can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: This property does not apply to `checkbox` tabs. Check boxes
            are always optional.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        selected:
          type: string
          description: When **true**, the checkbox is selected.
        selectedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When **true**, this tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-7, -6)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-7, -6)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to select a yes/no (on/off) option.
      x-ds-definition-name: checkbox
      x-ms-summary: |
        A tab that allows the recipient to select a yes/no (on/off) option.
    chunkedUploadPart:
      type: object
      properties:
        sequence:
          type: string
          description: The order of the part in the chunked upload.
        size:
          type: string
          description: "The size of the part in bytes. \n\nWe recommend that a chunked\
            \ upload part is no larger than a few MB in size."
      description: An object that contains information about the chunked upload part.
      x-ds-definition-name: chunkedUploadPart
      x-ms-summary: An object that contains information about the chunked upload part.
    chunkedUploadRequest:
      type: object
      properties:
        chunkedUploadId:
          type: string
          description: |-
            The id of the chunked upload.

            **Note**: This property is ignored in requests, and overridden with an auto-generated value in responses.
        data:
          type: string
          description: "A Base64-encoded representation of the content hat is used\
            \ to upload the file. \n\nMaximum size: 50 MB. However, data is also subject\
            \ to REST API limits regarding request sizes, and Internet Information\
            \ Systems (IIS) might place further constraints on file size."
      description: This is the request object for uploading a chunked upload.
      x-ds-definition-name: chunkedUploadRequest
      x-ms-summary: This is the request object for uploading a chunked upload.
    chunkedUploadResponse:
      type: object
      properties:
        checksum:
          type: string
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that
            the caller computes across the entirety of the original content that has
            been uploaded to the chunked upload. DocuSign compares this value to its
            own computation. If the two values are not equal, the original content
            and received content are not the same and the commit action is refused.
        chunkedUploadId:
          type: string
          description: 'The id of the chunked upload. '
        chunkedUploadParts:
          type: array
          description: A list of the parts that compose the chunked upload, including
            their byte sizes. The list must be contiguous before you can commit the
            chunked upload.
          items:
            $ref: '#/components/schemas/chunkedUploadPart'
        chunkedUploadUri:
          type: string
          description: 'The URI that you use to reference the chunked upload in other
            API requests, such as envelope document and envelope attachment requests. '
        committed:
          type: string
          description: 'When **true**, the chunked upload has been committed. A committed
            chunked upload can no longer receive any additional parts and is ready
            for use within other API requests. '
        expirationDateTime:
          type: string
          description: "The UTC time at which the chunked upload expires and is no\
            \ longer addressable. \n\n**Note**: You must fully upload and use a chunked\
            \ upload within 20 minutes of initializing it.\n"
        maxChunkedUploadParts:
          type: string
          description: 'The maximum number of parts allowed for a chunked upload.
            This value is configurable per DocuSign environment, account, or integrator.
            The default value is 128. The maximum possible value is 256.  '
        maxTotalSize:
          type: string
          description: The maximum total size allowed for a chunked upload. This value
            is configured per DocuSign environment, account, or integrator. The default
            value is 50 MB.
        totalSize:
          type: string
          description: |-
            The total size of the parts of the chunked upload.

            **Note**: When a chunked upload is used as an envelope document, it is subject to the PDF size limit (25 MB) and page count limit that apply to all envelope documents.
      description: This response object is returned after you upload a chunked upload.
      x-ds-definition-name: chunkedUploadResponse
      x-ms-summary: This response object is returned after you upload a chunked upload.
    cloudStorageProvider:
      type: object
      properties:
        authenticationUrl:
          type: string
          description: 'The authentication URL used for the cloud storage provider.
            This information is only included in the response if the user has not
            passed authentication for the cloud storage provider. If the redirectUrl
            query string is provided, the returnUrl is appended to the authenticationUrl. '
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        redirectUrl:
          type: string
          description: |-
            The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.

            The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
        service:
          type: string
          description: The service name for the cloud storage provider.
        serviceId:
          type: string
          description: The DocuSign-generated ID for the cloud storage provider.
      description: Contains details about a specific cloud storage provider.
      x-ds-definition-name: cloudStorageProvider
      x-ms-summary: Contains details about a specific cloud storage provider.
    cloudStorageProviders:
      type: object
      properties:
        storageProviders:
          type: array
          description: An Array containing the storage providers associated with the
            user.
          items:
            $ref: '#/components/schemas/cloudStorageProvider'
      description: ""
      x-ds-definition-name: cloudStorageProviders
      x-ms-summary: ""
    comment:
      type: object
      properties:
        envelopeId:
          type: string
          description: The Guid of the envelope the comment thread belongs to.
        hmac:
          type: string
          description: Reserved for DocuSign.
        id:
          type: string
          description: The unique identifier for the comment.
        mentions:
          type: array
          description: An array of userIds that are mentioned directly in the body
            of a comment.
          items:
            type: string
        read:
          type: boolean
          description: When **true**, indicates that the comment was read.
        sentByEmail:
          type: string
          description: The email address of the user who created the comment.
        sentByFullName:
          type: string
          description: The full name of the user who created the comment.
        sentByImageId:
          type: string
          description: Reserved for DocuSign.
        sentByInitials:
          type: string
          description: The initials of the user who created the comment.
        sentByRecipientId:
          type: string
          description: The recipient id of the user who created the comment.
        sentByUserId:
          type: string
          description: The user id of the user who created the comment.
        signingGroupId:
          type: string
          description: The id of the signing group that can view the comment or that
            created the comment.
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        subject:
          type: string
          description: The subject of the envelope.
        tabId:
          type: string
          description: The unique identifier for the tab that represents the comment
            thread.
        text:
          type: string
          description: "The content of the comment, as UTF-8 text. \n\nMaximum Length:\
            \ 500 characters.\n\n**Note**: The maximum size allowed for the entire\
            \ message body is 32 KB. "
        threadId:
          type: string
          description: The unique identifier for the comment thread.
        threadOriginatorId:
          type: string
          description: The userId of the user who created the thread.
        timestamp:
          type: string
          description: The time the comment was created.
        timeStampFormatted:
          type: string
          description: The time the comment was created, formatted according to the
            format of the user who created the comment.
        visibleTo:
          type: array
          description: The user ids of the users that the comment is visible to.
          items:
            type: string
      description: ""
      x-ds-definition-name: comment
      x-ms-summary: ""
    commentHistoryResult:
      type: object
      properties:
        comments:
          type: array
          description: An array of comment tabs that contain information about users'
            comments on documents.
          items:
            $ref: '#/components/schemas/comment'
        count:
          type: integer
          description: The maximum number of results to return.
          format: int32
        endTimetoken:
          type: string
          description: ""
        startTimetoken:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: commentHistoryResult
      x-ms-summary: ""
    commentPublish:
      type: object
      properties:
        id:
          type: string
          description: A unique ID for the Salesforce object.
        mentions:
          type: array
          description: An array of userIds that are mentioned directly in the body
            of a comment.
          items:
            type: string
        text:
          type: string
          description: 'Specifies the text that is shown in the dropdown list. '
        threadAnchorKeys:
          type: object
          additionalProperties:
            type: string
          description: ""
        threadId:
          type: string
          description: The unique identifier for the comment thread.
        visibleTo:
          type: array
          description: ""
          items:
            type: string
      description: ""
      x-ds-definition-name: commentPublish
      x-ms-summary: ""
    commentsPublish:
      type: object
      properties:
        commentsToPublish:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commentPublish'
      description: ""
      x-ds-definition-name: commentsPublish
      x-ms-summary: ""
    commentThread:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        comments:
          type: array
          description: An array of comment tabs that contain information about users'
            comments on documents.
          items:
            $ref: '#/components/schemas/comment'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        threadId:
          type: string
          description: The unique identifier for the comment thread.
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: commentThread
      x-ms-summary: ""
    commissionCounty:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: commissionCounty
      x-ms-summary: ""
    commissionExpiration:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: commissionExpiration
      x-ms-summary: ""
    commissionNumber:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: commissionNumber
      x-ms-summary: ""
    commissionState:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: commissionState
      x-ms-summary: ""
    company:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the recipient's company name.
      x-ds-definition-name: company
      x-ms-summary: |
        A tab that displays the recipient's company name.
    completeSignHashResponse:
      type: object
      properties:
        documents:
          type: array
          description: A complex element that contains details about the documents
            associated with the envelope.
          items:
            $ref: '#/components/schemas/signHashDocument'
        redirectionUrl:
          type: string
          description: ""
        remainingSignatureRequests:
          type: string
          description: For documents that require multiple signatures, this is the
            number of signature requests remaining.
      description: ""
      x-ds-definition-name: completeSignHashResponse
      x-ms-summary: ""
    compositeTemplate:
      type: object
      properties:
        compositeTemplateId:
          type: string
          description: The id of this composite template. This id is used as a reference
            when adding document object information. If used, the document's `content-disposition`
            must include the composite template ID to which the document should be
            added. If a composite template ID is not specified in the content-disposition,
            the document is applied based on the value of the `documentId` property
            only. If no document object is specified, the composite template inherits
            the first document.
        document:
          $ref: '#/components/schemas/document'
        inlineTemplates:
          type: array
          description: ' Zero or more inline templates and their position in the overlay.
            If supplied, they are overlaid into the envelope in the order of their
            Sequence value.'
          items:
            $ref: '#/components/schemas/inlineTemplate'
        pdfMetaDataTemplateSequence:
          type: string
          description: |-
            A number representing the sequence in which to apply the template that contains the PDF metadata.

            Example: `4`
        serverTemplates:
          type: array
          description: Zero or more server-side templates and their position in the
            overlay. If supplied, they are overlaid into the envelope in the order
            of their Sequence value
          items:
            $ref: '#/components/schemas/serverTemplate'
      description: |-
        This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.

        [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
      x-ds-definition-name: compositeTemplate
      x-ms-summary: |-
        This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.

        [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
    conditionalRecipientRule:
      type: object
      properties:
        conditions:
          type: array
          description: An array of conditions that satisfy the rule.
          items:
            $ref: '#/components/schemas/conditionalRecipientRuleCondition'
        order:
          type: string
          description: |-
            An integer that specifies the order in which rules are processed.
            Lower values are processed before higher values.
        recipientGroup:
          $ref: '#/components/schemas/recipientGroup'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
      description: ""
      x-ds-definition-name: conditionalRecipientRule
      x-ms-summary: ""
    conditionalRecipientRuleCondition:
      type: object
      properties:
        filters:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/conditionalRecipientRuleFilter'
        order:
          type: string
          description: |-
            An integer that specifies the order in which rules are processed.
            Lower values are processed before higher values.
        recipientLabel:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: conditionalRecipientRuleCondition
      x-ms-summary: ""
    conditionalRecipientRuleFilter:
      type: object
      properties:
        operator:
          type: string
          description: ""
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        scope:
          type: string
          description: Must be set to "api".
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        value:
          type: string
          description: 'Specifies the value of the tab. '
      description: ""
      x-ds-definition-name: conditionalRecipientRuleFilter
      x-ms-summary: ""
    connectConfigResults:
      type: object
      properties:
        configurations:
          type: array
          description: An array of DocuSign Connect configurations.
          items:
            $ref: '#/components/schemas/connectCustomConfiguration'
        totalRecords:
          type: string
          description: The number of results.
      description: This object contains the results of a ConnectConfigurations::GET
        method.
      x-ds-definition-name: connectConfigResults
      x-ms-summary: This object contains the results of a ConnectConfigurations::GET
        method.
    connectCustomConfiguration:
      type: object
      properties:
        allowEnvelopePublish:
          type: string
          description: When set to **true**, data is sent to the urlToPublishTo web
            address. This option can be set to false to stop sending data while maintaining
            the Connect configuration information.
        allowSalesforcePublish:
          type: string
          description: When set to **true**  (default), DocuSign sends data to the
            designated Salesforce account through Connect.
        allUsers:
          type: string
          description: When set to **true**, the tracked envelope and recipient events
            for all users, including users that are added a later time, are sent through
            Connect.
        configurationType:
          type: string
          description: If you are using merge fields, this property specifies the
            type of the merge field. The only supported value is `salesforce`.
        connectId:
          type: string
          description: ' Specifies the DocuSign generated ID for the Connect configuration.  '
        enableLog:
          type: string
          description: "When set to **true**, Connect logging is turned on. We recommend\
            \ that you enable this functionality, which helps you troubleshoot any\
            \ issues. \n\nYou can have a maximum of 100 active logs in your account.\
            \ You can view the entries in active logs in the **Logs** tab in the console."
        envelopeEvents:
          type: array
          description: "A list of envelope-level event statuses that will trigger\
            \ Connect to send updates to the endpoint specified in the `url` property.\
            \ \n\nTo receive notifications, you must include either an `envelopeEvents`\
            \ node or a `recipientEvents` node. You do not need to specify both."
          items:
            type: string
        eventData:
          $ref: '#/components/schemas/connectEventData'
        externalFolderId:
          type: string
          description: The id of an external folder.
        externalFolderLabel:
          type: string
          description: The label for an external folder.
        includeCertificateOfCompletion:
          type: string
          description: 'When set to **true**, the Connect Service includes the Certificate
            of Completion with completed envelopes. '
        includeCertSoapHeader:
          type: string
          description: ""
        includeDocumentFields:
          type: string
          description: 'When set to **true**, the Document Fields associated with
            the envelope''s documents are included in the notification messages. Document
            Fields are optional custom name-value pairs added to documents using the
            API. '
        includeDocuments:
          type: string
          description: reserved
        includeEnvelopeVoidReason:
          type: string
          description: 'When set to **true**, if the envelope is voided, the Connect
            Service notification will include the void reason, as entered by the person
            that voided the envelope. '
        includeHMAC:
          type: string
          description: ""
        includeSenderAccountasCustomField:
          type: string
          description: When set to **true**, Connect will include the sender account
            as Custom Field in the data.
        includeTimeZoneInformation:
          type: string
          description: When set to **true**, Connect will include the envelope time
            zone information.
        name:
          type: string
          description: The name of the Connect configuration. The name helps identify
            the configuration in the list.
        password:
          type: string
          description: The user's encrypted password hash.
        recipientEvents:
          type: array
          description: "An array of recipient event statuses that will trigger Connect\
            \ to send notifications to your webhook listener at the url endpoint specified\
            \ in the `url` property. \n\nTo receive notifications, you must include\
            \ either an `envelopeEvents` node or a `recipientEvents` node. You do\
            \ not need to specify both."
          items:
            type: string
        requireMutualTls:
          type: string
          description: When set to **true**, [Mutual TLS](https://developers.docusign.com/esign-rest-api/guides/mutual-tls-intro)
            authentication is enabled.
        requiresAcknowledgement:
          type: string
          description: |+
            When set to **true**, event delivery acknowledgements are enabled for your Connect configuration.

            DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue. It is imperative that you acknowledge successful receipt of Connect events as they occur by sending a 200 event back.

            #### When set to **true** and Send Individual Messages (SIM) mode is activated

            If the HTTP status response to a notification message is not in the range of 200-299,
            then the message delivery failed, and the configuration is marked as down.

            The message will be queued and retried once per day.
            While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`.
            When a message succeeds, all queued messages for the configuration will be tried immediately, in order.

            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **true** and SIM mode is not activated

            If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.

            The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).  Subsequent notifications will be tried when they occur.
            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **false**

            When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message, and you must handle the failure manually.

        salesforceApiVersion:
          type: string
          description: The version of the Salesforce API that you are using.
        salesforceAuthcode:
          type: string
          description: ""
        salesforceCallBackUrl:
          type: string
          description: ""
        salesforceDocumentsAsContentFiles:
          type: string
          description: When set to **true**, DocuSign can use documents in your Salesforce
            account for sending and signing.
        senderOverride:
          type: string
          description: ""
        senderSelectableItems:
          type: array
          description: 'This property sets the items that are available for selection
            when adding or editing Connect objects. '
          items:
            type: string
        sfObjects:
          type: array
          description: An array of Salesforce objects.
          items:
            $ref: '#/components/schemas/connectSalesforceObject'
        signMessageWithX509Certificate:
          type: string
          description: 'When set to **true**, Mutual TLS will be enabled for notifications.
            Mutual TLS must be initiated by the listener (the customer''s web server)
            during the TLS handshake protocol. '
        soapNamespace:
          type: string
          description: |-
            The namespace of the SOAP interface.

            **Note**: If `useSoapInterface` is set to **true**, you must set this value.
        urlToPublishTo:
          type: string
          description: This is the web address and name of your listener or Retrieving
            Service endpoint. You need to include HTTPS:// in the web address.
        userIds:
          type: array
          description: |-
            A comma-separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user, the a notification message is sent to your Connect listener.

            **Note**: If allUsers is set to `false` then you must provide a list of user ids.
          items:
            type: string
        userName:
          type: string
          description: The name of the user.
        useSoapInterface:
          type: string
          description: 'When set to **true**, the notifications are sent to your endpoint
            as SOAP requests. '
      description: ""
      x-ds-definition-name: connectCustomConfiguration
      x-ms-summary: ""
    connectDebugLog:
      type: object
      properties:
        connectConfig:
          type: string
          description: The name of the Connect configuration.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        eventDateTime:
          type: string
          description: The UTC date and time of the event.
        eventDescription:
          type: string
          description: A description of the event.
        payload:
          type: string
          description: Log output.
      description: ""
      x-ds-definition-name: connectDebugLog
      x-ms-summary: ""
    connectEventData:
      type: object
      properties:
        format:
          type: string
          description: |+
            The format of the response. One of:

            If the value of `version` is `restv2.1`, the value of this property is one of:

            - `json` (Default when `version` is `rest2.1`.
            - `xml`

            If the value of `version` is `legacy` or empty, the only valid value is `xml`.


            For more information about formats, see the *Data format* section in [Choose the architecture of your webhook](https://developers.docusign.com/platform/webhooks/connect/architecture/).

        includeData:
          type: array
          description: |
            A string array of the data to be included.
            The default is the empty array `[]`.

            - `attachments`: Include attachments associated with the envelope.
            - `custom_fields`: Include the custom fields associated with the envelope.
            - `documents`: Include the documents associated with the envelope.
            - `extensions`: Include information about the email settings associated with the envelope.
            - `folders`: Include the folder where the envelope exists.
            - `payment_tabs`: Include the payment tabs associated with the envelope.
            - `powerform`: Include the PowerForms associated with the envelope.
            - `recipients`: Include the recipients associated with the envelope.
            - `tabs`: Include the tabs associated with the envelope.
          items:
            type: string
        version:
          type: string
          description: |-
            Specifies how the connection data is returned.

            - `legacy`: (Default) The response follows the original Connect Message format.
            - `restv2.1`: The response follows the new Connect Message format.
      description: "This object lets you choose the data format of your Connect response.\n\
        For  more information about using this object, see [Connect webhooks with\
        \ JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications). "
      x-ds-definition-name: connectEventData
      x-ms-summary: "This object lets you choose the data format of your Connect response.\n\
        For  more information about using this object, see [Connect webhooks with\
        \ JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications). "
    connectFailureFilter:
      type: object
      properties:
        envelopeIds:
          type: array
          description: |
            An array of envelope GUIDs.

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          items:
            type: string
        synchronous:
          type: string
          description: Must be **false**. Setting this property to any other value
            will result in errors.
      description: A list of failed envelope IDs to retry.
      x-ds-definition-name: connectFailureFilter
      x-ms-summary: A list of failed envelope IDs to retry.
    connectFailureResult:
      type: object
      properties:
        configId:
          type: string
          description: Reserved for DocuSign.
        configUrl:
          type: string
          description: |
            Reserved for DocuSign.
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        status:
          type: string
          description: The connection status.
        statusMessage:
          type: string
          description: A human-readable message describing the connection status.
      description: This object contains details about a Connect failure result.
      x-ds-definition-name: connectFailureResult
      x-ms-summary: This object contains details about a Connect failure result.
    connectFailureResults:
      type: object
      properties:
        retryQueue:
          type: array
          description: Details about a Connect failure result.
          items:
            $ref: '#/components/schemas/connectFailureResult'
      description: ""
      x-ds-definition-name: connectFailureResults
      x-ms-summary: ""
    connectLog:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the envelope.
        configUrl:
          type: string
          description: The web address of the listener or retrieving service endpoint
            for Connect.
        connectDebugLog:
          type: array
          description: |-
            A complex element containing information about the Connect configuration, error details, date/time, description and payload.
            This information is included in the response only when the `additional_info` query is set to **true**.
            This additional information is only available when retrieving general logs with [ConnectEvents:get](https://developers.docusign.com/docs/esign-rest-api/reference/Connect/ConnectEvents/get), but not when retrieving failure logs with [ConnectEvents:listFailures](https://developers.docusign.com/docs/esign-rest-api/reference/Connect/ConnectEvents/listFailures).
          items:
            $ref: '#/components/schemas/connectDebugLog'
        connectId:
          type: string
          description: The id of the Connect configuration that failed. If an account
            has multiple Connect configurations, this value is used to look up the
            Connect configuration for the failed post.
        created:
          type: string
          description: The UTC DateTime when the Connect post was created.
        email:
          type: string
          description: The email address of the envelope sender.
        envelopeId:
          type: string
          description: The id of the envelope that failed to post.
        error:
          type: string
          description: The error that caused the Connect post to fail.
        failureId:
          type: string
          description: The failure log ID for the failure.
        failureUri:
          type: string
          description: The URI for the Connect post failure.
        lastTry:
          type: string
          description: The UTC DateTime of the last attempt to post.
        logId:
          type: string
          description: The Connect log ID for the entry.
        logUri:
          type: string
          description: The URI for the Connect log entry.
        retryCount:
          type: string
          description: The number of times the Connect post has been retried.
        retryUri:
          type: string
          description: A URI that you can use to retry to publish the Connect post.
        status:
          type: string
          description: |-
            The envelope status for the Connect post. Possible values are:
            - `Any`
            - `Voided`
            - `Created`
            - `Deleted`
            - `Sent`
            - `Delivered`
            - `Signed`
            - `Completed`
            - `Declined`
            - `TimedOut`
            - `Template`
            - `Processing`

            For details about these statuses, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions).
        subject:
          type: string
          description: The subject of the envelope.
        userName:
          type: string
          description: The name of the sender of the envelope.
      description: Contains information about a Connect log entry.
      x-ds-definition-name: connectLog
      x-ms-summary: Contains information about a Connect log entry.
    connectLogs:
      type: object
      properties:
        failures:
          type: array
          description: A list of Connect failure logs.
          items:
            $ref: '#/components/schemas/connectLog'
        logs:
          type: array
          description: A list of Connect general logs.
          items:
            $ref: '#/components/schemas/connectLog'
        totalRecords:
          type: string
          description: The count of records in the log list.
        type:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: connectLogs
      x-ms-summary: ""
    connectSalesforceField:
      type: object
      properties:
        dsAttribute:
          type: string
          description: ""
        dsLink:
          type: string
          description: A URL that links to the information in the DocuSign field.
        dsNode:
          type: string
          description: ""
        id:
          type: string
          description: A unique ID for the Salesforce object.
        sfField:
          type: string
          description: ""
        sfFieldName:
          type: string
          description: The name of the Salesforce field.
        sfFolder:
          type: string
          description: The name of the Salesforce folder.
        sfLockedValue:
          type: string
          description: ""
      description: This object is used to match a DocuSign field to a Salesforce field
        so that Docusign can send information to your Salesforce account.
      x-ds-definition-name: connectSalesforceField
      x-ms-summary: This object is used to match a DocuSign field to a Salesforce
        field so that Docusign can send information to your Salesforce account.
    connectSalesforceObject:
      type: object
      properties:
        active:
          type: string
          description: When set to **true**, the `connectSalesforceObject` is active.
        description:
          type: string
          description: A description of the `connectSalesforceObject`.
        id:
          type: string
          description: The id of the `connectSalesforceObject`.
        insert:
          type: string
          description: ""
        onCompleteOnly:
          type: string
          description: When **true**, Salesforce is updated only when the envelope
            is complete.
        selectFields:
          type: array
          description: The DocuSign and Salesforce fields that you want to use to
            match a Salesforce object with DocuSign information. This information
            tells Connect when to send updates to Salesforce.
          items:
            $ref: '#/components/schemas/connectSalesforceField'
        sfObject:
          type: string
          description: The Salesforce.com object type, such as `case`, `contact`,
            or `opportunity`.
        sfObjectName:
          type: string
          description: |-
            A name for the Salesforce object.

            **Note**: You can enter any name for the object. It does not have to match the `sfObject` property.
        updateFields:
          type: array
          description: "The DocuSign and Salesforce fields that you want to update.\
            \ \n\n**Note**: You can choose to update SalesForce (with information\
            \ from DocuSign) only, update DocuSign only, or both."
          items:
            $ref: '#/components/schemas/connectSalesforceField'
      description: "A `connectSalesforceObject` is an object that updates envelope\
        \ and document status or recipient status in your Salesforce account.\n\n\
        When you install DocuSign Connect for Salesforce, the service automatically\
        \ sets up two Connect objects: one that updates envelope status and documents\
        \ and one that updates recipient status. You can also customize DocuSign Connect\
        \ for Salesforce by associating DocuSign objects with Salesforce objects so\
        \ that DocuSign Connect for Salesforce updates or inserts the information\
        \ into the Salesforce object. For more information, see \n[DocuSign for Salesforce\
        \ - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New)."
      x-ds-definition-name: connectSalesforceObject
      x-ms-summary: "A `connectSalesforceObject` is an object that updates envelope\
        \ and document status or recipient status in your Salesforce account.\n\n\
        When you install DocuSign Connect for Salesforce, the service automatically\
        \ sets up two Connect objects: one that updates envelope status and documents\
        \ and one that updates recipient status. You can also customize DocuSign Connect\
        \ for Salesforce by associating DocuSign objects with Salesforce objects so\
        \ that DocuSign Connect for Salesforce updates or inserts the information\
        \ into the Salesforce object. For more information, see \n[DocuSign for Salesforce\
        \ - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New)."
    connectUserObject:
      type: object
      properties:
        configurationtype:
          type: string
          description: The type of custom Connect configuration being accessed.
        connectId:
          type: string
          description: The ID of the custom Connect configuration being accessed.
        enabled:
          type: string
          description: Boolean value that indicates whether the custom Connect configuration
            is enabled or not.
        hasAccess:
          type: string
          description: ""
        senderSearchableItems:
          type: array
          description: ""
          items:
            type: string
      description: ""
      x-ds-definition-name: connectUserObject
      x-ms-summary: ""
    consoleViewRequest:
      type: object
      properties:
        envelopeId:
          type: string
          description: The id of the envelope.
        returnUrl:
          type: string
          description: |-
            (Optional) The URL to which the user should be redirected after the console view session has ended.

            Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
      description: The request object for the EnvelopeViews::createConsole method.
      x-ds-definition-name: consoleViewRequest
      x-ms-summary: The request object for the EnvelopeViews::createConsole method.
    consumerDisclosure:
      type: object
      properties:
        accountEsignId:
          type: string
          description: The GUID of the account associated with the consumer disclosure.
        allowCDWithdraw:
          type: string
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
        allowCDWithdrawMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        changeEmail:
          type: string
          description: |-
            If the customer needs to change their email address, this is the email address to which they should the change request.

            Maximum length: 100 characters.
        changeEmailOther:
          type: string
          description: "Other information about the requirements for the user to change\
            \ their email address.\n\nMaximum length: 255 characters.\n\nExample:\
            \ \n\n`We do not require any other information from you to change your\
            \ email address.`"
        companyName:
          type: string
          description: |-
            Specifies the company name used in the disclosure. The default value is the account name.

            However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**. Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true**.
        companyPhone:
          type: string
          description: The phone number of the company associated with the consumer
            disclosure, as a free-formatted string.
        copyCostPerPage:
          type: string
          description: "The cost per page if the customer requests paper copies.\n\
            \nExample: \n\n`0.0000`"
        copyFeeCollectionMethod:
          type: string
          description: "Specifies the fee collection method for cases in which the\
            \ customer requires paper copies of the document.\n\nMaximum length: 255\
            \ characters.\n\nExample: \n\n`We will bill you for any fees at that time,\
            \ if any.`"
        copyRequestEmail:
          type: string
          description: |-
            The email address to which the customer should send a request for copies of a document.

            Maximum length: 100 characters.
        custom:
          type: string
          description: When set to **true**, indicates that the consumer disclosure
            is a custom disclosure. The default is **false**.
        enableEsign:
          type: string
          description: When set to **true** (default), indicates that eSign is enabled.
        esignAgreement:
          type: string
          description: The final, assembled text of the Electronic Record and Signature
            Disclosure that includes the appropriate `companyName` and other specifics.
            It also includes the HTML tags used for formatting.
        esignText:
          type: string
          description: |-
            The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.

            **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
        languageCode:
          type: string
          description: "The code for the language version of the disclosure. The following\
            \ languages are supported:\n\n- Arabic (`ar`)\n- Bulgarian (`bg`)\n- Czech\
            \ (`cs`)\n- Chinese Simplified (`zh_CN`)\n- Chinese Traditional (`zh_TW`)\n\
            - Croatian (`hr`)\n- Danish (`da`)\n- Dutch (`nl`)\n- English US (`en`)\n\
            - English UK (`en_GB`)\n- Estonian (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n\
            - French (`fr`)\n- French Canadian (`fr_CA`)\n- German (`de`)\n- Greek\
            \ (`el`)\n- Hebrew (`he`)\n- Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa\
            \ Indonesian (`id`)\n- Italian (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n\
            - Latvian (`lv`)\n- Lithuanian (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian\
            \ (`no`)\n- Polish (`pl`)\n- Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n\
            - Romanian (`ro`)\n- Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n\
            - Slovenian (`sl`)\n- Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n\
            - Swedish (`sv`)\n- Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`)\
            \ \n- Vietnamese (`vi`)\n\nAdditionally, you can automatically detect\
            \ the browser language being used by the viewer and display the disclosure\
            \ in that language by setting the value to `browser`."
        mustAgreeToEsign:
          type: string
          description: When set to **true**, the  recipient must agree to the consumer
            disclosure. The value of this property is read only. It is calculated
            based on the account setting `consumerDisclosureFrequency` and the user's
            actions.
        pdfId:
          type: string
          description: "**Deprecated**. \n\nThe `pdfId` property in the consumer_disclosure\
            \ PUT request is deprecated. For security reasons going forward, any value\
            \ provided in the request packet must be ignored. "
        useBrand:
          type: string
          description: "When set to **true**, specifies that the company name in the\
            \ signing brand is used for the disclosure. Whenever an envelope is sent\
            \ from the account that uses a signing brand with a specified company\
            \ name, that value is used in email notifications and in the signing experience.\
            \  \n\nWhen set to **false** (default), or if the signing brand does not\
            \ specify a company name, the account name is used instead.\n\n**Note**:\
            \ This substitution only works if you use the default legal disclosure\
            \ or if you apply the `companyName` to the merge fields in a custom ERSD. "
        useConsumerDisclosureWithinAccount:
          type: string
          description: When set to **true**, specifies that recipients in the same
            account as the sender must agree to eSign an Electronic Record and Signature
            Disclosure Statement.
        useConsumerDisclosureWithinAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        withdrawAddressLine1:
          type: string
          description: "Contains the first address line of the postal address to which\
            \ a customer can send a consent withdrawal notification.\n\nMaximum length:\
            \ 100 characters. "
        withdrawAddressLine2:
          type: string
          description: "Contains the second address line of the postal address to\
            \ which a customer can send a consent withdrawal notification.\n\nMaximum\
            \ length: 100 characters. "
        withdrawByEmail:
          type: string
          description: When set to **true** (default), indicates that the customer
            can withdraw consent by email.
        withdrawByMail:
          type: string
          description: When set to **true**, indicates that the customer can withdraw
            consent by postal mail. The default is **false**.
        withdrawByPhone:
          type: string
          description: When set to **true**, indicates that the customer can withdraw
            consent by phone. The default is **false**.
        withdrawCity:
          type: string
          description: "Contains the city of the postal address to which a customer\
            \ can send a consent withdrawal notification.\n\nMaximum length: 50 characters. "
        withdrawConsequences:
          type: string
          description: |-
            Text indicating the consequences of withdrawing consent.

            Maximum length: 255 characters.
        withdrawEmail:
          type: string
          description: "Contains the email address to which a customer can send a\
            \ consent withdrawal notification.\n\nMaximum length: 100 characters. "
        withdrawOther:
          type: string
          description: |-
            Contains any other information needed to withdraw consent.

            Maximum length: 255 characters.

            Example:

            `We do not need any other information from you to withdraw consent.`
        withdrawPhone:
          type: string
          description: "Contains the phone number that a customer can call to register\
            \ consent withdrawal notification as a free-formatted string.\n\nMaximum\
            \ length: 20 characters. "
        withdrawPostalCode:
          type: string
          description: "Contains the postal code of the postal address to which a\
            \ customer can send a consent withdrawal notification.\n\nMaximum length:\
            \ 20 characters. "
        withdrawState:
          type: string
          description: |-
            Contains the state of the postal address to which a customer can send a consent withdrawal notification.

            Example: `PA`
      description: Details about consumer disclosures.
      x-ds-definition-name: consumerDisclosure
      x-ms-summary: Details about consumer disclosures.
    contact:
      type: object
      properties:
        cloudProvider:
          type: string
          description: |-
            The cloud service that provided the contact. Valid values are:

            - `rooms`
            - `docusignCore` (default)

            <!-- Future:

            - `Box`
            - `GoogleDrive`
            - `Dropbox`
            - `SalesForce`
            - `SkyDrive`

            -->
        cloudProviderContainerId:
          type: string
          description: The id of the container at the cloud provider. For example,
            this might be the room id for a DocuSign Transaction Room.
        contactId:
          type: string
          description: The id of a contact person in the account's address book.
        contactPhoneNumbers:
          type: array
          description: |-
            A list of the contact's phone numbers.

            **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:

            - Sending an envelope by using SMS
            - Using phone authentication

            You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
          items:
            $ref: '#/components/schemas/contactPhoneNumber'
        contactUri:
          type: string
          description: The URI for retrieving information about the contact.
        emails:
          type: array
          description: ""
          items:
            type: string
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        isOwner:
          type: boolean
          description: ""
        name:
          type: string
          description: ""
        organization:
          type: string
          description: ""
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        signingGroup:
          type: string
          description: ""
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
      description: ""
      x-ds-definition-name: contact
      x-ms-summary: ""
    contactGetResponse:
      type: object
      properties:
        contacts:
          type: array
          description: A list of contacts.
          items:
            $ref: '#/components/schemas/contact'
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: This response object contains information about the contacts associated
        with an account.
      x-ds-definition-name: contactGetResponse
      x-ms-summary: This response object contains information about the contacts associated
        with an account.
    contactModRequest:
      type: object
      properties:
        contactList:
          type: array
          description: A list of contacts.
          items:
            $ref: '#/components/schemas/contact'
      description: The request object containing the new information for the contacts.
      x-ds-definition-name: contactModRequest
      x-ms-summary: The request object containing the new information for the contacts.
    contactPhoneNumber:
      type: object
      properties:
        phoneNumber:
          type: string
          description: |-
            The contact's phone number.

            Example: `+12223334444`
        phoneType:
          type: string
          description: |-
            The type of phone number. Valid values are:

            - `home`
            - `mobile`
            - `work`
            - `other`
            - `fax`
      description: Details about the phone numbers associated with a specific contact.
      x-ds-definition-name: contactPhoneNumber
      x-ms-summary: Details about the phone numbers associated with a specific contact.
    contactUpdateResponse:
      type: object
      properties:
        contacts:
          type: array
          description: A list of contacts.
          items:
            $ref: '#/components/schemas/contact'
      description: This response objects shows the updated details for the contacts.
      x-ds-definition-name: contactUpdateResponse
      x-ms-summary: This response objects shows the updated details for the contacts.
    correctViewRequest:
      type: object
      properties:
        returnUrl:
          type: string
          description: |-
            (Optional) The URL to which the user should be redirected after the correct/send view session has ended. DocuSign redirects to this URL and includes an event parameter that your app can use.

            Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.

            The event parameters returned are:

            * `send` (user corrected and sent the envelope)
            * `save` (user saved the envelope)
            * `cancel` (user canceled the transaction.)
            * `error` (there was an error when performing the correct or send)
            * `sessionEnd` (the session ended before the user completed a different action)

            **Note**: Include `https://` in the URL or the redirect might not succeed on some browsers.
        suppressNavigation:
          type: string
          description: Specifies whether the window is displayed with or without dressing.
        viewUrl:
          type: string
          description: ""
      description: The request body for the EnvelopeViews::createCorrect method.
      x-ds-definition-name: correctViewRequest
      x-ms-summary: The request body for the EnvelopeViews::createCorrect method.
    country:
      type: object
      properties:
        isoCode:
          type: string
          description: ""
        name:
          type: string
          description: ""
        provinces:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/province'
        provinceValidated:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: country
      x-ms-summary: ""
    creditCardInformation:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/addressInformation'
        cardNumber:
          type: string
          description: The credit card number.
        cardType:
          type: string
          description: "The type of credit card. Valid values are: \n\n- `visa` \n\
            - `mastercard` \n- `amex`"
        cvNumber:
          type: string
          description: The 3 or 4-digit card verification value (CVV) number associated
            with the credit card. CVV numbers are also referred to as card security
            codes (CSCs).
        expirationMonth:
          type: string
          description: The month that the credit card expires, expressed as a number
            from 1 to 12.
        expirationYear:
          type: string
          description: The year in which the credit card expires, in 4-digit format.
        nameOnCard:
          type: string
          description: The exact name as it appears on the credit card.
      description: This object contains information about a credit card that is associated
        with an account.
      x-ds-definition-name: creditCardInformation
      x-ms-summary: This object contains information about a credit card that is associated
        with an account.
    creditCardTypes:
      type: object
      properties:
        cardTypes:
          type: array
          description: An array containing supported credit card types.
          items:
            type: string
      description: ""
      x-ds-definition-name: creditCardTypes
      x-ms-summary: ""
    currency:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab id for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: The `documentId` is set by the API client. It is an integer
            that falls between `1` and 2,147,483,647. The value is encoded as a string
            without commas. The values `1`, `2`, `3`, and so on are typically used
            to identify the first few documents in an envelope. Tab definitions include
            a `documentId` property that specifies the document on which to place
            the tab.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        numericalValue:
          type: string
          description: ""
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: The page number being accessed.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: A local reference that senders use to map recipients to other
            objects, such as specific document tabs. Within an envelope, each `recipientId`
            must be unique, but there is no uniqueness requirement across envelopes.
            For example, many envelopes assign the first recipient a `recipientId`
            of `1`.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When **true**, the tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: The status of the item.
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: currency
      x-ms-summary: ""
    currencyFeatureSetPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Reserved for DocuSign.
        currencySymbol:
          type: string
          description: Reserved for DocuSign.
        envelopeFee:
          type: string
          description: Reserved for DocuSign.
        fixedFee:
          type: string
          description: Reserved for DocuSign.
        seatFee:
          type: string
          description: Reserved for DocuSign.
      description: Information about the price and currency associated with the feature
        set. Reserved for internal DocuSign use only.
      x-ds-definition-name: currencyFeatureSetPrice
      x-ms-summary: Information about the price and currency associated with the feature
        set. Reserved for internal DocuSign use only.
    currencyPlanPrice:
      type: object
      properties:
        currencyCode:
          type: string
          description: Specifies the ISO currency code for the account.
        currencySymbol:
          type: string
          description: Specifies the currency symbol for the account.
        perSeatPrice:
          type: string
          description: |-
            The per-seat price associated with the plan.

            Example: `"456.0000"`
        supportedCardTypes:
          $ref: '#/components/schemas/creditCardTypes'
        supportIncidentFee:
          type: string
          description: |-
            The support incident fee charged for each support incident.

            Example: `"$0.00"`
        supportPlanFee:
          type: string
          description: |-
            The support plan fee charged for this plan.

            Example: `"$0.00"`
      description: ""
      x-ds-definition-name: currencyPlanPrice
      x-ms-summary: ""
    customField:
      type: object
      properties:
        customFieldType:
          type: string
          description: |-
            The type of custom field. Valid values are:

            - `text` (default)
            - `list`
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        fieldId:
          type: string
          description: The id of the custom field.
        listItems:
          type: array
          description: "For a list custom field, this is an array of strings that\
            \ represent the items in a list. \n\nMaximum Length: 2,000 characters."
          items:
            type: string
        name:
          type: string
          description: The name of the custom field.
        required:
          type: string
          description: When set to **true**, the signer must complete the custom field.
        show:
          type: string
          description: When set to **true**, the custom field displays at the top
            of the Certificate of Completion.
        value:
          type: string
          description: "Specifies the value of the custom field. \n\nMaximum Length:\
            \ 2,000 characters."
      description: This object provides details about a custom field.
      x-ds-definition-name: customField
      x-ms-summary: This object provides details about a custom field.
    customFields:
      type: object
      properties:
        listCustomFields:
          type: array
          description: An array of list custom fields.
          items:
            $ref: '#/components/schemas/listCustomField'
        textCustomFields:
          type: array
          description: An array of text custom fields.
          items:
            $ref: '#/components/schemas/textCustomField'
      description: Contains information about custom fields.
      x-ds-definition-name: customFields
      x-ms-summary: Contains information about custom fields.
    customFieldsEnvelope:
      type: object
      properties:
        listCustomFields:
          type: array
          description: An array of list custom fields.
          items:
            $ref: '#/components/schemas/listCustomField'
        textCustomFields:
          type: array
          description: An array of text custom fields.
          items:
            $ref: '#/components/schemas/textCustomField'
      description: ""
      x-ds-definition-name: customFieldsEnvelope
      x-ms-summary: ""
    customSettingsInformation:
      type: object
      properties:
        customSettings:
          type: array
          description: The name/value pair information for the user custom setting.
          items:
            $ref: '#/components/schemas/nameValue'
      description: ""
      x-ds-definition-name: customSettingsInformation
      x-ms-summary: ""
    date:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        validationPatternMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to enter a date. Date tabs
        are one-line fields that allow date information to be
        entered in any format. The tooltip for this tab recommends
        entering the date as MM/DD/YYYY, but this is not enforced.
        The format entered by the signer is retained. If you need a
        particular date format enforced, DocuSign recommends using a
        Text tab with a validation pattern and a validation message
        to enforce the format.
      x-ds-definition-name: date
      x-ms-summary: |
        A tab that allows the recipient to enter a date. Date tabs
        are one-line fields that allow date information to be
        entered in any format. The tooltip for this tab recommends
        entering the date as MM/DD/YYYY, but this is not enforced.
        The format entered by the signer is retained. If you need a
        particular date format enforced, DocuSign recommends using a
        Text tab with a validation pattern and a validation message
        to enforce the format.
    dateSigned:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the date that the recipient signed the
        document.
      x-ds-definition-name: dateSigned
      x-ms-summary: |
        A tab that displays the date that the recipient signed the
        document.
    dateStampProperties:
      type: object
      properties:
        dateAreaHeight:
          type: string
          description: The height of the rectangle.
        dateAreaWidth:
          type: string
          description: The width of the rectangle.
        dateAreaX:
          type: string
          description: The X axis position of the top-left corner.
        dateAreaY:
          type: string
          description: The Y axis position of the top-left corner.
      description: |-
        Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.

        This property contains the following information about the central rectangle:

        - `DateAreaX`: The X axis position of the top-left corner.
        - `DateAreaY`: The Y axis position of the top-left corner.
        - `DateAreaWidth`: The width of the rectangle.
        - `DateAreaHeight`: The height of the rectangle.
      x-ds-definition-name: dateStampProperties
      x-ms-summary: |-
        Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.

        This property contains the following information about the central rectangle:

        - `DateAreaX`: The X axis position of the top-left corner.
        - `DateAreaY`: The Y axis position of the top-left corner.
        - `DateAreaWidth`: The width of the rectangle.
        - `DateAreaHeight`: The height of the rectangle.
    decline:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        buttonText:
          type: string
          description: ' Specifies the decline text displayed in the tab.'
        buttonTextMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        declineReason:
          type: string
          description: The reason the recipient declined the document.
        declineReasonMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        pageNumber:
          type: string
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient the option of declining an
        envelope. If the recipient clicks the tab during the signing
        process, the envelope is voided.
      x-ds-definition-name: decline
      x-ms-summary: |
        A tab that allows the recipient the option of declining an
        envelope. If the recipient clicks the tab during the signing
        process, the envelope is voided.
    diagnosticsSettingsInformation:
      type: object
      properties:
        apiRequestLogging:
          type: string
          description: ' When set to **true**, enables API request logging for the
            user. '
        apiRequestLogMaxEntries:
          type: string
          description: Specifies the maximum number of API requests to log.
        apiRequestLogRemainingEntries:
          type: string
          description: Indicates the remaining number of API requests that can be
            logged.
      description: ""
      x-ds-definition-name: diagnosticsSettingsInformation
      x-ms-summary: ""
    directDebitProcessorInformation:
      type: object
      properties:
        bankBranchCode:
          type: string
          description: |-
            The branch code of the bank used for direct debit.

            Maximum Length: 10 characters.
        bankCheckDigit:
          type: string
          description: |-
            The check digit or digits in the international bank account number. These digits are used to confirm the validity of the account.

            Maximum Length: 4 characters.
        bankCode:
          type: string
          description: |-
            The code or number that identifies the bank. This is also known as the sort code.

            Example: `200000`

            Maximum Length: 18 characters.
        bankName:
          type: string
          description: |-
            The name of the direct debit bank.

            Maximum Length: 80 characters.
        bankTransferAccountName:
          type: string
          description: |-
            The name on the direct debit bank account. This field is required for POST and PUT requests.

            Maximum Length: 60 characters.
        bankTransferAccountNumber:
          type: string
          description: |-
            The customer's bank account number. This value will be obfuscated. This field is required for POST and PUT requests.

            Maximum Length: 30 characters.
        bankTransferType:
          type: string
          description: |-
            Specifies the type of direct debit transfer. The value of this field is dependent on the user's country. This field is required for POST and PUT requests. Possible values are:

            - `DirectDebitUK`
            - `DirectEntryAU`
            - `SEPA`
        country:
          type: string
          description: |+
            The user's country. The system populates this value automatically.

        email:
          type: string
          description: |-
            The email address of the user who is associated with the payment method. This field is required for POST and PUT requests.

            Maximum Length: 80 characters.
        firstName:
          type: string
          description: |-
            The user's first name. This field is required for POST and PUT requests.

            Maximum Length: 30 characters.
        iBAN:
          type: string
          description: "The International Bank Account Number (IBAN). \n\nExample:\
            \ `DE89370400440532013000`\n\nFor more information, see [PeopleSoft's\
            \ guide to Setting Up Banks](https://docs.oracle.com/cd/E16365_01/fscm91pbr0/eng/psbooks/fsbk/chapter.htm?File=fsbk/htm/fsbk03.htm).\n\
            \n**Note**: This number will be obfuscated."
        lastName:
          type: string
          description: |-
            The user's last name. This field is required for POST and PUT requests.

            Maximum Length: 70 characters.
      description: Contains information about a bank that processes a customer's direct
        debit payments.
      x-ds-definition-name: directDebitProcessorInformation
      x-ms-summary: Contains information about a bank that processes a customer's
        direct debit payments.
    displayApplianceAccount:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the envelope.
        optOutAutoNavTextAndTabColorUpdates:
          type: boolean
          description: Boolean that allows envelope senders to opt out of the recipient
            signing auto-navigation feature and opt out of updating tab font color.
        showInitialConditionalFields:
          type: boolean
          description: Boolean that specifies whether conditional field options are
            initially displayed (before a user makes entries).
        signingVersion:
          type: string
          description: ""
        tagHasSigBlock:
          type: boolean
          description: ""
      description: ""
      x-ds-definition-name: displayApplianceAccount
      x-ms-summary: ""
    displayApplianceInfo:
      type: object
      description: ""
      x-ds-definition-name: displayApplianceInfo
      x-ms-summary: ""
    displayAppliancePdf:
      type: object
      description: ""
      x-ds-definition-name: displayAppliancePdf
      x-ms-summary: ""
    displayApplianceSignerAttachment:
      type: object
      description: ""
      x-ds-definition-name: displayApplianceSignerAttachment
      x-ms-summary: ""
    dobInformationInput:
      type: object
      properties:
        dateOfBirth:
          type: string
          description: Specifies the recipient's date, month, and year of birth.
        displayLevelCode:
          type: string
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
        receiveInResponse:
          type: string
          description: A Boolean value that specifies whether the information must
            be returned in the response.
      description: |-
        Complex type containing:

        * dateOfBirth
        * displayLevelCode
        * receiveInResponse
      x-ds-definition-name: dobInformationInput
      x-ms-summary: |-
        Complex type containing:

        * dateOfBirth
        * displayLevelCode
        * receiveInResponse
    document:
      type: object
      properties:
        applyAnchorTabs:
          type: string
          description: Reserved for DocuSign.
        assignTabsToRecipientId:
          type: string
          description: ""
        display:
          type: string
          description: "This string sets the display and behavior properties of\n\
            the document during signing. The possible values are:\n\n* `modal`<br>\n\
            \  The document is shown as a supplement action strip\n  and can be viewed,\
            \ downloaded, or printed in a modal window.\n  This is the recommended\
            \ value for supplemental documents. \n\n* `download`<br>\n  The document\
            \ is shown as a supplement action strip\n  and can be viewed, downloaded,\
            \ or printed in a new browser window. \n\n* `inline`<br>\n  The document\
            \ is shown in the normal signing window.\n  This value is not used with\
            \ supplemental documents,\n  but is the default value for all other documents.\n"
        documentBase64:
          type: string
          description: The document's bytes. This field can be used to include a base64
            version of the document bytes within an envelope definition instead of
            sending the document using a multi-part HTTP request. The maximum document
            size is smaller if this field is used due to the overhead of the base64
            encoding.
        documentFields:
          type: array
          description: "The array of name/value custom data strings to be added to\
            \ a document. Custom document field information is returned in the status,\
            \ but otherwise is not used by DocuSign. The array contains the elements:\
            \ \n\n* name Ã\x83Â¢Ã\x82Â\x80Ã\x82Â\x93 A string that can be a maximum\
            \ of 50 characters. \n* value Ã\x83Â¢Ã\x82Â\x80Ã\x82Â\x93 A string that\
            \ can be a maximum of 200 characters.\n\n*IMPORTANT*: If you are using\
            \ xml, the name/value pair is contained in a nameValue element. \n"
          items:
            $ref: '#/components/schemas/nameValue'
        documentId:
          type: string
          description: Specifies the document ID of this document. This value is used
            by tabs to determine which document they appear in.
        encryptedWithKeyManager:
          type: string
          description: "When set to **true**, the document is been already encrypted\
            \ by the sender for use with the DocuSign Key Manager Security Appliance.\n\
            \ "
        fileExtension:
          type: string
          description: "The file extension type of the document. Non-PDF documents\
            \ are converted to PDF.\n\nIf the document is not a PDF, `fileExtension`\
            \ is required.\n\nIf you try to upload a non-PDF document without a `fileExtension`,\
            \ you will receive an \"unable to load document\" error message.  \n "
        fileFormatHint:
          type: string
          description: ""
        htmlDefinition:
          $ref: '#/components/schemas/documentHtmlDefinition'
        includeInDownload:
          type: string
          description: "When set to **true**,\nthe document is included in the combined\
            \ document download (`documentsCombinedUri`). \nThe default value is **true**.\n"
        matchBoxes:
          type: array
          description: "Matchboxes define areas in a document for document matching\
            \ when you are creating envelopes. They are only used when you upload\
            \ and edit a template. \n\nA matchbox consists of 5 elements:\n\n* pageNumber\
            \ - The document page number  on which the matchbox will appear. \n* xPosition\
            \ - The x position of the matchbox on a page. \n* yPosition - The y position\
            \ of the matchbox on a page.\n* width - The width of the matchbox. \n\
            * height - The height of the matchbox. \n"
          items:
            $ref: '#/components/schemas/matchBox'
        name:
          type: string
          description: The name of the document.
        order:
          type: string
          description: "(Optional) The order in which to sort the results.\n\nValid\
            \ values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. "
        pages:
          type: string
          description: An array of page objects.
        password:
          type: string
          description: The user's encrypted password hash.
        pdfFormFieldOption:
          type: string
          description: ""
        remoteUrl:
          type: string
          description: |
            The file id from the cloud storage service where
            the document is located. This information is
            returned using
            [CloudStorage::listFolders](https://developers.docusign.com/docs/esign-rest-api/reference/CloudStorage/CloudStorage/listFolders/) or
            [CloudStorage::list](https://developers.docusign.com/docs/esign-rest-api/reference/CloudStorage/CloudStorage/list/).
        signerMustAcknowledge:
          type: string
          description: "Sets how the signer interacts with the supplemental document.\n\
            The possible values are: \n\n*\t`no_interaction`<br>\n  No recipient action\
            \ is required. \n\n*\t`view`<br>\n  The recipient is required to view\
            \ the document. \n\n*\t`accept`<br>\n  The recipient is required to accept\
            \ the document by selecting accept during signing, but is not required\
            \ to view the document. \n\n*\t`view_accept`<br>\n  The recipient is required\
            \ to view and accept the document.  \n\n"
        signerMustAcknowledgeUseAccountDefault:
          type: boolean
          description: ""
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        transformPdfFields:
          type: string
          description: |
            When set to **true**, PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel. The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF.
        uri:
          type: string
          description: A URI containing the user ID.
      description: A document object.
      x-ds-definition-name: document
      x-ms-summary: A document object.
    documentFieldsInformation:
      type: object
      properties:
        documentFields:
          type: array
          description: "The array of name/value custom data strings to be added to\
            \ a document. Custom document field information is returned in the status,\
            \ but otherwise is not used by DocuSign. The array contains the elements:\
            \ \n\n* name Ã\x83Â¢Ã\x82Â\x80Ã\x82Â\x93 A string that can be a maximum\
            \ of 50 characters. \n* value Ã\x83Â¢Ã\x82Â\x80Ã\x82Â\x93 A string that\
            \ can be a maximum of 200 characters.\n\n*IMPORTANT*: If you are using\
            \ xml, the name/value pair is contained in a nameValue element. \n"
          items:
            $ref: '#/components/schemas/nameValue'
      description: ""
      x-ds-definition-name: documentFieldsInformation
      x-ms-summary: ""
    documentHtmlCollapsibleDisplaySettings:
      type: object
      properties:
        arrowClosed:
          type: string
          description: ""
        arrowColor:
          type: string
          description: ""
        arrowLocation:
          type: string
          description: ""
        arrowOpen:
          type: string
          description: ""
        arrowSize:
          type: string
          description: ""
        arrowStyle:
          type: string
          description: ""
        containerStyle:
          type: string
          description: ""
        labelStyle:
          type: string
          description: ""
        onlyArrowIsClickable:
          type: boolean
          description: ""
        outerLabelAndArrowStyle:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: documentHtmlCollapsibleDisplaySettings
      x-ms-summary: ""
    documentHtmlDefinition:
      type: object
      properties:
        displayAnchorPrefix:
          type: string
          description: Contains text that all display anchors must start with. Using
            at least 4 characters will improve anchor processing performance.
        displayAnchors:
          type: array
          description: An object that defines how to handle a section of the HTML
            in signing. This property enables an incoming request to make a section
            of the HTML collapsible and expandable or hidden from view. A start anchor,
            end anchor, or both are required. If the anchors are not found, the display
            anchor will be ignored. For a list of the available types, see the `display`
            enum.
          items:
            $ref: '#/components/schemas/documentHtmlDisplayAnchor'
        displayOrder:
          type: string
          description: The position on the page where the display section appears.
        displayPageNumber:
          type: string
          description: The number of the page on which the display section appears.
        documentGuid:
          type: string
          description: The GUID of the document.
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        headerLabel:
          type: string
          description: Header text or an HTML tag to place above the responsive HTML
            block.
        maxScreenWidth:
          type: string
          description: If set, the responsive HTML version of the signing document
            will only display on screens with the specified pixel width or less. If
            the screen is larger than the value that you specify, the default PDF
            version of the content displays instead.
        removeEmptyTags:
          type: string
          description: Holds a comma-separated list of HTML tags to remove if they
            have no text within their node (including child nodes).
        showMobileOptimizedToggle:
          type: string
          description: When set to **true**, the **Mobile-Friendly** toggle displays
            at the top of the screen on the user's mobile device. This toggle enables
            the user to switch between the mobile-friendly and PDF versions of a document.
            For example, the recipient can use this toggle to review the document
            using the PDF view before they finish signing.
        source:
          type: string
          description: |-
            Specifies the type of responsive signing that will be used with the document. Valid strings are:

            - `document`: The HTML signing page will be generated from the provided document. For details, see [Converting a PDF to a signable HTML document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).
            - `html`: The HTML signing page will be passed directly. For details, see [Converting a PDF to a signable HTML document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).
      description: Holds the properties that define how to generate the responsive-formatted
        HTML for the document.
      x-ds-definition-name: documentHtmlDefinition
      x-ms-summary: Holds the properties that define how to generate the responsive-formatted
        HTML for the document.
    documentHtmlDefinitionOriginal:
      type: object
      properties:
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdGuid:
          type: string
          description: The GUID of the document.
        htmlDefinition:
          $ref: '#/components/schemas/documentHtmlDefinition'
      description: ""
      x-ds-definition-name: documentHtmlDefinitionOriginal
      x-ms-summary: ""
    documentHtmlDefinitionOriginals:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            $ref: '#/components/schemas/documentHtmlDefinitionOriginal'
      description: ""
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ms-summary: ""
    documentHtmlDefinitions:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            type: string
      description: ""
      x-ds-definition-name: documentHtmlDefinitions
      x-ms-summary: ""
    documentHtmlDisplayAnchor:
      type: object
      properties:
        caseSensitive:
          type: boolean
          description: When set to **true**, the start or end anchor strings must
            match the strings specified by the start and end anchor settings in case
            as well as in content.
        displaySettings:
          $ref: '#/components/schemas/documentHtmlDisplaySettings'
        endAnchor:
          type: string
          description: |-
            Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
        removeEndAnchor:
          type: boolean
          description: When **true**, removes the end anchor string for the Smart
            Section from the HTML, preventing it from displaying.
        removeStartAnchor:
          type: boolean
          description: When **true**, removes the start anchor string for the Smart
            Section from the HTML, preventing it from displaying.
        startAnchor:
          type: string
          description: |-
            Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
      description: ""
      x-ds-definition-name: documentHtmlDisplayAnchor
      x-ms-summary: ""
    documentHtmlDisplaySettings:
      type: object
      properties:
        cellStyle:
          type: string
          description: Specifies the valid CSS-formatted styles to use on responsive
            table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column`
            types.
        collapsibleSettings:
          $ref: '#/components/schemas/documentHtmlCollapsibleDisplaySettings'
        display:
          type: string
          description: "This string sets the display and behavior properties of\n\
            the document during signing. The possible values are:\n\n* `modal`<br>\n\
            \  The document is shown as a supplement action strip\n  and can be viewed,\
            \ downloaded, or printed in a modal window.\n  This is the recommended\
            \ value for supplemental documents. \n\n* `download`<br>\n  The document\
            \ is shown as a supplement action strip\n  and can be viewed, downloaded,\
            \ or printed in a new browser window. \n\n* `inline`<br>\n  The document\
            \ is shown in the normal signing window.\n  This value is not used with\
            \ supplemental documents,\n  but is the default value for all other documents.\n"
        displayLabel:
          type: string
          description: The label for the display section.
        displayOrder:
          type: integer
          description: The position on the page where the display section appears.
          format: int32
        displayPageNumber:
          type: integer
          description: The number of the page on which the display section appears.
          format: int32
        hideLabelWhenOpened:
          type: boolean
          description: When **true**, the `displayLabel` is hidden when the display
            section is expanded and the display section is no longer collapsible.
            This property is valid only when the value of the `display` property is
            `collapsed`.
        inlineOuterStyle:
          type: string
          description: Specifies the valid CSS-formatted styles to use on inline display
            sections. This property is valid only when the value of the `display`
            property is `inline`.
        labelWhenOpened:
          type: string
          description: The label for the display section when it is expanded from
            a collapsed state. This label displays only on the first opening and is
            only valid with the value of the `display` property is `collapsed`.
        preLabel:
          type: string
          description: Enables you to add descriptive text that appears before a collapsed
            section or continue button.
        scrollToTopWhenOpened:
          type: boolean
          description: When **true** and the section is expanded, the position of
            the section close is scrolled to the top of the screen. This property
            is only valid when the value of the `display` property is `collapsed`.
        tableStyle:
          type: string
          description: Specifies the valid CSS-formatted styles to use on responsive
            tables. This property is valid only when the value of the `display` property
            is `responsive_table` or `responsive_table_single_column`.
      description: ""
      x-ds-definition-name: documentHtmlDisplaySettings
      x-ms-summary: ""
    documentTemplate:
      type: object
      properties:
        documentEndPage:
          type: string
          description: ""
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentStartPage:
          type: string
          description: ""
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        templateId:
          type: string
          description: The unique identifier of the template. If this is not provided,
            DocuSign generates an error and the call fails.
      description: ""
      x-ds-definition-name: documentTemplate
      x-ms-summary: ""
    documentTemplateList:
      type: object
      properties:
        documentTemplates:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/documentTemplate'
      description: ""
      x-ds-definition-name: documentTemplateList
      x-ms-summary: ""
    documentVisibility:
      type: object
      properties:
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        rights:
          type: string
          description: |-
            Indicates whether the document is editable:

            - `editable`
            - `read_only`
        visible:
          type: string
          description: When **true**, the document is visible to the recipient.
      description: This object configures a recipient's read/write access to a document.
      x-ds-definition-name: documentVisibility
      x-ms-summary: This object configures a recipient's read/write access to a document.
    documentVisibilityList:
      type: object
      properties:
        documentVisibility:
          type: array
          description: An array of `documentVisibility` objects that specifies which
            documents are visible to which recipients.
          items:
            $ref: '#/components/schemas/documentVisibility'
      description: A list of `documentVisibility` objects that specify whether documents
        are visible to recipients.
      x-ds-definition-name: documentVisibilityList
      x-ms-summary: A list of `documentVisibility` objects that specify whether documents
        are visible to recipients.
    downgradeBillingPlanInformation:
      type: object
      properties:
        downgradeEventType:
          type: string
          description: ""
        planInformation:
          $ref: '#/components/schemas/planInformation'
      description: ""
      x-ds-definition-name: downgradeBillingPlanInformation
      x-ms-summary: ""
    downgradePlanUpdateResponse:
      type: object
      properties:
        accountPaymentMethod:
          type: string
          description: "The type of payment method used for the account. Valid values\
            \ are:\n\n- `credit_card`\n- "
        downgradeEffectiveDate:
          type: string
          description: ""
        downgradePaymentCycle:
          type: string
          description: ""
        downgradePlanId:
          type: string
          description: ""
        downgradePlanName:
          type: string
          description: ""
        downgradeRequestStatus:
          type: string
          description: ""
        message:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: downgradePlanUpdateResponse
      x-ms-summary: ""
    downgradRequestBillingInfoResponse:
      type: object
      properties:
        downgradePlanInformation:
          $ref: '#/components/schemas/downgradePlanUpdateResponse'
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
      description: ""
      x-ds-definition-name: downgradRequestBillingInfoResponse
      x-ms-summary: ""
    draw:
      type: object
      properties:
        allowSignerUpload:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        useBackgroundAsCanvas:
          type: string
          description: ""
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: draw
      x-ms-summary: ""
    editor:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: "The recipient's email address. Notification of the document\
            \ to sign is sent to this email address. \n\nMaximum length: 100 characters. "
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: "The recipient's first name. \n\nMaximum Length: 50 characters."
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        lastName:
          type: string
          description: The recipient's last name.
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`.\n"
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: A complex type defining the management and access rights of a recipient
        assigned as an editor on the envelope. Editors have the same management and
        access rights for the envelope as the sender. They can make changes to the
        envelope as if they were using the Correct feature. This recipient can add
        name and email information, add or change the routing order and set authentication
        options for the remaining recipients. Additionally, this recipient can edit
        signature/initial tabs and text tabs for the remaining recipients.
      x-ds-definition-name: editor
      x-ms-summary: A complex type defining the management and access rights of a
        recipient assigned as an editor on the envelope. Editors have the same management
        and access rights for the envelope as the sender. They can make changes to
        the envelope as if they were using the Correct feature. This recipient can
        add name and email information, add or change the routing order and set authentication
        options for the remaining recipients. Additionally, this recipient can edit
        signature/initial tabs and text tabs for the remaining recipients.
    email:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        validationPatternMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to enter an email address.
        This is a one-line field that checks that a valid email
        address is entered. It uses the same parameters as a Text
        tab, with the validation message and pattern set for email
        information.

        When getting information that includes
        this tab type, the original value of the tab when the
        associated envelope was sent is included in the response.
      x-ds-definition-name: email
      x-ms-summary: |
        A tab that allows the recipient to enter an email address.
        This is a one-line field that checks that a valid email
        address is entered. It uses the same parameters as a Text
        tab, with the validation message and pattern set for email
        information.

        When getting information that includes
        this tab type, the original value of the tab when the
        associated envelope was sent is included in the response.
    emailAddress:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab id for the custom tab to
            be applied. This property can only be used when adding new tabs for a
            recipient. When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the recipient's email as entered in the
        recipient information.
      x-ds-definition-name: emailAddress
      x-ms-summary: |
        A tab that displays the recipient's email as entered in the
        recipient information.
    emailSettings:
      type: object
      properties:
        bccEmailAddresses:
          type: array
          description: "An array containing the email address that should receive\
            \ a copy of all email communications related to an envelope for archiving\
            \ purposes. Maximum Length: 100 characters.\n\nWhile this property is\
            \ an array, note that it takes only a single email address.\n\n**Note**:\
            \ Only users with the `canManageAccount` setting set to **true** can use\
            \ this option. \n\nDocuSign verifies that the email format is correct,\
            \ but does not verify that the email address is active. You can use this\
            \ for archiving purposes. However, using this property overrides the BCC\
            \ for Email Archive information setting for this envelope. \n\n**Example**:\
            \ if your account has BCC for Email Archive set up for the email address\
            \ archive@mycompany.com and you send an envelope using the BCC Email Override\
            \ to send a BCC email to salesarchive@mycompany.com, then a copy of the\
            \ envelope is only sent to the salesarchive@mycompany.com email address."
          items:
            $ref: '#/components/schemas/bccEmailAddress'
        replyEmailAddressOverride:
          type: string
          description: 'The Reply To email address to use for email replies, instead
            of the one that is configured at the account level. DocuSign verifies
            that the email address is in a correct format, but does not verify that
            it is active. Maximum Length: 100 characters.'
        replyEmailNameOverride:
          type: string
          description: 'The name to associate with the Reply To email address, instead
            of the name that is configured at the account level. Maximum Length: 100
            characters.'
      description: "A complex element that allows  the sender to override some envelope\
        \ email setting information. This can be used to override the Reply To email\
        \ address and name associated with the envelope and to override the BCC email\
        \ addresses to which an envelope is sent. \n\nWhen the emailSettings information\
        \ is used for an envelope, it only applies to that envelope. \n\n**IMPORTANT**:\
        \ The emailSettings information is not returned in the GET for envelope status.\
        \ Use GET /email_settings to return information about the emailSettings. \n\
        \nEmailSettings consists of: \n\n* replyEmailAddressOverride - The Reply To\
        \ email used for the envelope. DocuSign will verify that a correct email format\
        \ is used, but does not verify that the email is active. Maximum Length: 100\
        \ characters.\n* replyEmailNameOverride - The name associated with the Reply\
        \ To email address. Maximum Length: 100 characters.\n* bccEmailAddresses -\
        \ An array of up to five email addresses to which the envelope is sent to\
        \ as a BCC email. Only users with canManageAccount setting set to true can\
        \ use this option. \nDocuSign verifies that the email format is correct, but\
        \ does not verify that the email is active. Using this overrides the BCC for\
        \ Email Archive information setting for this envelope. Maximum Length: 100\
        \ characters.\n*Example*: if your account has BCC for Email Archive set up\
        \ for the email address 'archive@mycompany.com' and you send an envelope using\
        \ the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com',\
        \ then a copy of the envelope is only sent to the 'salesarchive@mycompany.com'\
        \ email address."
      x-ds-definition-name: emailSettings
      x-ms-summary: "A complex element that allows  the sender to override some envelope\
        \ email setting information. This can be used to override the Reply To email\
        \ address and name associated with the envelope and to override the BCC email\
        \ addresses to which an envelope is sent. \n\nWhen the emailSettings information\
        \ is used for an envelope, it only applies to that envelope. \n\n**IMPORTANT**:\
        \ The emailSettings information is not returned in the GET for envelope status.\
        \ Use GET /email_settings to return information about the emailSettings. \n\
        \nEmailSettings consists of: \n\n* replyEmailAddressOverride - The Reply To\
        \ email used for the envelope. DocuSign will verify that a correct email format\
        \ is used, but does not verify that the email is active. Maximum Length: 100\
        \ characters.\n* replyEmailNameOverride - The name associated with the Reply\
        \ To email address. Maximum Length: 100 characters.\n* bccEmailAddresses -\
        \ An array of up to five email addresses to which the envelope is sent to\
        \ as a BCC email. Only users with canManageAccount setting set to true can\
        \ use this option. \nDocuSign verifies that the email format is correct, but\
        \ does not verify that the email is active. Using this overrides the BCC for\
        \ Email Archive information setting for this envelope. Maximum Length: 100\
        \ characters.\n*Example*: if your account has BCC for Email Archive set up\
        \ for the email address 'archive@mycompany.com' and you send an envelope using\
        \ the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com',\
        \ then a copy of the envelope is only sent to the 'salesarchive@mycompany.com'\
        \ email address."
    eNoteConfiguration:
      type: object
      properties:
        apiKey:
          type: string
          description: ""
        connectConfigured:
          type: string
          description: When **false**, the user must configure Connect and eOriginal
            for the integration to work.
        eNoteConfigured:
          type: string
          description: |-
            When **false**, the user must configure eNote for the feature to work.

            **Note**: In the account settings, `allowENoteEOriginal` must be set to **true** to make changes to the configuration.
        organization:
          type: string
          description: The name of the organization.
        password:
          type: string
          description: The user's encrypted password hash.
        userName:
          type: string
          description: The user's username.
      description: This object contains information used to configure [eNote](https://www.docusign.com/products/enote)
        functionality. To use eNote, the Allow eNote for eOriginal account plan item
        must be on, and the Connect configuration for eOriginal must be set correctly.
      x-ds-definition-name: eNoteConfiguration
      x-ms-summary: This object contains information used to configure [eNote](https://www.docusign.com/products/enote)
        functionality. To use eNote, the Allow eNote for eOriginal account plan item
        must be on, and the Connect configuration for eOriginal must be set correctly.
    envelope:
      type: object
      properties:
        accessControlListBase64:
          type: string
          description: Reserved for DocuSign.
        allowComments:
          type: string
          description: When set to **true**, users can add comments to the documents
            in the envelope. For example, if a signer has a question about the text
            in the document, they can add a comment to the document.
        allowMarkup:
          type: string
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
        allowReassign:
          type: string
          description: When **true**, the recipient can redirect an envelope to a
            more appropriate recipient.
        allowViewHistory:
          type: string
          description: When set to **true**, recipients can view the history of the
            envelope.
        anySigner:
          type: string
          description: Deprecated. This feature has been replaced by signing groups.
        asynchronous:
          type: string
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
        attachmentsUri:
          type: string
          description: Contains a URL for retrieving the attachments that are associated
            with the envelope.
        authoritativeCopy:
          type: string
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
        authoritativeCopyDefault:
          type: string
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        brandId:
          type: string
          description: The id of the brand.
        brandLock:
          type: string
          description: When **true**, the `brandId` for the envelope is locked and
            senders cannot change the brand used for the envelope.
        certificateUri:
          type: string
          description: The URI for retrieving certificate information.
        completedDateTime:
          type: string
          description: Specifies the date and time this item was completed.
        copyRecipientData:
          type: string
          description: ""
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customFields:
          $ref: '#/components/schemas/AccountCustomFields'
        customFieldsUri:
          type: string
          description: The URI for retrieving custom fields.
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        deletedDateTime:
          type: string
          description: Reserved for DocuSign.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        disableResponsiveDocument:
          type: string
          description: When set to **true**, responsive documents are disabled for
            the envelope.
        documentsCombinedUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as a single PDF file.
        documentsUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as separate files.
        emailBlurb:
          type: string
          description: This is the same as the email body. If specified it is included
            in email body for all envelope recipients.
        emailSettings:
          $ref: '#/components/schemas/emailSettings'
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        enableWetSign:
          type: string
          description: When set to **true**, the signer is allowed to print the document
            and sign it on paper.
        enforceSignerVisibility:
          type: string
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
        envelopeAttachments:
          type: array
          description: An array of attachment objects that provide information about
            the attachments that are associated with the envelope.
          items:
            $ref: '#/components/schemas/attachment'
        envelopeDocuments:
          type: array
          description: An array containing information about the documents that are
            included in the envelope.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        envelopeIdStamping:
          type: string
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
        envelopeLocation:
          type: string
          description: Reserved for DocuSign.
        envelopeMetadata:
          $ref: '#/components/schemas/envelopeMetadata'
        envelopeUri:
          type: string
          description: The URI for retrieving the envelope or envelopes.
        expireAfter:
          type: string
          description: An integer specifying the number of days that a sent envelope
            remains active before it expires. A negative number in a response indicates
            that the envelope has already expired.
        expireDateTime:
          type: string
          description: The date and time the envelope is set to expire.
        expireEnabled:
          type: string
          description: When set to **true**, the envelope expires (is no longer available
            for signing) after the specified number of days after it is sent (`sentDateTime`).
            Set  `expireAfter` to set the number of days until an envelope expires.
            When **false**, the account default setting is used. If the account does
            not have an expiration setting, the DocuSign default value of 120 days
            is used.
        externalEnvelopeId:
          type: string
          description: May contain an external identifier for the envelope.
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        hasComments:
          type: string
          description: When set to **true**, indicates that users have added comments
            to the envelope.
        hasFormDataChanged:
          type: string
          description: When set to **true**, indicates that the data collected through
            form fields on a document has changed.
        hasWavFile:
          type: string
          description: 'When set to **true**, indicates that a .wav file used for
            voice authentication is included in the envelope. '
        holder:
          type: string
          description: Reserved for DocuSign.
        initialSentDateTime:
          type: string
          description: The date and time the envelope was initially sent.
        is21CFRPart11:
          type: string
          description: When **true**, indicates compliance with United States Food
            and Drug Administration (FDA) regulations on electronic records and electronic
            signatures (ERES).
        isDynamicEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a dynamic
            envelope.
        isSignatureProviderEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a signature-provided
            envelope.
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        location:
          type: string
          description: Reserved for DocuSign.
        lockInformation:
          $ref: '#/components/schemas/EnvelopeLocks'
        messageLock:
          type: string
          description: "When set to **true**, prevents senders from changing the contents\
            \ of `emailBlurb` and `emailSubject` properties for the envelope. \n\n\
            Additionally, this prevents users from making changes to the contents\
            \ of `emailBlurb` and `emailSubject` properties when correcting envelopes.\
            \ \n\nHowever, if the `messageLock` node is set to **true** and the `emailSubject`\
            \ property is empty, senders and correctors are able to add a subject\
            \ to the envelope."
        notification:
          $ref: '#/components/schemas/notification'
        notificationUri:
          type: string
          description: The URI for retrieving notifications.
        powerForm:
          $ref: '#/components/schemas/powerForm'
        purgeCompletedDate:
          type: string
          description: The date that a purge was completed.
        purgeRequestDate:
          type: string
          description: The date that a purge was requested.
        purgeState:
          type: string
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

        recipients:
          $ref: '#/components/schemas/EnvelopeRecipients'
        recipientsLock:
          type: string
          description: When set to **true**, prevents senders from changing, correcting,
            or deleting the recipient information for the envelope.
        recipientsUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            the recipients.
        sender:
          $ref: '#/components/schemas/userInfo'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signerCanSignOnMobile:
          type: string
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
        signingLocation:
          type: string
          description: Specifies the physical location where the signing takes place.
            It can have two enumeration values; `inPerson` and `online`. The default
            value is `online`.
        status:
          type: string
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
        statusChangedDateTime:
          type: string
          description: The data and time that the status changed.
        statusDateTime:
          type: string
          description: The DateTime that the envelope changed status (i.e. was created
            or sent.)
        templatesUri:
          type: string
          description: The URI for retrieving the templates.
        transactionId:
          type: string
          description: Specifies the Transaction ID from the AppStore.
        useDisclosure:
          type: string
          description: "When set to **true**, the disclosure is shown to recipients\
            \ in accordance with the account's Electronic Record and Signature Disclosure\
            \ frequency setting. When set to **false**, the Electronic Record and\
            \ Signature Disclosure is not shown to any envelope recipients. \n\nIf\
            \ the `useDisclosure` property is not set, then the account's normal disclosure\
            \ setting is used and the value of the `useDisclosure` property is not\
            \ returned in responses when getting envelope information."
        voidedDateTime:
          type: string
          description: The date and time the envelope or template was voided.
        voidedReason:
          type: string
          description: The reason the envelope or template was voided.
        workflow:
          $ref: '#/components/schemas/workflow'
      description: ""
      x-ds-definition-name: envelope
      x-ms-summary: ""
    envelopeAttachment:
      type: object
      properties:
        accessControl:
          type: string
          description: Valid values are `sender` and `senderAndAllRecipients`.
        attachmentId:
          type: string
          description: The unique identifier for the attachment.
        attachmentType:
          type: string
          description: |-
            Specifies the type of the attachment for the recipient. Possible values are:

            - `.htm`
            - `.xml`
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        label:
          type: string
          description: ""
        name:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: envelopeAttachment
      x-ms-summary: ""
    envelopeAttachmentsRequest:
      type: object
      properties:
        attachments:
          type: array
          description: An object that contains information about the attachment.
          items:
            $ref: '#/components/schemas/attachment'
      description: ""
      x-ds-definition-name: envelopeAttachmentsRequest
      x-ms-summary: ""
    envelopeAttachmentsResult:
      type: object
      properties:
        attachments:
          type: array
          description: An array of attachment objects that contain information about
            the attachments.
          items:
            $ref: '#/components/schemas/envelopeAttachment'
      description: ""
      x-ds-definition-name: envelopeAttachmentsResult
      x-ms-summary: ""
    envelopeAuditEvent:
      type: object
      properties:
        eventFields:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/nameValue'
      description: ""
      x-ds-definition-name: envelopeAuditEvent
      x-ms-summary: ""
    envelopeAuditEventResponse:
      type: object
      properties:
        auditEvents:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/envelopeAuditEvent'
      description: ""
      x-ds-definition-name: envelopeAuditEventResponse
      x-ms-summary: ""
    envelopeDefinition:
      type: object
      properties:
        accessControlListBase64:
          type: string
          description: Reserved for DocuSign.
        accessibility:
          type: string
          description: |-
            Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account.

            **Note**: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here.
        allowComments:
          type: string
          description: When **true**, comments are allowed on the envelope.
        allowMarkup:
          type: string
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
        allowReassign:
          type: string
          description: When **true**, the recipient can redirect an envelope to a
            more appropriate recipient.
        allowRecipientRecursion:
          type: string
          description: When set to **true**, this enables the Recursive Recipients
            feature and allows a recipient to appear more than once in the routing
            order.
        allowViewHistory:
          type: string
          description: When **true**, users can view the history of the envelope.
        anySigner:
          type: string
          description: Deprecated. This feature has been replaced by signing groups.
        asynchronous:
          type: string
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
        attachments:
          type: array
          description: An array of attachment objects containing details about any
            envelope attachments.
          items:
            $ref: '#/components/schemas/attachment'
        attachmentsUri:
          type: string
          description: The URI for retrieving the envelope attachments.
        authoritativeCopy:
          type: string
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
        authoritativeCopyDefault:
          type: string
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        brandId:
          type: string
          description: The id of the brand, or text and formatting, to use for the
            envelope. To use brands, account branding must be enabled for the account.
        brandLock:
          type: string
          description: When **true**, the `brandId` for the envelope is locked and
            senders cannot change the brand used for the envelope.
        certificateUri:
          type: string
          description: The URI for retrieving certificate information.
        completedDateTime:
          type: string
          description: The date and time that the envelope was completed.
        compositeTemplates:
          type: array
          description: A complex type that can be added to create envelopes from a
            combination of DocuSign templates and PDF forms. The basic envelope remains
            the same, while the Composite Template adds new document and template
            overlays into the envelope. There can be any number of Composite Template
            structures in the envelope.
          items:
            $ref: '#/components/schemas/compositeTemplate'
        copyRecipientData:
          type: string
          description: ""
        createdDateTime:
          type: string
          description: The date and time that the envelope was created.
        customFields:
          $ref: '#/components/schemas/AccountCustomFields'
        customFieldsUri:
          type: string
          description: The URI for retrieving custom fields.
        declinedDateTime:
          type: string
          description: The date and time that the recipient declined the envelope.
        deletedDateTime:
          type: string
          description: The date and time that the envelope was deleted.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        disableResponsiveDocument:
          type: string
          description: When set to **true**, the responsive document feature is turned
            off for the envelope.
        documents:
          type: array
          description: A complex element that contains details about the documents
            associated with the envelope.
          items:
            $ref: '#/components/schemas/document'
        documentsCombinedUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as a single PDF file.
        documentsUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as separate files.
        emailBlurb:
          type: string
          description: "This optional element holds the body of the email message\
            \ that is sent to all envelope recipients. \n\nMaximum Length: 10000 characters."
        emailSettings:
          $ref: '#/components/schemas/emailSettings'
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        enableWetSign:
          type: string
          description: When set to **true**, the signer is allowed to print the document
            and sign it on paper.
        enforceSignerVisibility:
          type: string
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
        envelopeAttachments:
          type: array
          description: An array of attachment objects that provide information about
            the attachments that are associated with the envelope.
          items:
            $ref: '#/components/schemas/attachment'
        envelopeDocuments:
          type: array
          description: An array containing information about the documents that are
            included in the envelope.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        envelopeIdStamping:
          type: string
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
        envelopeLocation:
          type: string
          description: Reserved for DocuSign.
        envelopeMetadata:
          $ref: '#/components/schemas/envelopeMetadata'
        envelopeUri:
          type: string
          description: The URI for retrieving the envelope or envelopes.
        eventNotification:
          $ref: '#/components/schemas/eventNotification'
        expireAfter:
          type: string
          description: An integer specifying the number of days that a sent envelope
            remains active before it expires. A negative number in a response indicates
            that the envelope has already expired.
        expireDateTime:
          type: string
          description: The date and time the envelope is set to expire.
        expireEnabled:
          type: string
          description: When set to **true**, the envelope expires (is no longer available
            for signing) after the specified number of days after it is sent (`sentDateTime`).
            Set  `expireAfter` to set the number of days until an envelope expires.
            When **false**, the account default setting is used. If the account does
            not have an expiration setting, the DocuSign default value of 120 days
            is used.
        externalEnvelopeId:
          type: string
          description: May contain an external identifier for the envelope.
        folders:
          type: array
          description: An array of folders that the envelope belongs to.
          items:
            $ref: '#/components/schemas/folder'
        hasComments:
          type: string
          description: When set to **true**, indicates that users have added comments
            to the envelope.
        hasFormDataChanged:
          type: string
          description: When set to **true**, indicates that the form data associated
            with the envelope has changed since it was sent. If **false**, this property
            does not appear in the response.
        hasWavFile:
          type: string
          description: When set to **true**, indicates that a wave file (voice recording)
            is part of the envelope.
        holder:
          type: string
          description: Reserved for DocuSign.
        initialSentDateTime:
          type: string
          description: The date and time that the envelope was first sent.
        is21CFRPart11:
          type: string
          description: When **true**, indicates compliance with United States Food
            and Drug Administration (FDA) regulations on electronic records and electronic
            signatures (ERES).
        isDynamicEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a dynamic
            envelope.
        isSignatureProviderEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a signature-provided
            envelope.
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        location:
          type: string
          description: Reserved for DocuSign.
        lockInformation:
          $ref: '#/components/schemas/EnvelopeLocks'
        messageLock:
          type: string
          description: "When set to **true**, prevents senders from changing the contents\
            \ of `emailBlurb` and `emailSubject` properties for the envelope. \n\n\
            Additionally, this prevents users from making changes to the contents\
            \ of `emailBlurb` and `emailSubject` properties when correcting envelopes.\
            \ \n\nHowever, if the `messageLock` node is set to **true** and the `emailSubject`\
            \ property is empty, senders and correctors are able to add a subject\
            \ to the envelope."
        notification:
          $ref: '#/components/schemas/notification'
        notificationUri:
          type: string
          description: The URI for retrieving notifications.
        password:
          type: string
          description: The user's encrypted password hash.
        powerForm:
          $ref: '#/components/schemas/powerForm'
        purgeCompletedDate:
          type: string
          description: The date that a purge was completed.
        purgeRequestDate:
          type: string
          description: The date that a purge was requested.
        purgeState:
          type: string
          description: |
            Initiates a purge request. Valid values are:
            * `documents_queued`: Places envelope documents in the purge queue.
            * `documents_and_metadata_queued`: Places envelope documents and metadata in the purge queue.
        recipients:
          $ref: '#/components/schemas/EnvelopeRecipients'
        recipientsLock:
          type: string
          description: When set to **true**, prevents senders from changing, correcting,
            or deleting the recipient information for the envelope.
        recipientsUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            the recipients.
        sender:
          $ref: '#/components/schemas/userInfo'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signerCanSignOnMobile:
          type: string
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
        signingLocation:
          type: string
          description: Specifies the physical location where the signing takes place.
            It can have two enumeration values; `inPerson` and `online`. The default
            value is `online`.
        status:
          type: string
          description: "Indicates the envelope status. Valid values when creating\
            \ an envelope are: \n\n* `created`: The envelope is created as a draft.\
            \ It can be modified and sent later.\n* `sent`: The envelope will be sent\
            \ to the recipients after the envelope is created.\n\nYou can query these\
            \ additional statuses once the recipients have interacted with the envelope.\n\
            \n* `completed`: The recipients have finished working with the envelope:\
            \ the documents are signed and all required tabs are filled in.\n* `declined`:\
            \ The envelope has been declined by the recipients.\n* `delivered`: The\
            \ envelope has been delivered to the recipients.\n* `signed`: The envelope\
            \ has been signed by the recipients.\n* `voided`: The envelope is no longer\
            \ valid and recipients cannot access or sign the envelope.\n"
        statusChangedDateTime:
          type: string
          description: The data and time that the status changed.
        statusDateTime:
          type: string
          description: The DateTime that the envelope changed status (i.e. was created
            or sent.)
        templateId:
          type: string
          description: 'The id of the template. If a value is not provided, DocuSign
            generates a value. '
        templateRoles:
          type: array
          description: |
            This object specifies the template recipients. Each `roleName` in the template must have a recipient assigned to it. This object is comprised of the following elements:

            * `email`: The recipient's email address.
            * `name`: The recipient's name.
            * `roleName`: The template roleName associated with the recipient.
            * `clientUserId`: An optional property that specifies whether the recipient is embedded or remote. If the `clientUserId` is not null, then the recipient is embedded. Note that if a `clientUserId` is used and the account settings `signerMustHaveAccount` or `signerMustLoginToSign` are **true**, an error is generated on sending.
            * `defaultRecipient`: Optional, When set to **true**, this recipient is the default recipient and any tabs generated by the `transformPdfFields` option are mapped to this recipient.
            * `routingOrder`: This specifies the routing order of the recipient in the envelope.
            * `accessCode`: This optional element specifies the access code a recipient has to enter to validate the identity. Maximum Length: 50 characters.
            * `inPersonSignerName`: Optional. If the template role is an in-person signer, this is the full legal name of the signer. Maximum Length: 100 characters.
            * `emailNotification`: This is an optional complex element that has a role-specific `emailSubject`, `emailBody`, and `language`. It follows the same format as the `emailNotification` property for recipients.
            * `tabs`: This property enables the tab values to be specified for matching to tabs in the template.
          items:
            $ref: '#/components/schemas/templateRole'
        templatesUri:
          type: string
          description: The URI for retrieving any templates associated with the envelope.
        transactionId:
          type: string
          description: ' Used to identify an envelope. The id is a sender-generated
            value and is valid in the DocuSign system for 7 days. We recommend that
            you use a transaction ID for offline signing to ensure that an envelope
            is not sent multiple times. You can use the `transactionId` property to
            determine an envelope''s status (i.e. was it created or not) in cases
            where the Internet connection was lost before the envelope status was
            returned.'
        useDisclosure:
          type: string
          description: "When set to **true**, the disclosure is shown to recipients\
            \ in accordance with the account's Electronic Record and Signature Disclosure\
            \ frequency setting. When set to **false**, the Electronic Record and\
            \ Signature Disclosure is not shown to any envelope recipients. \n\nIf\
            \ the `useDisclosure` property is not set, then the account's normal disclosure\
            \ setting is used and the value of the `useDisclosure` property is not\
            \ returned in responses when getting envelope information."
        voidedDateTime:
          type: string
          description: The date and time the envelope or template was voided.
        voidedReason:
          type: string
          description: The reason the envelope or template was voided.
        workflow:
          $ref: '#/components/schemas/workflow'
      description: Envelope object definition.
      x-ds-definition-name: envelopeDefinition
      x-ms-summary: Envelope object definition.
    envelopeDocument:
      type: object
      properties:
        addedRecipientIds:
          type: array
          description: If recipients were added by converting form fields into tabs,
            their ids appear here. Read only.
          items:
            type: string
        attachmentTabId:
          type: string
          description: If this document is an attachment to another document in the
            envelope, this is the id of the attachment tab it is associated with on
            the other document.
        authoritativeCopy:
          type: string
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
        authoritativeCopyMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        availableDocumentTypes:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/signatureType'
        containsPdfFormFields:
          type: string
          description: When **true**, the document has editable form fields that are
            made available through a PDF format.
        display:
          type: string
          description: "This string sets the display and behavior properties of\n\
            the document during signing. The possible values are:\n\n* `modal`<br>\n\
            \  The document is shown as a supplement action strip\n  and can be viewed,\
            \ downloaded, or printed in a modal window.\n  This is the recommended\
            \ value for supplemental documents. \n\n* `download`<br>\n  The document\
            \ is shown as a supplement action strip\n  and can be viewed, downloaded,\
            \ or printed in a new browser window. \n\n* `inline`<br>\n  The document\
            \ is shown in the normal signing window.\n  This value is not used with\
            \ supplemental documents,\n  but is the default value for all other documents.\n"
        displayMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentFields:
          type: array
          description: An object containing information about the custom fields on
            the document.
          items:
            $ref: '#/components/schemas/nameValue'
        documentId:
          type: string
          description: The id of the document that the tab is placed on. This value
            must refer to the id of an existing document.
        documentIdGuid:
          type: string
          description: The GUID of the document.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        includeInDownload:
          type: string
          description: "When set to **true**,\nthe document is included in the combined\
            \ document download (`documentsCombinedUri`). \nThe default value is **true**.\n"
        includeInDownloadMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        name:
          type: string
          description: "The document's file name. \n\nExample: `Q1-Report.docx`"
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        order:
          type: string
          description: "(Optional) The order in which to sort the results.\n\nValid\
            \ values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. "
        pages:
          type: array
          description: An array of page objects that contain information about the
            pages in the document.
          items:
            $ref: '#/components/schemas/page'
        signerMustAcknowledge:
          type: string
          description: "Sets how the signer interacts with the supplemental document.\n\
            The possible values are: \n\n*\t`no_interaction`<br>\n  No recipient action\
            \ is required. \n\n*\t`view`<br>\n  The recipient is required to view\
            \ the document. \n\n*\t`accept`<br>\n  The recipient is required to accept\
            \ the document by selecting accept during signing, but is not required\
            \ to view the document. \n\n*\t`view_accept`<br>\n  The recipient is required\
            \ to view and accept the document.  \n\n"
        signerMustAcknowledgeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sizeBytes:
          type: string
          description: ""
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        type:
          type: string
          description: ""
        uri:
          type: string
          description: The URI for retrieving the document.
      description: This object contains details about the envelope document.
      x-ds-definition-name: envelopeDocument
      x-ms-summary: This object contains details about the envelope document.
    envelopeDocumentsResult:
      type: object
      properties:
        envelopeDocuments:
          type: array
          description: An array containing information about the documents that are
            included in the envelope.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
      description: ""
      x-ds-definition-name: envelopeDocumentsResult
      x-ms-summary: ""
    envelopeEvent:
      type: object
      properties:
        envelopeEventStatusCode:
          type: string
          description: 'An envelope status for which your webhook should be called.
            Values: Draft, Sent, Delivered, Completed, Declined, or Voided.'
        includeDocuments:
          type: string
          description: 'When set to **true**, the PDF documents are included in the
            message along with the updated XML. '
      description: For which envelope events should your webhook be called?
      x-ds-definition-name: envelopeEvent
      x-ms-summary: For which envelope events should your webhook be called?
    envelopeFormData:
      type: object
      properties:
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        formData:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/formDataItem'
        prefillFormData:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/formDataItem'
        recipientFormData:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/recipientFormData'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
      description: ""
      x-ds-definition-name: envelopeFormData
      x-ms-summary: ""
    envelopeId:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the envelope ID. Recipients cannot enter
        or change the information in this tab.
      x-ds-definition-name: envelopeId
      x-ms-summary: |
        A tab that displays the envelope ID. Recipients cannot enter
        or change the information in this tab.
    envelopeIdsRequest:
      type: object
      properties:
        envelopeIds:
          type: array
          description: A comma-separated list of envelope IDs to include in the results.
          items:
            type: string
        transactionIds:
          type: array
          description: A comma-separated list of transaction IDs to include in the
            results. Note that transaction IDs are valid for seven days.
          items:
            type: string
      description: Lists of envelope and transaction IDs to use in the results.
      x-ds-definition-name: envelopeIdsRequest
      x-ms-summary: Lists of envelope and transaction IDs to use in the results.
    envelopeMetadata:
      type: object
      properties:
        allowAdvancedCorrect:
          type: string
          description: Specifies if the Advanced Correct feature is enabled for the
            envelope. This feature enables you to correct the details of in process
            envelopes that you sent or are shared with you. It offers more functionality
            than the Correct feature.
        allowCorrect:
          type: string
          description: Specifies if the Correct feature is enabled for the envelope.
            This feature enables you to correct the details of in process envelopes
            that you sent or are shared with you, including the recipient, envelope,
            and document information.
        enableSignWithNotary:
          type: string
          description: Specifies if DocuSign eNotary service is enabled for the envelope.
      description: ""
      x-ds-definition-name: envelopeMetadata
      x-ms-summary: ""
    envelopeNotificationRequest:
      type: object
      properties:
        expirations:
          $ref: '#/components/schemas/expirations'
        reminders:
          $ref: '#/components/schemas/reminders'
        useAccountDefaults:
          type: string
          description: When set to **true**, the account default notification settings
            are used for the envelope, overriding the reminders and expirations settings.
            When set to **false**, the reminders and expirations settings specified
            in this request are used.
      description: A complex element that specifies the notification settings for
        the envelope.
      x-ds-definition-name: envelopeNotificationRequest
      x-ms-summary: A complex element that specifies the notification settings for
        the envelope.
    envelopePurgeConfiguration:
      type: object
      properties:
        purgeEnvelopes:
          type: string
          description: When set to **true**, purging is enabled.
        redactPII:
          type: string
          description: |-
            When set to **true**, the system also redacts personally identifiable information (PII).

            **Note**: To redact PII, you must also set the property `removeTabsAndEnvelopeAttachments` to **true**.
        removeTabsAndEnvelopeAttachments:
          type: string
          description: 'When set to **true**, the system also purges the tabs and
            attachments associated with the envelopes. '
        retentionDays:
          type: string
          description: The number of days to retain envelope documents before purging
            them. This value must be a number between `0` and `999`.
      description: 'Contains information about the current envelope purge configuration
        for an account, which enables account administrators to purge documents from
        completed and voided envelopes after a set number of days (`retentionDays`). '
      x-ds-definition-name: envelopePurgeConfiguration
      x-ms-summary: 'Contains information about the current envelope purge configuration
        for an account, which enables account administrators to purge documents from
        completed and voided envelopes after a set number of days (`retentionDays`). '
    envelopesInformation:
      type: object
      properties:
        continuationToken:
          type: string
          description: A token returned by an earlier API call that you can use with
            a new call to resume a search query at the point where it left off.  This
            token system enhances the performance of the API.
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        envelopes:
          type: array
          description: Set of envelope information
          items:
            $ref: '#/components/schemas/envelope'
        envelopeTransactionStatuses:
          type: array
          description: Array of envelope statuses and transaction IDs in the result
            set.
          items:
            $ref: '#/components/schemas/envelopeTransactionStatus'
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        lastQueriedDateTime:
          type: string
          description: The last time that a query was performed.
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: 'Result set for the Envelopes: listStatusChanges method'
      x-ds-definition-name: envelopesInformation
      x-ms-summary: 'Result set for the Envelopes: listStatusChanges method'
    envelopeSummary:
      type: object
      properties:
        bulkEnvelopeStatus:
          $ref: '#/components/schemas/bulkEnvelopeStatus'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are: \n\n* `completed`:\
            \ The recipients have finished working with the envelope: the documents\
            \ are signed and all required tabs are filled in.\n* `created`: The envelope\
            \ is created as a draft. It can be modified and sent later.\n* `declined`:\
            \ The envelope has been declined by the recipients.\n* `delivered`: The\
            \ envelope has been delivered to the recipients.\n* `sent`: The envelope\
            \ will be sent to the recipients after the envelope is created.\n* `signed`:\
            \ The envelope has been signed by the recipients.\n* `voided`: The envelope\
            \ is no longer valid and recipients cannot access or sign the envelope.\n"
        statusDateTime:
          type: string
          description: The DateTime that the envelope changed status (i.e. was created
            or sent.)
        uri:
          type: string
          description: A URI containing the user ID.
      description: ' This object describes an envelope.'
      x-ds-definition-name: envelopeSummary
      x-ms-summary: ' This object describes an envelope.'
    envelopeTemplate:
      type: object
      properties:
        accessControlListBase64:
          type: string
          description: Reserved for DocuSign.
        allowComments:
          type: string
          description: When set to **true**, users can add comments to the documents
            in the envelope. For example, if a signer has a question about the text
            in the document, they can add a comment to the document.
        allowMarkup:
          type: string
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
        allowReassign:
          type: string
          description: When **true**, the recipient can redirect an envelope to a
            more appropriate recipient.
        allowViewHistory:
          type: string
          description: When set to **true**, recipients can view the history of the
            envelope.
        anySigner:
          type: string
          description: Deprecated. This feature has been replaced by signing groups.
        asynchronous:
          type: string
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
        attachmentsUri:
          type: string
          description: Contains a URL for retrieving the attachments that are associated
            with the envelope.
        authoritativeCopy:
          type: string
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
        authoritativeCopyDefault:
          type: string
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
        autoMatch:
          type: string
          description: |-
            By default, templates that have been used within
            the last 60 days are included in auto-matching.

            By explicitly setting `autoMatch`,
            you can permanently include or exclude the template
            in auto matching.

            When **true** the template is included in auto-matching
            regardless of when it was last used.

            When **false** the template is never included in auto-matching.
        autoMatchSpecifiedByUser:
          type: string
          description: |-
            If **true**, the template has been explicitly included in or excluded from auto-matching. The default is false.
            This is a read-only property.
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        brandId:
          type: string
          description: The id of the brand.
        brandLock:
          type: string
          description: When **true**, the `brandId` for the envelope is locked and
            senders cannot change the brand used for the envelope.
        certificateUri:
          type: string
          description: The URI for retrieving certificate information.
        completedDateTime:
          type: string
          description: Specifies the date and time this item was completed.
        copyRecipientData:
          type: string
          description: ""
        created:
          type: string
          description: The UTC DateTime when the workspace user authorization was
            created.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customFields:
          $ref: '#/components/schemas/AccountCustomFields'
        customFieldsUri:
          type: string
          description: The URI for retrieving custom fields.
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        deletedDateTime:
          type: string
          description: Reserved for DocuSign.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        description:
          type: string
          description: |
            A sender-defined description of the line item.
        disableResponsiveDocument:
          type: string
          description: When set to **true**, responsive documents are disabled for
            the envelope.
        documents:
          type: array
          description: A complex element that contains details about the documents
            associated with the envelope.
          items:
            $ref: '#/components/schemas/document'
        documentsCombinedUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as a single PDF file.
        documentsUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as separate files.
        emailBlurb:
          type: string
          description: This is the same as the email body. If the sender enters an
            email blurb, it is included in the email body for all envelope recipients.
        emailSettings:
          $ref: '#/components/schemas/emailSettings'
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        enableWetSign:
          type: string
          description: When set to **true**, the signer is allowed to print the document
            and sign it on paper.
        enforceSignerVisibility:
          type: string
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
        envelopeAttachments:
          type: array
          description: An array of attachment objects that provide information about
            the attachments that are associated with the envelope.
          items:
            $ref: '#/components/schemas/attachment'
        envelopeDocuments:
          type: array
          description: An array containing information about the documents that are
            included in the envelope.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        envelopeIdStamping:
          type: string
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
        envelopeLocation:
          type: string
          description: Reserved for DocuSign.
        envelopeMetadata:
          $ref: '#/components/schemas/envelopeMetadata'
        envelopeUri:
          type: string
          description: The URI for retrieving the envelope or envelopes.
        expireAfter:
          type: string
          description: An integer specifying the number of days that a sent envelope
            remains active before it expires. A negative number in a response indicates
            that the envelope has already expired.
        expireDateTime:
          type: string
          description: The date and time the envelope is set to expire.
        expireEnabled:
          type: string
          description: When set to **true**, the envelope expires (is no longer available
            for signing) after the specified number of days after it is sent (`sentDateTime`).
            Set  `expireAfter` to set the number of days until an envelope expires.
            When **false**, the account default setting is used. If the account does
            not have an expiration setting, the DocuSign default value of 120 days
            is used.
        externalEnvelopeId:
          type: string
          description: May contain an external identifier for the envelope.
        favoritedByMe:
          type: string
          description: ""
        folderId:
          type: string
          description: The id of the folder.
        folderIds:
          type: array
          description: ""
          items:
            type: string
        folderName:
          type: string
          description: ""
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        hasComments:
          type: string
          description: When set to **true**, indicates that users have added comments
            to the envelope.
        hasFormDataChanged:
          type: string
          description: When set to **true**, indicates that the data collected through
            form fields on a document has changed.
        hasWavFile:
          type: string
          description: 'When set to **true**, indicates that a .wav file used for
            voice authentication is included in the envelope. '
        holder:
          type: string
          description: Reserved for DocuSign.
        initialSentDateTime:
          type: string
          description: The date and time the envelope was initially sent.
        is21CFRPart11:
          type: string
          description: When **true**, indicates compliance with United States Food
            and Drug Administration (FDA) regulations on electronic records and electronic
            signatures (ERES).
        isDynamicEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a dynamic
            envelope.
        isSignatureProviderEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a signature-provided
            envelope.
        lastModified:
          type: string
          description: |-
            The UTC date and time that the comment was last updated.

            **Note**: This can only be done by the creator.
        lastModifiedBy:
          $ref: '#/components/schemas/userInfo'
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        lastUsed:
          type: string
          description: ""
        location:
          type: string
          description: Reserved for DocuSign.
        lockInformation:
          $ref: '#/components/schemas/EnvelopeLocks'
        messageLock:
          type: string
          description: "When set to **true**, prevents senders from changing the contents\
            \ of `emailBlurb` and `emailSubject` properties for the envelope. \n\n\
            Additionally, this prevents users from making changes to the contents\
            \ of `emailBlurb` and `emailSubject` properties when correcting envelopes.\
            \ \n\nHowever, if the `messageLock` node is set to **true** and the `emailSubject`\
            \ property is empty, senders and correctors are able to add a subject\
            \ to the envelope."
        name:
          type: string
          description: ""
        newPassword:
          type: string
          description: The user's new password.
        notification:
          $ref: '#/components/schemas/notification'
        notificationUri:
          type: string
          description: The URI for retrieving notifications.
        owner:
          $ref: '#/components/schemas/userInfo'
        pageCount:
          type: string
          description: 'An integer value specifying the number of document pages in
            the template. '
        password:
          type: string
          description: The user's encrypted password hash.
        passwordProtected:
          type: string
          description: ""
        powerForm:
          $ref: '#/components/schemas/powerForm'
        powerForms:
          type: array
          description: An array of PowerForm objects.
          items:
            $ref: '#/components/schemas/powerForm'
        purgeCompletedDate:
          type: string
          description: The date that a purge was completed.
        purgeRequestDate:
          type: string
          description: The date that a purge was requested.
        purgeState:
          type: string
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

        recipients:
          $ref: '#/components/schemas/EnvelopeRecipients'
        recipientsLock:
          type: string
          description: When set to **true**, prevents senders from changing, correcting,
            or deleting the recipient information for the envelope.
        recipientsUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            the recipients.
        sender:
          $ref: '#/components/schemas/userInfo'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        signerCanSignOnMobile:
          type: string
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
        signingLocation:
          type: string
          description: Specifies the physical location where the signing takes place.
            It can have two enumeration values; `inPerson` and `online`. The default
            value is `online`.
        status:
          type: string
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
        statusChangedDateTime:
          type: string
          description: The data and time that the status changed.
        statusDateTime:
          type: string
          description: The DateTime that the envelope changed status (i.e. was created
            or sent.)
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
        templatesUri:
          type: string
          description: The URI for retrieving the templates.
        transactionId:
          type: string
          description: Specifies the Transaction ID from the AppStore.
        uri:
          type: string
          description: A URI containing the user ID.
        useDisclosure:
          type: string
          description: "When set to **true**, the disclosure is shown to recipients\
            \ in accordance with the account's Electronic Record and Signature Disclosure\
            \ frequency setting. When set to **false**, the Electronic Record and\
            \ Signature Disclosure is not shown to any envelope recipients. \n\nIf\
            \ the `useDisclosure` property is not set, then the account's normal disclosure\
            \ setting is used and the value of the `useDisclosure` property is not\
            \ returned in responses when getting envelope information."
        voidedDateTime:
          type: string
          description: The date and time the envelope or template was voided.
        voidedReason:
          type: string
          description: The reason the envelope or template was voided.
        workflow:
          $ref: '#/components/schemas/workflow'
      description: ""
      x-ds-definition-name: envelopeTemplate
      x-ms-summary: ""
    envelopeTemplateResults:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        envelopeTemplates:
          type: array
          description: The list of requested templates.
          items:
            $ref: '#/components/schemas/envelopeTemplate'
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: Information about templates.
      x-ds-definition-name: envelopeTemplateResults
      x-ms-summary: Information about templates.
    envelopeTransactionStatus:
      type: object
      properties:
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        status:
          type: string
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
        transactionId:
          type: string
          description: ' Used to identify an envelope. The id is a sender-generated
            value and is valid in the DocuSign system for 7 days. It is recommended
            that a transaction ID is used for offline signing to ensure that an envelope
            is not sent multiple times. The `transactionId` property can be used determine
            an envelope''s status (i.e. was it created or not) in cases where the
            internet connection was lost before the envelope status was returned.'
      description: ""
      x-ds-definition-name: envelopeTransactionStatus
      x-ms-summary: ""
    envelopeTransferRule:
      type: object
      properties:
        carbonCopyOriginalOwner:
          type: string
          description: When set to **true**, the original owner is added as a carbon
            copy recipient after envelope transfer. The default value is **false**.
        enabled:
          type: string
          description: When set to **true**, the envelope transfer rule is active.
        envelopeTransferRuleId:
          type: string
          description: The id of the envelope transfer rule. The system generates
            this id when the rule is first created.
        eventType:
          type: string
          description: "The type of envelope event that triggers the transfer. Valid\
            \ values are:\n\n- `sent`\n- `before sent` \n- `completed`"
        fromGroup:
          $ref: '#/components/schemas/group'
        fromUser:
          $ref: '#/components/schemas/userInformation'
        modifiedDate:
          type: string
          description: The UTC DateTime when the envelope transfer rule was last modified.
            This property is read only.
        modifiedUser:
          $ref: '#/components/schemas/userInformation'
        toFolder:
          $ref: '#/components/schemas/folder'
        toUser:
          $ref: '#/components/schemas/userInformation'
      description: This object contains details about an envelope transfer rule.
      x-ds-definition-name: envelopeTransferRule
      x-ms-summary: This object contains details about an envelope transfer rule.
    envelopeTransferRuleInformation:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        envelopeTransferRules:
          type: array
          description: Contains information about a specific envelope transfer rule.
          items:
            $ref: '#/components/schemas/envelopeTransferRule'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: envelopeTransferRuleInformation
      x-ms-summary: ""
    envelopeTransferRuleRequest:
      type: object
      properties:
        carbonCopyOriginalOwner:
          type: string
          description: When set to **true**, the original owner is added as a carbon
            copy recipient after envelope transfer. The default value is **false**.
        enabled:
          type: string
          description: When set to **true**, the envelope transfer rule is active.
        envelopeTransferRuleId:
          type: string
          description: The id of the envelope transfer rule. The system generates
            this id when the rule is first created.
        eventType:
          type: string
          description: "The type of envelope event that triggers the transfer. Valid\
            \ values are:\n\n- `sent`\n- `before sent` \n- `completed`"
        fromGroups:
          type: array
          description: Information about the group that triggers the transfer.
          items:
            $ref: '#/components/schemas/group'
        fromUsers:
          type: array
          description: Information about the user who triggers the transfer.
          items:
            $ref: '#/components/schemas/userInformation'
        modifiedDate:
          type: string
          description: The UTC DateTime when the envelope transfer rule was last modified.
            This property is read only.
        modifiedUser:
          $ref: '#/components/schemas/userInformation'
        toFolder:
          $ref: '#/components/schemas/folder'
        toUser:
          $ref: '#/components/schemas/userInformation'
      description: This object contains details about the envelope transfer rule that
        you want to create.
      x-ds-definition-name: envelopeTransferRuleRequest
      x-ms-summary: This object contains details about the envelope transfer rule
        that you want to create.
    envelopeUpdateSummary:
      type: object
      properties:
        bulkEnvelopeStatus:
          $ref: '#/components/schemas/bulkEnvelopeStatus'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        listCustomFieldUpdateResults:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/listCustomField'
        lockInformation:
          $ref: '#/components/schemas/EnvelopeLocks'
        purgeState:
          type: string
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

        recipientUpdateResults:
          type: array
          description: An array of `recipientUpdateResults` objects that contain details
            about the recipients.
          items:
            $ref: '#/components/schemas/recipientUpdateResponse'
        tabUpdateResults:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        textCustomFieldUpdateResults:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/textCustomField'
      description: ""
      x-ds-definition-name: envelopeUpdateSummary
      x-ms-summary: ""
    errorDetails:
      type: object
      properties:
        errorCode:
          type: string
          description: The code associated with the error condition.
        message:
          type: string
          description: A brief message describing the error condition.
      description: This object describes errors that occur. It is only valid for responses
        and ignored in requests.
      x-ds-definition-name: errorDetails
      x-ms-summary: This object describes errors that occur. It is only valid for
        responses and ignored in requests.
    eventNotification:
      type: object
      properties:
        envelopeEvents:
          type: array
          description: "A list of envelope-level event statuses that will trigger\
            \ Connect to send updates to the endpoint specified in the `url` property.\
            \ \n\nTo receive notifications, you must include either an `envelopeEvents`\
            \ node or a `recipientEvents` node. You do not need to specify both."
          items:
            $ref: '#/components/schemas/envelopeEvent'
        eventData:
          $ref: '#/components/schemas/connectEventData'
        includeCertificateOfCompletion:
          type: string
          description: 'When set to **true**, the Connect Service includes the Certificate
            of Completion with completed envelopes. '
        includeCertificateWithSoap:
          type: string
          description: When set to **true**, the Connect service will digitally sign
            the XML data. The signature will be included in the XML message.
        includeDocumentFields:
          type: string
          description: 'When set to **true**, the Document Fields associated with
            the envelope''s documents are included in the notification messages. Document
            Fields are optional custom name-value pairs added to documents using the
            API. '
        includeDocuments:
          type: string
          description: 'When set to **true**, the XML webhook messages will include
            the envelope''s PDF documents. Including the PDF documents will greatly
            increase the size of the notification messages. Ensure that your listener
            can handle incoming messages that are 25MB or larger. '
        includeEnvelopeVoidReason:
          type: string
          description: 'When set to **true**, this tells the Connect Service to include
            the void reason, as entered by the person that voided the envelope, in
            the message. '
        includeHMAC:
          type: string
          description: |-
            When set to **true**, HMAC headers will be included with the webhook notifications.

            **Note**: [HMAC must enabled](https://developers.docusign.com/platform/webhooks/connect/hmac/) at the account level with [one or more HMAC secrets](https://developers.docusign.com/platform/webhooks/connect/setting-up-hmac/).
        includeSenderAccountAsCustomField:
          type: string
          description: When set to **true**, Connect will include the sender account
            as Custom Field in the data.
        includeTimeZone:
          type: string
          description: 'When set to **true**, the envelope''s time zone information
            is included in the webhook messages. '
        loggingEnabled:
          type: string
          description: When set to **true**, the webhook messages are logged. They
            can be viewed on the DocuSign Administration Web Tool in the Connect section.
            Logged messages can also be downloaded via the [ConnectEvents resource](https://developers.docusign.com/docs/esign-rest-api/reference/connect/connectevents/).
        recipientEvents:
          type: array
          description: |-
            A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the url property.

            To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
          items:
            $ref: '#/components/schemas/recipientEvent'
        requireAcknowledgment:
          type: string
          description: 'When set to **true**, the DocuSign Connect service checks
            that the message was received and retries on failures. '
        signMessageWithX509Cert:
          type: string
          description: 'When set to **true**, Mutual TLS will be enabled for notifications.
            Mutual TLS must be initiated by the listener (the customer''s web server)
            during the TLS handshake protocol. '
        soapNameSpace:
          type: string
          description: |-
            The namespace of the SOAP interface.

            The namespace value must be set if useSoapInterface is set to true.
        url:
          type: string
          description: The endpoint to which webhook notification messages are sent
            via an HTTPS POST request. The url must start with https. The customer's
            web server must use an SSL/TLS certificate whose CA is in the Microsoft
            list of trusted CAs. Self-signed certificates are not ok. Free certificates
            from Let's Encrypt can be used.
        useSoapInterface:
          type: string
          description: 'When set to **true**, this tells the Connect service that
            the user''s endpoint has implemented a SOAP interface. '
      description: Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
      x-ds-definition-name: eventNotification
      x-ms-summary: Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
    eventResult:
      type: object
      properties:
        eventTimestamp:
          type: string
          description: Date/time of the event.
        failureDescription:
          type: string
          description: Reason for failure, if the event failed.
        status:
          type: string
          description: Event status.
        vendorFailureStatusCode:
          type: string
          description: Failure status code, if the event failed.
      description: Information about the result of an event.
      x-ds-definition-name: eventResult
      x-ms-summary: Information about the result of an event.
    expirations:
      type: object
      properties:
        expireAfter:
          type: string
          description: An integer that sets the number of days the envelope is active.
        expireEnabled:
          type: string
          description: When set to **true**, the envelope expires (is no longer available
            for signing) in the set number of days. If false, the account default
            setting is used. If the account does not have an expiration setting, the
            DocuSign default value of 120 days is used.
        expireWarn:
          type: string
          description: An integer that specifying the number of days before the envelope
            expires that an expiration warning email is sent to the recipient. If
            set to 0 (zero), no warning email is sent.
      description: A complex element that specifies the expiration settings for the
        envelope.
      x-ds-definition-name: expirations
      x-ms-summary: A complex element that specifies the expiration settings for the
        envelope.
    externalClaim:
      type: object
      properties:
        acquiredTime:
          type: string
          description: Reserved for DocuSign.
        claimName:
          type: string
          description: Reserved for DocuSign.
        provider:
          type: string
          description: Reserved for DocuSign.
        value:
          type: string
          description: Reserved for DocuSign.
      description: ' Claims about the user from an external provider. This object
        is reserved for DocuSign internal use.'
      x-ds-definition-name: externalClaim
      x-ms-summary: ' Claims about the user from an external provider. This object
        is reserved for DocuSign internal use.'
    externalDocServiceErrorDetails:
      type: object
      properties:
        authenticationUrl:
          type: string
          description: 'Reserved: TBD'
        errorCode:
          type: string
          description: A code associated with the error condition.
        message:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: externalDocServiceErrorDetails
      x-ms-summary: ""
    externalDocumentSources:
      type: object
      properties:
        boxnetEnabled:
          type: string
          description: The account is enabled to allow external documents to be attached
            from BoxNet.
        boxnetMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dropboxEnabled:
          type: string
          description: The account is enabled to allow external documents to be attached
            from DropBox.
        dropboxMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        googleDriveEnabled:
          type: string
          description: The account is enabled to allow external documents to be attached
            from Google Drive.
        googleDriveMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        oneDriveEnabled:
          type: string
          description: The account is enabled to allow external documents to be attached
            from OneDrive.
        oneDriveMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        salesforceEnabled:
          type: string
          description: The account is enabled to allow external documents to be attached
            from Salesforce.
        salesforceMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: A complex object specifying the external document sources.
      x-ds-definition-name: externalDocumentSources
      x-ms-summary: A complex object specifying the external document sources.
    externalFile:
      type: object
      properties:
        date:
          type: string
          description: The UTC date and time that the file or folder was last modified.
        id:
          type: string
          description: The storage provider's id for the file or folder.
        img:
          type: string
          description: |-
            The file extension for a file.

            **Note**: If the item is a folder, this value is null.
        name:
          type: string
          description: The full name of a file.
        size:
          type: string
          description: The size of the file. The file size limit varies based on the
            cloud storage provider.
        supported:
          type: string
          description: When set to **true**, DocuSign supports the file type for upload.
        type:
          type: string
          description: |-
            The type of cloud storage item. Valid values are:

            - `file`
            - `folder`
        uri:
          type: string
          description: The URI for the file or folder.
      description: This object contains information about a file or folder in cloud
        storage.
      x-ds-definition-name: externalFile
      x-ms-summary: This object contains information about a file or folder in cloud
        storage.
    externalFolder:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        errorDetails:
          $ref: '#/components/schemas/externalDocServiceErrorDetails'
        id:
          type: string
          description: A unique ID for the Salesforce object.
        items:
          type: array
          description: If the tab is a list, this represents the values that are possible
            for the tab.
          items:
            $ref: '#/components/schemas/externalFile'
        name:
          type: string
          description: ""
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: externalFolder
      x-ms-summary: ""
    favoriteTemplatesContentItem:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        favoritedDate:
          type: string
          description: ""
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
      description: ""
      x-ds-definition-name: favoriteTemplatesContentItem
      x-ms-summary: ""
    favoriteTemplatesInfo:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        favoriteTemplates:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/favoriteTemplatesContentItem'
        templatesUpdatedCount:
          type: integer
          description: ""
          format: int32
      description: ""
      x-ds-definition-name: favoriteTemplatesInfo
      x-ms-summary: ""
    featureAvailableMetadata:
      type: object
      properties:
        availabilty:
          type: string
          description: ""
        featureName:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: featureAvailableMetadata
      x-ms-summary: ""
    featureSet:
      type: object
      properties:
        currencyFeatureSetPrices:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/currencyFeatureSetPrice'
        envelopeFee:
          type: string
          description: Reserved for DocuSign.
        featureSetId:
          type: string
          description: Reserved for DocuSign.
        fixedFee:
          type: string
          description: Reserved for DocuSign.
        is21CFRPart11:
          type: string
          description: Reserved for DocuSign.
        isActive:
          type: string
          description: Reserved for DocuSign.
        isEnabled:
          type: string
          description: When set to **true**, the feature set is actively enabled as
            part of the plan.
        name:
          type: string
          description: Reserved for DocuSign.
        seatFee:
          type: string
          description: Reserved for DocuSign.
      description: This object provides details about a feature set, or add-on product
        that is associated with an account. It is reserved for DocuSign internal use
        only.
      x-ds-definition-name: featureSet
      x-ms-summary: This object provides details about a feature set, or add-on product
        that is associated with an account. It is reserved for DocuSign internal use
        only.
    fileType:
      type: object
      properties:
        fileExtension:
          type: string
          description: ""
        mimeType:
          type: string
          description: The mime-type of a file type listed in a fileTypes collection.
      description: ""
      x-ds-definition-name: fileType
      x-ms-summary: ""
    fileTypeList:
      type: object
      properties:
        fileTypes:
          type: array
          description: A collection of file types.
          items:
            $ref: '#/components/schemas/fileType'
      description: ""
      x-ds-definition-name: fileTypeList
      x-ms-summary: ""
    filter:
      type: object
      properties:
        actionRequired:
          type: string
          description: When set to **true**, the current user needs to take action
            on the item.
        expires:
          type: string
          description: The number of days a sent envelope remains active before it
            expires.
        folderIds:
          type: string
          description: |-
            Filters for any combination of folder ids and folder types. The possible folder types are:

            - `awaiting_my_signature`
            - `completed`
            - `draft`
            - `drafts`
            - `expiring_soon`
            - `inbox`
            - `out_for_signature`
            - `recyclebin`
            - `sentitems`
            - `waiting_for_others`
        fromDateTime:
          type: string
          description: The UTC DateTime of the beginning of a date range. If no value
            is provided, the default search is the previous 30 days.
        isTemplate:
          type: string
          description: When set to **true**, the item is a template.
        order:
          type: string
          description: "(Optional) The order in which to sort the results.\n\nValid\
            \ values are: \n\n\n* `asc`: Ascending order.\n* `desc`: Descending order. "
        orderBy:
          type: string
          description: |-
            The field used to sort the results.

            Example: `Created`
        searchTarget:
          type: string
          description: Reserved for DocuSign.
        searchText:
          type: string
          description: A free text search field for searching across the items in
            a folder. The search looks for the text that you enter in the recipient
            names and emails, envelope custom fields, sender name, and subject.
        status:
          type: string
          description: |-
            The status of the envelope. By default, all statuses are returned.

            For details, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions).
        toDateTime:
          type: string
          description: The UTC DateTime of the end of a date range. If no value is
            provided, the default search is to the current date.
      description: Use this object to create a filtered view of the items in a folder.
      x-ds-definition-name: filter
      x-ms-summary: Use this object to create a filtered view of the items in a folder.
    firstName:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the recipient's first name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the first section as the first name.
      x-ds-definition-name: firstName
      x-ms-summary: |
        A tab that displays the recipient's first name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the first section as the first name.
    folder:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        filter:
          $ref: '#/components/schemas/filter'
        folderId:
          type: string
          description: The id of the folder.
        folderItems:
          type: array
          description: A list of envelopes and templates that the folder contains.
          items:
            $ref: '#/components/schemas/folderItem_v2'
        folders:
          type: array
          description: A collection of folder objects returned in a response.
          items:
            $ref: '#/components/schemas/folder'
        hasAccess:
          type: string
          description: When set to **true**, the current user has access to the folder.
        hasSubFolders:
          type: string
          description: When set to **true**, the folder has subfolders.
        itemCount:
          type: string
          description: The number of items in the folder.
        name:
          type: string
          description: The name of the folder.
        owner:
          $ref: '#/components/schemas/userInfo'
        parentFolderId:
          type: string
          description: The id of the parent folder, or the special value `root` for
            the root folder.
        parentFolderUri:
          type: string
          description: The URI of the parent folder.
        subFolderCount:
          type: string
          description: The number of subfolders.
        type:
          type: string
          description: |-
            The type of folder. Possible values include:

            - `draft`
            - `inbox`
            - `normal` (a system-generated folder)
            - `recyclebin`
            - `sentitems`
            - `custom` (a custom folder created by a user)
        uri:
          type: string
          description: The URI for the folder.
      description: This object contains details about a folder.
      x-ds-definition-name: folder
      x-ms-summary: This object contains details about a folder.
    folderItem_v2:
      type: object
      properties:
        completedDateTime:
          type: string
          description: If the item is an envelope, this is the UTC DateTime when the
            envelope was completed.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        envelopeId:
          type: string
          description: If the item is an envelope, this is the id of the envelope.
        envelopeUri:
          type: string
          description: If the item is an envelope, this is the URI for retrieving
            it.
        expireDateTime:
          type: string
          description: The date and time the envelope is set to expire.
        folderId:
          type: string
          description: The id of the folder.
        folderUri:
          type: string
          description: If the item is a subfolder, this is the URI for retrieving
            it.
        is21CFRPart11:
          type: string
          description: When **true**, indicates compliance with United States Food
            and Drug Administration (FDA) regulations on electronic records and electronic
            signatures (ERES).
        ownerName:
          type: string
          description: The name of the user who owns the folder.
        recipients:
          $ref: '#/components/schemas/EnvelopeRecipients'
        recipientsUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            the recipients.
        senderCompany:
          type: string
          description: The name of the sender's company.
        senderEmail:
          type: string
          description: The sender's email address.
        senderName:
          type: string
          description: The sender's name.
        senderUserId:
          type: string
          description: The sender's id.
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        subject:
          type: string
          description: The subject of the envelope.
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
        templateUri:
          type: string
          description: The URI for retrieving the template.
      description: Information about folder item results.
      x-ds-definition-name: folderItem_v2
      x-ms-summary: Information about folder item results.
    folderItemResponse:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        folderItems:
          type: array
          description: 'A list of the envelopes in the specified folder or folders. '
          items:
            $ref: '#/components/schemas/folderItem_v2'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalRows:
          type: string
          description: The total number of items in the result.
      description: Results from a folder item request.
      x-ds-definition-name: folderItemResponse
      x-ms-summary: Results from a folder item request.
    folderItemsResponse:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        envelopes:
          type: array
          description: An array containing PowerForm data.
          items:
            $ref: '#/components/schemas/envelopeSummary'
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: folderItemsResponse
      x-ms-summary: ""
    folderSharedItem:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        folderId:
          type: string
          description: The id of the folder.
        name:
          type: string
          description: The name of the folder.
        owner:
          $ref: '#/components/schemas/userInfo'
        parentFolderId:
          type: string
          description: The id of the parent folder.
        parentFolderUri:
          type: string
          description: The URI for the parent folder.
        shared:
          type: string
          description: |-
            Indicates how the folder is shared. Valid values are:

            - `not_shared`
            - `shared_to`
        sharedGroups:
          type: array
          description: A list of groups that share the folder.
          items:
            $ref: '#/components/schemas/memberGroupSharedItem'
        sharedUsers:
          type: array
          description: A list of users that share the folder.
          items:
            $ref: '#/components/schemas/userSharedItem'
        uri:
          type: string
          description: A URI containing the user ID.
        user:
          $ref: '#/components/schemas/userInfo'
      description: ""
      x-ds-definition-name: folderSharedItem
      x-ms-summary: ""
    foldersRequest:
      type: object
      properties:
        envelopeIds:
          type: array
          description: A comma-separated list of envelope IDs.
          items:
            type: string
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        fromFolderId:
          type: string
          description: ' The id of the folder that the envelope is being moved from.'
      description: Information for a folder request.
      x-ds-definition-name: foldersRequest
      x-ms-summary: Information for a folder request.
    foldersResponse:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        envelopes:
          type: array
          description: An array containing PowerForm data.
          items:
            $ref: '#/components/schemas/envelopeSummary'
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: foldersResponse
      x-ms-summary: ""
    forgottenPasswordInformation:
      type: object
      properties:
        forgottenPasswordAnswer1:
          type: string
          description: The answer to the first forgotten password challenge question.
        forgottenPasswordAnswer2:
          type: string
          description: The answer to the second forgotten password challenge question.
        forgottenPasswordAnswer3:
          type: string
          description: The answer to the third forgotten password challenge question.
        forgottenPasswordAnswer4:
          type: string
          description: The answer to the fourth forgotten password challenge question.
        forgottenPasswordQuestion1:
          type: string
          description: The first challenge question presented to a user who has forgotten
            their password.
        forgottenPasswordQuestion2:
          type: string
          description: The second challenge question presented to a user who has forgotten
            their password.
        forgottenPasswordQuestion3:
          type: string
          description: The third challenge question presented to a user who has forgotten
            their password.
        forgottenPasswordQuestion4:
          type: string
          description: The fourth challenge question presented to a user who has forgotten
            their password.
      description: A complex element that has up to four Question/Answer pairs for
        forgotten password information.
      x-ds-definition-name: forgottenPasswordInformation
      x-ms-summary: A complex element that has up to four Question/Answer pairs for
        forgotten password information.
    formDataItem:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        listSelectedValue:
          type: string
          description: The selected value in a list.
        name:
          type: string
          description: The name of the form field.
        originalValue:
          type: string
          description: The initial value associated with the form field.
        value:
          type: string
          description: The current value associated with the form field.
      description: ""
      x-ds-definition-name: formDataItem
      x-ms-summary: ""
    formulaTab:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formula:
          type: string
          description: |
            Contains the formula
            for calculating the value of
            this tab.

            Use a tab's `tabLabel`,
            enclosed in brackets,
            to refer to it.

            For example,
            you want to present the total cost
            of two items, tax included.

            The cost of each item is stored
            in number tabs labeled Item1 and Item2.
            The tax rate is in a number tab
            labeled TaxRate.

            The formula string for this property
            would be:
            `([Item1] + [Item2]) * (1 + [TaxRate])`

            See [Calculated Fields][calculatedfields]
            in the DocuSign Support Center
            to learn more about formulas.

            Maximum Length: 2000 characters

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
        formulaMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        hidden:
          type: string
          description: |
            If this is a regular formula (no `paymentDetails` property is present):

            * **true**: The tab is hidden.
            * **false**: The tab is shown.

            If the formula is payment item (a `paymentDetails` property is present):

            * **true**: The tab is displayed as a payment.
            * **false**: The tab is displayed as a regular formula.
        hiddenMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        isPaymentAmountMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roundDecimalPlaces:
          type: string
          description: The number of decimal places to round to.
        roundDecimalPlacesMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        validationPatternMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+35, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+35, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        The value of a formula tab is calculated
        from the values of other
        number or date tabs in the document.
        When the recipient completes the underlying fields,
        the formula tab calculates and displays the result.

        The `formula` property of the tab
        contains the references
        to the underlying tabs.
        See [Calculated Fields][calculatedfields]
        in the DocuSign Support Center
        to learn more about formulas.

        If a formula tab contains
        a `paymentDetails` property,
        the tab is considered a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
      x-ds-definition-name: formulaTab
      x-ms-summary: |
        The value of a formula tab is calculated
        from the values of other
        number or date tabs in the document.
        When the recipient completes the underlying fields,
        the formula tab calculates and displays the result.

        The `formula` property of the tab
        contains the references
        to the underlying tabs.
        See [Calculated Fields][calculatedfields]
        in the DocuSign Support Center
        to learn more about formulas.

        If a formula tab contains
        a `paymentDetails` property,
        the tab is considered a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    fullName:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the recipient's full name.
      x-ds-definition-name: fullName
      x-ms-summary: |
        A tab that displays the recipient's full name.
    graphicsContext:
      type: object
      properties:
        fillColor:
          type: string
          description: The fill color to use for the overlay. Colors are typically
            specified by their RGB hex values, but you can also use a [friendly CSS
            color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
        lineColor:
          type: string
          description: The line color to use for the overlay. Colors are typically
            specified by their RGB hex values, but you can also use a [friendly CSS
            color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
        lineWeight:
          type: string
          description: The line weight or thickness to use for the overlay.
      description: ""
      x-ds-definition-name: graphicsContext
      x-ms-summary: ""
    group:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        groupId:
          type: string
          description: The DocuSign group ID for the group.
        groupName:
          type: string
          description: The name of the group.
        groupType:
          type: string
          description: The group type.
        permissionProfileId:
          type: string
          description: |-
            The ID of the permission profile associated with the group. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)
        users:
          type: array
          description: A list of the users in the group.
          items:
            $ref: '#/components/schemas/userInfo'
        usersCount:
          type: string
          description: The total number of users in the group.
      description: This object contains information about a group.
      x-ds-definition-name: group
      x-ms-summary: This object contains information about a group.
    groupInformation:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        groups:
          type: array
          description: A collection group objects containing information about the
            groups.
          items:
            $ref: '#/components/schemas/group'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: groupInformation
      x-ms-summary: ""
    idCheckConfiguration:
      type: object
      properties:
        authSteps:
          type: array
          description: A list of ID check security steps, each specifying an authorization
            type.
          items:
            $ref: '#/components/schemas/idCheckSecurityStep'
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        name:
          type: string
          description: The name of the signature.
      description: A complex object specifying ID check configuration.
      x-ds-definition-name: idCheckConfiguration
      x-ms-summary: A complex object specifying ID check configuration.
    idCheckInformationInput:
      type: object
      properties:
        addressInformationInput:
          $ref: '#/components/schemas/addressInformationInput'
        dobInformationInput:
          $ref: '#/components/schemas/dobInformationInput'
        ssn4InformationInput:
          $ref: '#/components/schemas/ssn4InformationInput'
        ssn9InformationInput:
          $ref: '#/components/schemas/ssn9InformationInput'
      description: A complex element that contains input information related to a
        recipient ID check.
      x-ds-definition-name: idCheckInformationInput
      x-ms-summary: A complex element that contains input information related to a
        recipient ID check.
    idCheckSecurityStep:
      type: object
      properties:
        authType:
          type: string
          description: Type of authorization used for the security check.
      description: ""
      x-ds-definition-name: idCheckSecurityStep
      x-ms-summary: ""
    initialHere:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        optional:
          type: string
          description: When set to **true**, the recipient does not need to complete
            this tab to complete the signing process.
        optionalMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: The page number on which the tab is located. For supplemental
            documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        scaleValue:
          type: string
          description: ' Sets the size for the InitialHere tab. It can be value from
            0.5 to 1.0, where 1.0 represents full size and 0.5 is 50% size.'
        scaleValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+2, -7)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+2, -7)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to initial the document. May
        be optional.
      x-ds-definition-name: initialHere
      x-ms-summary: |
        A tab that allows the recipient to initial the document. May
        be optional.
    inlineTemplate:
      type: object
      properties:
        customFields:
          $ref: '#/components/schemas/AccountCustomFields'
        documents:
          type: array
          description: A complex element that contains details about the documents
            associated with the envelope.
          items:
            $ref: '#/components/schemas/document'
        envelope:
          $ref: '#/components/schemas/envelope'
        recipients:
          $ref: '#/components/schemas/EnvelopeRecipients'
        sequence:
          type: string
          description: Specifies the order in which templates are overlaid.
      description: ""
      x-ds-definition-name: inlineTemplate
      x-ms-summary: ""
    inPersonSigner:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        canSignOffline:
          type: string
          description: When set to **true**, specifies that the signer can perform
            the signing ceremony offline.
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: "Indicates the number of times that the recipient has been\
            \ through a signing completion. \n\nIf this number is greater than `0`\
            \ for a signing group, only the user who previously completed may sign\
            \ again."
        creationReason:
          type: string
          description: The reason why the recipient was created (for example, `sender`).
            Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        defaultRecipient:
          type: string
          description: |
            When set to **true**,
            this is the default recipient for the envelope.
            This option is used when creating an envelope from a template.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: |
            The signer's email address in an eNotary flow.

            Use only when `inPersonSigningType` is `notary`.
            For regular in-person-signer flow, use `signerEmail` instead.
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        hostEmail:
          type: string
          description: |
            The email address of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `email` instead.

            Maximum Length: 100 characters.
        hostEmailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        hostName:
          type: string
          description: |
            The name of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
        hostNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        inPersonSigningType:
          type: string
          description: |
            Specifies whether the envelope uses the eNotary feature.
            Valid values:

            * `inPersonSigner`: The envelope uses the normal in-person signing flow.
            * `notary`: The envelope uses the eNotary in-person signing flow.
        inPersonSigningTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |
            The signer's full legal name in an eNotary flow.

            Required when `inPersonSigningType` is `notary`.
            For a regular in-person-signer flow, use `signerName` instead.

            Maximum Length: 100 characters.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        notaryHost:
          $ref: '#/components/schemas/notaryHost'
        notaryId:
          type: string
          description: ""
        note:
          type: string
          description: |
            A note sent to the in-person signer in the signing email.
            This note is visible only to this recipient.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientSignatureProviders:
          type: array
          description: The default signature provider is the DocuSign Electronic signature
            system. This parameter is used to specify one or more Standards Based
            Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: '#/components/schemas/recipientSignatureProvider'
        recipientSuppliesTabs:
          type: string
          description: When set to **true**, specifies that the recipient creates
            the tabs.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireSignerCertificate:
          type: string
          description: "By default, DocuSign signers create electronic signatures.\
            \ This field can be used to require the signer to use a SAFE-BioPharma\
            \ digital certificate for signing.\n\nThis parameter should only be used\
            \ to select a SAFE-BioPharma certificate. New integrations should use\
            \ the `recipientSignatureProviders` parameter for other types of digital\
            \ certificates. \n\nSet this parameter to `safe` to use a SAFE-BioPharma\
            \ certificate.\n\nThe signer must be enrolled in the SAFE program to sign\
            \ with a SAFE certificate."
        requireSignOnPaper:
          type: string
          description: When set to **true**, the signer must print, sign, and upload
            or fax the signed documents to DocuSign.
        requireUploadSignature:
          type: string
          description: When set to **true**, the signer is required to upload a new
            signature, even if they have a pre-adopted signature in their personal
            DocuSign account.
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signatureInfo:
          $ref: '#/components/schemas/recipientSignatureInformation'
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signerEmail:
          type: string
          description: |+
            The in-person signer's email address.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `email` instead.

            Maximum Length: 100 characters.

        signerEmailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signerFirstName:
          type: string
          description: The signer's first name.
        signerFirstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signerLastName:
          type: string
          description: The signer's last name.
        signerLastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signerName:
          type: string
          description: "Required. The full legal name of a signer for the envelope.\
            \ \n\nMaximum Length: 100 characters.\n\n\n"
        signerNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signInEachLocation:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab (instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signInEachLocationMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupId:
          type: string
          description: Not applicable. You cannot use a signing group for an in-person
            signer.
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: Not applicable.
        signingGroupUsers:
          type: array
          description: Not applicable.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`."
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: |
        Contains information about an in-person recipient. This is a DocuSign user,
        acting as a Signing Host,
        who is in the same physical location as the signer.
        To learn about the fields used
        for the eNotary feature,
        see the [EnvelopeRecipients resource][resource].

        [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
      x-ds-definition-name: inPersonSigner
      x-ms-summary: |
        Contains information about an in-person recipient. This is a DocuSign user,
        acting as a Signing Host,
        who is in the same physical location as the signer.
        To learn about the fields used
        for the eNotary feature,
        see the [EnvelopeRecipients resource][resource].

        [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
    integratedUserInfoList:
      type: object
      properties:
        allUsersSelected:
          type: string
          description: ""
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/userInfo'
      description: ""
      x-ds-definition-name: integratedUserInfoList
      x-ms-summary: ""
    intermediary:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: "The recipient's email address. Notification of the document\
            \ to sign is sent to this email address. \n\nMaximum length: 100 characters. "
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: 'The recipient''s first name. Maximum Length: 50 characters.'
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        lastName:
          type: string
          description: The recipient's last name.
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipientÃ¢Â\x80Â\x99s email system auto-responded\
            \ to the email from DocuSign. This status is used in the web console to\
            \ inform senders about the bounced-back email. This recipient status is\
            \ only used if **Send-on-behalf-of** is turned off for the account.\n\
            - `completed`: The recipient has completed their actions (signing or other\
            \ required actions if not a signer) for an envelope.\n- `created`: The\
            \ recipient is in a draft state. This value is only associated with draft\
            \ envelopes (envelopes that have a status of `created`).\n- `declined`:\
            \ The recipient declined to sign the document(s) in the envelope.\n- `delivered`:\
            \ The recipient has viewed the document(s) in an envelope through the\
            \ DocuSign signing website. This is not an email delivery of the documents\
            \ in an envelope.\n- `faxPending`: The recipient has finished signing\
            \ and the system is waiting for a fax attachment from the recipient before\
            \ completing their signing step.\n- `sent`: The recipient has been sent\
            \ an email notification that it is their turn to sign an envelope.\n-\
            \ `signed`: The recipient has completed (signed) all required tags in\
            \ an envelope. This is a temporary state during processing, after which\
            \ the recipient's status automatically switches to `completed`.\n"
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: Contains information about an intermediary recipient. An intermediary
        is a recipient who can, but is not required to, add name and email information
        for recipients at the same or subsequent level in the routing order, unless
        subsequent agents, editors or intermediaries are added.
      x-ds-definition-name: intermediary
      x-ms-summary: Contains information about an intermediary recipient. An intermediary
        is a recipient who can, but is not required to, add name and email information
        for recipients at the same or subsequent level in the routing order, unless
        subsequent agents, editors or intermediaries are added.
    jurisdiction:
      type: object
      properties:
        allowSystemCreatedSeal:
          type: string
          description: If **true**, the seal can be generated by the platform.
        allowUserUploadedSeal:
          type: string
          description: If **true**, the seal can be uploaded by the user.
        commissionIdInSeal:
          type: string
          description: If **true**, the notary's `comissionId` appears in the seal.
        county:
          type: string
          description: The county of the jurisdiction.
        countyInSeal:
          type: string
          description: If **true**, the county name appears in the seal.
        enabled:
          type: string
          description: If **true**, this jurisdiction is enabled.
        jurisdictionId:
          type: string
          description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
        name:
          type: string
          description: The name of the jurisdiction. Typically the state name.
        notaryPublicInSeal:
          type: string
          description: If **true**, the name of the notary appears in the seal.
        stateNameInSeal:
          type: string
          description: If **true**, the name of the state appears in the seal.
      description: |-
        Describes the jurisdiction of a notary.
        This is read-only object.
      x-ds-definition-name: jurisdiction
      x-ms-summary: |-
        Describes the jurisdiction of a notary.
        This is read-only object.
    lastName:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the recipient's last name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the last section as the last name.
      x-ds-definition-name: lastName
      x-ms-summary: |
        A tab that displays the recipient's last name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the last section as the last name.
    list:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign-generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        listItems:
          type: array
          description: "The list of values that can be selected by senders. The list\
            \ values are separated by semi-colons. Example: [one;two;three;four]\n\
            \nMaximum Length of listItems:  2048 characters.\nMaximum Length of items\
            \ in the list: 100 characters. \n"
          items:
            $ref: '#/components/schemas/listItem'
        listSelectedValue:
          type: string
          description: The value in the list that is selected by default.
        listSelectedValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: The value to use when the item is selected.
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        This tab offers a list of options to choose from.
        The `listItems`
        property contains a list of
        [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
        objects to specify the selectable options.
      x-ds-definition-name: list
      x-ms-summary: |
        This tab offers a list of options to choose from.
        The `listItems`
        property contains a list of
        [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
        objects to specify the selectable options.
    listCustomField:
      type: object
      properties:
        configurationType:
          type: string
          description: If you are using merge fields, this property specifies the
            type of the merge field. The only supported value is `salesforce`.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        fieldId:
          type: string
          description: The id of the custom field.
        listItems:
          type: array
          description: |-
            An array of strings that represents the options in a list.

            Maximum length: 2048 characters, but each individual option string can only be a maximum of 100 characters.
          items:
            type: string
        name:
          type: string
          description: The name of the custom field.
        required:
          type: string
          description: When set to **true**, senders are required to select an option
            from the list before they can send the envelope.
        show:
          type: string
          description: When set to **true**, the field displays in the **Envelope
            Custom Fields** section when a user creates or sends an envelope.
        value:
          type: string
          description: The value of the custom field. This is the value that the user
            who creates or sends the envelope selects from the list.
      description: This object represents a list custom field from which envelope
        creators and senders can select custom data.
      x-ds-definition-name: listCustomField
      x-ms-summary: This object represents a list custom field from which envelope
        creators and senders can select custom data.
    listItem:
      type: object
      properties:
        selected:
          type: string
          description: "When set to **true**, indicates that this item is the default\
            \ selection shown to a signer. \n\nOnly one selection can be set as the\
            \ default."
        selectedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        text:
          type: string
          description: 'Specifies the text that is shown in the dropdown list. '
        textMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: Specifies the value that is used when the list item is selected.
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |-
        One of the selectable items
        in the `listItems` property
        of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
      x-ds-definition-name: listItem
      x-ms-summary: |-
        One of the selectable items
        in the `listItems` property
        of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
    localePolicy:
      type: object
      properties:
        addressFormat:
          type: string
          description: ""
        addressFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowRegion:
          type: string
          description: ""
        calendarType:
          type: string
          description: ""
        calendarTypeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        cultureName:
          type: string
          description: ""
        cultureNameMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        currencyCode:
          type: string
          description: The currency code for the account, based on the [ISO 4217 currency
            code](https://www.iso.org/iso-4217-currency-codes.html).
        currencyCodeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        currencyNegativeFormat:
          type: string
          description: ""
        currencyNegativeFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        currencyPositiveFormat:
          type: string
          description: ""
        currencyPositiveFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        customDateFormat:
          type: string
          description: ""
        customSignDateFormat:
          type: string
          description: ""
        customSignTimeFormat:
          type: string
          description: ""
        customTimeFormat:
          type: string
          description: ""
        dateFormat:
          type: string
          description: ""
        dateFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        effectiveAddressFormat:
          type: string
          description: ""
        effectiveCalendarType:
          type: string
          description: ""
        effectiveCurrencyCode:
          type: string
          description: ""
        effectiveCurrencyNegativeFormat:
          type: string
          description: ""
        effectiveCurrencyPositiveFormat:
          type: string
          description: ""
        effectiveCustomDateFormat:
          type: string
          description: ""
        effectiveCustomTimeFormat:
          type: string
          description: ""
        effectiveDateFormat:
          type: string
          description: ""
        effectiveInitialFormat:
          type: string
          description: ""
        effectiveNameFormat:
          type: string
          description: ""
        effectiveTimeFormat:
          type: string
          description: ""
        effectiveTimeZone:
          type: string
          description: ""
        initialFormat:
          type: string
          description: ""
        initialFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        nameFormat:
          type: string
          description: ""
        nameFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signDateFormat:
          type: string
          description: |
            The format for the signature date. Valid values are:

            - `d/M/yyyy`
            - `dd-MM-yy`
            - `dd-MMM-yy`
            - `dd-MM-yyyy`
            - `dd.MM.yyyy`
            - `dd-MMM-yyyy`
            - `dd MMMM yyyy`
            - `M/d/yyyy`
            - `MM-dd-yyyy`
            - `MM/dd/yyyy`
            - `MM/dd/yy`
            - `MMM-dd-yyyy`
            - `MMM d, yyyy`
            - `MMMM d, yyyy`
            - `yyyy-MM-dd`
            - `yyyy-MMM-dd`
            - `yyyy/MM/dd`
            - `yyyy MMMM d`

            **Note**: Only Admin users can change this setting.
        signDateFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        signTimeFormat:
          type: string
          description: |
            The format for the signature time. Valid values are:

            - `none`
            - `HH:mm`
            - `h:mm`
            - `HH:mm:ss`
            - `h:mm:ss`
        signTimeFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timeFormat:
          type: string
          description: ""
        timeFormatMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timeZone:
          type: string
          description: ""
        timeZoneMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: ""
      x-ds-definition-name: localePolicy
      x-ms-summary: ""
    localePolicyTab:
      type: object
      properties:
        addressFormat:
          type: string
          description: ""
        calendarType:
          type: string
          description: ""
        cultureName:
          type: string
          description: ""
        currencyCode:
          type: string
          description: The currency code for the account, based on the [ISO 4217 currency
            code](https://www.iso.org/iso-4217-currency-codes.html).
        currencyNegativeFormat:
          type: string
          description: ""
        currencyPositiveFormat:
          type: string
          description: ""
        customDateFormat:
          type: string
          description: ""
        customTimeFormat:
          type: string
          description: ""
        dateFormat:
          type: string
          description: ""
        initialFormat:
          type: string
          description: ""
        nameFormat:
          type: string
          description: ""
        timeFormat:
          type: string
          description: ""
        timeZone:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: localePolicyTab
      x-ms-summary: ""
    lockInformation:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        lockDurationInSeconds:
          type: string
          description: The number of seconds to lock the envelope for editing.  This
            value must be greater than `0` seconds.
        lockedByApp:
          type: string
          description: The human-readable name of the application that is locking
            the envelope or template. This value displays to the user in error messages
            when lock conflicts occur.
        lockedByUser:
          $ref: '#/components/schemas/userInfo'
        lockedUntilDateTime:
          type: string
          description: The date and time that the lock expires.
        lockToken:
          type: string
          description: A unique identifier provided to the owner of the lock. You
            must use this token with subsequent calls to prove ownership of the lock.
        lockType:
          type: string
          description: The type of lock.  Currently `edit` is the only supported type.
        useScratchPad:
          type: string
          description: "When set to **true**, a scratchpad is used to edit information.\n\
            \ "
      description: ""
      x-ds-definition-name: lockInformation
      x-ms-summary: ""
    lockRequest:
      type: object
      properties:
        lockDurationInSeconds:
          type: string
          description: The number of seconds to lock the envelope for editing.  Must
            be greater than 0 seconds.
        lockedByApp:
          type: string
          description: A friendly name of the application used to lock the envelope.  Will
            be used in error messages to the user when lock conflicts occur.
        lockType:
          type: string
          description: The type of lock.  Currently `edit` is the only supported type.
        templatePassword:
          type: string
          description: The [password for the template](https://support.docusign.com/en/guides/ndse-user-guide-template-passwords).
            If you are using a lock for a template that has a password or an envelope
            that is based on a template that has a password, you must enter the `templatePassword`
            to save the changes.
        useScratchPad:
          type: string
          description: "When set to **true**, a scratchpad is used to edit information.\n\
            \ "
      description: This request object contains information about the lock that you
        want to create or update.
      x-ds-definition-name: lockRequest
      x-ms-summary: This request object contains information about the lock that you
        want to create or update.
    loginAccount:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the envelope.
        accountIdGuid:
          type: string
          description: The GUID associated with the account ID.
        baseUrl:
          type: string
          description: The URL that should be used for successive calls to this account.
            It includes the protocal (https), the DocuSign server where the account
            is located, and the account number. Use this Url to make API calls against
            this account. Many of the API calls provide Uri's that are relative to
            this baseUrl.
        email:
          type: string
          description: The email address for the user.
        isDefault:
          type: string
          description: This value is true if this is the default account for the user,
            otherwise false is returned.
        loginAccountSettings:
          type: array
          description: A list of settings on the acccount that indicate what features
            are available.
          items:
            $ref: '#/components/schemas/nameValue'
        loginUserSettings:
          type: array
          description: A list of user-level settings that indicate what user-specific
            features are available.
          items:
            $ref: '#/components/schemas/nameValue'
        name:
          type: string
          description: The name associated with the account.
        siteDescription:
          type: string
          description: An optional descirption of the site that hosts the account.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
        userName:
          type: string
          description: The name of this user as defined by the account.
      description: ""
      x-ds-definition-name: loginAccount
      x-ms-summary: ""
    loginInformation:
      type: object
      properties:
        apiPassword:
          type: string
          description: Contains a token that can be used for authentication in API
            calls instead of using the user name and password.
        loginAccounts:
          type: array
          description: The list of accounts that authenticating user is a member of.
          items:
            $ref: '#/components/schemas/loginAccount'
      description: ""
      x-ds-definition-name: loginInformation
      x-ms-summary: ""
    matchBox:
      type: object
      properties:
        height:
          type: string
          description: The height of the tab in pixels.
        pageNumber:
          type: string
          description: |
            Specifies the page number on which the tab is located.
            Must be 1 for supplemental documents.
        width:
          type: string
          description: The width of the tab in pixels.
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
      description: ""
      x-ds-definition-name: matchBox
      x-ms-summary: ""
    memberGroupSharedItem:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        group:
          $ref: '#/components/schemas/group'
        shared:
          type: string
          description: |-
            How the item is shared. One of:


            - `not_shared`: The item is not shared.

            - `shared_to`: The item is shared.
      description: Information about items shared among groups.
      x-ds-definition-name: memberGroupSharedItem
      x-ms-summary: Information about items shared among groups.
    memberSharedItems:
      type: object
      properties:
        envelopes:
          type: array
          description: List of information about shared envelopes.
          items:
            $ref: '#/components/schemas/sharedItem'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        folders:
          type: array
          description: List of information about shared folders.
          items:
            $ref: '#/components/schemas/folderSharedItem'
        templates:
          type: array
          description: List of information about shared templates.
          items:
            $ref: '#/components/schemas/templateSharedItem'
        user:
          $ref: '#/components/schemas/userInfo'
      description: Information about shared items.
      x-ds-definition-name: memberSharedItems
      x-ms-summary: Information about shared items.
    mergeField:
      type: object
      properties:
        allowSenderToEdit:
          type: string
          description: When **true**, the sender can modify the value of the `mergeField`
            tab during the sending process.
        allowSenderToEditMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        configurationType:
          type: string
          description: If you are using merge fields, this property specifies the
            type of the merge field. The only supported value is `salesforce`.
        configurationTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        path:
          type: string
          description: Sets the object associated with the custom tab. Currently this
            is the Salesforce Object.
        pathExtended:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/pathExtendedElement'
        pathExtendedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pathMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        row:
          type: string
          description: Specifies the row number in a Salesforce table that the merge
            field value corresponds to.
        rowMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        writeBack:
          type: string
          description: When **true**, data entered into the merge field during Signing
            will update the mapped Salesforce field.
        writeBackMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: Contains information for transfering values between Salesforce
        data fields and DocuSign Tabs.
      x-ds-definition-name: mergeField
      x-ms-summary: Contains information for transfering values between Salesforce
        data fields and DocuSign Tabs.
    mobileNotifierConfiguration:
      type: object
      properties:
        deviceId:
          type: string
          description: ""
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        platform:
          type: string
          description: The Platform of the client application
      description: ""
      x-ds-definition-name: mobileNotifierConfiguration
      x-ms-summary: ""
    mobileNotifierConfigurationInformation:
      type: object
      properties:
        mobileNotifierConfigurations:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/mobileNotifierConfiguration'
      description: ""
      x-ds-definition-name: mobileNotifierConfigurationInformation
      x-ms-summary: ""
    money:
      type: object
      properties:
        amountInBaseUnit:
          type: string
          description: |
            The total payment amount
            in the currency's base unit.
            For example, for USD
            the base currency is one cent.
        currency:
          type: string
          description: |
            The three-letter
            [ISO 4217][ISO4217] currency code for the payment.

            For example:

            * AUD Australian dollar
            * CAD Canadian dollar
            * EUR Euro
            * GBP Great Britain pound
            * USD United States dollar

            This is a read-only property.

            [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
        displayAmount:
          type: string
          description: |
            The payment amount as displayed
            in the `currency`.

            For example, if the payment amount
            is USD 12.59,
            the `amountInBaseUnit` is 1259 (cents),
            and the displayed amount is `$12.59 USD`.

            This is a read-only property.
      description: |
        Describes information
        about the `total` of a payment.
      x-ds-definition-name: money
      x-ms-summary: |
        Describes information
        about the `total` of a payment.
    nameValue:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        name:
          type: string
          description: The name of the item.
        originalValue:
          type: string
          description: The initial value of the item.
        value:
          type: string
          description: The current value of the item.
      description: A name-value pair that describes an item and provides a value for
        the item.
      x-ds-definition-name: nameValue
      x-ms-summary: A name-value pair that describes an item and provides a value
        for the item.
    newAccountDefinition:
      type: object
      properties:
        accountName:
          type: string
          description: The account name for the new account.
        accountSettings:
          $ref: '#/components/schemas/accountSettingsInformation'
        addressInformation:
          $ref: '#/components/schemas/accountAddress'
        creditCardInformation:
          $ref: '#/components/schemas/creditCardInformation'
        directDebitProcessorInformation:
          $ref: '#/components/schemas/directDebitProcessorInformation'
        distributorCode:
          type: string
          description: The Distributor Code that you received from DocuSign.
        distributorPassword:
          type: string
          description: The password for the `distributorCode`.
        envelopePartitionId:
          type: string
          description: Reserved for DocuSign.
        initialUser:
          $ref: '#/components/schemas/userInformation'
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        paymentProcessorInformation:
          $ref: '#/components/schemas/paymentProcessorInformation'
        planInformation:
          $ref: '#/components/schemas/planInformation'
        referralInformation:
          $ref: '#/components/schemas/referralInformation'
        socialAccountInformation:
          $ref: '#/components/schemas/socialAccountInformation'
      description: ""
      x-ds-definition-name: newAccountDefinition
      x-ms-summary: ""
    newAccountSummary:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the envelope.
        accountIdGuid:
          type: string
          description: The GUID associated with the account ID.
        accountName:
          type: string
          description: The account name for the new account.
        apiPassword:
          type: string
          description: Contains a token that can be used for authentication in API
            calls instead of using the user name and password.
        baseUrl:
          type: string
          description: The URL that should be used for successive calls to this account.
            It includes the protocal (https), the DocuSign server where the account
            is located, and the account number. Use this Url to make API calls against
            this account. Many of the API calls provide Uri's that are relative to
            this baseUrl.
        billingPlanPreview:
          $ref: '#/components/schemas/billingPlanPreview'
        userId:
          type: string
          description: Specifies the user ID of the new user.
      description: ""
      x-ds-definition-name: newAccountSummary
      x-ms-summary: ""
    newUser:
      type: object
      properties:
        apiPassword:
          type: string
          description: Contains a token that can be used for authentication in API
            calls instead of using the user name and password.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        email:
          type: string
          description: The user's email address.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        membershipId:
          type: string
          description: The user's membership ID.
        permissionProfileId:
          type: string
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
        permissionProfileName:
          type: string
          description: "The name of the account permission profile. \n\nExample: `Account\
            \ Administrator`"
        uri:
          type: string
          description: A URI containing the user ID.
        userId:
          type: string
          description: Specifies the user ID for the new user.
        userName:
          type: string
          description: The name of the user.
        userStatus:
          type: string
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
      description: Object representing a new user.
      x-ds-definition-name: newUser
      x-ms-summary: Object representing a new user.
    newUsersDefinition:
      type: object
      properties:
        newUsers:
          type: array
          description: A list of one or more new users.
          items:
            $ref: '#/components/schemas/userInformation'
      description: ""
      x-ds-definition-name: newUsersDefinition
      x-ms-summary: ""
    newUsersSummary:
      type: object
      properties:
        newUsers:
          type: array
          description: A list of one or more new users.
          items:
            $ref: '#/components/schemas/newUser'
      description: Object representing a summary of data for new users.
      x-ds-definition-name: newUsersSummary
      x-ms-summary: Object representing a summary of data for new users.
    notarize:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |+
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |+
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |-
        A tab that alerts notary recipients that
        they must take action on the page.
        Only one notarize tab can appear on a page.
      x-ds-definition-name: notarize
      x-ms-summary: |-
        A tab that alerts notary recipients that
        they must take action on the page.
        Only one notarize tab can appear on a page.
    notary:
      type: object
      properties:
        createdDate:
          type: string
          description: The creation date of the account in UTC timedate format.
        enabled:
          type: string
          description: The date the this object was created.
        searchable:
          type: string
          description: If **true**, this notary is searchable.
        userInfo:
          $ref: '#/components/schemas/userInformation'
      description: ""
      x-ds-definition-name: notary
      x-ms-summary: ""
    notaryHost:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: |
            The notary's email address.

            Maximum Length: 100 characters.
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        hostRecipientId:
          type: string
          description: ""
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |
            The notary's full legal name.

            Maximum Length: 100 characters.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        note:
          type: string
          description: |
            A note sent to the notary in the signing email.
            This note is visible only to this notary.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`."
        statusCode:
          type: string
          description: 'The code associated with the recipient''s status. Read only. '
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: |
        This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.

        It describes information about the notary host.
        The following information is required
        when using the eNotary in-person signing flow:

        * `name`: Specifies the notary's full legal name.
        * `email`: Specifies the notary's email address.
        * `recipientId`: A unique ID number for the notary signing host.
      x-ds-definition-name: notaryHost
      x-ms-summary: |
        This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.

        It describes information about the notary host.
        The following information is required
        when using the eNotary in-person signing flow:

        * `name`: Specifies the notary's full legal name.
        * `email`: Specifies the notary's email address.
        * `recipientId`: A unique ID number for the notary signing host.
    notaryJournal:
      type: object
      properties:
        createdDate:
          type: string
          description: The creation date of the account in UTC timedate format.
        documentName:
          type: string
          description: ""
        jurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        notaryJournalId:
          type: string
          description: ""
        notaryJournalMetaData:
          $ref: '#/components/schemas/notaryJournalMetaData'
        signerName:
          type: string
          description: |
            The in-person signer's full legal name.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
      description: ""
      x-ds-definition-name: notaryJournal
      x-ms-summary: ""
    notaryJournalCredibleWitness:
      type: object
      properties:
        address:
          type: string
          description: The user's address.
        name:
          type: string
          description: ""
        signatureImage:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: notaryJournalCredibleWitness
      x-ms-summary: ""
    notaryJournalList:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        notaryJournals:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notaryJournal'
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: notaryJournalList
      x-ms-summary: ""
    notaryJournalMetaData:
      type: object
      properties:
        comment:
          type: string
          description: ""
        credibleWitnesses:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notaryJournalCredibleWitness'
        signatureImage:
          type: string
          description: ""
        signerIdType:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: notaryJournalMetaData
      x-ms-summary: ""
    notaryJurisdiction:
      type: object
      properties:
        commissionExpiration:
          type: string
          description: 'The expiration date of the notary''s commission in format:
            `MM/DD/YYYY`.'
        commissionId:
          type: string
          description: The notary's commission identification. This varies from jurisdiction
            to jurisdiction.
        county:
          type: string
          description: The county that the commission is valid in.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        jurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        registeredName:
          type: string
          description: The registered name of the notary.
        sealType:
          type: string
          description: |-
            The seal type used for this juridiction.

            - `not_available`
            - `system_created`
            - `user_uploaded`
      description: A notary jurisdiction.
      x-ds-definition-name: notaryJurisdiction
      x-ms-summary: A notary jurisdiction.
    notaryJurisdictionList:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        notaryJurisdictions:
          type: array
          description: An array of jurisdictions.
          items:
            $ref: '#/components/schemas/notaryJurisdiction'
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: A paged list of jurisdictions.
      x-ds-definition-name: notaryJurisdictionList
      x-ms-summary: A paged list of jurisdictions.
    notaryRecipient:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        agentCanEditEmail:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            email address. This element is only active if enabled for the account.
        agentCanEditName:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            name. This element is only active if enabled for the account.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        bulkRecipientsUri:
          type: string
          description: Reserved for DocuSign.
        canSignOffline:
          type: string
          description: When set to **true**, specifies that the signer can perform
            the signing ceremony offline.
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        creationReason:
          type: string
          description: The reason why the item was created.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        defaultRecipient:
          type: string
          description: When set to **true**, this recipient is the default recipient
            and any tabs generated by the transformPdfFields option are mapped to
            this recipient.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: ""
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: "The user's first name. \nMaximum Length: 50 characters."
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        isBulkRecipient:
          type: string
          description: |
            Reserved for DocuSign.
        isBulkRecipientMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lastName:
          type: string
          description: "The user's last name. \nMaximum Length: 50 characters."
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        liveOakStartURL:
          type: string
          description: ""
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        notaryId:
          type: string
          description: ""
        notarySigners:
          type: array
          description: ""
          items:
            type: string
        notaryType:
          type: string
          description: ""
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        offlineAttributes:
          $ref: '#/components/schemas/offlineAttributes'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        proofFile:
          $ref: '#/components/schemas/recipientProofFile'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientSignatureProviders:
          type: array
          description: The default signature provider is the DocuSign Electronic signature
            system. This parameter is used to specify one or more Standards Based
            Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: '#/components/schemas/recipientSignatureProvider'
        recipientSuppliesTabs:
          type: string
          description: When set to **true**, specifies that the recipient creates
            the tabs.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireSignerCertificate:
          type: string
          description: "By default, DocuSign signers create electronic signatures.\
            \ This field can be used to require the signer to use a SAFE-BioPharma\
            \ digital certificate for signing.\n\nThis parameter should only be used\
            \ to select a SAFE-BioPharma certificate. New integrations should use\
            \ the `recipientSignatureProviders` parameter for other types of digital\
            \ certificates. \n\nSet this parameter to `safe` to use a SAFE-BioPharma\
            \ certificate.\n\nThe signer must be enrolled in the SAFE program to sign\
            \ with a SAFE certificate."
        requireSignOnPaper:
          type: string
          description: When set to **true**, the signer must print, sign, and upload
            or fax the signed documents to DocuSign.
        requireUploadSignature:
          type: string
          description: When set to **true**, the signer is required to upload a new
            signature, even if they have a pre-adopted signature in their personal
            DocuSign account.
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signatureInfo:
          $ref: '#/components/schemas/recipientSignatureInformation'
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signInEachLocation:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab (instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signInEachLocationMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusCode:
          type: string
          description: Reserved for DocuSign.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: ""
      x-ds-definition-name: notaryRecipient
      x-ms-summary: ""
    notaryResult:
      type: object
      properties:
        jurisdictions:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/jurisdiction'
        notary:
          $ref: '#/components/schemas/notary'
      description: Describes a single notary jurisdiction.
      x-ds-definition-name: notaryResult
      x-ms-summary: Describes a single notary jurisdiction.
    notarySeal:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        scaleValue:
          type: string
          description: Sets the size of the tab. This field accepts values from `0.5`
            to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
        scaleValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: notarySeal
      x-ms-summary: ""
    note:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays additional information, in the form of a
        note, for the recipient.
      x-ds-definition-name: note
      x-ms-summary: |
        A tab that displays additional information, in the form of a
        note, for the recipient.
    notification:
      type: object
      properties:
        expirations:
          $ref: '#/components/schemas/expirations'
        reminders:
          $ref: '#/components/schemas/reminders'
        useAccountDefaults:
          type: string
          description: When set to **true**, the account default notification settings
            are used for the envelope, overriding the reminders and expirations settings.
            When set to **false**, the reminders and expirations settings specified
            in this request are used.
      description: A complex element that specifies the notification settings for
        the envelope.
      x-ds-definition-name: notification
      x-ms-summary: A complex element that specifies the notification settings for
        the envelope.
    notificationDefaults:
      type: object
      properties:
        apiEmailNotifications:
          $ref: '#/components/schemas/notificationDefaultSettings'
        emailNotifications:
          $ref: '#/components/schemas/notificationDefaultSettings'
      description: ""
      x-ds-definition-name: notificationDefaults
      x-ms-summary: ""
    notificationDefaultSettings:
      type: object
      properties:
        senderEmailNotifications:
          $ref: '#/components/schemas/senderEmailNotifications'
        signerEmailNotifications:
          $ref: '#/components/schemas/signerEmailNotifications'
      description: Contains details about the default notification settings for the
        envelope notifications that senders and signers receive.
      x-ds-definition-name: notificationDefaultSettings
      x-ms-summary: Contains details about the default notification settings for the
        envelope notifications that senders and signers receive.
    number:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formula:
          type: string
          description: |
            Contains the formula
            for calculating the value of
            this tab.

            Use a tab's `tabLabel`,
            enclosed in brackets,
            to refer to it.

            For example,
            you want to present the total cost
            of two items, tax included.

            The cost of each item is stored
            in number tabs labeled Item1 and Item2.
            The tax rate is in a number tab
            labeled TaxRate.

            The formula string for this property
            would be:
            `([Item1] + [Item2]) * (1 + [TaxRate])`

            See [Calculated Fields][calculatedfields]
            in the DocuSign Support Center
            to learn more about formulas.

            Maximum Length: 2000 characters

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
        formulaMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        validationPatternMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to enter numbers and decimal
        (.) points.
      x-ds-definition-name: number
      x-ms-summary: |
        A tab that allows the recipient to enter numbers and decimal
        (.) points.
    oauthAccess:
      type: object
      properties:
        access_token:
          type: string
          description: Access token information.
        data:
          type: array
          description: A Base64-encoded representation of the attachment that is used
            to upload and download the file. File attachments may be up to 50 MB in
            size.
          items:
            $ref: '#/components/schemas/nameValue'
        expires_in:
          type: string
          description: ""
        refresh_token:
          type: string
          description: ""
        scope:
          type: string
          description: Must be set to "api".
        token_type:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: oauthAccess
      x-ms-summary: ""
    page:
      type: object
      properties:
        dpi:
          type: string
          description: The number of dots per inch used for the page image.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        height:
          type: string
          description: The height of the page in pixels.
        imageBytes:
          type: string
          description: The number of image bytes.
        mimeType:
          type: string
          description: The MIME type.
        pageId:
          type: string
          description: The id of the page.
        sequence:
          type: string
          description: The sequence of the page in the document, or page number.
        width:
          type: string
          description: The width of the page in pixels.
      description: Description of a page of a document.
      x-ds-definition-name: page
      x-ms-summary: Description of a page of a document.
    pageImages:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        pages:
          type: array
          description: An array of page objects.
          items:
            $ref: '#/components/schemas/page'
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: pageImages
      x-ms-summary: ""
    pageRequest:
      type: object
      properties:
        password:
          type: string
          description: The user's encrypted password hash.
        rotate:
          type: string
          description: 'Sets the direction the page image is rotated. The possible
            settings are: left or right'
      description: ""
      x-ds-definition-name: pageRequest
      x-ms-summary: ""
    pathExtendedElement:
      type: object
      properties:
        name:
          type: string
          description: ""
        type:
          type: string
          description: ""
        typeName:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: pathExtendedElement
      x-ms-summary: ""
    paymentDetails:
      type: object
      properties:
        allowedPaymentMethods:
          type: array
          description: |
            An array of accepted payment methods:

            * `CreditCard`
            * `ApplePay`
            * `AndroidPay`
            * `BankAccount`

            For example, if you only accept credit cards and ACH transfers, you would set this property to:

            `'["BankAccount", "CreditCard"]'`

            Do not specify `BankAccount` (ACH) if you are also using in-person signing.
          items:
            type: string
        chargeId:
          type: string
          description: The GUID set by the payment gateway (such as Stripe) that identifies
            a transaction. The `chargeId` is created when authorizing a payment and
            must be referenced when completing a payment.
        currencyCode:
          type: string
          description: |
            Specifies the three-letter
            [ISO 4217][ISO4217] currency code for the payment.

            Supported currencies are:

            * AUD: Australian dollar
            * CAD: Canadian dollar
            * EUR: Euro
            * GBP: Great Britain pound
            * USD: United States dollar

            Specifying any other ISO 4217 code for payments is an error.

            [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
        currencyCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customerId:
          type: string
          description: The customer ID.
        customMetadata:
          type: string
          description: "This is a sender-defined field that passes any extra metadata\
            \ about the payment that will show up in the Authorize.net transaction\
            \ under **Description** in the merchant gateway portal. The custom metadata\
            \ will be recorded in downloaded Authorize.net reports. \n\nThe following\
            \ example shows what the **Description** field of the transaction will\
            \ look like: \n\n`<envelopeID>, <customMetadata>`"
        customMetadataRequired:
          type: boolean
          description: A sender-defined field that specifies whether custom metadata
            is required for the transaction. When set to **true**, custom metadata
            is required. This property only applies if you are using an Authorize.net
            payment gateway account.
        gatewayAccountId:
          type: string
          description: |
            A GUID that identifies the payment gateway
            connected to the sender's DocuSign account.

            There is no public API
            for connecting payment gateway accounts
            You must connect and manage payment gateway accounts
            through the DocuSign Admin console
            and through your chosen payment gateway.

            You can get the gateway account ID
            in the Payments section
            of the DocuSign Admin console.


            [paymentgateways]:  https://support.docusign.com/en/guides/managing-payment-gateways
        gatewayAccountIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        gatewayDisplayName:
          type: string
          description: |-
            Display name of the gateway connected to sender's Docusign account.

            Possible values are: Stripe, Braintree, Authorize.Net.
        gatewayName:
          type: string
          description: |-
            Name of the gateway connected to sender's DocuSign account.

            Possible values are:

            * `Stripe`
            * `Braintree`
            * `AuthorizeDotNet`
        lineItems:
          type: array
          description: |
            A payment formula can have
            one or more line items
            that provide detail about
            individual items in a payment request.

            The list of line items
            are returned as metadata
            to the payment gateway.
          items:
            $ref: '#/components/schemas/paymentLineItem'
        paymentOption:
          type: string
          description: |-
            This property specifies how the signer's collected payment details will be used.

            Possible values:

            - `authorize`: The payment details will be used to collect payment. This is the default value.
            - `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.
            - `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment.
        paymentSourceId:
          type: string
          description: The payment source ID.
        signerValues:
          $ref: '#/components/schemas/paymentSignerValues'
        status:
          type: string
          description: |
            This read-only property describes the status of a payment.

            * `new`<br>
              This is a new payment request.
              The envelope has been created,
              but no payment authorizations have been made.

            * `auth_complete`<br>
              A recipient has entered their credit card information,
              but the envelope has not been completed.
              The card has not been charged.

            * `payment_complete`<br>
              The recipient's card has been charged.

            * `payment_capture_failed`<br>
              Final charge failed.
              This can happen when too much time
              passes between authorizing the payment
              and completing the document.

            * `future_payment_saved` <br>
            The recipient's payment method has been saved to the sender's payment gateway.
        total:
          $ref: '#/components/schemas/money'
      description: |
        When a formula tab
        has a `paymentDetails` property,
        the formula tab
        is a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
      x-ds-definition-name: paymentDetails
      x-ms-summary: |
        When a formula tab
        has a `paymentDetails` property,
        the formula tab
        is a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    paymentGatewayAccount:
      type: object
      properties:
        allowCustomMetadata:
          type: boolean
          description: "When **true**, the sender can pass custom metadata about the\
            \ payment to the payment gateway. You pass in this metadata on an EnvelopeRecipientTab,\
            \ in the `customMetadata` property under `paymentDetails`. \n\nFor example,\
            \ this property is set to **true** for the Authorize.net gateway by default.\
            \ As a result, the extra metadata that you send displays for the Authorize.net\
            \ transaction in the merchant gateway portal under **Description**.\n\n\
            **Note**: This property is read only and cannot be changed."
        config:
          $ref: '#/components/schemas/paymentGatewayAccountSetting'
        displayName:
          type: string
          description: |-
            A user-defined name for a connected gateway account.

            This name is used in the Admin panel in the list of connected accounts and in Tagger in the payment gateway selector.

            The human-readable version of `paymentGatewayAccountId`.
        isEnabled:
          type: string
          description: When **true**, the payment gateway account is enabled.
        isLegacy:
          type: string
          description: Reserved for DocuSign.
        lastModified:
          type: string
          description: The UTC DateTime that the payment gateway account was last
            updated.
        paymentGateway:
          type: string
          description: |-
            Payment gateway used by the connected gateway account.
            This is the name used by the API.
            For a human-readable version use `paymentGatewayDisplayName`.

            Possible values are:

            * `Stripe`
            * `Braintree`
            * `AuthorizeDotNet`
        paymentGatewayAccountId:
          type: string
          description: A GUID that identifies the payment gateway account. For a human-readable
            version use `displayName`.
        paymentGatewayDisplayName:
          type: string
          description: |-
            The display name of the payment gateway that the connected gateway account uses.
            This is the human-readable version of `paymentGateway`.

            Possible values are:

            * Stripe
            * Braintree
            * Authorize.Net
        payPalLegacySettings:
          $ref: '#/components/schemas/payPalLegacySettings'
        supportedCurrencies:
          type: array
          description: "A list of ISO 4217 currency codes for the currencies that\
            \ the payment gateway account supports.\n\nExamples: \n\n- `USD`\n- `CAD`\n\
            - `EUR`\n- `HKD`"
          items:
            type: string
        supportedPaymentMethods:
          type: array
          description: An array of paymentMethodWithOptions objects that specify the
            payment methods that are available for the gateway.
          items:
            type: string
        supportedPaymentMethodsWithOptions:
          type: array
          description: An array of `paymentMethodWithOptions` objects that specify
            the payment methods that are available for the gateway, as well as the
            payment options that are compatible with each payment method.
          items:
            $ref: '#/components/schemas/paymentMethodWithOptions'
        zeroDecimalCurrencies:
          type: array
          description: ""
          items:
            type: string
      description: This object contains details about a payment gateway account.
      x-ds-definition-name: paymentGatewayAccount
      x-ms-summary: This object contains details about a payment gateway account.
    paymentGatewayAccountSetting:
      type: object
      properties:
        apiFields:
          type: string
          description: ""
        authorizationCode:
          type: string
          description: ""
        credentialStatus:
          type: string
          description: ""
        merchantId:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: paymentGatewayAccountSetting
      x-ms-summary: ""
    paymentGatewayAccountsInfo:
      type: object
      properties:
        paymentGatewayAccounts:
          type: array
          description: A list of payment gateway accounts.
          items:
            $ref: '#/components/schemas/paymentGatewayAccount'
      description: Holds information about connected payment accounts.
      x-ds-definition-name: paymentGatewayAccountsInfo
      x-ms-summary: Holds information about connected payment accounts.
    paymentLineItem:
      type: object
      properties:
        amountReference:
          type: string
          description: |+
            This is a the `tabLabel`
            that specifies the amount paid
            for the line items.

        description:
          type: string
          description: |
            A sender-defined description of the line item.
        itemCode:
          type: string
          description: |
            This is the sender-defined
            SKU, inventory number, or other item code
            for the line item.
        name:
          type: string
          description: |
            This is a sender-defined
            product name, service name,
            or other designation for the line item.
      description: |+
        A line item describes details
        about an individual line item
        in a payment request.

      x-ds-definition-name: paymentLineItem
      x-ms-summary: |+
        A line item describes details
        about an individual line item
        in a payment request.

    paymentMethodWithOptions:
      type: object
      properties:
        supportedOptions:
          type: array
          description: "The payment options that are compatible with the payment method\
            \ in the `type` property.\n\nPossible values are:\n\n- `save` \n- `save_and_authorize`\n\
            - `authorize`"
          items:
            type: string
        type:
          type: string
          description: |-
            The name of a payment method that the gateway accepts.

            Possible values are:

            - `CreditCard`
            - `ApplePay`
            - `AndroidPay`
            - `BankAccount`
            - `PayPal`
      description: This object contains information about a payment method that the
        gateway accepts and the payment options that are compatible with it.
      x-ds-definition-name: paymentMethodWithOptions
      x-ms-summary: This object contains information about a payment method that the
        gateway accepts and the payment options that are compatible with it.
    paymentProcessorInformation:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/addressInformation'
        billingAgreementId:
          type: string
          description: The id of the billing agreement.
        email:
          type: string
          description: The email address associated with the payment processor.
      description: ""
      x-ds-definition-name: paymentProcessorInformation
      x-ms-summary: ""
    paymentSignerValues:
      type: object
      properties:
        paymentOption:
          type: string
          description: |-
            This property specifies how the signer's collected payment details will be used.

            Possible values:

            - `authorize`: The payment details will be used to collect payment. This is the default value.
            - `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.
            - `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment.
      description: ""
      x-ds-definition-name: paymentSignerValues
      x-ms-summary: ""
    payPalLegacySettings:
      type: object
      properties:
        currency:
          type: string
          description: |
            The three-letter
            [ISO 4217][ISO4217] currency code for the payment.

            For example:

            * AUD Australian dollar
            * CAD Canadian dollar
            * EUR Euro
            * GBP Great Britain pound
            * USD United States dollar

            This is a read-only property.

            [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
        partner:
          type: string
          description: ""
        password:
          type: string
          description: The user's encrypted password hash.
        userName:
          type: string
          description: The name of the user.
        vendor:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: payPalLegacySettings
      x-ms-summary: ""
    permissionProfile:
      type: object
      properties:
        modifiedByUsername:
          type: string
          description: The username of the user who last modified the permission profile.
        modifiedDateTime:
          type: string
          description: The date and time when the permission profile was last modified.
        permissionProfileId:
          type: string
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
        permissionProfileName:
          type: string
          description: "The name of the account permission profile. \n\nExample: `Account\
            \ Administrator`"
        settings:
          $ref: '#/components/schemas/accountRoleSettings'
        userCount:
          type: string
          description: The total number of users in the group associated with the
            account permission profile.
        users:
          type: array
          description: A list of user objects containing information about the users
            who are associated with the account permission profile.
          items:
            $ref: '#/components/schemas/userInformation'
      description: This object defines the account permissions for a profile that
        you can apply to a group of users.
      x-ds-definition-name: permissionProfile
      x-ms-summary: This object defines the account permissions for a profile that
        you can apply to a group of users.
    permissionProfileInformation:
      type: object
      properties:
        permissionProfiles:
          type: array
          description: A complex type containing a collection of permission profiles.
          items:
            $ref: '#/components/schemas/permissionProfile'
      description: Contains details about the permission profiles associated with
        an account.
      x-ds-definition-name: permissionProfileInformation
      x-ms-summary: Contains details about the permission profiles associated with
        an account.
    phoneNumber:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: ""
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: phoneNumber
      x-ms-summary: ""
    planInformation:
      type: object
      properties:
        addOns:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/addOn'
        currencyCode:
          type: string
          description: Specifies the ISO currency code for the account.
        freeTrialDaysOverride:
          type: string
          description: Reserved for DocuSign.
        planFeatureSets:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/featureSet'
        planId:
          type: string
          description: DocuSign's id for the account plan.
        recipientDomains:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/recipientDomain'
      description: An object used to identify the features and attributes of the account
        being created.
      x-ds-definition-name: planInformation
      x-ms-summary: An object used to identify the features and attributes of the
        account being created.
    polyLine:
      type: object
      properties:
        x1:
          type: string
          description: ""
        x2:
          type: string
          description: ""
        y1:
          type: string
          description: ""
        y2:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: polyLine
      x-ms-summary: ""
    polyLineOverlay:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        graphicsContext:
          $ref: '#/components/schemas/graphicsContext'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        overlayType:
          type: string
          description: The type of overlay to use. The API currently supports only
            the `outline` overlay type.
        overlayTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        polyLines:
          type: array
          description: An array of `polyLine` objects that contain x- and y-coordinates
            representing the locations of the lines.
          items:
            $ref: '#/components/schemas/polyLine'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, indicates that the tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: This tab enables users to strike through the text of a document.
        The tab is implemented as a line represented as a pair of x and y coordinates.
      x-ds-definition-name: polyLineOverlay
      x-ms-summary: This tab enables users to strike through the text of a document.
        The tab is implemented as a line represented as a pair of x and y coordinates.
    powerForm:
      type: object
      properties:
        createdBy:
          type: string
          description: The id of the user who created the PowerForm.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        emailBody:
          type: string
          description: "The body of the email message sent to the recipients. \n\n\
            Maximum length: 10000 characters."
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        envelopes:
          type: array
          description: An array containing PowerForm data.
          items:
            $ref: '#/components/schemas/envelope'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        instructions:
          type: string
          description: 'The instructions that display on the landing page for the
            first recipient. These instructions are important if the recipient accesses
            the PowerForm by a method other than email. If instructions are entered,
            they display as an introduction after the recipient accesses the PowerForm.  Limit:
            2000 characters.'
        isActive:
          type: string
          description: "When **true**, indicates that the PowerForm is active and\
            \ can be sent to recipients. This is the default value.\n\nWhen **false**,\
            \ the PowerForm cannot be emailed or accessed by a recipient, even if\
            \ they arrive at the PowerForm URL. \n\nIf a recipient attempts to sign\
            \ an inactive PowerForm, an error message informs the recipient that the\
            \ document is not active and suggests that they contact the sender.\n"
        lastUsed:
          type: string
          description: The UTC DateTime when the PowerForm was last used.
        limitUseInterval:
          type: string
          description: The length of time before the same recipient can sign the same
            PowerForm. This property is used in combination with the `limitUseIntervalUnits`
            property.
        limitUseIntervalEnabled:
          type: string
          description: When **true**, the `limitUseInterval` is enabled.
        limitUseIntervalUnits:
          type: string
          description: |
            The units associated with the `limitUseInterval`. Valid values are:

            - `minutes`
            - `hours
            - `days`
            - `weeks`
            - `months`

            For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.
        maxUseEnabled:
          type: string
          description: When set to **true**, you can set a maximum number of uses
            for the PowerForm.
        name:
          type: string
          description: The name of the PowerForm.
        powerFormId:
          type: string
          description: The id of the PowerForm.
        powerFormUrl:
          type: string
          description: The URL for the PowerForm.
        recipients:
          type: array
          description: An array of recipient objects that provides details about the
            recipients of the envelope.
          items:
            $ref: '#/components/schemas/powerFormRecipient'
        senderName:
          type: string
          description: The sender's name.
        senderUserId:
          type: string
          description: The id of the sender.
        signingMode:
          type: string
          description: "The signing mode to use. Valid values are:\n \n- `email`:\
            \ Verifies the recipient's identity using email authentication before\
            \ the recipient can sign a document. The recipient enters their email\
            \ address and then clicks **Begin Signing** to begin the signing process.\
            \ The system then sends an email message with a validation code for the\
            \ PowerForm to the recipient. If the recipient does not provide a valid\
            \ email address, they cannot open and sign the document.  \n- `direct`:\
            \ Does not require any verification. After a recipient enters their email\
            \ address and clicks **Begin Signing**, a new browser tab opens and the\
            \ recipient can immediately begin the signing process. Because the recipient's\
            \ identity is not verified by using email authentication, we strongly\
            \ recommend that you only use the `direct` signing mode when the PowerForm\
            \ is accessible behind a secure portal where the recipient's identity\
            \ is already authenticated, or where another form of authentication is\
            \ specified for the recipient in the DocuSign template (for example, an\
            \ access code, phone authentication, or ID check).  \n\n**Note**: In the\
            \ account settings, `enablePowerFormDirect` must be **true** to use `direct`\
            \ as the `signingMode`."
        templateId:
          type: string
          description: The id of the template used to create the PowerForm.
        templateName:
          type: string
          description: The name of the template used to create the PowerForm.
        timesUsed:
          type: string
          description: 'The number of times the PowerForm has been used. '
        uri:
          type: string
          description: The URI for the PowerForm.
        usesRemaining:
          type: string
          description: The number of times the PowerForm can still be used.
      description: Contains details about a PowerForm.
      x-ds-definition-name: powerForm
      x-ms-summary: Contains details about a PowerForm.
    powerFormFormDataEnvelope:
      type: object
      properties:
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        recipients:
          type: array
          description: An array of recipient objects that provides details about the
            recipients of the envelope.
          items:
            $ref: '#/components/schemas/powerFormFormDataRecipient'
      description: ""
      x-ds-definition-name: powerFormFormDataEnvelope
      x-ms-summary: ""
    powerFormFormDataRecipient:
      type: object
      properties:
        email:
          type: string
          description: ""
        formData:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/nameValue'
        name:
          type: string
          description: The name of the recipient.
        recipientId:
          type: string
          description: The unique id for the recipient. It is used by the tab element
            to indicate which recipient is to sign the document.
      description: ""
      x-ds-definition-name: powerFormFormDataRecipient
      x-ms-summary: ""
    powerFormRecipient:
      type: object
      properties:
        accessCode:
          type: string
          description: |-
            (Optional) The access code that the recipient must enter to access the PowerForm.

            Maximum Length: 50 characters. The code must also conform to the account's access code format setting.

            If blank but the signer accessCode property is set in the envelope, then that value is used.

            If blank and the signer accessCode property is not set, then the access code is not required.
        accessCodeLocked:
          type: string
          description: When **true**, the `accessCode` property is locked and cannot
            be edited.
        accessCodeRequired:
          type: string
          description: When **true**, the recipient must enter the `accessCode` to
            access the PowerForm.
        email:
          type: string
          description: |-
            The email address of the recipient.

            **Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
        emailLocked:
          type: string
          description: When **true**, the recipient's email address is locked and
            cannot be edited.
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckRequired:
          type: string
          description: "Indicates if authentication is configured for the account.\
            \ Valid values are:\n\n- `always`: Authentication checks are performed\
            \ on every envelope. \n- `never`: Authentication checks are not performed\
            \ on any envelopes. \n- `optional:` Authentication is configurable per\
            \ envelope."
        name:
          type: string
          description: |-
            The name of the PowerForm recipient.

            **Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        roleName:
          type: string
          description: |-
            The role associated with the recipient (for example, `Member`).

            This property is required when you are working with template recipients and PowerForm recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        templateRequiresIdLookup:
          type: string
          description: When **true**, the template used to create the PowerForm requires
            ID lookup for the recipient.
        userNameLocked:
          type: string
          description: When **true**, the `userName` property for the recipient is
            locked and cannot be edited.
      description: '**Note**: For a self-service PowerForm on a website, you can specify
        the intended recipients generically (for example, use `Member` as the `Name`),
        and omit personal details such as `email`.'
      x-ds-definition-name: powerFormRecipient
      x-ms-summary: '**Note**: For a self-service PowerForm on a website, you can
        specify the intended recipients generically (for example, use `Member` as
        the `Name`), and omit personal details such as `email`.'
    powerFormSendersResponse:
      type: object
      properties:
        endPosition:
          type: integer
          description: 'The last index position in the result set. '
          format: int32
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        powerFormSenders:
          type: array
          description: An array of `userInfo` objects containing information about
            users who have sent PowerForms.
          items:
            $ref: '#/components/schemas/userInfo'
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: integer
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
          format: int32
        startPosition:
          type: integer
          description: The starting index position of the current result set.
          format: int32
        totalSetSize:
          type: integer
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
          format: int32
      description: This object includes information about the users who have sent
        PowerForms.
      x-ds-definition-name: powerFormSendersResponse
      x-ms-summary: This object includes information about the users who have sent
        PowerForms.
    powerFormsFormDataResponse:
      type: object
      properties:
        envelopes:
          type: array
          description: An array containing PowerForm data.
          items:
            $ref: '#/components/schemas/powerFormFormDataEnvelope'
      description: ""
      x-ds-definition-name: powerFormsFormDataResponse
      x-ms-summary: ""
    powerFormsRequest:
      type: object
      properties:
        powerForms:
          type: array
          description: An array of PowerForm objects.
          items:
            $ref: '#/components/schemas/powerForm'
      description: ""
      x-ds-definition-name: powerFormsRequest
      x-ms-summary: ""
    powerFormsResponse:
      type: object
      properties:
        endPosition:
          type: integer
          description: 'The last index position in the result set. '
          format: int32
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        powerForms:
          type: array
          description: An array of PowerForm objects.
          items:
            $ref: '#/components/schemas/powerForm'
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: integer
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
          format: int32
        startPosition:
          type: integer
          description: The starting index position of the current result set.
          format: int32
        totalSetSize:
          type: integer
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
          format: int32
      description: A list of PowerForms.
      x-ds-definition-name: powerFormsResponse
      x-ms-summary: A list of PowerForms.
    prefillTabs:
      type: object
      properties:
        checkboxTabs:
          type: array
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/checkbox'
        radioGroupTabs:
          type: array
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/radioGroup'
        tabGroups:
          type: array
          description: An array of `tabGroup` items that contain information about
            tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel`
            to the `Tab.TabGroupLabels` array.
          items:
            $ref: '#/components/schemas/tabGroup'
        textTabs:
          type: array
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/text'
      description: ""
      x-ds-definition-name: prefillTabs
      x-ms-summary: ""
    proofServiceResourceToken:
      type: object
      properties:
        proofBaseURI:
          type: string
          description: Returns the available base URIs to request the [ID Evidence
            API](https://developers.docusign.com/docs/idevidence-api/).
        resourceToken:
          type: string
          description: Token that can be used to access [ID Evidence API](https://developers.docusign.com/docs/idevidence-api/)
            endpoints.
      description: ""
      x-ds-definition-name: proofServiceResourceToken
      x-ms-summary: ""
    proofServiceViewLink:
      type: object
      properties:
        ViewLink:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: proofServiceViewLink
      x-ms-summary: ""
    propertyMetadata:
      type: object
      properties:
        options:
          type: array
          description: An array of option strings supported by this setting.
          items:
            type: string
        rights:
          type: string
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
      description: Metadata about a property.
      x-ds-definition-name: propertyMetadata
      x-ms-summary: Metadata about a property.
    province:
      type: object
      properties:
        isoCode:
          type: string
          description: ""
        name:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: province
      x-ms-summary: ""
    provisioningInformation:
      type: object
      properties:
        defaultConnectionId:
          type: string
          description: ""
        defaultPlanId:
          type: string
          description: ""
        distributorCode:
          type: string
          description: The code that identifies the billing plan groups and plans
            for the new account.
        distributorPassword:
          type: string
          description: The password for the `distributorCode`.
        passwordRuleText:
          type: string
          description: ""
        planPromotionText:
          type: string
          description: ""
        purchaseOrderOrPromAllowed:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: provisioningInformation
      x-ms-summary: ""
    purchasedEnvelopesInformation:
      type: object
      properties:
        amount:
          type: string
          description: The total amount of the purchase.
        appName:
          type: string
          description: The AppName of the client application.
        currencyCode:
          type: string
          description: Specifies the ISO currency code of the purchase. This is based
            on the ISO 4217 currency code information.
        platform:
          type: string
          description: The Platform of the client application
        productId:
          type: string
          description: The Product ID from the AppStore.
        quantity:
          type: string
          description: The quantity of envelopes to add to the account.
        receiptData:
          type: string
          description: The encrypted Base64 encoded receipt data.
        storeName:
          type: string
          description: The name of the AppStore.
        transactionId:
          type: string
          description: Specifies the Transaction ID from the AppStore.
      description: ""
      x-ds-definition-name: purchasedEnvelopesInformation
      x-ms-summary: ""
    radio:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            Specifies the page number on which the tab is located.
            Must be 1 for supplemental documents.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        selected:
          type: string
          description: When set to **true**, the radio button is selected.
        selectedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        One of the selectable radio buttons
        in the `radios` property
        of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
      x-ds-definition-name: radio
      x-ms-summary: |
        One of the selectable radio buttons
        in the `radios` property
        of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
    radioGroup:
      type: object
      properties:
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        groupName:
          type: string
          description: The name of the group. The search_text provided in the call
            automatically performs a wild card search on group_name.
        groupNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        radios:
          type: array
          description: Specifies the locations and status for radio buttons that are
            grouped together.
          items:
            $ref: '#/components/schemas/radio'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        tooltipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        This group tab is used to place radio buttons on a document.
        The `radios` property
        contains a list of
        [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
        objects  associated with the group. Only one radio button can
        be selected in a group.
      x-ds-definition-name: radioGroup
      x-ms-summary: |
        This group tab is used to place radio buttons on a document.
        The `radios` property
        contains a list of
        [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
        objects  associated with the group. Only one radio button can
        be selected in a group.
    recipientAdditionalNotification:
      type: object
      properties:
        phoneNumber:
          $ref: '#/components/schemas/recipientPhoneNumber'
        secondaryDeliveryMethod:
          type: string
          description: |
            The secondary delivery method. One of:

            - `email`
            - `fax`
            - `SMS`
            - `offline`
        secondaryDeliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        secondaryDeliveryStatus:
          type: string
          description: |
            (Read-only) The status of the delivery.

            One of:

            - `autoresponded`
            - `optedout`
            - `limitreached`
      description: Describes an additional notification method.
      x-ds-definition-name: recipientAdditionalNotification
      x-ms-summary: Describes an additional notification method.
    recipientAttachment:
      type: object
      properties:
        attachmentId:
          type: string
          description: The unique identifier for the attachment.
        attachmentType:
          type: string
          description: |-
            Specifies the type of the attachment for the recipient. Possible values are:

            - `.htm`
            - `.xml`
        data:
          type: string
          description: A Base64-encoded representation of the attachment that is used
            to upload and download the file. File attachments may be up to 50 MB in
            size.
        label:
          type: string
          description: An optional label for the attachment.
        name:
          type: string
          description: The name of the attachment.
        remoteUrl:
          type: string
          description: The URL of a previously staged chunked upload. Using a chunked
            upload enables you to stage a large, chunkable temp file. You then use
            the `remoteUrl` property to reference the chunked upload as the content
            in attachment and document-related requests. The `remoteUrl` property
            cannot be used for downloads.
      description: ""
      x-ds-definition-name: recipientAttachment
      x-ms-summary: ""
    recipientDomain:
      type: object
      properties:
        active:
          type: string
          description: ""
        domainCode:
          type: string
          description: ""
        domainName:
          type: string
          description: ""
        recipientDomainId:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: recipientDomain
      x-ms-summary: ""
    recipientEmailNotification:
      type: object
      properties:
        emailBody:
          type: string
          description: The body of the email message.
        emailBodyMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailSubject:
          type: string
          description: The subject line for the email notification.
        emailSubjectMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        supportedLanguage:
          type: string
          description: |
            The language to use for the standard email format and signing view for a recipient.

            For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign. It also determines the language used for buttons and tabs in both the email notification and the signing experience.

            **Note**: This setting affects only DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.

             To retrieve the possible values, use the [Accounts::listSupportedLanguages][ListLang] method.

            [ListLang]: https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/listSupportedLanguages/
        supportedLanguageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: recipientEmailNotification
      x-ms-summary: ""
    recipientEvent:
      type: object
      properties:
        includeDocuments:
          type: string
          description: 'When set to **true**, the PDF documents are included in the
            message along with the updated XML. '
        recipientEventStatusCode:
          type: string
          description: 'Send a webhook notification for the following recipient statuses:
            Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.'
      description: ""
      x-ds-definition-name: recipientEvent
      x-ms-summary: ""
    recipientFormData:
      type: object
      properties:
        DeclinedTime:
          type: string
          description: The date and time the recipient declined the envelope.
        DeliveredTime:
          type: string
          description: The date and time the recipient viewed the documents in the
            envelope in the DocuSign signing UI.
        email:
          type: string
          description: The recipient's email address.
        formData:
          type: array
          description: An array of form data objects.
          items:
            $ref: '#/components/schemas/formDataItem'
        name:
          type: string
          description: The name of the recipient.
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        SentTime:
          type: string
          description: The date and time the envelope was sent to the recipient.
        SignedTime:
          type: string
          description: The date and time the recipient signed the documents.
      description: ""
      x-ds-definition-name: recipientFormData
      x-ms-summary: ""
    recipientGroup:
      type: object
      properties:
        groupMessage:
          type: string
          description: The group message, typically a description of the group.
        groupName:
          type: string
          description: The name of the group
        recipients:
          type: array
          description: An array of recipient objects that provides details about the
            recipients of the envelope.
          items:
            $ref: '#/components/schemas/recipientOption'
      description: Describes a group of recipients.
      x-ds-definition-name: recipientGroup
      x-ms-summary: Describes a group of recipients.
    recipientIdentityInputOption:
      type: object
      properties:
        name:
          type: string
          description: ""
        phoneNumberList:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/recipientIdentityPhoneNumber'
        valueType:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: recipientIdentityInputOption
      x-ms-summary: ""
    recipientIdentityPhoneNumber:
      type: object
      properties:
        extension:
          type: string
          description: ""
        number:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: recipientIdentityPhoneNumber
      x-ms-summary: ""
    recipientIdentityVerification:
      type: object
      properties:
        inputOptions:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/recipientIdentityInputOption'
        workflowId:
          type: string
          description: |-
            ID of the Identity Verification worklow used to verify recipients' identity.

            This ID must match one of the [workflowId](https://developers.docusign.com/docs/esign-rest-api/reference/accounts/identityverifications/list/) available to your account.
      description: |-
        Specifies ID Verification applied on an envelope by workflow ID.
        See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications/list)
        method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications) resource
        for more information on how to retrieve workflow IDs available for an account.
        This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
      x-ds-definition-name: recipientIdentityVerification
      x-ms-summary: |-
        Specifies ID Verification applied on an envelope by workflow ID.
        See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications/list)
        method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications) resource
        for more information on how to retrieve workflow IDs available for an account.
        This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
    recipientNamesResponse:
      type: object
      properties:
        multipleUsers:
          type: string
          description: When set to **true**, the email address is used by more than
            one user.
        recipientNames:
          type: array
          description: The names of the recipients associated with the email address.
          items:
            type: string
        reservedRecipientEmail:
          type: string
          description: When set to **true**, new names cannot be added to the email
            address.
      description: This response object contains a list of recipients.
      x-ds-definition-name: recipientNamesResponse
      x-ms-summary: This response object contains a list of recipients.
    recipientOption:
      type: object
      properties:
        email:
          type: string
          description: ""
        name:
          type: string
          description: ""
        recipientLabel:
          type: string
          description: ""
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
      description: ""
      x-ds-definition-name: recipientOption
      x-ms-summary: ""
    recipientPhoneAuthentication:
      type: object
      properties:
        recipMayProvideNumber:
          type: string
          description: Boolean. When set to **true**, the recipient can supply a phone
            number their choice.
        recipMayProvideNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recordVoicePrint:
          type: string
          description: Reserved for DocuSign.
        recordVoicePrintMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderProvidedNumbers:
          type: array
          description: 'An array containing a list of phone numbers that the recipient
            can use for SMS text authentication. '
          items:
            type: string
        senderProvidedNumbersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validateRecipProvidedNumber:
          type: string
          description: ' Reserved for DocuSign.'
        validateRecipProvidedNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |-
        A complex type that contains the elements:

        * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
        * `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
        * `recordVoicePrint`: Reserved for DocuSign.
        * `validateRecipProvidedNumber`: Reserved for DocuSign.
      x-ds-definition-name: recipientPhoneAuthentication
      x-ms-summary: |-
        A complex type that contains the elements:

        * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
        * `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
        * `recordVoicePrint`: Reserved for DocuSign.
        * `validateRecipProvidedNumber`: Reserved for DocuSign.
    recipientPhoneNumber:
      type: object
      properties:
        countryCode:
          type: string
          description: |-
            The numeric country calling code for `number`. For example, the country calling code for the US and Canada is `1`, for the UK: `44`,

            Do not include the `+` symbol.
        countryCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        number:
          type: string
          description: |-
            The telephone number. Use only the digits `0`-`9`. Remove any non-numeric characters.

            Do not include the `countryCode`. For US, Canada, and other
            [North American Numbering Plan](https://en.wikipedia.org/wiki/North_American_Numbering_Plan) countries, do not include a leading `1` or `0`.
        numberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: Describes the recipient phone number.
      x-ds-definition-name: recipientPhoneNumber
      x-ms-summary: Describes the recipient phone number.
    recipientPreviewRequest:
      type: object
      properties:
        assertionId:
          type: string
          description: A unique identifier of the authentication event executed by
            the client application.
        authenticationInstant:
          type: string
          description: A sender-generated value that indicates the date and time that
            the signer was authenticated.
        authenticationMethod:
          type: string
          description: "Required. Choose a value that most closely matches the technique\
            \ your application used to authenticate the recipient / signer. \n\nChoose\
            \ a value from this list: \n* Biometric \n* Email\n* HTTPBasicAuth\n*\
            \ Kerberos\n* KnowledgeBasedAuth\n* None\n* PaperDocuments\n* Password\n\
            * RSASecureID\n* SingleSignOn_CASiteminder\n* SingleSignOn_InfoCard\n\
            * SingleSignOn_MicrosoftActiveDirectory\n* SingleSignOn_Other\n* SingleSignOn_Passport\n\
            * SingleSignOn_SAML\n* Smartcard\n* SSLMutualAuth\n* X509Certificate\n\
            \nThis information is included in the Certificate of Completion."
        pingFrequency:
          type: string
          description: Only used if `pingUrl` is specified. This is the interval,
            in seconds, between pings on the `pingUrl`.  The default is `300` seconds.
            Valid values are 60-1200 seconds.
        pingUrl:
          type: string
          description: The client URL that the DocuSign Signing experience should
            ping to indicate to the client that Signing is active. An HTTP GET call
            is executed against the client. The response from the client is ignored.
            The intent is for the client to reset its session timer when the request
            is received.
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        returnUrl:
          type: string
          description: The URL to which the sender should be redirected after viewing
            the preview.
        securityDomain:
          type: string
          description: The domain in which the user authenticated.
        xFrameOptions:
          type: string
          description: |-
            Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.

            Valid values are:

            - `deny`: The page cannot be displayed in a frame.
            - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
            - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property.
        xFrameOptionsAllowFromUrl:
          type: string
          description: When the value of `xFrameOptions` is `allow_from`, this property
            specifies the origin on which the page is allowed to display in a frame.
            If the value of `xFrameOptions` is `allow_from`, you must include a value
            for this property.
      description: This request object contains the information necessary to create
        a recipient preview.
      x-ds-definition-name: recipientPreviewRequest
      x-ms-summary: This request object contains the information necessary to create
        a recipient preview.
    recipientProofFile:
      type: object
      properties:
        isInProofFile:
          type: string
          description: Indicates whether a proof file is available for this recipient.
      description: The proof file of the recipient. [ID Evidence](https://developers.docusign.com/idevidence-api)
        uses proof files to store the identification data that recipients submit when
        verifying their ID with [ID Verification](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications)
      x-ds-definition-name: recipientProofFile
      x-ms-summary: The proof file of the recipient. [ID Evidence](https://developers.docusign.com/idevidence-api)
        uses proof files to store the identification data that recipients submit when
        verifying their ID with [ID Verification](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications)
    recipientRouting:
      type: object
      properties:
        rules:
          $ref: '#/components/schemas/recipientRules'
      description: Describes the recipient routing rules.
      x-ds-definition-name: recipientRouting
      x-ms-summary: Describes the recipient routing rules.
    recipientRules:
      type: object
      properties:
        conditionalRecipients:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/conditionalRecipientRule'
      description: ""
      x-ds-definition-name: recipientRules
      x-ms-summary: ""
    recipients:
      type: object
      properties:
        agents:
          type: array
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/agent'
        carbonCopies:
          type: array
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/carbonCopy'
        certifiedDeliveries:
          type: array
          description: A complex type containing information on a recipient the must
            receive the completed documents for the envelope to be completed, but
            the recipient does not need to sign, initial, date, or add information
            to any of the documents.
          items:
            $ref: '#/components/schemas/certifiedDelivery'
        currentRoutingOrder:
          type: string
          description: The routing order of the current recipient. If this value equals
            a particular signer's routing order, it indicates that the envelope has
            been sent to that recipient, but he or she has not completed the required
            actions.
        editors:
          type: array
          description: A list of users who can edit the envelope.
          items:
            $ref: '#/components/schemas/editor'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        inPersonSigners:
          type: array
          description: Specifies a signer that is in the same physical location as
            a DocuSign user who will act as a Signing Host for the transaction. The
            recipient added is the Signing Host and new separate Signer Name field
            appears after Sign in person is selected.
          items:
            $ref: '#/components/schemas/inPersonSigner'
        intermediaries:
          type: array
          description: Identifies a recipient that can, but is not required to, add
            name and email information for recipients at the same or subsequent level
            in the routing order (until subsequent Agents, Editors or Intermediaries
            recipient types are added).
          items:
            $ref: '#/components/schemas/intermediary'
        notaries:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notaryRecipient'
        recipientCount:
          type: string
          description: The number of recipients in the envelope.
        seals:
          type: array
          description: A list of electronic seals to apply to documents.
          items:
            $ref: '#/components/schemas/sealSign'
        signers:
          type: array
          description: A list of signers on the envelope.
          items:
            $ref: '#/components/schemas/signer'
        witnesses:
          type: array
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: '#/components/schemas/witness'
      description: Specifies the envelope recipients.
      x-ds-definition-name: recipients
      x-ms-summary: Specifies the envelope recipients.
    recipientSignatureInformation:
      type: object
      properties:
        fontStyle:
          type: string
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
        signatureInitials:
          type: string
          description: Specifies the user's signature in initials format.
        signatureName:
          type: string
          description: Specifies the user's signature name.
      description: |-
        Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.

        Used only with recipient types In Person Signers and Signers.
      x-ds-definition-name: recipientSignatureInformation
      x-ms-summary: |-
        Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.

        Used only with recipient types In Person Signers and Signers.
    recipientSignatureProvider:
      type: object
      properties:
        sealDocumentsWithTabsOnly:
          type: string
          description: "By default, electronic seals apply on all documents in an\
            \ envelope. If any of the documents has a `signHere` tab, then a visual\
            \ representation of the electronic seal will show up in the final document.\
            \ If not, the electronic seal will be visible in the metadata but not\
            \ in the content of the document.\n\nTo apply electronic seals on specific\
            \ documents only, you must enable the  `sealDocumentsWithTabsOnly` parameter.\
            \ In this case, Electronic Seal applies only on documents that have `signHere`\
            \ tabs set for the Electronic Seal recipient. Other documents won't be\
            \ sealed. "
        sealName:
          type: string
          description: |
            Indicates the name of the electronic seal to apply on documents.
        signatureProviderName:
          type: string
          description: |+
            The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures). You can also retrieve the list by using the [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/) method.

            Example: `universalsignaturepen_default`

        signatureProviderNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signatureProviderOptions:
          $ref: '#/components/schemas/recipientSignatureProviderOptions'
      description: |
        An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
      x-ds-definition-name: recipientSignatureProvider
      x-ms-summary: |
        An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
    recipientSignatureProviderOptions:
      type: object
      properties:
        cpfNumber:
          type: string
          description: Reserved for DocuSign.
        cpfNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        oneTimePassword:
          type: string
          description: 'A pre-shared secret that the signer must enter to complete
            the signing process. Eg last six digits of the signer''s government ID
            or Social Security number. Or a newly created pre-shared secret for the
            transaction. Note: some signature providers may require an exact (case-sensitive)
            match if alphabetic characters are included in the field.'
        oneTimePasswordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signerRole:
          type: string
          description: 'The role or capacity of the signing recipient. Examples: Manager,
            Approver, etc.'
        signerRoleMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sms:
          type: string
          description: 'The mobile phone number used to send the recipient an access
            code for the signing ceremony. Format: a string starting with +, then
            the country code followed by the full mobile phone number without any
            spaces or special characters. Omit leading zeroes before a city code.
            Examples: +14155551234, +97235551234, +33505551234.'
        smsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: Option settings for the signature provider. Different providers
        require or use different options. [The current provider list and the options
        they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
      x-ds-definition-name: recipientSignatureProviderOptions
      x-ms-summary: Option settings for the signature provider. Different providers
        require or use different options. [The current provider list and the options
        they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
    recipientSMSAuthentication:
      type: object
      properties:
        senderProvidedNumbers:
          type: array
          description: 'An array containing a list of phone numbers that the recipient
            can use for SMS text authentication. '
          items:
            type: string
        senderProvidedNumbersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: Contains the element senderProvidedNumbers which is an Array  of
        phone numbers the recipient can use for SMS text authentication.
      x-ds-definition-name: recipientSMSAuthentication
      x-ms-summary: Contains the element senderProvidedNumbers which is an Array  of
        phone numbers the recipient can use for SMS text authentication.
    recipientsUpdateSummary:
      type: object
      properties:
        recipientUpdateResults:
          type: array
          description: An array of `recipientUpdateResults` objects that contain details
            about the recipients.
          items:
            $ref: '#/components/schemas/recipientUpdateResponse'
      description: This is the response that the API returns after you update recipients.
      x-ds-definition-name: recipientsUpdateSummary
      x-ms-summary: This is the response that the API returns after you update recipients.
    recipientUpdateResponse:
      type: object
      properties:
        combined:
          type: string
          description: When you use the query parameter `combine_same_order_recipients`
            on the PUT Recipients call, the `recipientUpdateResponse` returns this
            property. When set to **true**, it indicates that the recipient has been
            combined or merged with a matching recipient. Recipient matching occurs
            as part of template matching, and is based on Recipient Role and Routing
            Order.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
      description: The recipient details that are returned after you update the recipient.
      x-ds-definition-name: recipientUpdateResponse
      x-ms-summary: The recipient details that are returned after you update the recipient.
    recipientViewRequest:
      type: object
      properties:
        assertionId:
          type: string
          description: A unique identifier of the authentication event executed by
            the client application.
        authenticationInstant:
          type: string
          description: A sender-generated value that indicates the date and time that
            the signer was authenticated.
        authenticationMethod:
          type: string
          description: "Required. Choose a value that most closely matches the technique\
            \ your application used to authenticate the recipient / signer. \n\nChoose\
            \ a value from this list: \n* Biometric \n* Email\n* HTTPBasicAuth\n*\
            \ Kerberos\n* KnowledgeBasedAuth\n* None\n* PaperDocuments\n* Password\n\
            * RSASecureID\n* SingleSignOn_CASiteminder\n* SingleSignOn_InfoCard\n\
            * SingleSignOn_MicrosoftActiveDirectory\n* SingleSignOn_Other\n* SingleSignOn_Passport\n\
            * SingleSignOn_SAML\n* Smartcard\n* SSLMutualAuth\n* X509Certificate\n\
            \nThis information is included in the Certificate of Completion."
        clientUserId:
          type: string
          description: |-
            A sender-created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.

            Use your application's client ID (user ID) for the recipient. Doing so enables the details of your application's authentication of the recipient to be connected to the recipient's signature if the signature is disputed or repudiated.

            Maximum length: 100 characters.
        email:
          type: string
          description: (Required) Specifies the email of the recipient. You can use
            either `email` and `userName` or `userId` to identify the recipient.
        frameAncestors:
          type: array
          description: ""
          items:
            type: string
        messageOrigins:
          type: array
          description: ""
          items:
            type: string
        pingFrequency:
          type: string
          description: Only used if `pingUrl` is specified. This is the interval,
            in seconds, between pings on the `pingUrl`.  The default is `300` seconds.
            Valid values are 60-1200 seconds.
        pingUrl:
          type: string
          description: The client URL that the DocuSign Signing experience should
            ping to indicate to the client that Signing is active. An HTTP GET call
            is executed against the client. The response from the client is ignored.
            The intent is for the client to reset its session timer when the request
            is received.
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        returnUrl:
          type: string
          description: "(Required) The URL to which the user should be redirected\n\
            after the signing session has ended.\nDocuSign redirects to the URL\n\
            and includes an `event` query parameter\nthat can be used by your application.\n\
            \nMaximum Length: 500 characters. If the `returnUrl` exceeds this limit,\
            \ the user is redirected to a truncated URL.\n\nPossible `event` parameter\
            \ values include: \n\n* `access_code_failed`: Recipient used incorrect\
            \ access code.\n* `cancel`: Recipient canceled the signing operation,\n\
            \  possibly by using the **Finish Later** option.\n* `decline`: Recipient\
            \ declined to sign.\n* `exception`: A system error occurred during the\
            \ signing process.\n* `fax_pending`: Recipient has a fax pending.\n* `id_check_failed`:\
            \ Recipient failed an ID check.\n* `session_timeout`: The session timed\
            \ out. An account can control this timeout by using the **Signer Session\
            \ Timeout** option.\n* `signing_complete`: The recipient completed the\
            \ signing ceremony.\n* `ttl_expired`: The Time To Live token for the envelope\
            \ has expired.\n  After being successfully invoked, these tokens expire\n\
            \  after 5 minutes or if the envelope is voided.\n* `viewing_complete`:\
            \ The recipient completed viewing an envelope\n  that is in a read-only/terminal\
            \ state,\n  such as completed, declined, or voided.\n\nEnsure that you\
            \ include `https://` in the URL to prevent the redirect from failing on\
            \ certain browsers.\n"
        securityDomain:
          type: string
          description: The domain in which the user authenticated.
        userId:
          type: string
          description: "The user ID of the recipient. You can use either the user\
            \ ID or email and user name to identify the recipient. \n\nIf `userId`\
            \ is used and a `clientUserId` is provided, the value in the `userId`\
            \ property must match a `recipientId` (which you can retrieve with a GET\
            \ recipients call) for the envelope. \n\nIf a `userId` is used and a `clientUserId`\
            \ is not provided, the `userId` must match the user ID of the authenticating\
            \ user."
        userName:
          type: string
          description: The username of the recipient. You can use either `email` and
            `userName` or `userId` to identify the recipient.
        xFrameOptions:
          type: string
          description: |-
            Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.

            Valid values are:

            - `deny`: The page cannot be displayed in a frame.
            - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
            - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property.
        xFrameOptionsAllowFromUrl:
          type: string
          description: When the value of `xFrameOptions` is `allow_from`, this property
            specifies the origin on which the page is allowed to display in a frame.
            If the value of `xFrameOptions` is `allow_from`, you must include a value
            for this property.
      description: The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient
        methods.
      x-ds-definition-name: recipientViewRequest
      x-ms-summary: The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient
        methods.
    referralInformation:
      type: object
      properties:
        advertisementId:
          type: string
          description: |
            A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry.

            **Note**: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
        enableSupport:
          type: string
          description: When set to **true**, customer support is provided as part
            of the account plan.
        externalOrgId:
          type: string
          description: An optional external id for the referral.
        groupMemberId:
          type: string
          description: ""
        idType:
          type: string
          description: ""
        includedSeats:
          type: string
          description: The number of seats (users) included in the plan.
        industry:
          type: string
          description: "The name of the industry associated with the referral. \n\n\
            Example: `Accounting`"
        planStartMonth:
          type: string
          description: ""
        promoCode:
          type: string
          description: ""
        publisherId:
          type: string
          description: ""
        referralCode:
          type: string
          description: ""
        referrerName:
          type: string
          description: The name of the referrer.
        saleDiscountAmount:
          type: string
          description: Reserved for DocuSign.
        saleDiscountFixedAmount:
          type: string
          description: Reserved for DocuSign.
        saleDiscountPercent:
          type: string
          description: Reserved for DocuSign.
        saleDiscountPeriods:
          type: string
          description: Reserved for DocuSign.
        saleDiscountSeatPriceOverride:
          type: string
          description: Reserved for DocuSign.
        shopperId:
          type: string
          description: ""
      description: |-
        A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry

        **Note**: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
      x-ds-definition-name: referralInformation
      x-ms-summary: |-
        A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry

        **Note**: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
    reminders:
      type: object
      properties:
        reminderDelay:
          type: string
          description: An integer specifying the number of days after the recipient
            receives the envelope that reminder emails are sent to the recipient.
        reminderEnabled:
          type: string
          description: When set to **true**, reminders are enabled.
        reminderFrequency:
          type: string
          description: An integer specifying the interval in days between reminder
            emails.
      description: A complex element that specifies reminder settings for the envelope.
      x-ds-definition-name: reminders
      x-ms-summary: A complex element that specifies reminder settings for the envelope.
    reportInProductCsvRunRequest:
      type: object
      properties:
        customFieldFilter:
          type: string
          description: ""
        dateRangeCustomFromDate:
          type: string
          description: ""
        dateRangeCustomToDate:
          type: string
          description: ""
        dateRangeFilter:
          type: string
          description: ""
        envelopeDateTypeFilter:
          type: string
          description: ""
        envelopeRecipientNameContainsFilter:
          type: string
          description: ""
        envelopeStatusFilter:
          type: string
          description: ""
        envelopeSubjectContainsFilter:
          type: string
          description: ""
        fields:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/reportInProductField'
        forDownload:
          type: string
          description: ""
        isDashboard:
          type: string
          description: ""
        newLine:
          type: string
          description: ""
        overrideTimezoneKey:
          type: string
          description: ""
        periodLengthFilter:
          type: string
          description: ""
        quote:
          type: string
          description: ""
        reportCustomizedId:
          type: string
          description: ""
        reportDescription:
          type: string
          description: ""
        reportId:
          type: string
          description: ""
        reportInvocationType:
          type: string
          description: ""
        reportName:
          type: string
          description: ""
        sentByFilter:
          type: string
          description: ""
        sentByIds:
          type: string
          description: ""
        separator:
          type: string
          description: ""
        sortDirection:
          type: string
          description: ""
        sortField:
          type: string
          description: ""
        startPosition:
          type: string
          description: The starting index position of the current result set.
      description: ""
      x-ds-definition-name: reportInProductCsvRunRequest
      x-ms-summary: ""
    reportInProductField:
      type: object
      properties:
        displayOrder:
          type: string
          description: The position on the page where the display section appears.
        fieldVersion:
          type: string
          description: ""
        name:
          type: string
          description: ""
        selected:
          type: string
          description: When set to **true**, the radio button is selected.
      description: ""
      x-ds-definition-name: reportInProductField
      x-ms-summary: ""
    reportInProductGet:
      type: object
      properties:
        customFieldFilter:
          type: string
          description: ""
        dateRangeCustomFromDate:
          type: string
          description: ""
        dateRangeCustomToDate:
          type: string
          description: ""
        dateRangeFilter:
          type: string
          description: ""
        displayOrder:
          type: string
          description: The position on the page where the display section appears.
        envelopeDateTypeFilter:
          type: string
          description: ""
        envelopeRecipientNameContainsFilter:
          type: string
          description: ""
        envelopeStatusFilter:
          type: string
          description: ""
        envelopeSubjectContainsFilter:
          type: string
          description: ""
        fields:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/reportInProductField'
        lastScheduledExecutionDate:
          type: string
          description: ""
        lastScheduledExecutionSuccessDate:
          type: string
          description: ""
        maxDownloadRows:
          type: string
          description: ""
        maxGridRows:
          type: string
          description: ""
        maxScheduledRows:
          type: string
          description: ""
        periodLengthFilter:
          type: string
          description: ""
        reportCustomizedId:
          type: string
          description: ""
        reportDescription:
          type: string
          description: ""
        reportId:
          type: string
          description: ""
        reportName:
          type: string
          description: ""
        reportType:
          type: string
          description: ""
        runUri:
          type: string
          description: ""
        saveUri:
          type: string
          description: ""
        scheduleId:
          type: string
          description: ""
        sentByDetails:
          $ref: '#/components/schemas/reportInProductSentByDetails'
        sentByFilter:
          type: string
          description: ""
        sentByIds:
          type: string
          description: ""
        sortFieldDirection:
          type: string
          description: ""
        sortFieldName:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: reportInProductGet
      x-ms-summary: ""
    reportInProductList:
      type: object
      properties:
        reports:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/reportInProductListItem'
      description: ""
      x-ds-definition-name: reportInProductList
      x-ms-summary: ""
    reportInProductListItem:
      type: object
      properties:
        getUri:
          type: string
          description: ""
        lastScheduledExecutionDate:
          type: string
          description: ""
        lastScheduledExecutionSuccessDate:
          type: string
          description: ""
        reportCustomizedId:
          type: string
          description: ""
        reportDescription:
          type: string
          description: ""
        reportId:
          type: string
          description: ""
        reportName:
          type: string
          description: ""
        reportType:
          type: string
          description: ""
        runUri:
          type: string
          description: ""
        saveUri:
          type: string
          description: ""
        scheduleCreateDate:
          type: string
          description: ""
        scheduleEndDate:
          type: string
          description: ""
        scheduleId:
          type: string
          description: ""
        scheduleRenewDurationDays:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: reportInProductListItem
      x-ms-summary: ""
    reportInProductRunRequest:
      type: object
      properties:
        customFieldFilter:
          type: string
          description: ""
        dateRangeCustomFromDate:
          type: string
          description: ""
        dateRangeCustomToDate:
          type: string
          description: ""
        dateRangeFilter:
          type: string
          description: ""
        envelopeDateTypeFilter:
          type: string
          description: ""
        envelopeRecipientNameContainsFilter:
          type: string
          description: ""
        envelopeStatusFilter:
          type: string
          description: ""
        envelopeSubjectContainsFilter:
          type: string
          description: ""
        fields:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/reportInProductField'
        forDownload:
          type: string
          description: ""
        isDashboard:
          type: string
          description: ""
        periodLengthFilter:
          type: string
          description: ""
        reportCustomizedId:
          type: string
          description: ""
        reportDescription:
          type: string
          description: ""
        reportId:
          type: string
          description: ""
        reportInvocationType:
          type: string
          description: ""
        reportName:
          type: string
          description: ""
        sentByFilter:
          type: string
          description: ""
        sentByIds:
          type: string
          description: ""
        sortDirection:
          type: string
          description: ""
        sortField:
          type: string
          description: ""
        startPosition:
          type: string
          description: The starting index position of the current result set.
      description: ""
      x-ds-definition-name: reportInProductRunRequest
      x-ms-summary: ""
    reportInProductRunResponse:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        exceededMaxResults:
          type: string
          description: ""
        lastWarehouseRefreshDateTime:
          type: string
          description: ""
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        rows:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/reportInProductRunResponseRow'
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: ""
      x-ds-definition-name: reportInProductRunResponse
      x-ms-summary: ""
    reportInProductRunResponseRow:
      type: object
      properties:
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        fields:
          $ref: '#/components/schemas/reportInProductRunResponseRowFields'
      description: ""
      x-ds-definition-name: reportInProductRunResponseRow
      x-ms-summary: ""
    reportInProductRunResponseRowFields:
      type: object
      properties:
        accessCodeRequired:
          type: string
          description: ""
        accessCodesAttempted:
          type: string
          description: ""
        accessCodesFailed:
          type: string
          description: ""
        accountId:
          type: string
          description: The account ID associated with the envelope.
        authenticationCategory:
          type: string
          description: ""
        authenticationSuccess:
          type: string
          description: ""
        authenticationType:
          type: string
          description: "Indicates the type of authentication. Valid values are: \n\
            \n- `PhoneAuth`\n- `STAN`\n- `ISCheck` \n- `OFAC`\n- `AccessCode`\n- `AgeVerify`\n\
            - `SSOAuth`"
        averageTimeToCompleteSeconds:
          type: string
          description: ""
        avgCompleteSeconds:
          type: string
          description: ""
        completed:
          type: string
          description: ""
        completedTs:
          type: string
          description: ""
        createdDate:
          type: string
          description: The creation date of the account in UTC timedate format.
        customField:
          type: string
          description: ""
        declinedDate:
          type: string
          description: ""
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        deliveredDate:
          type: string
          description: ""
        envelopeCount:
          type: string
          description: ""
        envelopeCreator:
          type: string
          description: ""
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        envelopeInitialSendTs:
          type: string
          description: ""
        envelopesBilled:
          type: string
          description: ""
        envelopesCompleted:
          type: string
          description: ""
        envelopesCompletedCount:
          type: string
          description: ""
        envelopesDeclined:
          type: string
          description: ""
        envelopesSent:
          type: string
          description: ""
        envelopesSentCount:
          type: string
          description: ""
        envelopesVoided:
          type: string
          description: ""
        envelopeVoidedReason:
          type: string
          description: ""
        eodDocumentDescription:
          type: string
          description: ""
        eodDocumentName:
          type: string
          description: ""
        eodDocumentProfileId:
          type: string
          description: ""
        eodTransactionId:
          type: string
          description: ""
        eodTransactionName:
          type: string
          description: ""
        eventDate:
          type: string
          description: ""
        expirationDate:
          type: string
          description: ""
        expiredTs:
          type: string
          description: ""
        failures:
          type: string
          description: A list of Connect failure logs.
        failureVendorCode:
          type: string
          description: ""
        failureVendorReason:
          type: string
          description: ""
        firstSendTs:
          type: string
          description: ""
        groupId:
          type: string
          description: The ID of the group being accessed.
        groupName:
          type: string
          description: The name of the group. The search_text provided in the call
            automatically performs a wild card search on group_name.
        hoursToCompleteEnd:
          type: string
          description: ""
        hoursToCompleteStart:
          type: string
          description: ""
        idChecksAttempted:
          type: string
          description: ""
        idChecksFailed:
          type: string
          description: ""
        initialSendTs:
          type: string
          description: ""
        ipAddress:
          type: string
          description: ""
        lastActivity:
          type: string
          description: ""
        lastActivityDate:
          type: string
          description: ""
        lastSentDate:
          type: string
          description: ""
        notSigned:
          type: string
          description: ""
        numberOfAuthenticatedRecipients:
          type: string
          description: ""
        numberOfCompletedSignatures:
          type: string
          description: ""
        numberOfDocuments:
          type: string
          description: ""
        numberOfPages:
          type: string
          description: ""
        numberOfRecipients:
          type: string
          description: ""
        numberOfSends:
          type: string
          description: ""
        numberOfSigners:
          type: string
          description: ""
        numberOfTotalDocuments:
          type: string
          description: ""
        numberOfTotalPages:
          type: string
          description: ""
        numberOfTotalSigners:
          type: string
          description: ""
        numberOfUniqueSenders:
          type: string
          description: ""
        numberTotalRecipients:
          type: string
          description: ""
        periodEnd:
          type: string
          description: ""
        periodStart:
          type: string
          description: ""
        phoneCallsAttempted:
          type: string
          description: ""
        phoneCallsFailed:
          type: string
          description: ""
        reasonForDeclining:
          type: string
          description: ""
        reasonForVoiding:
          type: string
          description: ""
        reassignReason:
          type: string
          description: ""
        received:
          type: string
          description: ""
        recipient:
          type: string
          description: ""
        recipientAction:
          type: string
          description: ""
        recipientCompanyName:
          type: string
          description: ""
        recipientCountry:
          type: string
          description: ""
        recipientEmail:
          type: string
          description: ""
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientName:
          type: string
          description: ""
        recipientTemplateRoleName:
          type: string
          description: ""
        recipientTitle:
          type: string
          description: ""
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientUserId:
          type: string
          description: ""
        remainingSignatures:
          type: string
          description: The number of remaining signatures that need to be applied
            to this document.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        senderAccountId:
          type: string
          description: ""
        senderCompanyName:
          type: string
          description: ""
        senderCountry:
          type: string
          description: ""
        senderEmail:
          type: string
          description: The sender's email address.
        senderIPAddress:
          type: string
          description: ""
        senderJobTitle:
          type: string
          description: ""
        senderName:
          type: string
          description: The sender's name.
        senderUserId:
          type: string
          description: The id of the sender.
        signDate:
          type: string
          description: ""
        signed:
          type: string
          description: ""
        signedDate:
          type: string
          description: ""
        signedOnMobile:
          type: string
          description: ""
        signedOnPaper:
          type: string
          description: ""
        signerList:
          type: string
          description: ""
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        statusChangedDate:
          type: string
          description: ""
        statusChangedTs:
          type: string
          description: ""
        subject:
          type: string
          description: ""
        successes:
          type: string
          description: ""
        templatesCreated:
          type: string
          description: ""
        templatesCreatedCount:
          type: string
          description: ""
        terminalStatusDate:
          type: string
          description: ""
        timeToCompleteSeconds:
          type: string
          description: ""
        timeToDeliver:
          type: string
          description: ""
        totalDocuments:
          type: string
          description: ""
        totalEnvelopes:
          type: string
          description: ""
        totalPages:
          type: string
          description: ""
        totalRecipients:
          type: string
          description: ""
        totalSigners:
          type: string
          description: ""
        uniqueSenders:
          type: string
          description: ""
        userAccountEmail:
          type: string
          description: ""
        userAccountName:
          type: string
          description: ""
        userAccountStatus:
          type: string
          description: ""
        userCount:
          type: string
          description: ""
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
        viewDate:
          type: string
          description: ""
        voidedTs:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: reportInProductRunResponseRowFields
      x-ms-summary: ""
    reportInProductSaveResponse:
      type: object
      properties:
        reportCustomizedId:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: reportInProductSaveResponse
      x-ms-summary: ""
    reportInProductSentByDetails:
      type: object
      properties:
        groups:
          type: array
          description: A collection group objects containing information about the
            groups.
          items:
            $ref: '#/components/schemas/group'
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/userInfo'
      description: ""
      x-ds-definition-name: reportInProductSentByDetails
      x-ms-summary: ""
    resourceInformation:
      type: object
      properties:
        resources:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/nameValue'
      description: ""
      x-ds-definition-name: resourceInformation
      x-ms-summary: ""
    returnUrlRequest:
      type: object
      properties:
        returnUrl:
          type: string
          description: |-
            (Optional) The URL to which the user should be redirected after the sending session is complete.

            Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
      description: The request body for the EnvelopeViews::createSender method.
      x-ds-definition-name: returnUrlRequest
      x-ms-summary: The request body for the EnvelopeViews::createSender method.
    seal:
      type: object
      properties:
        configuration:
          type: object
          additionalProperties:
            type: string
          description: Electronic seal configuration  properties
        sealIdentifier:
          type: string
          description: Electronic Seal identifier
      description: Set of information related to the electronic seal used by the Trust
        Service Provider (TSP).
      x-ds-definition-name: seal
      x-ms-summary: Set of information related to the electronic seal used by the
        Trust Service Provider (TSP).
    sealIdentifier:
      type: object
      properties:
        sealDisplayName:
          type: string
          description: The user-friendly display name for a seal.
        sealName:
          type: string
          description: The name of a seal.
      description: ""
      x-ds-definition-name: sealIdentifier
      x-ms-summary: ""
    sealSign:
      type: object
      properties:
        accessCode:
          type: string
          description: Not applicable.
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Not applicable.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        clientUserId:
          type: string
          description: Not applicable.
        completedCount:
          type: string
          description: Not applicable.
        customFields:
          type: array
          description: Not applicable.
          items:
            type: string
        declinedDateTime:
          type: string
          description: Not applicable.
        declinedReason:
          type: string
          description: Not applicable.
        deliveredDateTime:
          type: string
          description: Not applicable.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: Not applicable.
          items:
            $ref: '#/components/schemas/documentVisibility'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: Not applicable.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: Not applicable.
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: Not applicable.
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: Not applicable.
        note:
          type: string
          description: Not applicable.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        recipientAttachments:
          type: array
          description: Not applicable.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: "(Required) The `recipientId` used when the envelope or template\
            \ was created. \n\nThis is a local reference that senders use to map recipients\
            \ to other objects, such as specific document tabs. Within an envelope,\
            \ each `recipientId` must be unique, but there is no uniqueness requirement\
            \ across envelopes. For example, many envelopes assign the first recipient\
            \ a `recipientId` of `1`."
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientSignatureProviders:
          type: array
          description: (Required) Indicates which electronic seal to apply on documents
            when creating an envelope.
          items:
            $ref: '#/components/schemas/recipientSignatureProvider'
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: Not applicable.
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: "(Optional, default: 1) \nSpecifies the routing order of the\
            \ electronic seal in the envelope.\nThe routing order assigned to your\
            \ electronic seal cannot be shared with another recipient.\nIt is recommended\
            \ that you set a routing order for your electronic seals.\n"
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: Not applicable.
        signedDateTime:
          type: string
          description: Not applicable.
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`."
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: Not applicable.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: Not applicable.
        userId:
          type: string
          description: Not applicable.
      description: "Specifies one or more electronic seals to apply on documents.\
        \ An electronic seal recipient is a legal entity rather than an actual person.\
        \ Electronic Seals can be used by organizations and governments to show evidence\
        \ of origin and integrity of documents. Even though electronic seals can be\
        \ represented by a tab in a document, they do not require user interaction\
        \ and apply automatically in the order specified by the sender. The sender\
        \ is therefore the person authorizing usage of the electronic seal in the\
        \ flow.\n\nExample: \n\n```json\n\"recipients\": {\n      \"seals\": [\n \
        \       {\n          \"recipientId\": \"1\",\n          \"routingOrder\" :\
        \ 1,\n          \"recipientSignatureProviders\": [\n            {\n      \
        \        \"sealName\": \"52e9d968-xxxx-xxxx-xxxx-4682bc45c106\"\n        \
        \    }\n      \t]\n    \t}\n  \t]\n\t},\n    .\n    .\n    .\n```\nFor more\
        \ information about Electronic Seals, see [Apply Electronic Seals to Your\
        \ Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).\n"
      x-ds-definition-name: sealSign
      x-ms-summary: "Specifies one or more electronic seals to apply on documents.\
        \ An electronic seal recipient is a legal entity rather than an actual person.\
        \ Electronic Seals can be used by organizations and governments to show evidence\
        \ of origin and integrity of documents. Even though electronic seals can be\
        \ represented by a tab in a document, they do not require user interaction\
        \ and apply automatically in the order specified by the sender. The sender\
        \ is therefore the person authorizing usage of the electronic seal in the\
        \ flow.\n\nExample: \n\n```json\n\"recipients\": {\n      \"seals\": [\n \
        \       {\n          \"recipientId\": \"1\",\n          \"routingOrder\" :\
        \ 1,\n          \"recipientSignatureProviders\": [\n            {\n      \
        \        \"sealName\": \"52e9d968-xxxx-xxxx-xxxx-4682bc45c106\"\n        \
        \    }\n      \t]\n    \t}\n  \t]\n\t},\n    .\n    .\n    .\n```\nFor more\
        \ information about Electronic Seals, see [Apply Electronic Seals to Your\
        \ Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).\n"
    seatDiscount:
      type: object
      properties:
        beginSeatCount:
          type: string
          description: Reserved for DocuSign.
        discountPercent:
          type: string
          description: "The percent of the discount. \n\nExample: `\"0.00\"`"
        endSeatCount:
          type: string
          description: Reserved for DocuSign.
      description: This object contains information about a seat discount.
      x-ds-definition-name: seatDiscount
      x-ms-summary: This object contains information about a seat discount.
    senderEmailNotifications:
      type: object
      properties:
        changedSigner:
          type: string
          description: When set to **true**, the sender receives an email notification
            if the signer changes.
        commentsOnlyPrivateAndMention:
          type: string
          description: When set to **true**, the user receives only comments that
            mention their own user name.
        commentsReceiveAll:
          type: string
          description: When set to **true**, the user receives all comments.
        deliveryFailed:
          type: string
          description: When set to **true**, the sender receives an email notification
            if envelope delivery fails.
        envelopeComplete:
          type: string
          description: When set to **true**, the user receives an email notification
            when the envelope has been completed.
        offlineSigningFailed:
          type: string
          description: When set to **true**, the user receives an email notification
            if offline signing failed.
        powerformResponsesLimitNotificationEmail:
          type: string
          description: ""
        purgeDocuments:
          type: string
          description: When set to **true**, the user receives an email notification
            when a document purge occurs.
        recipientViewed:
          type: string
          description: When set to **true**, the sender receives notification that
            a recipient viewed the envelope.
        senderEnvelopeDeclined:
          type: string
          description: When set to **true**, the sender receives notification that
            the envelope was declined.
        withdrawnConsent:
          type: string
          description: When set to **true**, the user receives an email notification
            if consent is withdrawn.
      description: Contains the settings for the email notifications that senders
        receive about the envelopes that they send.
      x-ds-definition-name: senderEmailNotifications
      x-ms-summary: Contains the settings for the email notifications that senders
        receive about the envelopes that they send.
    serverTemplate:
      type: object
      properties:
        sequence:
          type: string
          description: ""
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
      description: ""
      x-ds-definition-name: serverTemplate
      x-ms-summary: ""
    serviceInformation:
      type: object
      properties:
        buildBranch:
          type: string
          description: 'Reserved: TBD'
        buildBranchDeployedDateTime:
          type: string
          description: 'Reserved: TBD'
        buildSHA:
          type: string
          description: 'Reserved: TBD'
        buildVersion:
          type: string
          description: 'Reserved: TBD'
        linkedSites:
          type: array
          description: ""
          items:
            type: string
        serviceVersions:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/serviceVersion'
      description: ""
      x-ds-definition-name: serviceInformation
      x-ms-summary: ""
    serviceVersion:
      type: object
      properties:
        version:
          type: string
          description: The version of the rest API.
        versionUrl:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: serviceVersion
      x-ms-summary: ""
    settingsMetadata:
      type: object
      properties:
        is21CFRPart11:
          type: string
          description: When **true**, indicates compliance with United States Food
            and Drug Administration (FDA) regulations on electronic records and electronic
            signatures (ERES).
        options:
          type: array
          description: An array of option strings supported by this setting.
          items:
            type: string
        rights:
          type: string
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
        uiHint:
          type: string
          description: Reserved for DocuSign.
        uiOrder:
          type: string
          description: Reserved for DocuSign.
        uiType:
          type: string
          description: Reserved for DocuSign.
      description: Metadata that indicates whether a property is editable and describes
        setting-specific options.
      x-ds-definition-name: settingsMetadata
      x-ms-summary: Metadata that indicates whether a property is editable and describes
        setting-specific options.
    sharedItem:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        shared:
          type: string
          description: |-
            How the item is shared. One of:

            - `not_shared`
            - `shared_to`
            - `shared_from`
            - `shared_to_and_from`
        user:
          $ref: '#/components/schemas/userInfo'
      description: Information about the shared item.
      x-ds-definition-name: sharedItem
      x-ms-summary: Information about the shared item.
    signatureGroup:
      type: object
      properties:
        groupId:
          type: string
          description: The ID of the group being accessed.
        groupName:
          type: string
          description: The name of the group. The search_text provided in the call
            automatically performs a wild card search on group_name.
        rights:
          type: string
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
      description: ""
      x-ds-definition-name: signatureGroup
      x-ms-summary: ""
    signatureGroupDef:
      type: object
      properties:
        groupId:
          type: string
          description: The ID of the group being accessed.
        rights:
          type: string
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
      description: ""
      x-ds-definition-name: signatureGroupDef
      x-ms-summary: ""
    signatureProperties:
      type: object
      properties:
        filter:
          type: string
          description: Specifies the preferred handler that should be used to validate
            the signature.
        subFilter:
          type: string
          description: Indicates the format of the data that the stream contains.
      description: ""
      x-ds-definition-name: signatureProperties
      x-ms-summary: ""
    signatureProviderRequiredOption:
      type: object
      properties:
        requiredSignatureProviderOptionIds:
          type: array
          description: Reserved for DocuSign.
          items:
            type: string
        signerType:
          type: string
          description: Reserved for DocuSign.
      description: Contains additional information that a specific signature provider
        requires.
      x-ds-definition-name: signatureProviderRequiredOption
      x-ms-summary: Contains additional information that a specific signature provider
        requires.
    signatureType:
      type: object
      properties:
        isDefault:
          type: string
          description: When **true**, the signature type is the default type.
        type:
          type: string
          description: |-
            The type of signature. Valid values are:

            - `electronic`: Indicates an **electronic** signature that is used by common law countries such as the United States, United Kingdom, and Australia. This is the default signature type that DocuSign uses.
            - `universal`: Indicates a **digital** signature that is accepted by both common law and civil law countries. To use digital signatures, you must use the [DocuSign Signature Appliance](https://developers.docusign.com/dsa-api).

            For more information, see [Standards Based Signatures](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
      description: This object contains information about the type of signature.
      x-ds-definition-name: signatureType
      x-ms-summary: This object contains information about the type of signature.
    signatureUser:
      type: object
      properties:
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        rights:
          type: string
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
        userName:
          type: string
          description: The name of the user.
      description: ""
      x-ds-definition-name: signatureUser
      x-ms-summary: ""
    signatureUserDef:
      type: object
      properties:
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        rights:
          type: string
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: ""
      x-ds-definition-name: signatureUserDef
      x-ms-summary: ""
    signer:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        agentCanEditEmail:
          type: string
          description: Optional element. When set to **true**, the agent recipient
            associated with this recipient can change the recipient's pre-populated
            email address. This element is only active if enabled for the account.
        agentCanEditName:
          type: string
          description: Optional. When set to **true**, the agent recipient associated
            with this recipient can change the recipient's pre-populated name. This
            element is only active if enabled for the account.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        bulkRecipientsUri:
          type: string
          description: Reserved for DocuSign.
        canSignOffline:
          type: string
          description: When set to **true**, specifies that the signer can perform
            the signing ceremony offline.
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        creationReason:
          type: string
          description: The reason why the item was created.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        defaultRecipient:
          type: string
          description: When set to **true**, this recipient is the default recipient
            and any tabs generated by the transformPdfFields option are mapped to
            this recipient.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: 'The recipient''s email address. The system sends notifications
            about the documents to sign to this address. Maximum length: 100 characters. '
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: 'The recipient''s first name. Maximum Length: 50 characters.'
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        isBulkRecipient:
          type: string
          description: "When set to **true**, this signer is a bulk recipient and\
            \ the recipient information is contained in a bulk recipient file. \n\n\
            Note that when this is true the email and name for the recipient becomes\
            \ bulk@recipient.com and \"Bulk Recipient\". These fields can not be changed\
            \ for the bulk recipient. \n"
        isBulkRecipientMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lastName:
          type: string
          description: The recipient's last name.
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        notaryId:
          type: string
          description: ""
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        proofFile:
          $ref: '#/components/schemas/recipientProofFile'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientSignatureProviders:
          type: array
          description: The default signature provider is the DocuSign Electronic signature
            system. This parameter is used to specify one or more Standards Based
            Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: '#/components/schemas/recipientSignatureProvider'
        recipientSuppliesTabs:
          type: string
          description: When set to **true**, specifies that the recipient creates
            the tabs.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireSignerCertificate:
          type: string
          description: "Sets the type of signer certificate required for signing.\
            \ If left blank, no certificate is required. Only one type of certificate\
            \ can be set for a signer. The possible values are:\n\n* docusign_express\
            \ Ã\x83Â¢Ã\x82Â\x80Ã\x82Â\x93 Requires a DocuSign Express certificate.\n\
            * safe Ã\x83Â¢Ã\x82Â\x80Ã\x82Â\x93 Requires a SAFE-BioPharma certificate.\n\
            * open_trust Ã\x83Â¢Ã\x82Â\x80Ã\x82Â\x93 Requires an OpenTrust certificate.\
            \ \n\n**Important**: There are certain rules and restrictions that must\
            \ be followed when requiring OpenTrust digital signatures. See [ML:OpenTrust\
            \ Rules and Restrictions] for more information. \n "
        requireSignOnPaper:
          type: string
          description: When set to **true**, the signer must print, sign, and upload
            or fax the signed documents to DocuSign.
        requireUploadSignature:
          type: string
          description: When set to **true**, the signer is required to upload a new
            signature, even if they have a pre-adopted signature in their personal
            DocuSign account.
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signatureInfo:
          $ref: '#/components/schemas/recipientSignatureInformation'
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signInEachLocation:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab (instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signInEachLocationMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: |
            Specifies the status of the recipient at the time of the request. Read only. Possible values are:

            - `created`: The recipient is in a draft state. This is only associated with draft envelopes (envelopes with a created status).
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing web site. This is not an email delivery of the documents in an envelope.
            - `signed`; The recipient has completed (performed all required interactions, such as signing or entering data) all required tags in an envelope. This is a temporary state during processing, after which the recipient is automatically moved to completed.
            - `declined`: The recipient declined to sign the documents in the envelope.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `faxpending`: The recipient has finished signing and the system is waiting a fax attachment by the recipient before completing their signing step.
            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used by the DocuSign webapp (also known as the DocuSign console) to inform senders about the auto-responded email.
        statusCode:
          type: string
          description: Reserved for DocuSign.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: A complex type containing information about a signer recipient.
        A signer is a recipient who must take action on a document, such as sign,
        initial, date, or add data to form fields on a document.
      x-ds-definition-name: signer
      x-ms-summary: A complex type containing information about a signer recipient.
        A signer is a recipient who must take action on a document, such as sign,
        initial, date, or add data to form fields on a document.
    signerAttachment:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        optional:
          type: string
          description: When set to **true**, the recipient does not need to complete
            this tab to complete the signing process.
        optionalMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: The page number on which the tab is located. For supplemental
            documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        scaleValue:
          type: string
          description: Sets the size of the tab. This field accepts values from `0.5`
            to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
        scaleValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+0, -24)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+0, -24)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to attach supporting
        documents to an envelope.
      x-ds-definition-name: signerAttachment
      x-ms-summary: |
        A tab that allows the recipient to attach supporting
        documents to an envelope.
    signerEmailNotifications:
      type: object
      properties:
        agentNotification:
          type: string
          description: When set to **true**, the user receives agent notification
            emails.
        carbonCopyNotification:
          type: string
          description: When set to **true**, the user receives notifications of carbon
            copy deliveries.
        certifiedDeliveryNotification:
          type: string
          description: When set to **true**, the user receives notifications of certified
            deliveries.
        commentsOnlyPrivateAndMention:
          type: string
          description: When set to **true**, the user receives only comments that
            mention their own user name.
        commentsReceiveAll:
          type: string
          description: When set to **true**, the user receives all comments.
        documentMarkupActivation:
          type: string
          description: When set to **true**, the user receives notification that document
            markup has been activated.
        envelopeActivation:
          type: string
          description: When set to **true**, the user receives notification that the
            envelope has been activated.
        envelopeComplete:
          type: string
          description: When set to **true**, the user receives an email notification
            when the envelope has been completed.
        envelopeCorrected:
          type: string
          description: When set to **true**, the user receives notification that the
            envelope has been corrected.
        envelopeDeclined:
          type: string
          description: When set to **true**, the user receives notification that the
            envelope has been declined.
        envelopeVoided:
          type: string
          description: When set to **true**, the user receives notification that the
            envelope has been voided.
        faxReceived:
          type: string
          description: Reserved for DocuSign.
        offlineSigningFailed:
          type: string
          description: When set to **true**, the user receives an email notification
            if offline signing failed.
        purgeDocuments:
          type: string
          description: When set to **true**, the user receives an email notification
            when a document purge occurs.
        reassignedSigner:
          type: string
          description: When set to **true**, the user receives notification that the
            envelope has been reassigned.
        whenSigningGroupMember:
          type: string
          description: When set to **true**, the user receives notification that he
            or she is a member of the signing group.
      description: An array of email notifications that specifies the email the user
        receives when they are a sender. When the specific email notification is set
        to true, the user receives those types of email notifications from DocuSign.
        The user inherits the default account sender email notification settings when
        the user is created.
      x-ds-definition-name: signerEmailNotifications
      x-ms-summary: An array of email notifications that specifies the email the user
        receives when they are a sender. When the specific email notification is set
        to true, the user receives those types of email notifications from DocuSign.
        The user inherits the default account sender email notification settings when
        the user is created.
    signHere:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: Not applicable to Sign Here tab.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        isSealSignTab:
          type: string
          description: When set to **true**,  the tab contains a visual representation
            for an electronic seal in a document.
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        optional:
          type: string
          description: When set to **true**, the recipient does not need to complete
            this tab to complete the signing process.
        optionalMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: |
            Specifies the page number on which the tab is located.
            Must be 1 for supplemental documents.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        scaleValue:
          type: string
          description: Scales the size of the tab. This field accepts values from
            0.5 to 2.0, where  0.5 is half the normal size, 1.0 is normal size, and
            2.0 is twice the normal size.
        scaleValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        stamp:
          $ref: '#/components/schemas/stamp'
        stampType:
          type: string
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
        stampTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: Not applicable to Sign Here tab.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+1, -7)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+1, -7)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to sign a document. May be
        optional.
      x-ds-definition-name: signHere
      x-ms-summary: |
        A tab that allows the recipient to sign a document. May be
        optional.
    signingGroup:
      type: object
      properties:
        created:
          type: string
          description: The UTC DateTime when the signing group was created. Read only.
        createdBy:
          type: string
          description: The name of the user who created the signing group.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        groupEmail:
          type: string
          description: The email address for the signing group. You can use a group
            email address to email all of the group members at the same time.
        groupName:
          type: string
          description: The name of the group. The search_text provided in the call
            automatically performs a wild card search on group_name.
        groupType:
          type: string
          description: |-
            The group type. Possible values include:

            - `adminstrators`
            - `everyone`
            - `customGroup`
            - `sharedSigningGroup`

            <!-- More? To do -->
        modified:
          type: string
          description: The UTC DateTime when the signing group was last modified.
            Read only.
        modifiedBy:
          type: string
          description: The user id (GUID) of the user who last modified this user
            record.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/signingGroupUser'
      description: Contains details about a signing group. Signing groups enable you
        to send an envelope to a predefined group of recipients and have any one member
        of the group sign your documents. When you send an envelope to a signing group,
        anyone in the group can open it and sign it with their own signature.
      x-ds-definition-name: signingGroup
      x-ms-summary: Contains details about a signing group. Signing groups enable
        you to send an envelope to a predefined group of recipients and have any one
        member of the group sign your documents. When you send an envelope to a signing
        group, anyone in the group can open it and sign it with their own signature.
    signingGroupInformation:
      type: object
      properties:
        groups:
          type: array
          description: A collection group objects containing information about the
            groups.
          items:
            $ref: '#/components/schemas/signingGroup'
      description: ""
      x-ds-definition-name: signingGroupInformation
      x-ms-summary: ""
    signingGroupUser:
      type: object
      properties:
        email:
          type: string
          description: ""
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        userName:
          type: string
          description: "The name of the group member. \n\nMaximum Length: 100 characters. "
      description: ""
      x-ds-definition-name: signingGroupUser
      x-ms-summary: ""
    signingGroupUsers:
      type: object
      properties:
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/signingGroupUser'
      description: ""
      x-ds-definition-name: signingGroupUsers
      x-ms-summary: ""
    smartContractInformation:
      type: object
      properties:
        code:
          type: string
          description: ""
        uri:
          type: string
          description: A URI containing the user ID.
      description: ""
      x-ds-definition-name: smartContractInformation
      x-ms-summary: ""
    smartSection:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        caseSensitive:
          type: boolean
          description: When **true**, the `startAnchor` and `endAnchor` for the Smart
            Section must match both the case and the content of the strings in the
            HTML.
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        displaySettings:
          $ref: '#/components/schemas/smartSectionDisplaySettings'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        endAnchor:
          type: string
          description: |-
            Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
        endPosition:
          $ref: '#/components/schemas/smartSectionAnchorPosition'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        overlayType:
          type: string
          description: |
            The type of overlay to draw on the document. The following overlay types are supported:

            - `line`
            - `outline`
        overlayTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        removeEndAnchor:
          type: boolean
          description: When **true**, removes the end anchor string for the Smart
            Section from the HTML, preventing it from displaying.
        removeStartAnchor:
          type: boolean
          description: When **true**, removes the start anchor string for the Smart
            Section from the HTML, preventing it from displaying.
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        startAnchor:
          type: string
          description: |-
            Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
        startPosition:
          $ref: '#/components/schemas/smartSectionAnchorPosition'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: smartSection
      x-ms-summary: ""
    smartSectionAnchorPosition:
      type: object
      properties:
        pageNumber:
          type: integer
          description: Specifies the page number on which the tab is located.
          format: int32
        xPosition:
          type: number
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          format: double
        yPosition:
          type: number
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          format: double
      description: ""
      x-ds-definition-name: smartSectionAnchorPosition
      x-ms-summary: ""
    smartSectionCollapsibleDisplaySettings:
      type: object
      properties:
        arrowClosed:
          type: string
          description: ""
        arrowColor:
          type: string
          description: ""
        arrowLocation:
          type: string
          description: ""
        arrowOpen:
          type: string
          description: ""
        arrowSize:
          type: string
          description: ""
        arrowStyle:
          type: string
          description: ""
        containerStyle:
          type: string
          description: ""
        labelStyle:
          type: string
          description: ""
        onlyArrowIsClickable:
          type: boolean
          description: ""
        outerLabelAndArrowStyle:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: smartSectionCollapsibleDisplaySettings
      x-ms-summary: ""
    smartSectionDisplaySettings:
      type: object
      properties:
        cellStyle:
          type: string
          description: Specifies the valid CSS-formatted styles to use on responsive
            table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column`
            types.
        collapsibleSettings:
          $ref: '#/components/schemas/smartSectionCollapsibleDisplaySettings'
        display:
          type: string
          description: |-
            Indicates the display type. Must be one of the following enum values:

            - **inline**: Leaves the HTML where it is in the document. This allows for adding a label or presenting on a separate page.
            - **collapsible**: The HTML in the section may be expanded or collapsed. By default, the section is expanded.
            - **collapsed**: The HTML in the section may be expanded or collapsed. By default, the section is collapsed.
            - **responsive_table**: Converts the section into a responsive table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions.
            - **responsive_table_single_column**: Converts the section into a responsive, single-column table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions. The table is converted to a single column in which each column becomes a row and is stacked.
            - **print_only**: Prevents this portion of the HTML from displaying in the responsive signing view.
        displayLabel:
          type: string
          description: The label for the display section.
        displayOrder:
          type: integer
          description: The position on the page where the display section appears.
          format: int32
        displayPageNumber:
          type: integer
          description: The number of the page on which the display section appears.
          format: int32
        hideLabelWhenOpened:
          type: boolean
          description: When **true**, the `displayLabel` is hidden when the display
            section is expanded and the display section is no longer collapsible.
            This property is valid only when the value of the `display` property is
            `collapsed`.
        inlineOuterStyle:
          type: string
          description: Specifies the valid CSS-formatted styles to use on inline display
            sections. This property is valid only when the value of the `display`
            property is `inline`.
        labelWhenOpened:
          type: string
          description: The label for the display section when it is expanded from
            a collapsed state. This label displays only on the first opening and is
            only valid with the value of the `display` property is `collapsed`.
        preLabel:
          type: string
          description: Enables you to add descriptive text that appears before a collapsed
            section or continue button.
        scrollToTopWhenOpened:
          type: boolean
          description: When **true** and the section is expanded, the position of
            the section close is scrolled to the top of the screen. This property
            is only valid when the value of the `display` property is `collapsed`.
        tableStyle:
          type: string
          description: Specifies the valid CSS-formatted styles to use on responsive
            tables. This property is valid only when the value of the `display` property
            is `responsive_table` or `responsive_table_single_column`.
      description: These properties define how a Smart Section displays. A Smart Section
        is a type of display section.
      x-ds-definition-name: smartSectionDisplaySettings
      x-ms-summary: These properties define how a Smart Section displays. A Smart
        Section is a type of display section.
    socialAccountInformation:
      type: object
      properties:
        email:
          type: string
          description: The users email address.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        provider:
          type: string
          description: The social account provider (Facebook, Yahoo, etc.)
        socialId:
          type: string
          description: The ID provided by the Socal Account.
        userName:
          type: string
          description: The full user name for the account.
      description: ""
      x-ds-definition-name: socialAccountInformation
      x-ms-summary: ""
    socialAuthentication:
      type: object
      properties:
        authentication:
          type: string
          description: Reserved for DocuSign.
      description: ""
      x-ds-definition-name: socialAuthentication
      x-ms-summary: ""
    ssn:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: The page number on which the tab is located. For supplemental
            documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        validationPatternMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A one-line field that allows the recipient to enter a Social
        Security Number. The SSN can be typed with or without
        dashes. It uses the same parameters as a Text tab, with the
        validation message and pattern set for SSN information.
      x-ds-definition-name: ssn
      x-ms-summary: |
        A one-line field that allows the recipient to enter a Social
        Security Number. The SSN can be typed with or without
        dashes. It uses the same parameters as a Text tab, with the
        validation message and pattern set for SSN information.
    ssn4InformationInput:
      type: object
      properties:
        displayLevelCode:
          type: string
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
        receiveInResponse:
          type: string
          description: A Boolean value that specifies whether the information must
            be returned in the response.
        ssn4:
          type: string
          description: The last four digits of the recipient's Social Security Number
            (SSN).
      description: ""
      x-ds-definition-name: ssn4InformationInput
      x-ms-summary: ""
    ssn9InformationInput:
      type: object
      properties:
        displayLevelCode:
          type: string
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
        ssn9:
          type: string
          description: The recipient's full Social Security Number (SSN).
      description: ""
      x-ds-definition-name: ssn9InformationInput
      x-ms-summary: ""
    stamp:
      type: object
      properties:
        adoptedDateTime:
          type: string
          description: The UTC date and time when the user adopted the signature.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customField:
          type: string
          description: ""
        dateStampProperties:
          $ref: '#/components/schemas/dateStampProperties'
        disallowUserResizeStamp:
          type: string
          description: When set to **true**, users may not resize the stamp.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        externalID:
          type: string
          description: Optionally specify an external identifier for the user's signature.
        imageBase64:
          type: string
          description: ""
        imageType:
          type: string
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        phoneticName:
          type: string
          description: The phonetic spelling of the `signatureName`.
        signatureName:
          type: string
          description: Specifies the user's signature name.
        stampFormat:
          type: string
          description: "The format of a stamp. Valid values are:\n\n- `NameHanko`:\
            \ The stamp represents only the signer's name.\n- `NameDateHanko`: The\
            \ stamp represents the signer's name and the date. "
        stampImageUri:
          type: string
          description: The URI for retrieving the image of the user's stamp.
        stampSizeMM:
          type: string
          description: The physical height of the stamp image (in millimeters) that
            the stamp vendor recommends for displaying the image in PDF documents.
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
      description: ""
      x-ds-definition-name: stamp
      x-ms-summary: ""
    supportedLanguages:
      type: object
      properties:
        languages:
          type: array
          description: |-
            A list of languages that you can use for a recipient's language setting. These are the languages that you can set for the standard email format and signing view for each recipient.

            For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign. It also determines the language used for buttons and tabs in both the email notification and the signing experience.

            **Note**: Setting a language for a recipient affects only the DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.

            Example:

            ```
            {
                "languages": [
                    {
                        "name": "Arabic (ar)",
                        "value": "ar"
                    },
                    {
                        "name": "Bulgarian (bg)",
                        "value": "bg"
                    },
                    .
                    .
                    .
            }
            ```
          items:
            $ref: '#/components/schemas/nameValue'
      description: A list of supported languages.
      x-ds-definition-name: supportedLanguages
      x-ms-summary: A list of supported languages.
    tabAccountSettings:
      type: object
      properties:
        allowTabOrder:
          type: string
          description: |-
            When set to **true**, account users can set a tab order for the signing process.

            **Note**: Only Admin users can change this setting.
        allowTabOrderMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        approveDeclineTabsEnabled:
          type: string
          description: When **true**, approve and decline tabs are enabled.
        approveDeclineTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        calculatedFieldsEnabled:
          type: string
          description: When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields)
            are enabled for tabs.
        calculatedFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        checkboxTabsEnabled:
          type: string
          description: When **true**, checkbox tabs are enabled.
        checkBoxTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dataFieldRegexEnabled:
          type: string
          description: When **true**, regular expressions are enabled for tabs that
            contain data fields.
        dataFieldRegexMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dataFieldSizeEnabled:
          type: string
          description: When **true**, setting character limits for input fields is
            enabled.
        dataFieldSizeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        drawTabsEnabled:
          type: string
          description: ""
        drawTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        firstLastEmailTabsEnabled:
          type: string
          description: Reserved for DocuSign.
        firstLastEmailTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        listTabsEnabled:
          type: string
          description: When **true**, list tabs are enabled.
        listTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        noteTabsEnabled:
          type: string
          description: When **true**, note tabs are enabled.
        noteTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        prefillTabsEnabled:
          type: string
          description: ""
        prefillTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        radioTabsEnabled:
          type: string
          description: When **true**, radio button tabs are enabled.
        radioTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        savingCustomTabsEnabled:
          type: string
          description: When **true**, saving custom tabs is enabled.
        savingCustomTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        senderToChangeTabAssignmentsEnabled:
          type: string
          description: Reserved for DocuSign.
        senderToChangeTabAssignmentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sharedCustomTabsEnabled:
          type: string
          description: When **true**, shared custom tabs are enabled.
        sharedCustomTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabDataLabelEnabled:
          type: string
          description: |
            When set to **true**, [data
            labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.

            **Note**: Only Admin users can change this setting.
        tabDataLabelMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabLocationEnabled:
          type: string
          description: Reserved for DocuSign.
        tabLocationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabLockingEnabled:
          type: string
          description: |
            When set to **true**, tab locking is enabled.

            **Note**: Only Admin users can change this setting.
        tabLockingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabScaleEnabled:
          type: string
          description: Reserved for DocuSign.
        tabScaleMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabTextFormattingEnabled:
          type: string
          description: |
            When set to **true**, text formatting (such as font type, font size,
            font color, bold, italic, and underline) is enabled for tabs that
            support formatting.

            **Note**: Only Admin users can change this setting.
        tabTextFormattingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        textTabsEnabled:
          type: string
          description: When **true**, text tabs are enabled.
        textTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: ""
      x-ds-definition-name: tabAccountSettings
      x-ms-summary: ""
    tabGroup:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        groupLabel:
          type: string
          description: A unique identifier for a tab group. To assign a tab to the
            `tabGroup`, you assign the `TabGroupLabel` to the `tab.TabGroupLabels`
            array.
        groupLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        groupRule:
          type: string
          description: |+
            Specifies how `maximumAllowed` and `minimumRequired`
            are interpreted when selecting tabs in a `tabGroup`.

            Possible values are:

            - `SelectAtLeast`
            - `SelectAtMost`
            - `SelectExactly`
            - `SelectARange`

        groupRuleMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maximumAllowed:
          type: string
          description: The maximum number of tabs within the `tabGroup` that should
            be checked, populated, or signed. This property is used for validation.
        maximumAllowedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        minimumRequired:
          type: string
          description: The minimum number of of tabs within the `tabGroup` that should
            be checked, populated, or signed. This property is used for validation.
        minimumRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: Specifies the page number on which the tab is located.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabScope:
          type: string
          description: |-
            The scope of the tab group. Possible values are:

            - `document`
            - `envelope` (default)
        tabScopeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: ""
      x-ds-definition-name: tabGroup
      x-ms-summary: ""
    tabMetadata:
      type: object
      properties:
        anchor:
          type: string
          description: An optional string that is used to auto-match tabs to strings
            located in the documents of an envelope.
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        collaborative:
          type: string
          description: ""
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        createdByDisplayName:
          type: string
          description: The user name of the DocuSign user who created this object.
        createdByUserId:
          type: string
          description: The userId of the DocuSign user who created this object.
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        editable:
          type: string
          description: When set to **true**, the custom tab is editable. Otherwise
            the custom tab cannot be modified.
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        height:
          type: string
          description: The height of the tab in pixels.
        includedInEmail:
          type: string
          description: When set to **true**, the tab is included in e-mails related
            to the envelope on which it exists. This applies to only specific tabs.
        initialValue:
          type: string
          description: The original value of the tab.
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        items:
          type: array
          description: If the tab is a list, this represents the values that are possible
            for the tab.
          items:
            type: string
        lastModified:
          type: string
          description: The UTC DateTime this object was last modified. This is in
            ISO8601 format.
        lastModifiedByDisplayName:
          type: string
          description: The User Name of the DocuSign user who last modified this object.
        lastModifiedByUserId:
          type: string
          description: The userId of the DocuSign user who last modified this object.
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        maximumLength:
          type: string
          description: The maximum number of entry characters supported by the custom
            tab.
        mergeField:
          $ref: '#/components/schemas/mergeField'
        name:
          type: string
          description: ""
        paymentItemCode:
          type: string
          description: |-
            If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.

            Example: `SHAK1`

            Maximum Length: 100 characters.
        paymentItemDescription:
          type: string
          description: |-
            If the custom tab is for a payment request, this is the description of the item associated with the charge.

            Example: `The Danish play by Shakespeare`

            Maximum Length: 100 characters.
        paymentItemName:
          type: string
          description: |-
            If the custom tab is for a payment request, this is the name of the item associated with the charge.

            Maximum Length: 100 characters.

            Example: `Hamlet`
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        scaleValue:
          type: string
          description: Sets the size of the tab. This field accepts values from `0.5`
            to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
        selected:
          type: string
          description: When set to **true**, the radio button is selected.
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        stampType:
          type: string
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
        stampTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        type:
          type: string
          description: "The type of this tab. Values are: Approve, CheckBox, Company,\
            \ Date, DateSigned,\tDecline, Email,\tEmailAddress, EnvelopeId, FirstName,\
            \ Formula, FullName,\tInitialHere, InitialHereOptional, LastName, List,\
            \ Note, Number,\tRadio, SignerAttachment, SignHere, SignHereOptional,\
            \ Ssn, Text, Title, Zip5, or Zip5Dash4."
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        width:
          type: string
          description: The width of the tab in pixels.
      description: ""
      x-ds-definition-name: tabMetadata
      x-ms-summary: ""
    tabMetadataList:
      type: object
      properties:
        tabs:
          type: array
          description: A list of tabs, which are represented graphically as symbols
            on documents at the time of signing. Tabs show recipients where to sign,
            initial, or enter data. They may also display data to the recipients.
          items:
            $ref: '#/components/schemas/tabMetadata'
      description: ""
      x-ds-definition-name: tabMetadataList
      x-ms-summary: ""
    tabs:
      type: object
      properties:
        approveTabs:
          type: array
          description: "A list of\n[Approve tabs][approve].\n\nAn Approve tab enables\n\
            the recipient to approve documents without\nplacing a signature or initials\
            \ on the document. If the\nrecipient clicks the tab during the signing\
            \ process, the\nrecipient is considered to have signed the document. No\n\
            information is shown on the document of the approval, but it\nis recorded\
            \ as a signature in the envelope history.\nThe value of an approve tab\
            \ can't be set.\n\n[approve]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/approve'
        checkboxTabs:
          type: array
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/checkbox'
        commentThreadTabs:
          type: array
          description: An array of tabs that represents a collection of comments in
            a comment thread. For example, if a recipient has questions about the
            content of a document, they can add a comment to the document and control
            who else can see the comment. This value can't be set.
          items:
            $ref: '#/components/schemas/commentThread'
        commissionCountyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionCounty'
        commissionExpirationTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionExpiration'
        commissionNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionNumber'
        commissionStateTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionState'
        companyTabs:
          type: array
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: '#/components/schemas/company'
        currencyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/currency'
        dateSignedTabs:
          type: array
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/dateSigned'
        dateTabs:
          type: array
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/date'
        declineTabs:
          type: array
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/decline'
        drawTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/draw'
        emailAddressTabs:
          type: array
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/emailAddress'
        emailTabs:
          type: array
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/email'
        envelopeIdTabs:
          type: array
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: '#/components/schemas/envelopeId'
        firstNameTabs:
          type: array
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: '#/components/schemas/firstName'
        formulaTabs:
          type: array
          description: "A list of [Formula tabs][formulaTab].\n\nThe value of a Formula\
            \ tab is calculated from the values of other number or date tabs in the\
            \ document. When the recipient completes the underlying fields, the Formula\
            \ tab calculates and displays the result. This value can be set.\n\nThe\
            \ `formula` property of the tab contains the references to the underlying\
            \ tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].\n\
            \nIf a Formula tab contains a `paymentDetails` property, the tab is considered\
            \ a payment item. To learn more about payments, see [Requesting Payments\
            \ Along with Signatures][paymentguide].\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n\
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
            [formulaTab]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/formulaTab'
        fullNameTabs:
          type: array
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/fullName'
        initialHereTabs:
          type: array
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/initialHere'
        lastNameTabs:
          type: array
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/lastName'
        listTabs:
          type: array
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/list'
        notarizeTabs:
          type: array
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/notarize'
        notarySealTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notarySeal'
        noteTabs:
          type: array
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/note'
        numberTabs:
          type: array
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/number'
        phoneNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/phoneNumber'
        polyLineOverlayTabs:
          type: array
          description: 'This type of tab enables the recipient to strike through document
            text. This value can''t be set
          items:
            $ref: '#/components/schemas/polyLineOverlay'
        prefillTabs:
          $ref: '#/components/schemas/prefillTabs'
        radioGroupTabs:
          type: array
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/radioGroup'
        signerAttachmentTabs:
          type: array
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signerAttachment'
        signHereTabs:
          type: array
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signHere'
        smartSectionTabs:
          type: array
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: '#/components/schemas/smartSection'
        ssnTabs:
          type: array
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/ssn'
        tabGroups:
          type: array
          description: An array of `tabGroup` items that contain information about
            tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel`
            to the `Tab.TabGroupLabels` array.
          items:
            $ref: '#/components/schemas/tabGroup'
        textTabs:
          type: array
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/text'
        titleTabs:
          type: array
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/title'
        viewTabs:
          type: array
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/view'
        zipTabs:
          type: array
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/zip'
      description: Tabs indicate to recipients where they should sign, initial, or
        enter data on a document. They are represented graphically as symbols on documents
        at the time of signing. Tabs can also display data to the recipients.
      x-ds-definition-name: tabs
      x-ms-summary: Tabs indicate to recipients where they should sign, initial, or
        enter data on a document. They are represented graphically as symbols on documents
        at the time of signing. Tabs can also display data to the recipients.
    templateCustomFields:
      type: object
      properties:
        listCustomFields:
          type: array
          description: An array of list custom fields.
          items:
            $ref: '#/components/schemas/listCustomField'
        textCustomFields:
          type: array
          description: An array of text custom fields.
          items:
            $ref: '#/components/schemas/textCustomField'
      description: ""
      x-ds-definition-name: templateCustomFields
      x-ms-summary: ""
    templateDocumentsResult:
      type: object
      properties:
        templateDocuments:
          type: array
          description: An array of document objects that contain information about
            the documents associated with the template.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
      description: ""
      x-ds-definition-name: templateDocumentsResult
      x-ms-summary: ""
    templateDocumentVisibilityList:
      type: object
      properties:
        documentVisibility:
          type: array
          description: An array of `documentVisibility` objects that specifies which
            documents are visible to which recipients.
          items:
            $ref: '#/components/schemas/documentVisibility'
      description: A list of `documentVisibility` objects that specify whether the
        documents associated with a template are visible to recipients.
      x-ds-definition-name: templateDocumentVisibilityList
      x-ms-summary: A list of `documentVisibility` objects that specify whether the
        documents associated with a template are visible to recipients.
    templateInformation:
      type: object
      properties:
        templates:
          type: array
          description: An array of `templateSummary` objects that contain information
            about templates.
          items:
            $ref: '#/components/schemas/templateSummary'
      description: ""
      x-ds-definition-name: templateInformation
      x-ms-summary: ""
    templateMatch:
      type: object
      properties:
        documentEndPage:
          type: string
          description: ""
        documentStartPage:
          type: string
          description: ""
        matchPercentage:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: templateMatch
      x-ms-summary: ""
    templateNotificationRequest:
      type: object
      properties:
        expirations:
          $ref: '#/components/schemas/expirations'
        password:
          type: string
          description: The user's encrypted password hash.
        reminders:
          $ref: '#/components/schemas/reminders'
        useAccountDefaults:
          type: string
          description: When set to **true**, the account default notification settings
            are used for the envelope, overriding the reminders and expirations settings.
            When set to **false**, the reminders and expirations settings specified
            in this request are used.
      description: ""
      x-ds-definition-name: templateNotificationRequest
      x-ms-summary: ""
    templateRecipients:
      type: object
      properties:
        agents:
          type: array
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/agent'
        carbonCopies:
          type: array
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/carbonCopy'
        certifiedDeliveries:
          type: array
          description: A complex type containing information on a recipient the must
            receive the completed documents for the envelope to be completed, but
            the recipient does not need to sign, initial, date, or add information
            to any of the documents.
          items:
            $ref: '#/components/schemas/certifiedDelivery'
        currentRoutingOrder:
          type: string
          description: The routing order of the current recipient. If this value equals
            a particular signer's routing order, it indicates that the envelope has
            been sent to that recipient, but he or she has not completed the required
            actions.
        editors:
          type: array
          description: A list of users who can edit the envelope.
          items:
            $ref: '#/components/schemas/editor'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        inPersonSigners:
          type: array
          description: Specifies a signer that is in the same physical location as
            a DocuSign user who will act as a Signing Host for the transaction. The
            recipient added is the Signing Host and new separate Signer Name field
            appears after Sign in person is selected.
          items:
            $ref: '#/components/schemas/inPersonSigner'
        intermediaries:
          type: array
          description: Identifies a recipient that can, but is not required to, add
            name and email information for recipients at the same or subsequent level
            in the routing order (until subsequent Agents, Editors or Intermediaries
            recipient types are added).
          items:
            $ref: '#/components/schemas/intermediary'
        notaries:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notaryRecipient'
        recipientCount:
          type: string
          description: |-
            The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:

            * recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
            * includeDocuments - When set to **true**, the envelope time zone information is included in the message.
        seals:
          type: array
          description: Specifies one or more electronic seals to apply on documents.
            For more information on Electronic Seals , see https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals
          items:
            $ref: '#/components/schemas/sealSign'
        signers:
          type: array
          description: A list of signers on the envelope.
          items:
            $ref: '#/components/schemas/signer'
        witnesses:
          type: array
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: '#/components/schemas/witness'
      description: ""
      x-ds-definition-name: templateRecipients
      x-ms-summary: ""
    templateRole:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        defaultRecipient:
          type: string
          description: When set to **true**, this recipient is the default recipient
            and any tabs generated by the transformPdfFields option are mapped to
            this recipient.
        email:
          type: string
          description: Specifies the email associated with a role name.
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        inPersonSignerName:
          type: string
          description: |-
            Specifies the full legal name of the signer in person signer template roles.

            Maximum Length: 100 characters.
        name:
          type: string
          description: Specifies the recipient's name.
        recipientSignatureProviders:
          type: array
          description: The default signature provider is the DocuSign Electronic signature
            system. This parameter is used to specify one or more Standards Based
            Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: '#/components/schemas/recipientSignatureProvider'
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
      description: ""
      x-ds-definition-name: templateRole
      x-ms-summary: ""
    templateSharedItem:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        owner:
          $ref: '#/components/schemas/userInfo'
        password:
          type: string
          description: The user's encrypted password hash.
        shared:
          type: string
          description: |
            How the template is shared. One of:

            - `not_shared`
            - `shared_to`
        sharedGroups:
          type: array
          description: List of groups that share the template.
          items:
            $ref: '#/components/schemas/memberGroupSharedItem'
        sharedUsers:
          type: array
          description: List of users that share the template.
          items:
            $ref: '#/components/schemas/userSharedItem'
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
        templateName:
          type: string
          description: The name of the shared template.
      description: Information about shared templates.
      x-ds-definition-name: templateSharedItem
      x-ms-summary: Information about shared templates.
    templateSummary:
      type: object
      properties:
        applied:
          type: string
          description: Reserved for DocuSign.
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing document's id attribute.
        documentName:
          type: string
          description: The name of the document.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        name:
          type: string
          description: The name of the template.
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
        templateMatch:
          $ref: '#/components/schemas/templateMatch'
        uri:
          type: string
          description: A URI containing the user ID.
      description: Summary of a template request.
      x-ds-definition-name: templateSummary
      x-ms-summary: Summary of a template request.
    templateTabs:
      type: object
      properties:
        approveTabs:
          type: array
          description: "A list of\n[Approve tabs][approve].\n\nAn Approve tab enables\n\
            the recipient to approve documents without\nplacing a signature or initials\
            \ on the document. If the\nrecipient clicks the tab during the signing\
            \ process, the\nrecipient is considered to have signed the document. No\n\
            information is shown on the document of the approval, but it\nis recorded\
            \ as a signature in the envelope history.\nThe value of an approve tab\
            \ can't be set.\n\n[approve]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/approve'
        checkboxTabs:
          type: array
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/checkbox'
        commentThreadTabs:
          type: array
          description: An array of tabs that represents a collection of comments in
            a comment thread. For example, if a recipient has questions about the
            content of a document, they can add a comment to the document and control
            who else can see the comment. This value can't be set.
          items:
            $ref: '#/components/schemas/commentThread'
        commissionCountyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionCounty'
        commissionExpirationTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionExpiration'
        commissionNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionNumber'
        commissionStateTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionState'
        companyTabs:
          type: array
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: '#/components/schemas/company'
        currencyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/currency'
        dateSignedTabs:
          type: array
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/dateSigned'
        dateTabs:
          type: array
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/date'
        declineTabs:
          type: array
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/decline'
        drawTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/draw'
        emailAddressTabs:
          type: array
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/emailAddress'
        emailTabs:
          type: array
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/email'
        envelopeIdTabs:
          type: array
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: '#/components/schemas/envelopeId'
        firstNameTabs:
          type: array
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: '#/components/schemas/firstName'
        formulaTabs:
          type: array
          description: "A list of [Formula tabs][formulaTab].\n\nThe value of a Formula\
            \ tab is calculated from the values of other number or date tabs in the\
            \ document. When the recipient completes the underlying fields, the Formula\
            \ tab calculates and displays the result. This value can be set.\n\nThe\
            \ `formula` property of the tab contains the references to the underlying\
            \ tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].\n\
            \nIf a Formula tab contains a `paymentDetails` property, the tab is considered\
            \ a payment item. To learn more about payments, see [Requesting Payments\
            \ Along with Signatures][paymentguide].\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n\
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
            [formulaTab]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/formulaTab'
        fullNameTabs:
          type: array
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/fullName'
        initialHereTabs:
          type: array
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/initialHere'
        lastNameTabs:
          type: array
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/lastName'
        listTabs:
          type: array
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/list'
        notarizeTabs:
          type: array
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/notarize'
        notarySealTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notarySeal'
        noteTabs:
          type: array
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/note'
        numberTabs:
          type: array
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/number'
        phoneNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/phoneNumber'
        polyLineOverlayTabs:
          type: array
          description: 'This type of tab enables the recipient to strike through document
            text. This value can''t be set
          items:
            $ref: '#/components/schemas/polyLineOverlay'
        prefillTabs:
          $ref: '#/components/schemas/prefillTabs'
        radioGroupTabs:
          type: array
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/radioGroup'
        signerAttachmentTabs:
          type: array
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signerAttachment'
        signHereTabs:
          type: array
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signHere'
        smartSectionTabs:
          type: array
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: '#/components/schemas/smartSection'
        ssnTabs:
          type: array
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/ssn'
        tabGroups:
          type: array
          description: An array of `tabGroup` items that contain information about
            tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel`
            to the `Tab.TabGroupLabels` array.
          items:
            $ref: '#/components/schemas/tabGroup'
        textTabs:
          type: array
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/text'
        titleTabs:
          type: array
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/title'
        viewTabs:
          type: array
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/view'
        zipTabs:
          type: array
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/zip'
      description: ""
      x-ds-definition-name: templateTabs
      x-ms-summary: ""
    templateUpdateSummary:
      type: object
      properties:
        bulkEnvelopeStatus:
          $ref: '#/components/schemas/bulkEnvelopeStatus'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        listCustomFieldUpdateResults:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/listCustomField'
        lockInformation:
          $ref: '#/components/schemas/EnvelopeLocks'
        purgeState:
          type: string
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

        recipientUpdateResults:
          type: array
          description: An array of `recipientUpdateResults` objects that contain details
            about the recipients.
          items:
            $ref: '#/components/schemas/recipientUpdateResponse'
        tabUpdateResults:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        textCustomFieldUpdateResults:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/textCustomField'
      description: ""
      x-ds-definition-name: templateUpdateSummary
      x-ms-summary: ""
    text:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formula:
          type: string
          description: |
            Contains the formula
            for calculating the value of
            this tab.

            Use a tab's `tabLabel`,
            enclosed in brackets,
            to refer to it.

            For example,
            you want to present the total cost
            of two items, tax included.

            The cost of each item is stored
            in number tabs labeled Item1 and Item2.
            The tax rate is in a number tab
            labeled TaxRate.

            The formula string for this property
            would be:
            `([Item1] + [Item2]) * (1 + [TaxRate])`

            See [Calculated Fields][calculatedfields]
            in the DocuSign Support Center
            to learn more about formulas.

            Maximum Length: 2000 characters

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
        formulaMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: The page number on which the tab is located. For supplemental
            documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        validationPatternMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to enter any type of text.
      x-ds-definition-name: text
      x-ms-summary: |
        A tab that allows the recipient to enter any type of text.
    textCustomField:
      type: object
      properties:
        configurationType:
          type: string
          description: If you are using merge fields, this property specifies the
            type of the merge field. The only supported value is `salesforce`.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        fieldId:
          type: string
          description: The id of the custom field.
        name:
          type: string
          description: The name of the custom field.
        required:
          type: string
          description: When set to **true**, senders are required to enter or select
            information for the field before they can send the envelope.
        show:
          type: string
          description: When set to **true**, the field displays in the **Envelope
            Custom Fields** section when a user creates or sends an envelope.
        value:
          type: string
          description: 'The value of the custom field. The user who creates or sends
            the envelope provides this value. Maximum length: 100 characters.'
      description: This object represents a free text custom field where envelope
        creators and senders can enter custom data.
      x-ds-definition-name: textCustomField
      x-ms-summary: This object represents a free text custom field where envelope
        creators and senders can enter custom data.
    title:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: The page number on which the tab is located. For supplemental
            documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that displays the recipient's title.
      x-ds-definition-name: title
      x-ms-summary: |
        A tab that displays the recipient's title.
    usageHistory:
      type: object
      properties:
        lastSentDateTime:
          type: string
          description: 'The date and time the user last sent an envelope. '
        lastSignedDateTime:
          type: string
          description: The date and time the user last signed an envelope.
        sentCount:
          type: string
          description: 'The number of envelopes the user has sent. '
        signedCount:
          type: string
          description: 'The number of envelopes the user has signed. '
      description: "A complex element consisting of: \n\n* lastSentDateTime - the\
        \ date and time the user last sent an envelope. \n* lastSignedDateTime - the\
        \ date and time the user last signed an envelope.\n* sentCount - the number\
        \ of envelopes the user has sent.\n* signedCount - the number of envelopes\
        \ the user has signed."
      x-ds-definition-name: usageHistory
      x-ms-summary: "A complex element consisting of: \n\n* lastSentDateTime - the\
        \ date and time the user last sent an envelope. \n* lastSignedDateTime - the\
        \ date and time the user last signed an envelope.\n* sentCount - the number\
        \ of envelopes the user has sent.\n* signedCount - the number of envelopes\
        \ the user has signed."
    userAccountManagementGranularInformation:
      type: object
      properties:
        canManageAccountSecuritySettings:
          type: string
          description: '**True** if the user can manage account security settings.'
        canManageAccountSecuritySettingsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageAccountSettings:
          type: string
          description: '**True** if the user can manage account settings.'
        canManageAccountSettingsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageAdmins:
          type: string
          description: '**True** if the user can manage administrators.'
        canManageAdminsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageEnvelopeTransfer:
          type: string
          description: ""
        canManageEnvelopeTransferMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageReporting:
          type: string
          description: '**True** if the user can manage reporting.'
        canManageReportingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageSharing:
          type: string
          description: '**True** if the user can manage sharing.'
        canManageSharingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageSigningGroups:
          type: string
          description: '**True** if the user can manage signing groups.'
        canManageSigningGroupsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageUsers:
          type: string
          description: '**True** if the user can manage users.'
        canManageUsersMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canViewUsers:
          type: string
          description: ""
      description: Describes which account management capabilities a user has.
      x-ds-definition-name: userAccountManagementGranularInformation
      x-ms-summary: Describes which account management capabilities a user has.
    userInfo:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the envelope.
        accountName:
          type: string
          description: The name on the account.
        activationAccessCode:
          type: string
          description: Access code provided to the user to activate the account.
        email:
          type: string
          description: The user's email address.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        loginStatus:
          type: string
          description: When set to **true**, indicates that the user is logged in.
            This is a read-only property.
        membershipId:
          type: string
          description: The user's membership ID.
        sendActivationEmail:
          type: string
          description: When set to **true**, specifies that an activation email will
            be sent to the user.
        uri:
          type: string
          description: A URI containing the user ID.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
        userName:
          type: string
          description: The name of the user.
        userStatus:
          type: string
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
        userType:
          type: string
          description: The type of user, for example `CompanyUser`.
      description: ""
      x-ds-definition-name: userInfo
      x-ms-summary: ""
    userInfoList:
      type: object
      properties:
        users:
          type: array
          description: An array of `userInfo` objects containing information about
            the users in the group.
          items:
            $ref: '#/components/schemas/userInfo'
      description: ""
      x-ds-definition-name: userInfoList
      x-ms-summary: ""
    userInformation:
      type: object
      properties:
        activationAccessCode:
          type: string
          description: Access code provided to the user to activate the account.
        company:
          type: string
          description: The name of the user's company.
        connectConfigurations:
          type: array
          description: Object representing the user's custom Connect configuration.
          items:
            $ref: '#/components/schemas/connectUserObject'
        countryCode:
          type: string
          description: The three-letter code for the user's country.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customSettings:
          type: array
          description: The name/value pair information for the user custom setting.
          items:
            $ref: '#/components/schemas/nameValue'
        defaultAccountId:
          type: string
          description: The default account ID associated with the user.
        email:
          type: string
          description: The user's email address.
        enableConnectForUser:
          type: string
          description: Boolean value that specifies whether the user is enabled for
            updates from DocuSign Connect.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        firstName:
          type: string
          description: "The user's first name. \nMaximum Length: 50 characters."
        forgottenPasswordInfo:
          $ref: '#/components/schemas/forgottenPasswordInformation'
        groupList:
          type: array
          description: |
            A list of the group information for groups to add the user to.
            Use [UserGroups::listGroups](https://developers.docusign.com/docs/esign-rest-api/reference/UserGroups/Groups/list) to get information about groups.

            When setting a user's group, only the `groupId` is required.
          items:
            $ref: '#/components/schemas/group'
        hasRemoteNotary:
          type: boolean
          description: ""
        homeAddress:
          $ref: '#/components/schemas/addressInformation'
        initialsImageUri:
          type: string
          description: The URI for retrieving the image of the user's initials.
        isAdmin:
          type: string
          description: Determines if the feature set is actively set as part of the
            plan.
        isNAREnabled:
          type: string
          description: When set to **true**, National Association of Realtors (NAR)
            signature logos are enabled for the user.
        jobTitle:
          type: string
          description: The user's job title.
        lastLogin:
          type: string
          description: The date and time when the user last logged in to the system.
        lastName:
          type: string
          description: "The user's last name. \nMaximum Length: 50 characters."
        loginStatus:
          type: string
          description: Boolean value that indicates whether the user is currently
            logged in or not.
        middleName:
          type: string
          description: "The user's middle name. \nLimit: 50 characters."
        password:
          type: string
          description: The user's encrypted password hash.
        passwordExpiration:
          type: string
          description: If password expiration is enabled, the date-time when the user's
            password expires.
        permissionProfileId:
          type: string
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
        permissionProfileName:
          type: string
          description: "The name of the account permission profile. \n\nExample: `Account\
            \ Administrator`"
        profileImageUri:
          type: string
          description: The URL for retrieving the user's profile image.
        sendActivationEmail:
          type: string
          description: When set to **true**, specifies that an activation email will
            be sent to the user.
        sendActivationOnInvalidLogin:
          type: string
          description: When set to **true**, specifies that an additional activation
            email be sent if user's log on fails before the account is activated.
        signatureImageUri:
          type: string
          description: An endpoint URI that you can use to retrieve the user's signature
            image.
        subscribe:
          type: string
          description: ""
        suffixName:
          type: string
          description: "The suffix for the user's name, such as Jr, IV, PhD, etc.\n\
            \nLimit: 50 characters. "
        title:
          type: string
          description: The title of the user.
        uri:
          type: string
          description: A URI containing the user ID.
        userAddedToAccountDateTime:
          type: string
          description: The date and time that the user was added to the account.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
        userName:
          type: string
          description: The name of the user.
        userProfileLastModifiedDate:
          type: string
          description: The date and time that the user's profile was last modified.
        userSettings:
          $ref: '#/components/schemas/userSettingsInformation'
        userStatus:
          type: string
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
        userType:
          type: string
          description: The type of user, for example `CompanyUser`.
        workAddress:
          $ref: '#/components/schemas/addressInformation'
      description: User information.
      x-ds-definition-name: userInformation
      x-ms-summary: User information.
    userInformationList:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/userInformation'
      description: Contains a list of account users.
      x-ds-definition-name: userInformationList
      x-ms-summary: Contains a list of account users.
    userPasswordInformation:
      type: object
      properties:
        currentPassword:
          type: string
          description: The user's current password to be changed.
        email:
          type: string
          description: The user's email address for the associated account.
        forgottenPasswordInfo:
          $ref: '#/components/schemas/forgottenPasswordInformation'
        newPassword:
          type: string
          description: The user's new password.
      description: ""
      x-ds-definition-name: userPasswordInformation
      x-ms-summary: ""
    userPasswordRules:
      type: object
      properties:
        passwordRules:
          $ref: '#/components/schemas/accountPasswordRules'
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: Contains details about the password rules for a user.
      x-ds-definition-name: userPasswordRules
      x-ms-summary: Contains details about the password rules for a user.
    userProfile:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/addressInformation'
        authenticationMethods:
          type: array
          description: 'Indicates the authentication methods that the user uses. These
            properties cannot be modified by the PUT operation. '
          items:
            $ref: '#/components/schemas/authenticationMethod'
        companyName:
          type: string
          description: The name of the user's company.
        displayOrganizationInfo:
          type: string
          description: ' When set to **true**, the user''s company and title information
            display on the ID card. '
        displayPersonalInfo:
          type: string
          description: When set to **true**, the user's address and phone number display
            on the ID card.
        displayProfile:
          type: string
          description: When set to **true**, the user's ID card can be viewed from
            signed documents and envelope history.
        displayUsageHistory:
          type: string
          description: When set to **true**, the user's usage information displays
            on the ID card.
        profileImageUri:
          type: string
          description: The URL for retrieving the user's profile image.
        title:
          type: string
          description: The title of the user.
        usageHistory:
          $ref: '#/components/schemas/usageHistory'
        userDetails:
          $ref: '#/components/schemas/userInformation'
        userProfileLastModifiedDate:
          type: string
          description: The date and time that the user's profile was last modified.
      description: ""
      x-ds-definition-name: userProfile
      x-ms-summary: ""
    userSettingsInformation:
      type: object
      properties:
        accountManagementGranular:
          $ref: '#/components/schemas/userAccountManagementGranularInformation'
        adminOnly:
          type: string
          description: Reserved for DocuSign.
        adminOnlyMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowAutoTagging:
          type: string
          description: When set to **true**, the API returns suggested tabs for documents
            for this user.
        allowEnvelopeTransferTo:
          type: string
          description: When set to **true**, this user can participate in envelope
            transfers on the account.
        allowEnvelopeTransferToMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowEsealRecipients:
          type: string
          description: |-
            When set to **true**, this user can create [electronic seal recipients][eseal].

            [eseal]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients/#seal-recipient
        allowEsealRecipientsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowPowerFormsAdminToAccessAllPowerFormEnvelope:
          type: string
          description: When set to **true** and this user is an administrator, they
            can view all of the envelopes generated from PowerForms. The default value
            is **false**.
        allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowRecipientLanguageSelection:
          type: string
          description: When set to **true**, this user can set the language used in
            the standard email format for a recipient when creating an envelope.
        allowRecipientLanguageSelectionMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSendOnBehalfOf:
          type: string
          description: When set to **true**, this user can send envelopes "on behalf
            of" other users through the API.
        allowSendOnBehalfOfMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        allowSupplementalDocuments:
          type: string
          description: When **true**, this user can include supplemental documents.
        allowSupplementalDocumentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        anchorTagVersionedPlacementEnabled:
          type: string
          description: |
            Reserved for DocuSign.
        apiAccountWideAccess:
          type: string
          description: When **true**, indicates that this user can send envelope-specific
            API requests on the account.
        apiAccountWideAccessMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        apiCanExportAC:
          type: string
          description: When **true**, this user can export authoritative copy for
            the account.
        apiCanExportACMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        bulkSend:
          type: string
          description: When **true**, this user can use the bulk send feature for
            the account.
        bulkSendMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canChargeAccount:
          type: string
          description: Reserved for DocuSign.
        canChargeAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canEditSharedAddressbook:
          type: string
          description: When true, this user can edit the shared address book for the
            account.
        canEditSharedAddressbookMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canLockEnvelopes:
          type: string
          description: When set to **true**, this user can lock envelopes.
        canLockEnvelopesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageAccount:
          type: string
          description: When **true**, this user is an administrator for the account.
        canManageAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageDistributor:
          type: string
          description: Reserved for DocuSign.
        canManageDistributorMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canManageTemplates:
          type: string
          description: When **true**, this user can manage templates for the account.
        canManageTemplatesMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canSendAPIRequests:
          type: string
          description: When **true**, this user can send API requests on the account.
        canSendAPIRequestsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canSendEnvelope:
          type: string
          description: When **true**, this user can send envelopes on the account.
        canSendEnvelopeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canSignEnvelope:
          type: string
          description: When **true**, this user can sign envelopes.
        canSignEnvelopeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canUseScratchpad:
          type: string
          description: When set to **true**, this user can use a scratchpad to edit
            information.
        canUseScratchpadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        canUseSmartContracts:
          type: string
          description: Reserved for DocuSign.
        canUseSmartContractsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableDocumentUpload:
          type: string
          description: When **true**, this user is prohibited from uploading documents
            during sending.
        disableDocumentUploadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        disableOtherActions:
          type: string
          description: When **true**, this user can access the **Other Actions** menu.
        disableOtherActionsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableDSPro:
          type: string
          description: Reserved for DocuSign.
        enableDSProMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSequentialSigningAPI:
          type: string
          description: |-
            When set to **true**, the account can define the routing
            order of recipients for envelopes sent by using the eSignature API.

            **Note**: Only SysAdmin users can change this setting.
        enableSequentialSigningAPIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSequentialSigningUI:
          type: string
          description: |
            When set to **true**, the account can define the routing order
            of recipients for envelopes sent by using the DocuSign application.

            **Note**: Only SysAdmin users can change this setting.
        enableSequentialSigningUIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSignerAttachments:
          type: string
          description: When **true**, this user can use the signing attachments feature.
        enableSignerAttachmentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableSignOnPaperOverride:
          type: string
          description: |-
            When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.

            **Note**: Only Admin users can change this setting.
        enableSignOnPaperOverrideMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableTransactionPoint:
          type: string
          description: Reserved for DocuSign.
        enableTransactionPointMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        enableVaulting:
          type: string
          description: When set to **true**, Vaulting is enabled for the account.
        enableVaultingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        expressSendOnly:
          type: string
          description: When set to **false**, this user can apply tabs to documents
            during the sending experience.
        locale:
          type: string
          description: |-
            The user's locale code. Valid values are:
            - `zh_CN`
            - `zh_TW`
            - `nl`
            - `en`
            - `fr`
            - `de`
            - `it`
            - `ja`
            - `ko`
            - `pt`
            - `pt_BR`
            - `ru`
            - `es`
        localeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicy'
        manageClickwrapsMode:
          type: string
          description: When set to **true**, this user can create and manage [Clickwraps](https://developers.docusign.com/click-api).
        manageClickwrapsModeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        modifiedBy:
          type: string
          description: The user id (GUID) of the user who last modified this user
            record.
        modifiedByMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        modifiedDate:
          type: string
          description: The date on which this user record was last modified.
        modifiedDateMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        modifiedPage:
          type: string
          description: Note referencing the page that modified this user record.
        modifiedPageMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        newSendUI:
          type: string
          description: Reserved for DocuSign.
        newSendUIMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        powerFormMode:
          type: string
          description: |-
            Indicates the Power Form mode setting for the user:
            - `none`
            - `admin`
            - `user`
        powerFormModeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        recipientViewedNotification:
          type: string
          description: When **true**, this user receives notifications when envelopes
            are viewed.
        recipientViewedNotificationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sealIdentifiers:
          type: array
          description: Information about the seals associated with this user.
          items:
            $ref: '#/components/schemas/sealIdentifier'
        selfSignedRecipientEmailDocument:
          type: string
          description: |
            Sets how self-signed documents are presented to the email recipients.
            Valid values are:

            - `include_pdf`: A PDF of the completed document is attached to the email.
            - `include_link`: A secure link to the self-signed documents is included
               in the email.

            **Note**: Only Admin users can change this setting.
        selfSignedRecipientEmailDocumentMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        senderEmailNotifications:
          $ref: '#/components/schemas/senderEmailNotifications'
        signerEmailNotifications:
          $ref: '#/components/schemas/signerEmailNotifications'
        supplementalDocumentIncludeInDownload:
          type: string
          description: When **true**, this user gets supplemental documents when downloading
            documents.
        supplementalDocumentsMustAccept:
          type: string
          description: When **true**, this user must accept supplemental documents.
        supplementalDocumentsMustAcceptMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustRead:
          type: string
          description: When **true**, this user must both view and accept supplemental
            documents.
        supplementalDocumentsMustReadMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        supplementalDocumentsMustView:
          type: string
          description: When **true**, this user must view supplemental documents.
        supplementalDocumentsMustViewMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        templateActiveCreation:
          type: string
          description: When set to **true**, a new template is created each time the
            user sends an envelope.
        templateActiveCreationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        templateApplyNotify:
          type: string
          description: When set to **true**, the system notifies this user before
            applying a matching template.
        templateApplyNotifyMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        templateAutoMatching:
          type: string
          description: When set to **true**, the system automatically applies a matching
            template to a document if only one template matches. If there are multiple
            matches, it displays a list of matches to select from.
        templateAutoMatchingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        templateMatchingSensitivity:
          type: string
          description: Percentage used when matching templates.
        templateMatchingSensitivityMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        templatePageLevelMatching:
          type: string
          description: When **true**, users see template matching functionality.
        templatePageLevelMatchingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timezoneDST:
          type: string
          description: When true, daylight savings time is in effect for this user's
            time zone.
        timezoneDSTMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timezoneMask:
          type: string
          description: The custom DateTime format setting for this user.
        timezoneMaskMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timezoneOffset:
          type: string
          description: |-
            The timezone offset for the user. Valid values:
            - `tz_01_afghanistan`
            - `tz_02_alaskan`
            - `tz_03_arab`
            - `tz_04_arabian`
            - `tz_05_arabic`
            - `tz_06_argentina`
            - `tz_07_atlantic`
            - `tz_08_aus_central`
            - `tz_09_aus_eastern`
            - `tz_10_azerbaijan`
            - `tz_11_azores`
            - `tz_12_bangladesh`
            - `tz_13_canada_central`
            - `tz_14_cape_verde`
            - `tz_15_caucasus`
            - `tz_16_central_australia`
            - `tz_17_central_america`
            - `tz_18_central_asia`
            - `tz_19_central_brazilian`
            - `tz_20_central_europe`
            - `tz_21_central_european`
            - `tz_22_central_pacific`
            - `tz_23_central`
            - `tz_24_central_mexico`
            - `tz_25_china`
            - `tz_26_dateline`
            - `tz_27_east_africa`
            - `tz_28_east_australia`
            - `tz_29_east_europe`
            - `tz_30_east_south_america`
            - `tz_31_eastern`
            - `tz_32_egypt`
            - `tz_33_ekaterinburg`
            - `tz_34_fiji`
            - `tz_35_fli`
            - `tz_36_georgian`
            - `tz_37_gmt`
            - `tz_38_greenland`
            - `tz_39_greenwich`
            - `tz_40_gtb`
            - `tz_41_hawaiian`
            - `tz_42_india`
            - `tz_43_iran`
            - `tz_44_israel`
            - `tz_45_jordan`
            - `tz_46_kaliningrad`
            - `tz_47_kamchatka`
            - `tz_48_korea`
            - `tz_49_magadan`
            - `tz_50_mauritius`
            - `tz_51_mid_atlantic`
            - `tz_52_middle_east`
            - `tz_53_montevideo`
            - `tz_54_morocco`
            - `tz_55_mountain`
            - `tz_56_mountain_mexico`
            - `tz_57_myanmar`
            - `tz_58_north_central_asia`
            - `tz_59_namibia`
            - `tz_60_nepal`
            - `tz_61_new_zealand`
            - `tz_62_new_foundland`
            - `tz_63_north_asia_east`
            - `tz_64_north_asia`
            - `tz_65_pacific_sa`
            - `tz_66_pacific`
            - `tz_67_pacific_mexico`
            - `tz_68_pakistan`
            - `tz_69_paraguay`
            - `tz_70_romance`
            - `tz_71_russian`
            - `tz_72_sa_eastern`
            - `tz_73_sa_pacific`
            - `tz_74_sa_western`
            - `tz_75_samoa`
            - `tz_76_se_asia`
            - `tz_77_singapore`
            - `tz_78_south_africa`
            - `tz_79_sriLanka`
            - `tz_80_syria`
            - `tz_81_taipei`
            - `tz_82_tasmania`
            - `tz_83_tokyo`
            - `tz_84_tonga`
            - `tz_85_turkey`
            - `tz_86_ulaanbaatar`
            - `tz_87_us_eastern`
            - `tz_88_us_mountain`
            - `tz_89_venezuela`
            - `tz_90_vladivostok`
            - `tz_91_west_australia`
            - `tz_92_west_central_africa`
            - `tz_93_west_europe`
            - `tz_94_west_asia`
            - `tz_95_west_pacific`
            - `tz_96_yakutsk`
        timezoneOffsetMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timezoneSendingPref:
          type: string
          description: Reserved for DocuSign.
        timezoneSendingPrefMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        timezoneSigningPref:
          type: string
          description: Reserved for DocuSign.
        timezoneSigningPrefMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        transactionPointSiteNameURL:
          type: string
          description: Reserved for DocuSign.
        transactionPointSiteNameURLMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        transactionPointUserName:
          type: string
          description: Reserved for DocuSign.
        transactionPointUserNameMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        vaultingMode:
          type: string
          description: |-
            Indicates the specified Vaulting mode:
            - `none`
            - `estored`
            - `electronic_original`
        vaultingModeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: |-
        Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
        - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
        - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
        - `options`: The values supported for this setting (not all settings have this element)
      x-ds-definition-name: userSettingsInformation
      x-ms-summary: |-
        Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
        - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
        - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
        - `options`: The values supported for this setting (not all settings have this element)
    userSharedItem:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        shared:
          type: string
          description: |
            How the item is shared. One of:

            - `not_shared`
            - `shared_to`
            - `shared_from`
            - `shared_to_and_from`
        user:
          $ref: '#/components/schemas/userInfo'
      description: Information about a shared item.
      x-ds-definition-name: userSharedItem
      x-ms-summary: Information about a shared item.
    userSignature:
      type: object
      properties:
        adoptedDateTime:
          type: string
          description: The date and time the user adopted their signature.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customField:
          type: string
          description: ""
        dateStampProperties:
          $ref: '#/components/schemas/dateStampProperties'
        disallowUserResizeStamp:
          type: string
          description: When set to **true**, users may not resize the stamp.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        externalID:
          type: string
          description: Optionally specify an external identifier for the user's signature.
        imageBase64:
          type: string
          description: A Base64-encoded representation of the signature image.
        imageType:
          type: string
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
        initials150ImageId:
          type: string
          description: The ID of the user's initials image.
        initialsImageUri:
          type: string
          description: The URI for retrieving the image of the user's initials.
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        nrdsId:
          type: string
          description: The National Association of Realtors (NAR) membership ID for
            a user who is a realtor.
        nrdsLastName:
          type: string
          description: The realtor's last name.
        nrdsStatus:
          type: string
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
        phoneticName:
          type: string
          description: The phonetic spelling of the `signatureName`.
        signature150ImageId:
          type: string
          description: The ID of the user's signature image.
        signatureFont:
          type: string
          description: |
            The font type for the signature, if the signature is not drawn. The supported font types are:

            "7_DocuSign", "1_DocuSign", "6_DocuSign", "8_DocuSign", "3_DocuSign", "Mistral", "4_DocuSign", "2_DocuSign", "5_DocuSign", "Rage Italic"
        signatureId:
          type: string
          description: Specifies the signature ID associated with the signature name.
            You can use the signature ID in the URI in place of the signature name,
            and the value stored in the `signatureName` property in the body is used.
            This allows the use of special characters (such as "&", "<", ">") in a
            the signature name. Note that with each update to signatures, the returned
            signature ID might change, so the caller will need to trigger off the
            signature name to get the new signature ID.
        signatureImageUri:
          type: string
          description: An endpoint URI that you can use to retrieve the user's signature
            image.
        signatureInitials:
          type: string
          description: ' The initials associated with the signature.'
        signatureName:
          type: string
          description: Specifies the user's signature name.
        signatureRights:
          type: string
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
        signatureType:
          type: string
          description: Specifies the type of signature.
        stampFormat:
          type: string
          description: "The format of a stamp. Valid values are:\n\n- `NameHanko`:\
            \ The stamp represents only the signer's name.\n- `NameDateHanko`: The\
            \ stamp represents the signer's name and the date. "
        stampImageUri:
          type: string
          description: The URI for retrieving the image of the user's stamp.
        stampSizeMM:
          type: string
          description: The physical height of the stamp image (in millimeters) that
            the stamp vendor recommends for displaying the image in PDF documents.
        stampType:
          type: string
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
      description: ""
      x-ds-definition-name: userSignature
      x-ms-summary: ""
    userSignatureDefinition:
      type: object
      properties:
        dateStampProperties:
          $ref: '#/components/schemas/dateStampProperties'
        disallowUserResizeStamp:
          type: string
          description: When set to **true**, users may not resize the stamp.
        externalID:
          type: string
          description: Optionally specify an external identifier for the user's signature.
        imageType:
          type: string
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        nrdsId:
          type: string
          description: The National Association of Realtors (NAR) membership ID for
            a user who is a realtor.
        nrdsLastName:
          type: string
          description: The realtor's last name.
        phoneticName:
          type: string
          description: The phonetic spelling of the `signatureName`.
        signatureFont:
          type: string
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
        signatureId:
          type: string
          description: Specifies the signature ID associated with the signature name.
            You can use the signature ID in the URI in place of the signature name,
            and the value stored in the `signatureName` property in the body is used.
            This allows the use of special characters (such as "&", "<", ">") in a
            the signature name. Note that with each update to signatures, the returned
            signature ID might change, so the caller will need to trigger off the
            signature name to get the new signature ID.
        signatureInitials:
          type: string
          description: Specifies the user's signature in initials format.
        signatureName:
          type: string
          description: Specifies the user's signature name.
        stampFormat:
          type: string
          description: "The format of a stamp. Valid values are:\n\n- `NameHanko`:\
            \ The stamp represents only the signer's name.\n- `NameDateHanko`: The\
            \ stamp represents the signer's name and the date. "
        stampSizeMM:
          type: string
          description: The physical height of the stamp image (in millimeters) that
            the stamp vendor recommends for displaying the image in PDF documents.
      description: ""
      x-ds-definition-name: userSignatureDefinition
      x-ms-summary: ""
    userSignaturesInformation:
      type: object
      properties:
        userSignatures:
          type: array
          description: An array of  `userSignature` objects.
          items:
            $ref: '#/components/schemas/userSignature'
      description: ""
      x-ds-definition-name: userSignaturesInformation
      x-ms-summary: ""
    userSocialIdResult:
      type: object
      properties:
        socialAccountInformation:
          type: array
          description: Contains properties that map a DocuSign user to a social account
            such as Facebook or Yahoo.
          items:
            $ref: '#/components/schemas/socialAccountInformation'
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
      description: ""
      x-ds-definition-name: userSocialIdResult
      x-ms-summary: ""
    usersResponse:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/userInfo'
      description: ""
      x-ds-definition-name: usersResponse
      x-ms-summary: ""
    view:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        buttonText:
          type: string
          description: The text to display on the button.
        buttonTextMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        pageNumber:
          type: string
          description: The page number on which the tab is located. For supplemental
            documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: The unique id for the recipient. It is used by the tab element
            to indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the recipient must click the **View**
            button for the supporting document prior to completing the signing process.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requiredRead:
          type: string
          description: When set to **true**, the recipient must read through the document.
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |+
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |+
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: This tab is used with the Approve tab to handle supplemental documents.
      x-ds-definition-name: view
      x-ms-summary: This tab is used with the Approve tab to handle supplemental documents.
    viewUrl:
      type: object
      properties:
        url:
          type: string
          description: URL to the Review ID page.
      description: ""
      x-ds-definition-name: viewUrl
      x-ms-summary: ""
    watermark:
      type: object
      properties:
        displayAngle:
          type: string
          description: ""
        enabled:
          type: string
          description: ""
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        id:
          type: string
          description: A unique ID for the Salesforce object.
        imageBase64:
          type: string
          description: ""
        transparency:
          type: string
          description: ""
        watermarkText:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: watermark
      x-ms-summary: ""
    witness:
      type: object
      properties:
        accessCode:
          type: string
          description: "If a value is provided, the recipient must enter the value\
            \ as the access code to view and sign the envelope. \n\nMaximum Length:\
            \ 50 characters and it must conform to the account's access code format\
            \ setting.\n\nIf blank, but the signer `accessCode` property is set in\
            \ the envelope, then that value is used.\n\nIf blank and the signer `accessCode`\
            \ property is not set, then the access code is not required."
        accessCodeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        addAccessCodeToEmail:
          type: string
          description: Optional. When set to **true**, the access code will be added
            to the email sent to the recipient. This nullifies the security measure
            of `accessCode` on the recipient.
        additionalNotifications:
          type: array
          description: An array of additional notification objects.
          items:
            $ref: '#/components/schemas/recipientAdditionalNotification'
        agentCanEditEmail:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            email address. This element is only active if enabled for the account.
        agentCanEditName:
          type: string
          description: Optional element. When set to **true**, the agents recipient
            associated with this recipient can change the recipient's pre-populated
            name. This element is only active if enabled for the account.
        allowSystemOverrideForLockedRecipient:
          type: string
          description: ""
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        bulkRecipientsUri:
          type: string
          description: Reserved for DocuSign.
        canSignOffline:
          type: string
          description: When set to **true**, specifies that the signer can perform
            the signing ceremony offline.
        clientUserId:
          type: string
          description: "Specifies whether the recipient is embedded or remote. \n\n\
            If the `clientUserId` property is not null then the recipient is embedded.\
            \ Use this field to associate the signer with their userId in your app.\
            \ Authenticating the user is the responsibility of your app when you use\
            \ embedded signing.\n\nNote: if the `clientUserId` property is set and\
            \ either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of\
            \ the account settings is set to  **true**, an error is generated on sending.\
            \ \n\nMaximum length: 100 characters. "
        completedCount:
          type: string
          description: Indicates the number of times that the recipient has been through
            a signing completion for the envelope. If this number is greater than
            0 for a signing group, only the user who previously completed may sign
            again. Read only.
        creationReason:
          type: string
          description: The reason why the recipient was created (for example, `sender`).
            Read only.
        customFields:
          type: array
          description: An optional array of strings that allows the sender to provide
            custom data about the recipient. This information is returned in the envelope
            status but otherwise not used by DocuSign. Each customField string can
            be a maximum of 100 characters.
          items:
            type: string
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        declinedReason:
          type: string
          description: The reason the recipient declined the document. Read only.
        defaultRecipient:
          type: string
          description: When set to **true**, this recipient is the default recipient
            and any tabs generated by the transformPdfFields option are mapped to
            this recipient.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        deliveryMethod:
          type: string
          description: Reserved for DocuSign.
        deliveryMethodMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        designatorId:
          type: string
          description: ""
        designatorIdGuid:
          type: string
          description: ""
        documentVisibility:
          type: array
          description: A list of `documentVisibility` objects. Each object in the
            list specifies whether a document in the envelope is visible to this recipient.
            For the envelope to use this functionality, Document Visibility must be
            enabled for the account and the `enforceSignerVisibility` property must
            be set to **true**.
          items:
            $ref: '#/components/schemas/documentVisibility'
        email:
          type: string
          description: The recipient's email address.
        emailMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        emailNotification:
          $ref: '#/components/schemas/recipientEmailNotification'
        embeddedRecipientStartURL:
          type: string
          description: "Specifies a sender-provided valid URL string for redirecting\
            \ an embedded recipient. When using this option, the embedded recipient\
            \ still receives an email from DocuSign, just as a remote recipient would.\
            \ When the document link in the email is clicked the recipient is redirected,\
            \ through DocuSign, to the supplied URL to complete their actions. When\
            \ routing to the URL, the sender's system (the server responding to the\
            \ URL) must request a recipient token to launch a signing session. \n\n\
            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded\
            \ signing or viewing process directly at DocuSign. The signing or viewing\
            \ action is initiated by the DocuSign system and the transaction activity\
            \ and Certificate of Completion records will reflect this. In all other\
            \ ways the process is identical to an embedded signing or viewing operation\
            \ launched by a partner.\n\nIt is important to understand that in a typical\
            \ embedded workflow, the authentication of an embedded recipient is the\
            \ responsibility of the sending application. DocuSign expects that senders\
            \ will follow their own processes for establishing the recipient's identity.\
            \ In this workflow the recipient goes through the sending application\
            \ before the embedded signing or viewing process is initiated. However,\
            \ when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`,\
            \ the recipient goes directly to the embedded signing or viewing process,\
            \ bypassing the sending application and any authentication steps the sending\
            \ application would use. In this case, DocuSign recommends that you use\
            \ one of the normal DocuSign authentication features (Access Code, Phone\
            \ Authentication, SMS Authentication, etc.) to verify the identity of\
            \ the recipient.\n\nIf the `clientUserId` property is NOT set, and the\
            \ `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect\
            \ URL and launch the standard signing process for the email recipient.\
            \ Information can be appended to the embedded recipient start URL using\
            \ merge fields. The available merge fields items are: `envelopeId`, `recipientId`,\
            \ `recipientName`, `recipientEmail`, and `customFields`. The `customFields`\
            \ property must be set for the recipient or envelope. The merge fields\
            \ are enclosed in double brackets. \n\n*Example*: \n\n`http://senderHost/[[mergeField1]]/\
            \ beginSigningSession? [[mergeField2]]&[[mergeField3]]` "
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        excludedDocuments:
          type: array
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
        faxNumber:
          type: string
          description: Reserved for DocuSign.
        faxNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        firstName:
          type: string
          description: 'The recipient''s first name. Maximum Length: 50 characters.'
        firstNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fullName:
          type: string
          description: Reserved for DocuSign.
        fullNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckConfigurationName:
          type: string
          description: "The name of the authentication check to use. This value must\
            \ match one of the authentication types that the account uses. The names\
            \ of these authentication types appear in the web console sending interface\
            \ in the Identify list for a recipient. This setting overrides any default\
            \ authentication setting. Valid values are:\n\n- `Phone Auth $`: The recipient\
            \ must authenticate by using two-factor authentication (2FA). You provide\
            \ the phone number to use for 2FA in the `phoneAuthentication` object.\n\
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the\
            \ phone number to use in the `smsAuthentication` object.\n- `ID Check\
            \ $`: The  recipient must answer detailed security questions. \n\n**Example**:\
            \ Your account has ID Check and SMS Authentication available. In the web\
            \ console Identify list, these appear as ID Check $ and SMS Auth $. To\
            \ use ID Check in an envelope, the idCheckConfigurationName should be\
            \ ID Check $. For SMS, you would use SMS Auth $, and you would also need\
            \ to add a phone number to the smsAuthentication node."
        idCheckConfigurationNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        idCheckInformationInput:
          $ref: '#/components/schemas/idCheckInformationInput'
        identityVerification:
          $ref: '#/components/schemas/recipientIdentityVerification'
        inheritEmailNotificationConfiguration:
          type: string
          description: 'When set to **true** and the envelope recipient creates a
            DocuSign account after signing, the Manage Account Email Notification
            settings are used as the default settings for the recipient''s account. '
        isBulkRecipient:
          type: string
          description: |
            Reserved for DocuSign.
        isBulkRecipientMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lastName:
          type: string
          description: The recipient's last name.
        lastNameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        lockedRecipientPhoneAuthEditable:
          type: string
          description: Reserved for DocuSign.
        lockedRecipientSmsEditable:
          type: string
          description: Reserved for DocuSign.
        name:
          type: string
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        notaryId:
          type: string
          description: ""
        note:
          type: string
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
        noteMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        offlineAttributes:
          $ref: '#/components/schemas/offlineAttributes'
        phoneAuthentication:
          $ref: '#/components/schemas/recipientPhoneAuthentication'
        proofFile:
          $ref: '#/components/schemas/recipientProofFile'
        recipientAttachments:
          type: array
          description: Reserved for DocuSign.
          items:
            $ref: '#/components/schemas/recipientAttachment'
        recipientAuthenticationStatus:
          $ref: '#/components/schemas/authenticationStatus'
        recipientFeatureMetadata:
          type: array
          description: Metadata about the features that are supported for the recipient
            type. Read only.
          items:
            $ref: '#/components/schemas/featureAvailableMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientSignatureProviders:
          type: array
          description: The default signature provider is the DocuSign Electronic signature
            system. This parameter is used to specify one or more Standards Based
            Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: '#/components/schemas/recipientSignatureProvider'
        recipientSuppliesTabs:
          type: string
          description: When set to **true**, specifies that the recipient creates
            the tabs.
        recipientType:
          type: string
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
        recipientTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireIdLookup:
          type: string
          description: 'When set to **true**, the recipient is required to use the
            specified ID check method (including Phone and SMS authentication) to
            validate their identity. '
        requireIdLookupMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireSignerCertificate:
          type: string
          description: "By default, DocuSign signers create electronic signatures.\
            \ This field can be used to require the signer to use a SAFE-BioPharma\
            \ digital certificate for signing.\n\nThis parameter should only be used\
            \ to select a SAFE-BioPharma certificate. New integrations should use\
            \ the `recipientSignatureProviders` parameter for other types of digital\
            \ certificates. \n\nSet this parameter to `safe` to use a SAFE-BioPharma\
            \ certificate.\n\nThe signer must be enrolled in the SAFE program to sign\
            \ with a SAFE certificate."
        requireSignOnPaper:
          type: string
          description: When set to **true**, the signer must print, sign, and upload
            or fax the signed documents to DocuSign.
        requireUploadSignature:
          type: string
          description: When set to **true**, the signer is required to upload a new
            signature, even if they have a pre-adopted signature in their personal
            DocuSign account.
        roleName:
          type: string
          description: Optional element. Specifies the role name associated with the
            recipient.<br/><br/>This property is required when you are working with
            template recipients.
        routingOrder:
          type: string
          description: 'Specifies the routing order of the recipient in the envelope. '
        routingOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signatureInfo:
          $ref: '#/components/schemas/recipientSignatureInformation'
        signedDateTime:
          type: string
          description: Reserved for DocuSign.
        signInEachLocation:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab (instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signInEachLocationMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        signingGroupUsers:
          type: array
          description: A complex type that contains information about users in the
            signing group.
          items:
            $ref: '#/components/schemas/userInfo'
        smsAuthentication:
          $ref: '#/components/schemas/recipientSMSAuthentication'
        socialAuthentications:
          type: array
          description: Deprecated.
          items:
            $ref: '#/components/schemas/socialAuthentication'
        status:
          type: string
          description: "The recipient's status. Read only. \n\nPossible values:\n\n\
            - `autoresponded`: The recipient's email system auto-responded to the\
            \ email from DocuSign. This status is used in the web console to inform\
            \ senders about the bounced-back email. This recipient status is only\
            \ used if **Send-on-behalf-of** is turned off for the account.\n- `completed`:\
            \ The recipient has completed their actions (signing or other required\
            \ actions if not a signer) for an envelope.\n- `created`: The recipient\
            \ is in a draft state. This value is only associated with draft envelopes\
            \ (envelopes that have a status of `created`).\n- `declined`: The recipient\
            \ declined to sign the document(s) in the envelope.\n- `delivered`: The\
            \ recipient has viewed the document(s) in an envelope through the DocuSign\
            \ signing website. This is not an email delivery of the documents in an\
            \ envelope.\n- `faxPending`: The recipient has finished signing and the\
            \ system is waiting for a fax attachment from the recipient before completing\
            \ their signing step.\n- `sent`: The recipient has been sent an email\
            \ notification that it is their turn to sign an envelope.\n- `signed`:\
            \ The recipient has completed (signed) all required tags in an envelope.\
            \ This is a temporary state during processing, after which the recipient's\
            \ status automatically switches to `completed`."
        statusCode:
          type: string
          description: The code associated with the recipient's status. Read only.
        suppressEmails:
          type: string
          description: When set to **true**, email notifications are suppressed for
            the recipient, and they must access envelopes and documents from their
            DocuSign inbox.
        tabs:
          $ref: '#/components/schemas/EnvelopeRecipientTabs'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        totalTabCount:
          type: string
          description: The total number of tabs in the documents. Read only.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
        witnessFor:
          type: string
          description: The person or party for whom the recipient is a witness.
        witnessForGuid:
          type: string
          description: The GUID of the person or party for whom the recipient is a
            witness.
      description: A complex type containing information about a witness recipient.
        Witnesses are recipients whose signatures affirm that the identified signers
        have signed the documents in the envelope.
      x-ds-definition-name: witness
      x-ms-summary: A complex type containing information about a witness recipient.
        Witnesses are recipients whose signatures affirm that the identified signers
        have signed the documents in the envelope.
    workflow:
      type: object
      properties:
        currentWorkflowStepId:
          type: string
          description: |-
            The `workflowStepId` of the current step.
            This is not an index into the `workflowSteps` array in this object.
            See the `workflowStep` object.
        workflowStatus:
          type: string
          description: |-
            The status of the workflow:

            - `paused` if the workflow is paused
            - `in_progress` if the workflow is in progress
        workflowSteps:
          type: array
          description: An array of workflow steps.
          items:
            $ref: '#/components/schemas/workflowStep'
      description: Describes the workflow for an envelope.
      x-ds-definition-name: workflow
      x-ms-summary: Describes the workflow for an envelope.
    workflowStep:
      type: object
      properties:
        action:
          type: string
          description: |
            Indicates the action to perform.

            - `pause_before`: The workflow should pause before the trigger described by `triggerOnItem` is reached.

            <!--
            - `pause_after`: The workflow should pause after the trigger described by `triggerOnItem` is processed.
            -->
        completedDate:
          type: string
          description: The timestamp of when the workflow step transitioned to `completed`
            status.
        itemId:
          type: string
          description: The unique ID of the item being triggered.
        recipientRouting:
          $ref: '#/components/schemas/recipientRouting'
        status:
          type: string
          description: |-
            The status of the step. One of:

            - `inactive`
            - `in_progress`
            - `paused`
            - `pending`
            - `completed`

            This is a read-only property.
        triggeredDate:
          type: string
          description: The timestamp of when the workflow step transitioned to `in_progress`
            status.
        triggerOnItem:
          type: string
          description: The type of item that triggers this workflow step. Currently,
            only `routing_order`, is the only supported value.
        workflowStepId:
          type: string
          description: |-
            A unique identifier for this workflow step.
            This value is available from the `currentWorkflowStepId` property of the `workflow` object,
      description: Describes a single step in a workflow.
      x-ds-definition-name: workflowStep
      x-ms-summary: Describes a single step in a workflow.
    workspace:
      type: object
      properties:
        billableAccountId:
          type: string
          description: The id of the account to bill.
        callerInformation:
          $ref: '#/components/schemas/workspaceUser'
        created:
          type: string
          description: The UTC DateTime when the workspace user authorization was
            created.
        createdByInformation:
          $ref: '#/components/schemas/workspaceUser'
        lastModified:
          type: string
          description: Utc date and time the comment was last updated (can only be
            done by creator.)
        lastModifiedByInformation:
          $ref: '#/components/schemas/workspaceUser'
        settings:
          $ref: '#/components/schemas/workspaceSettings'
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
        workspaceBaseUrl:
          type: string
          description: The relative URL for accessing the workspace.
        workspaceDescription:
          type: string
          description: Text describing the purpose of the workspace.
        workspaceId:
          type: string
          description: The id of the workspace, always populated.
        workspaceName:
          type: string
          description: The name of the workspace.
        workspaceUri:
          type: string
          description: The relative URI for accessing the workspace.
      description: A DocuSign workspace is a collaboration area for sharing files
        and data.
      x-ds-definition-name: workspace
      x-ms-summary: A DocuSign workspace is a collaboration area for sharing files
        and data.
    workspaceFolderContents:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        folder:
          $ref: '#/components/schemas/workspaceItem'
        items:
          type: array
          description: A list of workspace items.
          items:
            $ref: '#/components/schemas/workspaceItem'
        parentFolders:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/workspaceItem'
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
        workspaceId:
          type: string
          description: The id of the workspace, always populated.
      description: This object's properties describe the contents of a workspace folder.
      x-ds-definition-name: workspaceFolderContents
      x-ms-summary: This object's properties describe the contents of a workspace
        folder.
    workspaceItem:
      type: object
      properties:
        callerAuthorization:
          $ref: '#/components/schemas/workspaceUserAuthorization'
        contentType:
          type: string
          description: If the item is a file, this property specifies the content
            type of the file.
        created:
          type: string
          description: The UTC DateTime when the workspace item was created.
        createdById:
          type: string
          description: The id of the user who created the workspace item.
        createdByInformation:
          $ref: '#/components/schemas/workspaceUser'
        extension:
          type: string
          description: The file extension of a file item.
        fileSize:
          type: string
          description: The size of the file in bytes.
        fileUri:
          type: string
          description: The URI for retrieving the file.
        id:
          type: string
          description: A unique ID for the Salesforce object.
        isPublic:
          type: string
          description: ' When **true**, the item is public.'
        lastModified:
          type: string
          description: |-
            The UTC date and time that the comment was last updated.

            **Note**: This can only be done by the creator.
        lastModifiedById:
          type: string
          description: The id of the user who last modified the item.
        lastModifiedByInformation:
          $ref: '#/components/schemas/workspaceUser'
        name:
          type: string
          description: The name of the file or folder.
        pageCount:
          type: string
          description: The number of pages in a file.
        parentFolderId:
          type: string
          description: The id of the parent folder, or the special value `root` for
            the root folder.
        parentFolderUri:
          type: string
          description: The URI of the parent folder.
        sha256:
          type: string
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that
            the caller computes across the entirety of the original content of a file.
            DocuSign compares this value to its own computation. If the two values
            are not equal, the original content and received content are not the same
            and the upload is refused.
        thumbHeight:
          type: string
          description: The height of the thumbnail image.
        thumbnail:
          $ref: '#/components/schemas/page'
        thumbWidth:
          type: string
          description: The width of the thumbnail image.
        type:
          type: string
          description: The type of the workspace item. Valid values are file, folder.
        uri:
          type: string
          description: A URI containing the user ID.
        userAuthorization:
          $ref: '#/components/schemas/workspaceUserAuthorization'
      description: This object represents an item in a workspace, which can be either
        a file or folder.
      x-ds-definition-name: workspaceItem
      x-ms-summary: This object represents an item in a workspace, which can be either
        a file or folder.
    workspaceItemList:
      type: object
      properties:
        items:
          type: array
          description: A list of workspace items.
          items:
            $ref: '#/components/schemas/workspaceItem'
      description: An array of objects that describe the items in a workspace.
      x-ds-definition-name: workspaceItemList
      x-ms-summary: An array of objects that describe the items in a workspace.
    workspaceList:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
        workspaces:
          type: array
          description: A list of workspaces.
          items:
            $ref: '#/components/schemas/workspace'
      description: This object contains a list of available workspaces.
      x-ds-definition-name: workspaceList
      x-ms-summary: This object contains a list of available workspaces.
    workspaceSettings:
      type: object
      properties:
        commentsAllowed:
          type: string
          description: When **true**, commenting on the documents in the workspace
            is allowed.
      description: This object provides information about the settings for the workspace.
      x-ds-definition-name: workspaceSettings
      x-ms-summary: This object provides information about the settings for the workspace.
    workspaceUser:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the workspace user.
        accountName:
          type: string
          description: The name of the account that the workspace user belongs to.
        activeSince:
          type: string
          description: The UTC DateTime when the user joined the workspace.
        created:
          type: string
          description: The UTC DateTime when the workspace user was created.
        createdById:
          type: string
          description: The id of the user who created this workspace user.
        email:
          type: string
          description: The workspace user's email address.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        invitationEmailBlurb:
          type: string
          description: The text of the workspace invitation email message sent to
            the user.
        invitationEmailSubject:
          type: string
          description: The subject line of the workspace invitation email message
            sent to the user.
        lastModified:
          type: string
          description: The UTC DateTime that the workspace user was last modified.
        lastModifiedById:
          type: string
          description: The id of the user who last modified the workspace user.
        status:
          type: string
          description: "Filters the results by user status.\nYou can specify a comma-separated\n\
            list of the following statuses:\n\n* ActivationRequired \n* ActivationSent\
            \ \n* Active\n* Closed \n* Disabled"
        type:
          type: string
          description: 'Type of the user. Valid values: type_owner, type_participant.'
        userId:
          type: string
          description: The id of the workspace user.
        userName:
          type: string
          description: The name of workspace user.
        workspaceId:
          type: string
          description: The id of the workspace.
        workspaceUserBaseUrl:
          type: string
          description: The URL for accessing the workspace user.
        workspaceUserId:
          type: string
          description: The id of the workspace user.
        workspaceUserUri:
          type: string
          description: The URI for accessing the workspace user.
      description: 'This object represents the workspace user. This property is only
        returned in response to user specific GET call. '
      x-ds-definition-name: workspaceUser
      x-ms-summary: 'This object represents the workspace user. This property is only
        returned in response to user specific GET call. '
    workspaceUserAuthorization:
      type: object
      properties:
        canDelete:
          type: string
          description: When set to **true**, the workspace user can delete items from
            the workspace.
        canMove:
          type: string
          description: When set to **true**, the workspace user can move the items
            in the workspace.
        canTransact:
          type: string
          description: When set to **true**, the workspace user can create transactions
            from the workspace.
        canView:
          type: string
          description: When set to **true**, the workspace user can view the items
            in the workspace.
        created:
          type: string
          description: The UTC DateTime when the workspace user authorization was
            created.
        createdById:
          type: string
          description: 'The id of the user who created the workspace user authorization. '
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        modified:
          type: string
          description: The UTC DateTime when the workspace user authorization was
            last modified.
        modifiedById:
          type: string
          description: The id of the user who last modified the workspace user authorization.
        workspaceUserId:
          type: string
          description: The id of the workspace user.
        workspaceUserInformation:
          $ref: '#/components/schemas/workspaceUser'
      description: Provides properties that describe user authorization to a workspace.
      x-ds-definition-name: workspaceUserAuthorization
      x-ms-summary: Provides properties that describe user authorization to a workspace.
    zip:
      type: object
      properties:
        anchorAllowWhiteSpaceInCharacters:
          type: string
          description: ""
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorCaseSensitiveMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignmentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorIgnoreIfNotPresentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorMatchWholeWordMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorString:
          type: string
          description: Specifies the string to find in the document and use as the
            basis for tab placement.
        anchorStringMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorTabProcessorVersion:
          type: string
          description: Reserved for DocuSign.
        anchorTabProcessorVersionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorUnitsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorXOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffsetMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        boldMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        concealValueOnDocumentMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentLabel:
          type: string
          description: For conditional fields this is the `tabLabel` of the parent
            tab that controls this tab's visibility.
        conditionalParentLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        conditionalParentValue:
          type: string
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
        conditionalParentValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        customTabId:
          type: string
          description: The DocuSign generated custom tab ID for the custom tab to
            be applied. This can only be used when adding new tabs for a recipient.
            When used, the new tab inherits all the custom tab properties.
        customTabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        disableAutoSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        documentId:
          type: string
          description: Specifies the document ID number that the tab is placed on.
            This must refer to an existing Document's ID attribute.
        documentIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontColorMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        fontSizeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formOrder:
          type: string
          description: An integer specifying the order in which the guided form HTML
            should render. The order is relative to the `formPageLabel`, the group
            by which to place the guided form HTML block.
        formOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageLabel:
          type: string
          description: A string specifying the group in which to place the guided
            form HTML. Each group displays as a separate guided forms page in the
            signing experience.
        formPageLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        formPageNumber:
          type: string
          description: An integer specifying the order in which to present the guided
            form pages.
        formPageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        height:
          type: string
          description: The height of the tab in pixels.
        heightMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        italicMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        localePolicy:
          $ref: '#/components/schemas/localePolicyTab'
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        lockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        maxLength:
          type: string
          description: An optional value that describes the maximum length of the
            property when the property is a string.
        maxLengthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        mergeField:
          $ref: '#/components/schemas/mergeField'
        mergeFieldXml:
          type: string
          description: ""
        name:
          type: string
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
        nameMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        originalValue:
          type: string
          description: 'The initial value of the tab when it was sent to the recipient. '
        originalValueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        pageNumber:
          type: string
          description: The page number on which the tab is located. For supplemental
            documents, this value must be `1`.
        pageNumberMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientId:
          type: string
          description: Unique for the recipient. It is used by the tab element to
            indicate which recipient is to sign the Document.
        recipientIdGuid:
          type: string
          description: The globally-unique identifier (GUID) for a specific recipient
            on a specific envelope. If the same recipient is associated with multiple
            envelopes, they will have a different GUID for each one. Read only.
        recipientIdGuidMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        recipientIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        requireAllMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        requireInitialOnSharedChangeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        senderRequired:
          type: string
          description: "When set to **true**, the sender must populate the tab before\
            \ an envelope can be sent using the template. \n\nThis value tab can only\
            \ be changed by modifying (PUT) the template. \n\nTabs with a `senderRequired`\
            \ value of true cannot be deleted from an envelope."
        senderRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        sharedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        smartContractInformation:
          $ref: '#/components/schemas/smartContractInformation'
        status:
          type: string
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
        statusMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabGroupLabels:
          type: array
          description: An array of tab group labels that uniquely identify tab groups.
            To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the
            `Tab.TabGroupLabels` array.
          items:
            type: string
        tabGroupLabelsMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabId:
          type: string
          description: The unique identifier for the tab.
        tabIdMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        tabLabelMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabOrder:
          type: string
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
        tabOrderMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabType:
          type: string
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
        tabTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateLocked:
          type: string
          description: 'When set to **true**, the sender cannot change any attributes
            of the recipient. Used only when working with template recipients. '
        templateLockedMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        templateRequired:
          type: string
          description: When set to **true**, the sender may not remove the recipient.
            Used only when working with template recipients.
        templateRequiredMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tooltip:
          type: string
          description: The text of a tooltip that appears when a user hovers over
            a form field or tab.
        toolTipMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        underlineMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        useDash4:
          type: string
          description: When set to **true**, ZIP+4 format is used.
        useDash4Metadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationMessageMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        validationPatternMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        value:
          type: string
          description: 'Specifies the value of the tab. '
        valueMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        width:
          type: string
          description: The width of the tab in pixels.
        widthMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        xPosition:
          type: string
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        xPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        yPosition:
          type: string
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
        yPositionMetadata:
          $ref: '#/components/schemas/propertyMetadata'
      description: |
        A tab that allows the recipient to enter a ZIP code. The ZIP
        code can be five digits or nine digits in the ZIP+4 format.
        The zip code can be typed with or without dashes. It uses
        the same parameters as a Text tab, with the validation
        message and pattern set for ZIP code information.
      x-ds-definition-name: zip
      x-ms-summary: |
        A tab that allows the recipient to enter a ZIP code. The ZIP
        code can be five digits or nine digits in the ZIP+4 format.
        The zip code can be typed with or without dashes. It uses
        the same parameters as a Text tab, with the validation
        message and pattern set for ZIP code information.
    AccountBrands:
      type: object
      properties:
        brands:
          type: array
          description: A list of brands.
          items:
            $ref: '#/components/schemas/brand'
        recipientBrandIdDefault:
          type: string
          description: The brand that envelope recipients see when a brand is not
            explicitly set.
        senderBrandIdDefault:
          type: string
          description: The brand that envelope senders see when a brand is not explicitly
            set.
      description: The AccountBrands resource enables you to use account-level brands
        to customize the styles and text that recipients see.
      x-ds-definition-name: brandsResponse
      x-ds-category: Accounts
      x-ds-order: "10"
      x-ms-summary: The AccountBrands resource enables you to use account-level brands
        to customize the styles and text that recipients see.
    AccountConsumerDisclosures:
      type: object
      properties:
        accountEsignId:
          type: string
          description: The GUID of the account associated with the consumer disclosure.
        allowCDWithdraw:
          type: string
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
        allowCDWithdrawMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        changeEmail:
          type: string
          description: |-
            If the customer needs to change their email address, this is the email address to which they should the change request.

            Maximum length: 100 characters.
        changeEmailOther:
          type: string
          description: "Other information about the requirements for the user to change\
            \ their email address.\n\nMaximum length: 255 characters.\n\nExample:\
            \ \n\n`We do not require any other information from you to change your\
            \ email address.`"
        companyName:
          type: string
          description: |-
            Specifies the company name used in the disclosure. The default value is the account name.

            However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**. Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true**.
        companyPhone:
          type: string
          description: The phone number of the company associated with the consumer
            disclosure, as a free-formatted string.
        copyCostPerPage:
          type: string
          description: "The cost per page if the customer requests paper copies.\n\
            \nExample: \n\n`0.0000`"
        copyFeeCollectionMethod:
          type: string
          description: "Specifies the fee collection method for cases in which the\
            \ customer requires paper copies of the document.\n\nMaximum length: 255\
            \ characters.\n\nExample: \n\n`We will bill you for any fees at that time,\
            \ if any.`"
        copyRequestEmail:
          type: string
          description: |-
            The email address to which the customer should send a request for copies of a document.

            Maximum length: 100 characters.
        custom:
          type: string
          description: When set to **true**, indicates that the consumer disclosure
            is a custom disclosure. The default is **false**.
        enableEsign:
          type: string
          description: When set to **true** (default), indicates that eSign is enabled.
        esignAgreement:
          type: string
          description: The final, assembled text of the Electronic Record and Signature
            Disclosure that includes the appropriate `companyName` and other specifics.
            It also includes the HTML tags used for formatting.
        esignText:
          type: string
          description: |-
            The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.

            **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
        languageCode:
          type: string
          description: "The code for the language version of the disclosure. The following\
            \ languages are supported:\n\n- Arabic (`ar`)\n- Bulgarian (`bg`)\n- Czech\
            \ (`cs`)\n- Chinese Simplified (`zh_CN`)\n- Chinese Traditional (`zh_TW`)\n\
            - Croatian (`hr`)\n- Danish (`da`)\n- Dutch (`nl`)\n- English US (`en`)\n\
            - English UK (`en_GB`)\n- Estonian (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n\
            - French (`fr`)\n- French Canadian (`fr_CA`)\n- German (`de`)\n- Greek\
            \ (`el`)\n- Hebrew (`he`)\n- Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa\
            \ Indonesian (`id`)\n- Italian (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n\
            - Latvian (`lv`)\n- Lithuanian (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian\
            \ (`no`)\n- Polish (`pl`)\n- Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n\
            - Romanian (`ro`)\n- Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n\
            - Slovenian (`sl`)\n- Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n\
            - Swedish (`sv`)\n- Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`)\
            \ \n- Vietnamese (`vi`)\n\nAdditionally, you can automatically detect\
            \ the browser language being used by the viewer and display the disclosure\
            \ in that language by setting the value to `browser`."
        mustAgreeToEsign:
          type: string
          description: When set to **true**, the  recipient must agree to the consumer
            disclosure. The value of this property is read only. It is calculated
            based on the account setting `consumerDisclosureFrequency` and the user's
            actions.
        pdfId:
          type: string
          description: "**Deprecated**. \n\nThe `pdfId` property in the consumer_disclosure\
            \ PUT request is deprecated. For security reasons going forward, any value\
            \ provided in the request packet must be ignored. "
        useBrand:
          type: string
          description: "When set to **true**, specifies that the company name in the\
            \ signing brand is used for the disclosure. Whenever an envelope is sent\
            \ from the account that uses a signing brand with a specified company\
            \ name, that value is used in email notifications and in the signing experience.\
            \  \n\nWhen set to **false** (default), or if the signing brand does not\
            \ specify a company name, the account name is used instead.\n\n**Note**:\
            \ This substitution only works if you use the default legal disclosure\
            \ or if you apply the `companyName` to the merge fields in a custom ERSD. "
        useConsumerDisclosureWithinAccount:
          type: string
          description: When set to **true**, specifies that recipients in the same
            account as the sender must agree to eSign an Electronic Record and Signature
            Disclosure Statement.
        useConsumerDisclosureWithinAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        withdrawAddressLine1:
          type: string
          description: "Contains the first address line of the postal address to which\
            \ a customer can send a consent withdrawal notification.\n\nMaximum length:\
            \ 100 characters. "
        withdrawAddressLine2:
          type: string
          description: "Contains the second address line of the postal address to\
            \ which a customer can send a consent withdrawal notification.\n\nMaximum\
            \ length: 100 characters. "
        withdrawByEmail:
          type: string
          description: When set to **true** (default), indicates that the customer
            can withdraw consent by email.
        withdrawByMail:
          type: string
          description: When set to **true**, indicates that the customer can withdraw
            consent by postal mail. The default is **false**.
        withdrawByPhone:
          type: string
          description: When set to **true**, indicates that the customer can withdraw
            consent by phone. The default is **false**.
        withdrawCity:
          type: string
          description: "Contains the city of the postal address to which a customer\
            \ can send a consent withdrawal notification.\n\nMaximum length: 50 characters. "
        withdrawConsequences:
          type: string
          description: |-
            Text indicating the consequences of withdrawing consent.

            Maximum length: 255 characters.
        withdrawEmail:
          type: string
          description: "Contains the email address to which a customer can send a\
            \ consent withdrawal notification.\n\nMaximum length: 100 characters. "
        withdrawOther:
          type: string
          description: |-
            Contains any other information needed to withdraw consent.

            Maximum length: 255 characters.

            Example:

            `We do not need any other information from you to withdraw consent.`
        withdrawPhone:
          type: string
          description: "Contains the phone number that a customer can call to register\
            \ consent withdrawal notification as a free-formatted string.\n\nMaximum\
            \ length: 20 characters. "
        withdrawPostalCode:
          type: string
          description: "Contains the postal code of the postal address to which a\
            \ customer can send a consent withdrawal notification.\n\nMaximum length:\
            \ 20 characters. "
        withdrawState:
          type: string
          description: |-
            Contains the state of the postal address to which a customer can send a consent withdrawal notification.

            Example: `PA`
      description: Details about account consumer disclosures.
      x-ds-definition-name: consumerDisclosure
      x-ds-category: Accounts
      x-ds-order: "20"
      x-ms-summary: Details about account consumer disclosures.
    AccountCustomFields:
      type: object
      properties:
        listCustomFields:
          type: array
          description: An array of list custom fields.
          items:
            $ref: '#/components/schemas/listCustomField'
        textCustomFields:
          type: array
          description: An array of text custom fields.
          items:
            $ref: '#/components/schemas/textCustomField'
      description: 'An `accountCustomField` is an envelope custom field that you set
        at the account level. Applying custom fields enables account administators
        to group and manage envelopes. '
      x-ds-definition-name: customFields
      x-ds-category: Accounts
      x-ds-order: "30"
      x-ms-summary: 'An `accountCustomField` is an envelope custom field that you
        set at the account level. Applying custom fields enables account administators
        to group and manage envelopes. '
    EnvelopeCustomFields:
      type: object
      properties:
        listCustomFields:
          type: array
          description: An array of list custom fields.
          items:
            $ref: '#/components/schemas/listCustomField'
        textCustomFields:
          type: array
          description: An array of text custom fields.
          items:
            $ref: '#/components/schemas/textCustomField'
      description: |-
        An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".

        When a user creates an envelope, the envelope custom fields display in the **Envelope Settings** section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
      x-ds-definition-name: customFields
      x-ds-category: Envelopes
      x-ds-order: "70"
      x-ms-summary: |-
        An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".

        When a user creates an envelope, the envelope custom fields display in the **Envelope Settings** section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
    EnvelopeDocumentFields:
      type: object
      properties:
        documentFields:
          type: array
          description: "The array of name/value custom data strings to be added to\
            \ a document. Custom document field information is returned in the status,\
            \ but otherwise is not used by DocuSign. The array contains the elements:\
            \ \n\n* name - A string that can be a maximum of 50 characters. \n* value\
            \ - A string that can be a maximum of 200 characters.\n\n*IMPORTANT*:\
            \ If you are using xml, the name/value pair is contained in a nameValue\
            \ element. \n"
          items:
            $ref: '#/components/schemas/nameValue'
      description: Envelope document fields
      x-ds-definition-name: documentFieldsInformation
      x-ds-category: Envelopes
      x-ds-order: "60"
      x-ms-summary: Envelope document fields
    EnvelopeLocks:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        lockDurationInSeconds:
          type: string
          description: |2

            The number of seconds until the lock expires when there is no activity on the envelope.

            The default value is 300 seconds. The maximum value is 1,800 seconds.

            The lock duration can be extended.
        lockedByApp:
          type: string
          description: The human-readable name of the application that is locking
            the envelope or template. This value displays to the user in error messages
            when lock conflicts occur.
        lockedByUser:
          $ref: '#/components/schemas/userInfo'
        lockedUntilDateTime:
          type: string
          description: The date and time that the lock expires.
        lockToken:
          type: string
          description: A unique identifier provided to the owner of the lock. You
            must use this token with subsequent calls to prove ownership of the lock.
        lockType:
          type: string
          description: The type of lock.  Currently `edit` is the only supported type.
        useScratchPad:
          type: string
          description: "When set to **true**, a scratchpad is used to edit information.\n\
            \ "
      description: This section provides information about envelope locks.
      x-ds-definition-name: lockInformation
      x-ds-category: Envelopes
      x-ds-order: "80"
      x-ms-summary: This section provides information about envelope locks.
    EnvelopeRecipients:
      type: object
      properties:
        agents:
          type: array
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/agent'
        carbonCopies:
          type: array
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/carbonCopy'
        certifiedDeliveries:
          type: array
          description: A complex type containing information on a recipient the must
            receive the completed documents for the envelope to be completed, but
            the recipient does not need to sign, initial, date, or add information
            to any of the documents.
          items:
            $ref: '#/components/schemas/certifiedDelivery'
        currentRoutingOrder:
          type: string
          description: The routing order of the current recipient. If this value equals
            a particular signer's routing order, it indicates that the envelope has
            been sent to that recipient, but he or she has not completed the required
            actions.
        editors:
          type: array
          description: A list of users who can edit the envelope.
          items:
            $ref: '#/components/schemas/editor'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        inPersonSigners:
          type: array
          description: Specifies a signer that is in the same physical location as
            a DocuSign user who will act as a Signing Host for the transaction. The
            recipient added is the Signing Host and new separate Signer Name field
            appears after Sign in person is selected.
          items:
            $ref: '#/components/schemas/inPersonSigner'
        intermediaries:
          type: array
          description: Identifies a recipient that can, but is not required to, add
            name and email information for recipients at the same or subsequent level
            in the routing order (until subsequent Agents, Editors or Intermediaries
            recipient types are added).
          items:
            $ref: '#/components/schemas/intermediary'
        notaries:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notaryRecipient'
        recipientCount:
          type: string
          description: The number of recipients in the envelope.
        seals:
          type: array
          description: A list of electronic seals to apply to documents.
          items:
            $ref: '#/components/schemas/sealSign'
        signers:
          type: array
          description: A list of signers on the envelope.
          items:
            $ref: '#/components/schemas/signer'
        witnesses:
          type: array
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: '#/components/schemas/witness'
      description: Envelope recipients
      x-ds-definition-name: recipients
      x-ds-category: Envelopes
      x-ds-order: "20"
      x-ms-summary: Envelope recipients
    EnvelopeRecipientTabs:
      type: object
      properties:
        approveTabs:
          type: array
          description: "A list of\n[Approve tabs][approve].\n\nAn Approve tab enables\n\
            the recipient to approve documents without\nplacing a signature or initials\
            \ on the document. If the\nrecipient clicks the tab during the signing\
            \ process, the\nrecipient is considered to have signed the document. No\n\
            information is shown on the document of the approval, but it\nis recorded\
            \ as a signature in the envelope history.\nThe value of an approve tab\
            \ can't be set.\n\n[approve]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/approve'
        checkboxTabs:
          type: array
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/checkbox'
        commentThreadTabs:
          type: array
          description: An array of tabs that represents a collection of comments in
            a comment thread. For example, if a recipient has questions about the
            content of a document, they can add a comment to the document and control
            who else can see the comment. This value can't be set.
          items:
            $ref: '#/components/schemas/commentThread'
        commissionCountyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionCounty'
        commissionExpirationTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionExpiration'
        commissionNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionNumber'
        commissionStateTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionState'
        companyTabs:
          type: array
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: '#/components/schemas/company'
        currencyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/currency'
        dateSignedTabs:
          type: array
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/dateSigned'
        dateTabs:
          type: array
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/date'
        declineTabs:
          type: array
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/decline'
        drawTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/draw'
        emailAddressTabs:
          type: array
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/emailAddress'
        emailTabs:
          type: array
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/email'
        envelopeIdTabs:
          type: array
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: '#/components/schemas/envelopeId'
        firstNameTabs:
          type: array
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: '#/components/schemas/firstName'
        formulaTabs:
          type: array
          description: "A list of [Formula tabs][formulaTab].\n\nThe value of a Formula\
            \ tab is calculated from the values of other number or date tabs in the\
            \ document. When the recipient completes the underlying fields, the Formula\
            \ tab calculates and displays the result. This value can be set.\n\nThe\
            \ `formula` property of the tab contains the references to the underlying\
            \ tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].\n\
            \nIf a Formula tab contains a `paymentDetails` property, the tab is considered\
            \ a payment item. To learn more about payments, see [Requesting Payments\
            \ Along with Signatures][paymentguide].\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n\
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
            [formulaTab]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/formulaTab'
        fullNameTabs:
          type: array
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/fullName'
        initialHereTabs:
          type: array
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/initialHere'
        lastNameTabs:
          type: array
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/lastName'
        listTabs:
          type: array
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/list'
        notarizeTabs:
          type: array
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/notarize'
        notarySealTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notarySeal'
        noteTabs:
          type: array
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/note'
        numberTabs:
          type: array
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/number'
        phoneNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/phoneNumber'
        polyLineOverlayTabs:
          type: array
          description: 'This type of tab enables the recipient to strike through document
            text. This value can''t be set
          items:
            $ref: '#/components/schemas/polyLineOverlay'
        prefillTabs:
          $ref: '#/components/schemas/prefillTabs'
        radioGroupTabs:
          type: array
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/radioGroup'
        signerAttachmentTabs:
          type: array
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signerAttachment'
        signHereTabs:
          type: array
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signHere'
        smartSectionTabs:
          type: array
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: '#/components/schemas/smartSection'
        ssnTabs:
          type: array
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/ssn'
        tabGroups:
          type: array
          description: An array of `tabGroup` items that contain information about
            tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel`
            to the `Tab.TabGroupLabels` array.
          items:
            $ref: '#/components/schemas/tabGroup'
        textTabs:
          type: array
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/text'
        titleTabs:
          type: array
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/title'
        viewTabs:
          type: array
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/view'
        zipTabs:
          type: array
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/zip'
      description: |
        All of the tabs associated with a recipient. Each property is a list of a type of tab.
      x-ds-definition-name: tabs
      x-ds-category: Envelopes
      x-ds-order: "50"
      x-ms-summary: |
        All of the tabs associated with a recipient. Each property is a list of a type of tab.
    EnvelopeDocumentTabs:
      type: object
      properties:
        approveTabs:
          type: array
          description: "A list of\n[Approve tabs][approve].\n\nAn Approve tab enables\n\
            the recipient to approve documents without\nplacing a signature or initials\
            \ on the document. If the\nrecipient clicks the tab during the signing\
            \ process, the\nrecipient is considered to have signed the document. No\n\
            information is shown on the document of the approval, but it\nis recorded\
            \ as a signature in the envelope history.\nThe value of an approve tab\
            \ can't be set.\n\n[approve]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/approve'
        checkboxTabs:
          type: array
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/checkbox'
        commentThreadTabs:
          type: array
          description: An array of tabs that represents a collection of comments in
            a comment thread. For example, if a recipient has questions about the
            content of a document, they can add a comment to the document and control
            who else can see the comment. This value can't be set.
          items:
            $ref: '#/components/schemas/commentThread'
        commissionCountyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionCounty'
        commissionExpirationTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionExpiration'
        commissionNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionNumber'
        commissionStateTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionState'
        companyTabs:
          type: array
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: '#/components/schemas/company'
        currencyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/currency'
        dateSignedTabs:
          type: array
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/dateSigned'
        dateTabs:
          type: array
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/date'
        declineTabs:
          type: array
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/decline'
        drawTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/draw'
        emailAddressTabs:
          type: array
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/emailAddress'
        emailTabs:
          type: array
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/email'
        envelopeIdTabs:
          type: array
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: '#/components/schemas/envelopeId'
        firstNameTabs:
          type: array
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: '#/components/schemas/firstName'
        formulaTabs:
          type: array
          description: "A list of [Formula tabs][formulaTab].\n\nThe value of a Formula\
            \ tab is calculated from the values of other number or date tabs in the\
            \ document. When the recipient completes the underlying fields, the Formula\
            \ tab calculates and displays the result. This value can be set.\n\nThe\
            \ `formula` property of the tab contains the references to the underlying\
            \ tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].\n\
            \nIf a Formula tab contains a `paymentDetails` property, the tab is considered\
            \ a payment item. To learn more about payments, see [Requesting Payments\
            \ Along with Signatures][paymentguide].\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n\
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
            [formulaTab]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/formulaTab'
        fullNameTabs:
          type: array
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/fullName'
        initialHereTabs:
          type: array
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/initialHere'
        lastNameTabs:
          type: array
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/lastName'
        listTabs:
          type: array
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/list'
        notarizeTabs:
          type: array
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/notarize'
        notarySealTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notarySeal'
        noteTabs:
          type: array
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/note'
        numberTabs:
          type: array
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/number'
        phoneNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/phoneNumber'
        polyLineOverlayTabs:
          type: array
          description: 'This type of tab enables the recipient to strike through document
            text. This value can''t be set
          items:
            $ref: '#/components/schemas/polyLineOverlay'
        prefillTabs:
          $ref: '#/components/schemas/prefillTabs'
        radioGroupTabs:
          type: array
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/radioGroup'
        signerAttachmentTabs:
          type: array
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signerAttachment'
        signHereTabs:
          type: array
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signHere'
        smartSectionTabs:
          type: array
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: '#/components/schemas/smartSection'
        ssnTabs:
          type: array
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/ssn'
        tabGroups:
          type: array
          description: An array of `tabGroup` items that contain information about
            tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel`
            to the `Tab.TabGroupLabels` array.
          items:
            $ref: '#/components/schemas/tabGroup'
        textTabs:
          type: array
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/text'
        titleTabs:
          type: array
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/title'
        viewTabs:
          type: array
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/view'
        zipTabs:
          type: array
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/zip'
      description: 'Envelope Document Tabs resource '
      x-ds-definition-name: tabs
      x-ds-category: Envelopes
      x-ds-order: "50"
      x-ms-summary: 'Envelope Document Tabs resource '
    TemplateDocumentTabs:
      type: object
      properties:
        approveTabs:
          type: array
          description: "A list of\n[Approve tabs][approve].\n\nAn Approve tab enables\n\
            the recipient to approve documents without\nplacing a signature or initials\
            \ on the document. If the\nrecipient clicks the tab during the signing\
            \ process, the\nrecipient is considered to have signed the document. No\n\
            information is shown on the document of the approval, but it\nis recorded\
            \ as a signature in the envelope history.\nThe value of an approve tab\
            \ can't be set.\n\n[approve]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/approve'
        checkboxTabs:
          type: array
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/checkbox'
        commentThreadTabs:
          type: array
          description: An array of tabs that represents a collection of comments in
            a comment thread. For example, if a recipient has questions about the
            content of a document, they can add a comment to the document and control
            who else can see the comment. This value can't be set.
          items:
            $ref: '#/components/schemas/commentThread'
        commissionCountyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionCounty'
        commissionExpirationTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionExpiration'
        commissionNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionNumber'
        commissionStateTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionState'
        companyTabs:
          type: array
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: '#/components/schemas/company'
        currencyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/currency'
        dateSignedTabs:
          type: array
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/dateSigned'
        dateTabs:
          type: array
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/date'
        declineTabs:
          type: array
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/decline'
        drawTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/draw'
        emailAddressTabs:
          type: array
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/emailAddress'
        emailTabs:
          type: array
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/email'
        envelopeIdTabs:
          type: array
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: '#/components/schemas/envelopeId'
        firstNameTabs:
          type: array
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: '#/components/schemas/firstName'
        formulaTabs:
          type: array
          description: "A list of [Formula tabs][formulaTab].\n\nThe value of a Formula\
            \ tab is calculated from the values of other number or date tabs in the\
            \ document. When the recipient completes the underlying fields, the Formula\
            \ tab calculates and displays the result. This value can be set.\n\nThe\
            \ `formula` property of the tab contains the references to the underlying\
            \ tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].\n\
            \nIf a Formula tab contains a `paymentDetails` property, the tab is considered\
            \ a payment item. To learn more about payments, see [Requesting Payments\
            \ Along with Signatures][paymentguide].\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n\
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
            [formulaTab]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/formulaTab'
        fullNameTabs:
          type: array
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/fullName'
        initialHereTabs:
          type: array
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/initialHere'
        lastNameTabs:
          type: array
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/lastName'
        listTabs:
          type: array
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/list'
        notarizeTabs:
          type: array
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/notarize'
        notarySealTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notarySeal'
        noteTabs:
          type: array
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/note'
        numberTabs:
          type: array
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/number'
        phoneNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/phoneNumber'
        polyLineOverlayTabs:
          type: array
          description: 'This type of tab enables the recipient to strike through document
            text. This value can''t be set
          items:
            $ref: '#/components/schemas/polyLineOverlay'
        prefillTabs:
          $ref: '#/components/schemas/prefillTabs'
        radioGroupTabs:
          type: array
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/radioGroup'
        signerAttachmentTabs:
          type: array
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signerAttachment'
        signHereTabs:
          type: array
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signHere'
        smartSectionTabs:
          type: array
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: '#/components/schemas/smartSection'
        ssnTabs:
          type: array
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/ssn'
        tabGroups:
          type: array
          description: An array of `tabGroup` items that contain information about
            tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel`
            to the `Tab.TabGroupLabels` array.
          items:
            $ref: '#/components/schemas/tabGroup'
        textTabs:
          type: array
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/text'
        titleTabs:
          type: array
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/title'
        viewTabs:
          type: array
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/view'
        zipTabs:
          type: array
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/zip'
      description: ""
      x-ds-definition-name: tabs
      x-ds-category: Templates
      x-ds-order: "50"
      x-ms-summary: ""
    EnvelopeViews:
      type: object
      properties:
        url:
          type: string
          description: The view URL to be navigated to.
      description: Embedding Envelope views
      x-ds-definition-name: viewUrl
      x-ds-category: Envelopes
      x-ds-order: "1"
      x-ms-summary: Embedding Envelope views
    AccountSealProviders:
      type: object
      properties:
        seals:
          type: array
          description: A list of electronic seals to apply to documents.
          items:
            $ref: '#/components/schemas/sealIdentifier'
      description: ""
      x-ds-definition-name: accountSeals
      x-ds-category: Accounts
      x-ds-order: "10"
      x-ms-summary: ""
    Accounts:
      type: object
      properties:
        accountIdGuid:
          type: string
          description: The GUID associated with the account ID.
        accountName:
          type: string
          description: The name on the account.
        accountSettings:
          $ref: '#/components/schemas/accountSettingsInformation'
        allowTransactionRooms:
          type: string
          description: When set to **true**, the transaction rooms feature exposed
            through the Workspaces API is enabled.
        billingPeriodDaysRemaining:
          type: string
          description: Number of days remaining in the current billing period.
        billingPeriodEndDate:
          type: string
          description: The billing period end date in UTC timedate format.
        billingPeriodEnvelopesAllowed:
          type: string
          description: The number of envelopes that can be sent in the current billing
            period (can be unlimited).
        billingPeriodEnvelopesSent:
          type: string
          description: The number of envelopes that have been sent in the current
            billing period.
        billingPeriodStartDate:
          type: string
          description: The billing period start date in UTC timedate format.
        billingProfile:
          type: string
          description: "The type of billing method on the account. Valid values are:\
            \ \n\n- `direct`\n- `web`"
        canUpgrade:
          type: string
          description: When set to **true**, specifies that you can upgrade the account
            through the API. For GET methods, you must set the `include_metadata`
            query parameter to **true** for this property to appear in the response.
        connectPermission:
          type: string
          description: ""
        createdDate:
          type: string
          description: The creation date of the account in UTC timedate format.
        currencyCode:
          type: string
          description: The currency code for the account, based on the [ISO 4217 currency
            code](https://www.iso.org/iso-4217-currency-codes.html).
        currentPlanId:
          type: string
          description: ID of the plan used to create this account.
        displayApplianceStartUrl:
          type: string
          description: ""
        displayApplianceUrl:
          type: string
          description: ""
        distributorCode:
          type: string
          description: The code that identifies the billing plan groups and plans
            for the new account.
        docuSignLandingUrl:
          type: string
          description: URL of the landing page used to create the account.
        dssValues:
          type: object
          additionalProperties:
            type: string
          description: ""
        envelopeSendingBlocked:
          type: string
          description: When **true**, the ability to send envelopes is blocked. When
            **false**, envelopes can be sent.
        envelopeUnitPrice:
          type: string
          description: The price of sending an envelope, represented in the account's
            local currency.
        externalAccountId:
          type: string
          description: The Account ID displayed on the user's Account page.
        forgottenPasswordQuestionsCount:
          type: string
          description: ' A complex element that contains up to four Question/Answer
            pairs for forgotten password information for a user.'
        isDowngrade:
          type: string
          description: When **true**, the account has been downgraded from a premium
            account type. Otherwise **false**.
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        planClassification:
          type: string
          description: "Identifies the type of plan. Examples include:\n\n- `business`\n\
            - `corporate`\n- `enterprise` \n- `free`"
        planEndDate:
          type: string
          description: The date that the current plan will end.
        planName:
          type: string
          description: "The name of the billing plan used for the account.\n\nExamples:\
            \ \n\n- `Personal - Annual`\n- `Unlimited Envelope Subscription - Annual\
            \ Billing`"
        planStartDate:
          type: string
          description: The date that the Account started using the current plan.
        recipientDomains:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/recipientDomain'
        seatsAllowed:
          type: string
          description: The number of active users the account can have at one time.
        seatsInUse:
          type: string
          description: The number of users currently active on the account.
        status21CFRPart11:
          type: string
          description: The status of the account content per (Title 21 CFR Part 11)[https://www.fda.gov/regulatory-information/search-fda-guidance-documents/part-11-electronic-records-electronic-signatures-scope-and-application].
            This regulation defines the criteria under which electronic records and
            electronic signatures are considered trustworthy.
        suspensionDate:
          type: string
          description: The date on which the account was suspended.
        suspensionStatus:
          type: string
          description: Indicates whether the account is currently suspended.
        useDisplayAppliance:
          type: boolean
          description: ""
      description: Account management
      x-ds-definition-name: accountInformation
      x-ds-category: Accounts
      x-ds-order: "1"
      x-ms-summary: Account management
    AccountSignatureProviders:
      type: object
      properties:
        signatureProviders:
          type: array
          description: Names of electronic or digital signature providers that can
            be used.
          items:
            $ref: '#/components/schemas/accountSignatureProvider'
      description: |
        This resource provides information on the Standards Based Signature providers that have been provisioned for an account.
      x-ds-definition-name: accountSignatureProviders
      x-ds-category: Accounts
      x-ds-order: "30"
      x-ms-summary: |
        This resource provides information on the Standards Based Signature providers that have been provisioned for an account.
    BillingPlans:
      type: object
      properties:
        billingAddress:
          $ref: '#/components/schemas/accountAddress'
        billingAddressIsCreditCardAddress:
          type: string
          description: When set to **true**, the credit card address information is
            the same as that returned as the billing address. If false, then the billing
            address is considered a billing contact address, and the credit card address
            can be different.
        billingPlan:
          $ref: '#/components/schemas/accountBillingPlan'
        creditCardInformation:
          $ref: '#/components/schemas/creditCardInformation'
        directDebitProcessorInformation:
          $ref: '#/components/schemas/directDebitProcessorInformation'
        downgradePlanInformation:
          $ref: '#/components/schemas/downgradePlanUpdateResponse'
        paymentMethod:
          type: string
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
        paymentProcessorInformation:
          $ref: '#/components/schemas/paymentProcessorInformation'
        referralInformation:
          $ref: '#/components/schemas/referralInformation'
        successorPlans:
          type: array
          description: A list of billing plans that the current billing plan can be
            rolled into.
          items:
            $ref: '#/components/schemas/billingPlan'
      description: Billing plans
      x-ds-definition-name: accountBillingPlanResponse
      x-ds-category: Billing
      x-ds-order: "10"
      x-ms-summary: Billing plans
    Invoices:
      type: object
      properties:
        amount:
          type: string
          description: 'Reserved: TBD'
        balance:
          type: string
          description: 'Reserved: TBD'
        dueDate:
          type: string
          description: 'Reserved: TBD'
        invoiceId:
          type: string
          description: 'Reserved: TBD'
        invoiceItems:
          type: array
          description: 'Reserved: TBD'
          items:
            $ref: '#/components/schemas/billingInvoiceItem'
        invoiceNumber:
          type: string
          description: 'Reserved: TBD'
        invoiceUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            invoice information.
        nonTaxableAmount:
          type: string
          description: ""
        pdfAvailable:
          type: string
          description: ""
        taxableAmount:
          type: string
          description: ""
      description: Invoices
      x-ds-definition-name: billingInvoice
      x-ds-category: Billing
      x-ds-order: "20"
      x-ms-summary: Invoices
    Payments:
      type: object
      properties:
        amount:
          type: string
          description: 'Reserved: TBD'
        description:
          type: string
          description: |
            A sender-defined description of the line item.
        paymentDate:
          type: string
          description: ""
        paymentId:
          type: string
          description: ""
        paymentNumber:
          type: string
          description: "When set to **true**, a PDF version of the invoice is available.\
            \ \n\nTo get the PDF, make the call again and change \"Accept:\" in the\
            \ header to \"Accept: application/pdf\"."
      description: Payments
      x-ds-definition-name: billingPaymentItem
      x-ds-category: Billing
      x-ds-order: "30"
      x-ms-summary: Payments
    CloudStorage:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        errorDetails:
          $ref: '#/components/schemas/externalDocServiceErrorDetails'
        id:
          type: string
          description: A unique ID for the Salesforce object.
        items:
          type: array
          description: A list of objects that contain information about a file or
            folder in cloud storage.
          items:
            $ref: '#/components/schemas/externalFile'
        name:
          type: string
          description: The name of the cloud storage item.
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: Cloud storage
      x-ds-definition-name: externalFolder
      x-ds-category: CloudStorage
      x-ds-order: "10"
      x-ms-summary: Cloud storage
    CloudStorageProviders:
      type: object
      properties:
        storageProviders:
          type: array
          description: An Array containing the storage providers associated with the
            user.
          items:
            $ref: '#/components/schemas/cloudStorageProvider'
      description: The CloudStorageProviders resource provides methods that allow
        you to manage the cloud storage providers associate with an account.
      x-ds-definition-name: cloudStorageProviders
      x-ds-category: CloudStorage
      x-ds-order: "20"
      x-ms-summary: The CloudStorageProviders resource provides methods that allow
        you to manage the cloud storage providers associate with an account.
    ConnectConfigurations:
      type: object
      properties:
        allowEnvelopePublish:
          type: string
          description: When set to **true**, data is sent to the urlToPublishTo web
            address. This option can be set to false to stop sending data while maintaining
            the Connect configuration information.
        allowSalesforcePublish:
          type: string
          description: When set to **true**  (default), DocuSign sends data to the
            designated Salesforce account through Connect.
        allUsers:
          type: string
          description: When set to **true**, the tracked envelope and recipient events
            for all users, including users that are added a later time, are sent through
            Connect.
        configurationType:
          type: string
          description: If you are using merge fields, this property specifies the
            type of the merge field. The only supported value is `salesforce`.
        connectId:
          type: string
          description: The DocuSign-generated ID for the Connect configuration. This
            property is read only.
        enableLog:
          type: string
          description: "When set to **true**, Connect logging is turned on. We recommend\
            \ that you enable this functionality, which helps you troubleshoot any\
            \ issues. \n\nYou can have a maximum of 100 active logs in your account.\
            \ You can view the entries in active logs in the **Logs** tab in the console."
        envelopeEvents:
          type: array
          description: "An array of strings that lists envelope-related events to\
            \ track through Connect. The possible event values are: \n\n- `sent`:\
            \ An envelope has the status `sent` in the following scenarios:\n   -\
            \ When the envelope has been sent to recipients.\n   - When using remote\
            \ signing, this event is triggered when the email notification with a\
            \ link to the documents is sent to at least one recipient.\n   - When\
            \ using embedded signing, this event is triggered when the link is ready\
            \ for the recipient to sign the envelope.\n\n   An envelope remains in\
            \ this state until all recipients have viewed or taken action on the envelope.\n\
            \n- `delivered`: This status is triggered when all recipients have opened\
            \ the envelope, selected the **Continue** button in the interface, and\
            \ viewed the documents.\n- `completed`: This status is triggered when\
            \ all recipients have completed their assigned actions on an envelope.\n\
            - `declined`: This status is triggered when a recipient has declined to\
            \ sign the envelope.\n- `voided`: The voided status indicates that the\
            \ sender has voided the envelope.\n\n**Note**: In previous versions of\
            \ the API, this value was a single comma-separated string.\n"
          items:
            type: string
        eventData:
          $ref: '#/components/schemas/connectEventData'
        externalFolderId:
          type: string
          description: The id of an external folder.
        externalFolderLabel:
          type: string
          description: The label for an external folder.
        includeCertificateOfCompletion:
          type: string
          description: 'When set to **true**, the Connect Service includes the Certificate
            of Completion with completed envelopes. '
        includeCertSoapHeader:
          type: string
          description: When set to **true**, a certificate for a SOAP header is included
            in messages sent through Connect.
        includeDocumentFields:
          type: string
          description: 'When set to **true**, the Document Fields associated with
            the envelope''s documents are included in the notification messages. Document
            Fields are optional custom name-value pairs added to documents using the
            API. '
        includeDocuments:
          type: string
          description: "When set to **true**, Connect attaches the envelope documents\
            \ to the XML payloads of your event notification messages.\n\n**Note**:\
            \ Consider resources and scaling when adding documents to your event payloads.\
            \ Documents attached to these messages are sent in base64 XML element\
            \ nodes, which are larger than binary document data. This can significantly\
            \ increase your payload size, opening up windows for failure. If you include\
            \ documents, you must build your application to scale in these situations. "
        includeEnvelopeVoidReason:
          type: string
          description: When set to **true**, Connect will include the voidedReason
            for voided envelopes.
        includeHMAC:
          type: string
          description: |-
            When set to **true**, a Hash-based Message Authentication Code (HMAC) signature is included in messages sent through Connect.
            For more information, see [Using HMAC Security with DocuSign Connect](https://developers.docusign.com/esign-rest-api/guides/connect-hmac).
        includeSenderAccountasCustomField:
          type: string
          description: When set to **true**, Connect will include the sender account
            as Custom Field in the data.
        includeTimeZoneInformation:
          type: string
          description: When set to **true**, Connect will include the envelope time
            zone information.
        name:
          type: string
          description: The name of the Connect configuration. The name helps identify
            the configuration in the list.
        password:
          type: string
          description: The user's encrypted password hash.
        recipientEvents:
          type: array
          description: |
            An array of strings that lists of recipient-related events that trigger a notification
            to your webhook Connect listener. The possible event values are:

            - `sent`: If a recipient type is set to receive an email notification to take action on an envelope, the recipient status is set to `sent` upon delivery of the email.
            - `delivered`: The recipient has viewed the documents in the envelope. This recipient status does not indicate email delivery of the documents in the envelope.
            - `completed`: The recipient has completed their assigned actions on an envelope.
            - `declined`: The recipient has declined to sign a document in the envelope.
            - `authenticationfailed`: At least one signer has failed the authentication check on the document. If this occurs, you have two options:
               - Send a reminder to the recipients, which provides the signer with another chance to access and pass the authentication.
               - Correct the document and modify the authentication setting.
            - `autoresponded`: The recipient's email system sent back an automatic response. This status is only used when **Send-on-behalf-of** is turned off for the account.

            **Note**: In previous versions of the API, this value was a single comma-separated string.
          items:
            type: string
        requireMutualTls:
          type: string
          description: When set to **true**, [Mutual TLS](https://developers.docusign.com/esign-rest-api/guides/mutual-tls-intro)
            authentication is enabled.
        requiresAcknowledgement:
          type: string
          description: |+
            When set to **true**, event delivery acknowledgements are enabled for your Connect configuration.

            DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue. It is imperative that you acknowledge successful receipt of Connect events as they occur by sending a 200 event back.

            #### When set to **true** and Send Individual Messages (SIM) mode is activated

            If the HTTP status response to a notification message is not in the range of 200-299,
            then the message delivery failed, and the configuration is marked as down.

            The message will be queued and retried once per day.
            While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`.
            When a message succeeds, all queued messages for the configuration will be tried immediately, in order.

            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **true** and SIM mode is not activated

            If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.

            The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).  Subsequent notifications will be tried when they occur.
            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **false**

            When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message, and you must handle the failure manually.

        salesforceApiVersion:
          type: string
          description: The version of the Salesforce API that you are using.
        salesforceAuthcode:
          type: string
          description: ""
        salesforceCallBackUrl:
          type: string
          description: ""
        salesforceDocumentsAsContentFiles:
          type: string
          description: When set to **true**, DocuSign can use documents in your Salesforce
            account for sending and signing.
        senderOverride:
          type: string
          description: ""
        senderSelectableItems:
          type: array
          description: 'This property sets the items that are available for selection
            when adding or editing Connect objects. '
          items:
            type: string
        sfObjects:
          type: array
          description: An array of Salesforce objects.
          items:
            $ref: '#/components/schemas/connectSalesforceObject'
        signMessageWithX509Certificate:
          type: string
          description: 'When set to **true**, Mutual TLS will be enabled for notifications.
            Mutual TLS must be initiated by the listener (the customer''s web server)
            during the TLS handshake protocol. '
        soapNamespace:
          type: string
          description: |-
            The namespace of the SOAP interface.

            **Note**: If `useSoapInterface` is set to **true**, you must set this value.
        urlToPublishTo:
          type: string
          description: The endpoint to which Connect should send webhook notification
            messages via an HTTPS POST request. The URL must start with `https`. The
            customer's web server must use an SSL/TLS certificate whose CA is in the
            Microsoft list of trusted CAs. Self-signed certificates are not acceptable,
            but you can use free certificates from Let's Encrypt.
        userIds:
          type: array
          description: |-
            A comma-separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user, the a notification message is sent to your Connect listener.

            **Note**: If allUsers is set to `false` then you must provide a list of user ids.
          items:
            type: string
        userName:
          type: string
          description: The name of the user.
        useSoapInterface:
          type: string
          description: When set to **true**, indicates that the `urlToPublishTo` property
            contains a SOAP endpoint.
      description: Contains information about a DocuSign Connect configuration.
      x-ds-definition-name: connectCustomConfiguration
      x-ds-category: Connect
      x-ds-order: "10"
      x-ms-summary: Contains information about a DocuSign Connect configuration.
    ConnectEvents:
      type: object
      properties:
        failures:
          type: array
          description: A list of Connect failure logs.
          items:
            $ref: '#/components/schemas/connectLog'
        logs:
          type: array
          description: A list of Connect general logs.
          items:
            $ref: '#/components/schemas/connectLog'
        totalRecords:
          type: string
          description: The count of records in the log list.
        type:
          type: string
          description: ""
      description: 'Connect event logging information. This object contains sections
        for regular Connect logs and for Connect failures. '
      x-ds-definition-name: connectLogs
      x-ds-category: Connect
      x-ds-order: "20"
      x-ms-summary: 'Connect event logging information. This object contains sections
        for regular Connect logs and for Connect failures. '
    CustomTabs:
      type: object
      properties:
        anchor:
          type: string
          description: An optional string that is used to auto-match tabs to strings
            located in the documents of an envelope.
        anchorCaseSensitive:
          type: string
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorHorizontalAlignment:
          type: string
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorIgnoreIfNotPresent:
          type: string
          description: When set to **true**, this tab is ignored if the `anchorString`
            is not found in the document.
        anchorMatchWholeWord:
          type: string
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
        anchorUnits:
          type: string
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
        anchorXOffset:
          type: string
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
        anchorYOffset:
          type: string
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
        bold:
          type: string
          description: When set to **true**, the information in the tab is bold.
        collaborative:
          type: string
          description: ""
        concealValueOnDocument:
          type: string
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        createdByDisplayName:
          type: string
          description: The user name of the DocuSign user who created this object.
        createdByUserId:
          type: string
          description: The userId of the DocuSign user who created this object.
        customTabId:
          type: string
          description: The DocuSign-generated custom tab ID for the custom tab to
            be applied. This property can only be used when adding new tabs for a
            recipient. When used, the new tab inherits all of the custom tab properties.
        disableAutoSize:
          type: string
          description: When set to **true**, disables the auto sizing of single line
            text boxes in the signing screen when the signer enters data. If disabled
            users will only be able enter as much data as the text box can hold. By
            default this is false. This property only affects single line text boxes.
        editable:
          type: string
          description: When set to **true**, the custom tab is editable. Otherwise
            the custom tab cannot be modified.
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        height:
          type: string
          description: The height of the tab in pixels.
        includedInEmail:
          type: string
          description: When set to **true**, the tab is included in e-mails related
            to the envelope on which it exists. This applies to only specific tabs.
        initialValue:
          type: string
          description: The original value of the tab.
        italic:
          type: string
          description: When set to **true**, the information in the tab is italic.
        items:
          type: array
          description: If the tab is a list, this represents the values that are possible
            for the tab.
          items:
            type: string
        lastModified:
          type: string
          description: The UTC DateTime this object was last modified. This is in
            ISO8601 format.
        lastModifiedByDisplayName:
          type: string
          description: The User Name of the DocuSign user who last modified this object.
        lastModifiedByUserId:
          type: string
          description: The userId of the DocuSign user who last modified this object.
        locked:
          type: string
          description: When set to **true**, the signer cannot change the data of
            the custom tab.
        maximumLength:
          type: string
          description: The maximum number of entry characters supported by the custom
            tab.
        mergeField:
          $ref: '#/components/schemas/mergeField'
        name:
          type: string
          description: The name of the custom tab.
        paymentItemCode:
          type: string
          description: |-
            If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.

            Example: `SHAK1`

            Maximum Length: 100 characters.
        paymentItemDescription:
          type: string
          description: |-
            If the custom tab is for a payment request, this is the description of the item associated with the charge.

            Example: `The Danish play by Shakespeare`

            Maximum Length: 100 characters.
        paymentItemName:
          type: string
          description: |-
            If the custom tab is for a payment request, this is the name of the item associated with the charge.

            Maximum Length: 100 characters.

            Example: `Hamlet`
        requireAll:
          type: string
          description: 'When set to **true** and shared is true, information must
            be entered in this field to complete the envelope. '
        required:
          type: string
          description: When set to **true**, the signer is required to fill out this
            tab.
        requireInitialOnSharedChange:
          type: string
          description: Optional element for field markup. When set to **true**, the
            signer is required to initial when they modify a shared field.
        scaleValue:
          type: string
          description: Sets the size of the tab. This field accepts values from `0.5`
            to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
        selected:
          type: string
          description: When set to **true**, the radio button is selected.
        shared:
          type: string
          description: When set to **true**, this custom tab is shared.
        stampType:
          type: string
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
        stampTypeMetadata:
          $ref: '#/components/schemas/propertyMetadata'
        tabLabel:
          type: string
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
        type:
          type: string
          description: "The type of this tab. Values are:\n\n- Approve\n- CheckBox\n\
            - Company\n- Date\n- DateSigned,\tDecline\n- Email,\tEmailAddress\n- EnvelopeId\n\
            - FirstName\n- Formula\n- FullName,\tInitialHere\n- InitialHereOptional\n\
            - LastName\n- List\n- Note\n- Number\n- Radio\n- SignerAttachment\n- SignHere\n\
            - SignHereOptional\n- Ssn\n- Text\n- Title\n- Zip5\n- Zip5Dash4\n"
        underline:
          type: string
          description: When set to **true**, the information in the tab is underlined.
        validationMessage:
          type: string
          description: The message displayed if the custom tab fails input validation
            (either custom of embedded).
        validationPattern:
          type: string
          description: A regular expression used to validate input for the tab.
        width:
          type: string
          description: The width of the tab in pixels.
      description: Custom tabs
      x-ds-definition-name: tabMetadata
      x-ds-category: CustomTabs
      x-ds-order: "10"
      x-ms-summary: Custom tabs
    RequestLogs:
      type: object
      properties:
        apiRequestLogging:
          type: string
          description: ' When set to **true**, enables API request logging for the
            user. '
        apiRequestLogMaxEntries:
          type: string
          description: Specifies the maximum number of API requests to log.
        apiRequestLogRemainingEntries:
          type: string
          description: Indicates the remaining number of API requests that can be
            logged.
      description: Request logs
      x-ds-definition-name: diagnosticsSettingsInformation
      x-ds-category: Diagnostics
      x-ds-order: "10"
      x-ms-summary: Request logs
    Resources:
      type: object
      properties:
        resources:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/nameValue'
      description: API resource information
      x-ds-definition-name: resourceInformation
      x-ds-category: Diagnostics
      x-ds-order: "20"
      x-ms-summary: API resource information
    Services:
      type: object
      properties:
        buildBranch:
          type: string
          description: 'Reserved: TBD'
        buildBranchDeployedDateTime:
          type: string
          description: 'Reserved: TBD'
        buildSHA:
          type: string
          description: 'Reserved: TBD'
        buildVersion:
          type: string
          description: 'Reserved: TBD'
        linkedSites:
          type: array
          description: ""
          items:
            type: string
        serviceVersions:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/serviceVersion'
      description: API service information
      x-ds-definition-name: serviceInformation
      x-ds-category: Diagnostics
      x-ds-order: "30"
      x-ms-summary: API service information
    EnvelopeConsumerDisclosures:
      type: object
      properties:
        accountEsignId:
          type: string
          description: The GUID of the account associated with the consumer disclosure.
        allowCDWithdraw:
          type: string
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
        allowCDWithdrawMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        changeEmail:
          type: string
          description: If the customer needs to change their email address, this is
            the email address to which they should the change request.
        changeEmailOther:
          type: string
          description: "Other information about the requirements for the user to change\
            \ their email address.\n\nExample: \n\n`We do not require any other information\
            \ from you to change your email address.`"
        companyName:
          type: string
          description: |
            Specifies the company name used in the disclosure. The default value is the account name.

            However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**. Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true**.
        companyPhone:
          type: string
          description: The phone number of the company associated with the consumer
            disclosure, as a free-formatted string.
        copyCostPerPage:
          type: string
          description: "The cost per page if the customer requests paper copies.\n\
            \nExample: \n\n`0.0000`"
        copyFeeCollectionMethod:
          type: string
          description: "Specifies the fee collection method for cases in which the\
            \ customer requires paper copies of the document.\n\nMaximum length: 255\
            \ characters.\n\nExample: \n\n`We will bill you for any fees at that time,\
            \ if any.`"
        copyRequestEmail:
          type: string
          description: |-
            The email address to which the customer should send a request for copies of a document.

            Maximum length: 100 characters.
        custom:
          type: string
          description: When set to **true**, indicates that the consumer disclosure
            is a custom disclosure. The default is **false**.
        enableEsign:
          type: string
          description: When set to **true** (default), indicates that eSign is enabled.
        esignAgreement:
          type: string
          description: The final, assembled text of the Electronic Record and Signature
            Disclosure that includes the appropriate `companyName` and other specifics.
            It also includes the HTML tags used for formatting.
        esignText:
          type: string
          description: |-
            The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.

            **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
        languageCode:
          type: string
          description: "The simple type enumeration for the language to use when displaying\
            \ the disclosure. The following languages are supported:\n\n- Arabic (`ar`)\n\
            - Bulgarian (`bg`)\n- Czech (`cs`)\n- Chinese Simplified (`zh_CN`)\n-\
            \ Chinese Traditional (`zh_TW`)\n- Croatian (`hr`)\n- Danish (`da`)\n\
            - Dutch (`nl`)\n- English US (`en`)\n- English UK (`en_GB`)\n- Estonian\
            \ (`et`)\n- Farsi (`fa`)\n- Finnish (`fi`)\n- French (`fr`)\n- French\
            \ Canadian (`fr_CA`)\n- German (`de`)\n- Greek (`el`)\n- Hebrew (`he`)\n\
            - Hindi (`hi`)\n- Hungarian (`hu`)\n- Bahasa Indonesian (`id`)\n- Italian\
            \ (`it`)\n- Japanese (`ja`)\n- Korean (`ko`)\n- Latvian (`lv`)\n- Lithuanian\
            \ (`lt`)\n- Bahasa Melayu (`ms`)\n- Norwegian (`no`)\n- Polish (`pl`)\n\
            - Portuguese (`pt`)\n- Portuguese Brazil (`pt_BR`)\n- Romanian (`ro`)\n\
            - Russian (`ru`)\n- Serbian (`sr`)\n- Slovak (`sk`)\n- Slovenian (`sl`)\n\
            - Spanish (`es`)\n- Spanish Latin America (`es_MX`)\n- Swedish (`sv`)\n\
            - Thai (`th`)\n- Turkish (`tr`)\n- Ukrainian (`uk`) \n- Vietnamese (`vi`)\n\
            \nAdditionally, you can automatically detect the browser language being\
            \ used by the viewer and display the disclosure in that language by setting\
            \ the value to `browser`."
        mustAgreeToEsign:
          type: string
          description: When set to **true**, the  recipient must agree to the consumer
            disclosure. The value of this property is read only. It is calculated
            based on the account setting `consumerDisclosureFrequency` and the user's
            actions.
        pdfId:
          type: string
          description: "**Deprecated**. \n\nThe `pdfId` property in the consumer_disclosure\
            \ PUT request is deprecated. For security reasons going forward, any value\
            \ provided in the request packet must be ignored. "
        useBrand:
          type: string
          description: "When set to **true**, specifies that the company name in the\
            \ signing brand is used for the disclosure. Whenever an envelope is sent\
            \ from the account that uses a signing brand with a specified company\
            \ name, that value is used in email notifications and in the signing experience.\
            \  \n\nWhen set to **false** (default), or if the signing brand does not\
            \ specify a company name, the account name is used instead.\n\n**Note**:\
            \ This substitution only works if you use the default legal disclosure\
            \ or if you apply the `companyName` to the merge fields in a custom ERSD. "
        useConsumerDisclosureWithinAccount:
          type: string
          description: When set to **true**, specifies that recipients in the same
            account as the sender must agree to eSign an Electronic Record and Signature
            Disclosure Statement.
        useConsumerDisclosureWithinAccountMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        withdrawAddressLine1:
          type: string
          description: "Contains the first address line of the postal address to which\
            \ a customer can send a consent withdrawal notification.\n\nMaximum length:\
            \ 100 characters. "
        withdrawAddressLine2:
          type: string
          description: "Contains the second address line of the postal address to\
            \ which a customer can send a consent withdrawal notification.\n\nMaximum\
            \ length: 100 characters. "
        withdrawByEmail:
          type: string
          description: When set to **true** (default), indicates that the customer
            can withdraw consent by email.
        withdrawByMail:
          type: string
          description: When set to **true**, indicates that the customer can withdraw
            consent by postal mail. The default is **false**.
        withdrawByPhone:
          type: string
          description: When set to **true**, indicates that the customer can withdraw
            consent by phone. The default is **false**.
        withdrawCity:
          type: string
          description: "Contains the city of the postal address to which a customer\
            \ can send a consent withdrawal notification.\n\nMaximum length: 50 characters. "
        withdrawConsequences:
          type: string
          description: |-
            Text indicating the consequences of withdrawing consent.

            Maximum length: 255 characters.
        withdrawEmail:
          type: string
          description: "Contains the email address to which a customer can send a\
            \ consent withdrawal notification.\n\nMaximum length: 100 characters. "
        withdrawOther:
          type: string
          description: |-
            Contains any other information needed to withdraw consent.

            Maximum length: 255 characters.

            Example:

            `We do not need any other information from you to withdraw consent.`
        withdrawPhone:
          type: string
          description: "Contains the phone number that a customer can call to register\
            \ consent withdrawal notification as a free-formatted string.\n\nMaximum\
            \ length: 20 characters. "
        withdrawPostalCode:
          type: string
          description: "Contains the postal code of the postal address to which a\
            \ customer can send a consent withdrawal notification.\n\nMaximum length:\
            \ 20 characters. "
        withdrawState:
          type: string
          description: |-
            Contains the state of the postal address to which a customer can send a consent withdrawal notification.

            Example: `PA`
      description: Details about envelope consumer disclosures.
      x-ds-definition-name: consumerDisclosure
      x-ds-category: Envelopes
      x-ds-order: "90"
      x-ms-summary: Details about envelope consumer disclosures.
    EnvelopeDocuments:
      type: object
      properties:
        envelopeDocuments:
          type: array
          description: An array of document objects.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
      description: Envelope documents
      x-ds-definition-name: envelopeDocumentsResult
      x-ds-category: Envelopes
      x-ds-order: "40"
      x-ms-summary: Envelope documents
    EnvelopeEmailSettings:
      type: object
      properties:
        bccEmailAddresses:
          type: array
          description: "An array containing the email address that should receive\
            \ a copy of all email communications related to an envelope for archiving\
            \ purposes. Maximum Length: 100 characters.\n\nWhile this property is\
            \ an array, note that it takes only a single email address.\n\n**Note**:\
            \ Only users with the `canManageAccount` setting set to **true** can use\
            \ this option. \n\nDocuSign verifies that the email format is correct,\
            \ but does not verify that the email address is active. You can use this\
            \ for archiving purposes. However, using this property overrides the BCC\
            \ for Email Archive information setting for this envelope. \n\n**Example**:\
            \ if your account has BCC for Email Archive set up for the email address\
            \ archive@mycompany.com and you send an envelope using the BCC Email Override\
            \ to send a BCC email to salesarchive@mycompany.com, then a copy of the\
            \ envelope is only sent to the salesarchive@mycompany.com email address."
          items:
            $ref: '#/components/schemas/bccEmailAddress'
        replyEmailAddressOverride:
          type: string
          description: 'The Reply To email address to use for email replies, instead
            of the one that is configured at the account level. DocuSign verifies
            that the email address is in a correct format, but does not verify that
            it is active. Maximum Length: 100 characters.'
        replyEmailNameOverride:
          type: string
          description: 'The name to associate with the Reply To email address, instead
            of the name that is configured at the account level. Maximum Length: 100
            characters.'
      description: Envelope email settings
      x-ds-definition-name: emailSettings
      x-ds-category: Envelopes
      x-ds-order: "30"
      x-ms-summary: Envelope email settings
    Envelopes:
      type: object
      properties:
        accessControlListBase64:
          type: string
          description: Reserved for DocuSign.
        allowComments:
          type: string
          description: When set to **true**, users can add comments to the documents
            in the envelope. For example, if a signer has a question about the text
            in the document, they can add a comment to the document.
        allowMarkup:
          type: string
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
        allowReassign:
          type: string
          description: When **true**, the recipient can redirect an envelope to a
            more appropriate recipient.
        allowViewHistory:
          type: string
          description: When set to **true**, recipients can view the history of the
            envelope.
        anySigner:
          type: string
          description: Deprecated. This feature has been replaced by signing groups.
        asynchronous:
          type: string
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
        attachmentsUri:
          type: string
          description: Contains a URL for retrieving the attachments that are associated
            with the envelope.
        authoritativeCopy:
          type: string
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
        authoritativeCopyDefault:
          type: string
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        brandId:
          type: string
          description: The id of the brand.
        brandLock:
          type: string
          description: When **true**, the `brandId` for the envelope is locked and
            senders cannot change the brand used for the envelope.
        certificateUri:
          type: string
          description: The URI for retrieving certificate information.
        completedDateTime:
          type: string
          description: Specifies the date and time this item was completed.
        copyRecipientData:
          type: string
          description: ""
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customFields:
          $ref: '#/components/schemas/AccountCustomFields'
        customFieldsUri:
          type: string
          description: The URI for retrieving custom fields.
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        deletedDateTime:
          type: string
          description: Reserved for DocuSign.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        disableResponsiveDocument:
          type: string
          description: When set to **true**, responsive documents are disabled for
            the envelope.
        documentsCombinedUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as a single PDF file.
        documentsUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as separate files.
        emailBlurb:
          type: string
          description: This is the same as the email body. If specified it is included
            in the email body for all envelope recipients.
        emailSettings:
          $ref: '#/components/schemas/emailSettings'
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        enableWetSign:
          type: string
          description: When set to **true**, the signer is allowed to print the document
            and sign it on paper.
        enforceSignerVisibility:
          type: string
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
        envelopeAttachments:
          type: array
          description: An array of attachment objects that provide information about
            the attachments that are associated with the envelope.
          items:
            $ref: '#/components/schemas/attachment'
        envelopeDocuments:
          type: array
          description: An array containing information about the documents that are
            included in the envelope.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        envelopeIdStamping:
          type: string
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
        envelopeLocation:
          type: string
          description: Reserved for DocuSign.
        envelopeMetadata:
          $ref: '#/components/schemas/envelopeMetadata'
        envelopeUri:
          type: string
          description: The URI for retrieving the envelope or envelopes.
        expireAfter:
          type: string
          description: An integer specifying the number of days that a sent envelope
            remains active before it expires. A negative number in a response indicates
            that the envelope has already expired.
        expireDateTime:
          type: string
          description: The date and time the envelope is set to expire.
        expireEnabled:
          type: string
          description: When set to **true**, the envelope expires (is no longer available
            for signing) after the specified number of days after it is sent (`sentDateTime`).
            Set  `expireAfter` to set the number of days until an envelope expires.
            When **false**, the account default setting is used. If the account does
            not have an expiration setting, the DocuSign default value of 120 days
            is used.
        externalEnvelopeId:
          type: string
          description: May contain an external identifier for the envelope.
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        hasComments:
          type: string
          description: When set to **true**, indicates that users have added comments
            to the envelope.
        hasFormDataChanged:
          type: string
          description: Specifies if the `EnvelopeFormData` associated with any forms
            in the envelope has changed.
        hasWavFile:
          type: string
          description: 'When set to **true**, indicates that a .wav file used for
            voice authentication is included in the envelope. '
        holder:
          type: string
          description: Reserved for DocuSign.
        initialSentDateTime:
          type: string
          description: The date and time the envelope was initially sent.
        is21CFRPart11:
          type: string
          description: When **true**, indicates compliance with United States Food
            and Drug Administration (FDA) regulations on electronic records and electronic
            signatures (ERES).
        isDynamicEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a dynamic
            envelope.
        isSignatureProviderEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a signature-provided
            envelope.
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        location:
          type: string
          description: Reserved for DocuSign.
        lockInformation:
          $ref: '#/components/schemas/EnvelopeLocks'
        messageLock:
          type: string
          description: "When set to **true**, prevents senders from changing the contents\
            \ of `emailBlurb` and `emailSubject` properties for the envelope. \n\n\
            Additionally, this prevents users from making changes to the contents\
            \ of `emailBlurb` and `emailSubject` properties when correcting envelopes.\
            \ \n\nHowever, if the `messageLock` node is set to **true** and the `emailSubject`\
            \ property is empty, senders and correctors are able to add a subject\
            \ to the envelope."
        notification:
          $ref: '#/components/schemas/notification'
        notificationUri:
          type: string
          description: The URI for retrieving notifications.
        powerForm:
          $ref: '#/components/schemas/powerForm'
        purgeCompletedDate:
          type: string
          description: The date that a purge was completed.
        purgeRequestDate:
          type: string
          description: The date that a purge was requested.
        purgeState:
          type: string
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

        recipients:
          $ref: '#/components/schemas/EnvelopeRecipients'
        recipientsLock:
          type: string
          description: When set to **true**, prevents senders from changing, correcting,
            or deleting the recipient information for the envelope.
        recipientsUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            the recipients.
        sender:
          $ref: '#/components/schemas/userInfo'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        signerCanSignOnMobile:
          type: string
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
        signingLocation:
          type: string
          description: Specifies the physical location where the signing takes place.
            It can have two enumeration values; `inPerson` and `online`. The default
            value is `online`.
        status:
          type: string
          description: |
            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
        statusChangedDateTime:
          type: string
          description: The data and time that the status changed.
        statusDateTime:
          type: string
          description: The DateTime that the envelope changed status (i.e. was created
            or sent.)
        templatesUri:
          type: string
          description: The URI for retrieving the templates.
        transactionId:
          type: string
          description: ' Used to identify an envelope. The id is a sender-generated
            value and is valid in the DocuSign system for 7 days. It is recommended
            that a transaction ID is used for offline signing to ensure that an envelope
            is not sent multiple times. The `transactionId` property can be used determine
            an envelope''s status (i.e. was it created or not) in cases where the
            internet connection was lost before the envelope status was returned.'
        useDisclosure:
          type: string
          description: "When set to **true**, the disclosure is shown to recipients\
            \ in accordance with the account's Electronic Record and Signature Disclosure\
            \ frequency setting. When set to **false**, the Electronic Record and\
            \ Signature Disclosure is not shown to any envelope recipients. \n\nIf\
            \ the `useDisclosure` property is not set, then the account's normal disclosure\
            \ setting is used and the value of the `useDisclosure` property is not\
            \ returned in responses when getting envelope information."
        voidedDateTime:
          type: string
          description: The date and time the envelope or template was voided.
        voidedReason:
          type: string
          description: The reason the envelope or template was voided.
        workflow:
          $ref: '#/components/schemas/workflow'
      description: Envelope creation, management
      x-ds-definition-name: envelope
      x-ds-category: Envelopes
      x-ds-order: "10"
      x-ms-summary: Envelope creation, management
    EnvelopeTemplates:
      type: object
      properties:
        templates:
          type: array
          description: An array of `templateSummary` objects that contain information
            about templates.
          items:
            $ref: '#/components/schemas/templateSummary'
      description: Envelope templates
      x-ds-definition-name: templateInformation
      x-ds-category: Envelopes
      x-ds-order: "85"
      x-ms-summary: Envelope templates
    Folders:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        envelopes:
          type: array
          description: A list of envelopes in this folder.
          items:
            $ref: '#/components/schemas/envelopeSummary'
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: Folder management
      x-ds-definition-name: foldersResponse
      x-ds-category: Folders
      x-ds-order: "10"
      x-ms-summary: Folder management
    GroupBrands:
      type: object
      properties:
        recipientBrandIdDefault:
          type: string
          description: The brand that envelope recipients see when a brand is not
            explicitly set.
        senderBrandIdDefault:
          type: string
          description: The brand that envelope senders see when a brand is not explicitly
            set.
        brandOptions:
          type: array
          description: A list of brands.
          items:
            $ref: '#/components/schemas/brand'
      description: If your account includes multiple signing brands, you can use the
        groups functionality to assign different brands to different groups. This
        resource enables you to manage group brands.
      x-ds-definition-name: brandsResponse
      x-ds-category: UserGroups
      x-ds-order: "30"
      x-ms-summary: If your account includes multiple signing brands, you can use
        the groups functionality to assign different brands to different groups. This
        resource enables you to manage group brands.
    Groups:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        groups:
          type: array
          description: A collection group objects containing information about the
            groups.
          items:
            $ref: '#/components/schemas/group'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: Group information
      x-ds-definition-name: groupInformation
      x-ds-category: UserGroups
      x-ds-order: "10"
      x-ms-summary: Group information
    GroupUsers:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
        users:
          type: array
          description: An array of `userInfo` objects containing information about
            the users in the group.
          items:
            $ref: '#/components/schemas/userInfo'
      description: Groups' users
      x-ds-definition-name: usersResponse
      x-ds-category: UserGroups
      x-ds-order: "20"
      x-ms-summary: Groups' users
    SigningGroups:
      type: object
      properties:
        created:
          type: string
          description: The UTC DateTime when the workspace user authorization was
            created.
        createdBy:
          type: string
          description: The name of the user who created the signing group.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        groupEmail:
          type: string
          description: The email address for the signing group. You can use a group
            email address to email all of the group members at the same time.
        groupName:
          type: string
          description: The name of the group. The search_text provided in the call
            automatically performs a wild card search on group_name.
        groupType:
          type: string
          description: |-
            The group type. Possible values include:

            - `adminstrators`
            - `everyone`
            - `customGroup`
            - `sharedSigningGroup`

            <!-- More? To do -->
        modified:
          type: string
          description: The date and time that the signing group was last modified.
        modifiedBy:
          type: string
          description: The user id (GUID) of the user who last modified this user
            record.
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/signingGroupUser'
      description: Signing groups
      x-ds-definition-name: signingGroup
      x-ds-category: SigningGroups
      x-ds-order: "10"
      x-ms-summary: Signing groups
    SigningGroupUsers:
      type: object
      properties:
        users:
          type: array
          description: User management information.
          items:
            $ref: '#/components/schemas/signingGroupUser'
      description: Signing groups' users
      x-ds-definition-name: signingGroupUsers
      x-ds-category: SigningGroups
      x-ds-order: "20"
      x-ms-summary: Signing groups' users
    TemplateRecipients:
      type: object
      properties:
        agents:
          type: array
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/agent'
        carbonCopies:
          type: array
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: '#/components/schemas/carbonCopy'
        certifiedDeliveries:
          type: array
          description: A complex type containing information on a recipient the must
            receive the completed documents for the envelope to be completed, but
            the recipient does not need to sign, initial, date, or add information
            to any of the documents.
          items:
            $ref: '#/components/schemas/certifiedDelivery'
        currentRoutingOrder:
          type: string
          description: The routing order of the current recipient. If this value equals
            a particular signer's routing order, it indicates that the envelope has
            been sent to that recipient, but he or she has not completed the required
            actions.
        editors:
          type: array
          description: A complex type defining the management and access rights of
            a recipient assigned assigned as an editor on the document.
          items:
            $ref: '#/components/schemas/editor'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        inPersonSigners:
          type: array
          description: Specifies a signer that is in the same physical location as
            a DocuSign user who will act as a Signing Host for the transaction. The
            recipient added is the Signing Host and new separate Signer Name field
            appears after Sign in person is selected.
          items:
            $ref: '#/components/schemas/inPersonSigner'
        intermediaries:
          type: array
          description: Identifies a recipient that can, but is not required to, add
            name and email information for recipients at the same or subsequent level
            in the routing order (until subsequent Agents, Editors or Intermediaries
            recipient types are added).
          items:
            $ref: '#/components/schemas/intermediary'
        notaries:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notaryRecipient'
        recipientCount:
          type: string
          description: The number of recipients in the envelope.
        seals:
          type: array
          description: Specifies one or more electronic seals to apply on documents.
            For more information on Electronic Seals , see https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals
          items:
            $ref: '#/components/schemas/sealSign'
        signers:
          type: array
          description: A list of signers on the envelope.
          items:
            $ref: '#/components/schemas/signer'
        witnesses:
          type: array
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: '#/components/schemas/witness'
      description: Template recipients
      x-ds-definition-name: recipients
      x-ds-category: Templates
      x-ds-order: "20"
      x-ms-summary: Template recipients
    TemplateBulkRecipients:
      type: object
      properties:
        bulkRecipients:
          type: array
          description: A complex type containing information about the bulk recipients
            in the response.
          items:
            $ref: '#/components/schemas/bulkRecipient'
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: Template bulk recipients
      x-ds-definition-name: bulkRecipientsResponse
      x-ds-category: Templates
      x-ds-order: "30"
      x-ms-summary: Template bulk recipients
    TemplateCustomFields:
      type: object
      properties:
        listCustomFields:
          type: array
          description: An array of list custom fields.
          items:
            $ref: '#/components/schemas/listCustomField'
        textCustomFields:
          type: array
          description: An array of text custom fields.
          items:
            $ref: '#/components/schemas/textCustomField'
      description: A template custom field enables you to prepopulate custom metadata
        for all new envelopes that are created by using a specific template. You can
        then use the custom data for sorting, organizing, searching, and other downstream
        processes.
      x-ds-definition-name: customFields
      x-ds-category: Templates
      x-ds-order: "70"
      x-ms-summary: A template custom field enables you to prepopulate custom metadata
        for all new envelopes that are created by using a specific template. You can
        then use the custom data for sorting, organizing, searching, and other downstream
        processes.
    TemplateDocumentFields:
      type: object
      properties:
        documentFields:
          type: array
          description: "The array of name/value custom data strings to add to a document.\
            \ Custom document field information is returned in the status, but otherwise\
            \ is not used by DocuSign. The array contains the following elements:\
            \ \n\n* `name` - A string that can be a maximum of 50 characters. \n*\
            \ `value` - A string that can be a maximum of 200 characters.\n\n**Important**:\
            \ If you are using XML, the name/value pair is contained in a `nameValue`\
            \ element. \n"
          items:
            $ref: '#/components/schemas/nameValue'
      description: Template document fields
      x-ds-definition-name: documentFieldsInformation
      x-ds-category: Templates
      x-ds-order: "60"
      x-ms-summary: Template document fields
    TemplateDocuments:
      type: object
      properties:
        templateDocuments:
          type: array
          description: An array of document objects that contain information about
            the documents associated with the template.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        templateId:
          type: string
          description: 'The id of the template. If a value is not provided, DocuSign
            generates a value. '
      description: Template documents
      x-ds-definition-name: templateDocumentsResult
      x-ds-category: Templates
      x-ds-order: "40"
      x-ms-summary: Template documents
    TemplateLocks:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        lockDurationInSeconds:
          type: string
          description: |
            The number of seconds until the lock expires when there is no activity on the template.

            If no value is entered, then the default value of 300 seconds is used. The maximum value is 1,800 seconds.

            The lock duration can be extended.
        lockedByApp:
          type: string
          description: Specifies the friendly name of  the application that is locking
            the envelope.
        lockedByUser:
          $ref: '#/components/schemas/userInfo'
        lockedUntilDateTime:
          type: string
          description: The date and time that the lock expires.
        lockToken:
          type: string
          description: A unique identifier provided to the owner of the lock. You
            must use this token with subsequent calls to prove ownership of the lock.
        lockType:
          type: string
          description: The type of lock.  Currently `edit` is the only supported type.
        useScratchPad:
          type: string
          description: "When set to **true**, a scratchpad is used to edit information.\n\
            \ "
      description: This section provides information about template locks. You use
        template locks to prevent others from making changes to a template while you
        are modifying it.
      x-ds-definition-name: lockInformation
      x-ds-category: Templates
      x-ds-order: "80"
      x-ms-summary: This section provides information about template locks. You use
        template locks to prevent others from making changes to a template while you
        are modifying it.
    Templates:
      type: object
      properties:
        accessControlListBase64:
          type: string
          description: Reserved for DocuSign.
        allowComments:
          type: string
          description: When set to **true**, indicates that comments are allowed on
            the envelope.
        allowMarkup:
          type: string
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
        allowReassign:
          type: string
          description: When **true**, the recipient can redirect an envelope to a
            more appropriate recipient.
        allowViewHistory:
          type: string
          description: When set to **true**, recipients can view the history of the
            envelope.
        anySigner:
          type: string
          description: Deprecated. This feature has been replaced by signing groups.
        asynchronous:
          type: string
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
        attachmentsUri:
          type: string
          description: Contains a URL for retrieving the attachments that are associated
            with the envelope.
        authoritativeCopy:
          type: string
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
        authoritativeCopyDefault:
          type: string
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
        autoMatch:
          type: string
          description: |-
            By default, templates that have been used within
            the last 60 days are included in auto-matching.

            By explicitly setting `autoMatch`,
            you can permanently include or exclude the template
            in auto matching.

            When **true** the template is included in auto-matching
            regardless of when it was last used.

            When **false** the template is never included in auto-matching.
        autoMatchSpecifiedByUser:
          type: string
          description: |-
            If **true**, the template has been explicitly included in or excluded from auto-matching. The default is false.
            This is a read-only property.
        autoNavigation:
          type: string
          description: |
            When set to **true**, autonavigation is set for the recipient.
        brandId:
          type: string
          description: The id of the brand.
        brandLock:
          type: string
          description: When **true**, the `brandId` for the envelope is locked and
            senders cannot change the brand used for the envelope.
        certificateUri:
          type: string
          description: The URI for retrieving certificate information.
        completedDateTime:
          type: string
          description: Specifies the date and time this item was completed.
        copyRecipientData:
          type: string
          description: ""
        created:
          type: string
          description: The UTC DateTime when the workspace user authorization was
            created.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customFields:
          $ref: '#/components/schemas/AccountCustomFields'
        customFieldsUri:
          type: string
          description: The URI for retrieving custom fields.
        declinedDateTime:
          type: string
          description: The date and time the recipient declined the document. Read
            only.
        deletedDateTime:
          type: string
          description: Reserved for DocuSign.
        deliveredDateTime:
          type: string
          description: The date and time that the envelope was delivered to the recipient.
            Read only.
        description:
          type: string
          description: |
            A sender-defined description of the line item.
        disableResponsiveDocument:
          type: string
          description: When set to **true**, responsive documents are disabled for
            the envelope.
        documents:
          type: array
          description: A complex element that contains details about the documents
            associated with the envelope.
          items:
            $ref: '#/components/schemas/document'
        documentsCombinedUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as a single PDF file.
        documentsUri:
          type: string
          description: The URI for retrieving all of the documents associated with
            the envelope as separate files.
        emailBlurb:
          type: string
          description: This is the same as the email body. If the sender enters an
            email blurb, it is included in the email body for all envelope recipients.
        emailSettings:
          $ref: '#/components/schemas/emailSettings'
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        enableWetSign:
          type: string
          description: When set to **true**, the signer is allowed to print the document
            and sign it on paper.
        enforceSignerVisibility:
          type: string
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
        envelopeAttachments:
          type: array
          description: An array of attachment objects that provide information about
            the attachments that are associated with the envelope.
          items:
            $ref: '#/components/schemas/attachment'
        envelopeDocuments:
          type: array
          description: An array containing information about the documents that are
            included in the envelope.
          items:
            $ref: '#/components/schemas/envelopeDocument'
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        envelopeIdStamping:
          type: string
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
        envelopeLocation:
          type: string
          description: Reserved for DocuSign.
        envelopeMetadata:
          $ref: '#/components/schemas/envelopeMetadata'
        envelopeUri:
          type: string
          description: The URI for retrieving the envelope or envelopes.
        expireAfter:
          type: string
          description: An integer specifying the number of days that a sent envelope
            remains active before it expires. A negative number in a response indicates
            that the envelope has already expired.
        expireDateTime:
          type: string
          description: The date and time the envelope is set to expire.
        expireEnabled:
          type: string
          description: When set to **true**, the envelope expires (is no longer available
            for signing) after the specified number of days after it is sent (`sentDateTime`).
            Set  `expireAfter` to set the number of days until an envelope expires.
            When **false**, the account default setting is used. If the account does
            not have an expiration setting, the DocuSign default value of 120 days
            is used.
        externalEnvelopeId:
          type: string
          description: May contain an external identifier for the envelope.
        favoritedByMe:
          type: string
          description: ""
        folderId:
          type: string
          description: The unique identifier for the folder that the template belongs
            to.
        folderIds:
          type: array
          description: An array of folder IDs that the template is in.
          items:
            type: string
        folderName:
          type: string
          description: The name of the folder the template belongs to.
        folders:
          type: array
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/folder'
        hasComments:
          type: string
          description: When set to **true**, indicates that users have added comments
            to the envelope.
        hasFormDataChanged:
          type: string
          description: Specifies if the `EnvelopeFormData` associated with any forms
            in the template has changed.
        hasWavFile:
          type: string
          description: When set to **true**, indicates that the template includes
            a .wav file.
        holder:
          type: string
          description: Reserved for DocuSign.
        initialSentDateTime:
          type: string
          description: The date and time the envelope that used the template was initially
            sent.
        is21CFRPart11:
          type: string
          description: When **true**, indicates compliance with United States Food
            and Drug Administration (FDA) regulations on electronic records and electronic
            signatures (ERES).
        isDynamicEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a dynamic
            envelope.
        isSignatureProviderEnvelope:
          type: string
          description: When set to **true**, indicates that the envelope is a signature-provided
            envelope.
        lastModified:
          type: string
          description: |-
            The UTC date and time that the comment was last updated.

            **Note**: This can only be done by the creator.
        lastModifiedBy:
          $ref: '#/components/schemas/userInfo'
        lastModifiedDateTime:
          type: string
          description: The date and time the template was last modified.
        lastUsed:
          type: string
          description: The date and time the template was last used.
        location:
          type: string
          description: Reserved for DocuSign.
        lockInformation:
          $ref: '#/components/schemas/EnvelopeLocks'
        messageLock:
          type: string
          description: "When set to **true**, prevents senders from changing the contents\
            \ of `emailBlurb` and `emailSubject` properties for the envelope. \n\n\
            Additionally, this prevents users from making changes to the contents\
            \ of `emailBlurb` and `emailSubject` properties when correcting envelopes.\
            \ \n\nHowever, if the `messageLock` node is set to **true** and the `emailSubject`\
            \ property is empty, senders and correctors are able to add a subject\
            \ to the envelope."
        name:
          type: string
          description: The name of the template.
        newPassword:
          type: string
          description: The user's new password.
        notification:
          $ref: '#/components/schemas/notification'
        notificationUri:
          type: string
          description: The URI for retrieving notifications.
        owner:
          $ref: '#/components/schemas/userInfo'
        pageCount:
          type: string
          description: 'An integer value specifying the number of document pages in
            the template. '
        password:
          type: string
          description: The password for editing the template.
        passwordProtected:
          type: string
          description: If **true**, a password is required to edit the template.
        powerForm:
          $ref: '#/components/schemas/powerForm'
        powerForms:
          type: array
          description: An array of PowerForm objects that contain information about
            any PowerForms that are included in the template.
          items:
            $ref: '#/components/schemas/powerForm'
        purgeCompletedDate:
          type: string
          description: The date that a purge was completed.
        purgeRequestDate:
          type: string
          description: The date that a purge was requested.
        purgeState:
          type: string
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

        recipients:
          $ref: '#/components/schemas/EnvelopeRecipients'
        recipientsLock:
          type: string
          description: When set to **true**, prevents senders from changing, correcting,
            or deleting the recipient information for the envelope.
        recipientsUri:
          type: string
          description: Contains a URI for an endpoint that you can use to retrieve
            the recipients.
        sender:
          $ref: '#/components/schemas/userInfo'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        shared:
          type: string
          description: |
            When **true**, indicates the template is shared with the **Everyone** group,
            and is shared with all users on the account.

            If **false**, the template is only shared with the **Administrator** group.
        signerCanSignOnMobile:
          type: string
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
        signingLocation:
          type: string
          description: Specifies the physical location where the signing takes place.
            It can have two enumeration values; `inPerson` and `online`. The default
            value is `online`.
        status:
          type: string
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
        statusChangedDateTime:
          type: string
          description: The data and time that the status changed.
        statusDateTime:
          type: string
          description: The DateTime that the envelope changed status (i.e. was created
            or sent.)
        templateId:
          type: string
          description: 'The unique identifier of the template. If this is not provided,
            DocuSign will generate a value. '
        templatesUri:
          type: string
          description: The URI for retrieving the templates.
        transactionId:
          type: string
          description: ' Used to identify an envelope. The id is a sender-generated
            value and is valid in the DocuSign system for 7 days. It is recommended
            that a transaction ID is used for offline signing to ensure that an envelope
            is not sent multiple times. The `transactionId` property can be used determine
            an envelope''s status (i.e. was it created or not) in cases where the
            internet connection was lost before the envelope status was returned.'
        uri:
          type: string
          description: Contains a URI that you can use to retreve the template.
        useDisclosure:
          type: string
          description: "When set to **true**, the disclosure is shown to recipients\
            \ in accordance with the account's Electronic Record and Signature Disclosure\
            \ frequency setting. When set to **false**, the Electronic Record and\
            \ Signature Disclosure is not shown to any envelope recipients. \n\nIf\
            \ the `useDisclosure` property is not set, then the account's normal disclosure\
            \ setting is used and the value of the `useDisclosure` property is not\
            \ returned in responses when getting envelope information."
        voidedDateTime:
          type: string
          description: The date and time the envelope or template was voided.
        voidedReason:
          type: string
          description: The reason the envelope or template was voided.
        workflow:
          $ref: '#/components/schemas/workflow'
      description: Template management
      x-ds-definition-name: envelopeTemplate
      x-ds-category: Templates
      x-ds-order: "10"
      x-ms-summary: Template management
    TemplateRecipientTabs:
      type: object
      properties:
        approveTabs:
          type: array
          description: "A list of\n[Approve tabs][approve].\n\nAn Approve tab enables\n\
            the recipient to approve documents without\nplacing a signature or initials\
            \ on the document. If the\nrecipient clicks the tab during the signing\
            \ process, the\nrecipient is considered to have signed the document. No\n\
            information is shown on the document of the approval, but it\nis recorded\
            \ as a signature in the envelope history.\nThe value of an approve tab\
            \ can't be set.\n\n[approve]:\t\t      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/approve'
        checkboxTabs:
          type: array
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/checkbox'
        commentThreadTabs:
          type: array
          description: An array of tabs that represents a collection of comments in
            a comment thread. For example, if a recipient has questions about the
            content of a document, they can add a comment to the document and control
            who else can see the comment. This value can't be set.
          items:
            $ref: '#/components/schemas/commentThread'
        commissionCountyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionCounty'
        commissionExpirationTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionExpiration'
        commissionNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionNumber'
        commissionStateTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/commissionState'
        companyTabs:
          type: array
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: '#/components/schemas/company'
        currencyTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/currency'
        dateSignedTabs:
          type: array
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/dateSigned'
        dateTabs:
          type: array
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/date'
        declineTabs:
          type: array
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/decline'
        drawTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/draw'
        emailAddressTabs:
          type: array
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/emailAddress'
        emailTabs:
          type: array
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/email'
        envelopeIdTabs:
          type: array
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: '#/components/schemas/envelopeId'
        firstNameTabs:
          type: array
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: '#/components/schemas/firstName'
        formulaTabs:
          type: array
          description: "A list of [Formula tabs][formulaTab].\n\nThe value of a Formula\
            \ tab is calculated from the values of other number or date tabs in the\
            \ document. When the recipient completes the underlying fields, the Formula\
            \ tab calculates and displays the result. This value can be set.\n\nThe\
            \ `formula` property of the tab contains the references to the underlying\
            \ tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].\n\
            \nIf a Formula tab contains a `paymentDetails` property, the tab is considered\
            \ a payment item. To learn more about payments, see [Requesting Payments\
            \ Along with Signatures][paymentguide].\n\n[calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields\n\
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures\n\
            [formulaTab]:\t    \thttps://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/\n"
          items:
            $ref: '#/components/schemas/formulaTab'
        fullNameTabs:
          type: array
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/fullName'
        initialHereTabs:
          type: array
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/initialHere'
        lastNameTabs:
          type: array
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/lastName'
        listTabs:
          type: array
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/list'
        notarizeTabs:
          type: array
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/notarize'
        notarySealTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/notarySeal'
        noteTabs:
          type: array
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/note'
        numberTabs:
          type: array
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/number'
        phoneNumberTabs:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/phoneNumber'
        polyLineOverlayTabs:
          type: array
          description: 'This type of tab enables the recipient to strike through document
            text. This value can''t be set
          items:
            $ref: '#/components/schemas/polyLineOverlay'
        prefillTabs:
          $ref: '#/components/schemas/prefillTabs'
        radioGroupTabs:
          type: array
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/radioGroup'
        signerAttachmentTabs:
          type: array
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signerAttachment'
        signHereTabs:
          type: array
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/signHere'
        smartSectionTabs:
          type: array
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: '#/components/schemas/smartSection'
        ssnTabs:
          type: array
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/ssn'
        tabGroups:
          type: array
          description: An array of `tabGroup` items that contain information about
            tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel`
            to the `Tab.TabGroupLabels` array.
          items:
            $ref: '#/components/schemas/tabGroup'
        textTabs:
          type: array
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: '#/components/schemas/text'
        titleTabs:
          type: array
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/title'
        viewTabs:
          type: array
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/view'
        zipTabs:
          type: array
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: '#/components/schemas/zip'
      description: Template tabs
      x-ds-definition-name: tabs
      x-ds-category: Templates
      x-ds-order: "50"
      x-ms-summary: Template tabs
    TemplateViews:
      type: object
      properties:
        url:
          type: string
          description: The URL that you navigate to in order to start the view.
      description: A TemplateView contains a URL that you can embed in your application
        to generate a template view that uses the DocuSign user interface (UI).
      x-ds-definition-name: viewUrl
      x-ds-category: Templates
      x-ds-order: "55"
      x-ms-summary: A TemplateView contains a URL that you can embed in your application
        to generate a template view that uses the DocuSign user interface (UI).
    UserCustomSettings:
      type: object
      properties:
        customSettings:
          type: array
          description: The name/value pair information for the user custom setting.
          items:
            $ref: '#/components/schemas/nameValue'
      description: Users' custom settings
      x-ds-definition-name: customSettingsInformation
      x-ds-category: Users
      x-ds-order: "30"
      x-ms-summary: Users' custom settings
    UserProfiles:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/addressInformation'
        authenticationMethods:
          type: array
          description: 'Indicates the authentication methods that the user uses. These
            properties cannot be modified by the PUT operation. '
          items:
            $ref: '#/components/schemas/authenticationMethod'
        companyName:
          type: string
          description: The name of the user's company.
        displayOrganizationInfo:
          type: string
          description: ' When set to **true**, the user''s company and title information
            display on the ID card. '
        displayPersonalInfo:
          type: string
          description: When set to **true**, the user's address and phone number display
            on the ID card.
        displayProfile:
          type: string
          description: When set to **true**, the user's ID card can be viewed from
            signed documents and envelope history.
        displayUsageHistory:
          type: string
          description: When set to **true**, the user's usage information displays
            on the ID card.
        profileImageUri:
          type: string
          description: The URL for retrieving the user's profile image.
        title:
          type: string
          description: |-
            The user's job title.

            Limit: 100 characters.
        usageHistory:
          $ref: '#/components/schemas/usageHistory'
        userDetails:
          $ref: '#/components/schemas/userInformation'
        userProfileLastModifiedDate:
          type: string
          description: The date and time that the user's profile was last modified.
      description: Users' profiles
      x-ds-definition-name: userProfile
      x-ds-category: Users
      x-ds-order: "20"
      x-ms-summary: Users' profiles
    Users:
      type: object
      properties:
        activationAccessCode:
          type: string
          description: The activation code a new user must enter when activating their
            account.
        company:
          type: string
          description: The name of the user's company.
        connectConfigurations:
          type: array
          description: Object representing the user's custom Connect configuration.
          items:
            $ref: '#/components/schemas/connectUserObject'
        countryCode:
          type: string
          description: The three-letter code for the user's country.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customSettings:
          type: array
          description: The name/value pair information for the user custom setting.
          items:
            $ref: '#/components/schemas/nameValue'
        defaultAccountId:
          type: string
          description: The default account ID associated with the user.
        email:
          type: string
          description: The user's email address.
        enableConnectForUser:
          type: string
          description: Boolean value that specifies whether the user is enabled for
            updates from DocuSign Connect.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        firstName:
          type: string
          description: "The user's first name. \nMaximum Length: 50 characters."
        forgottenPasswordInfo:
          $ref: '#/components/schemas/forgottenPasswordInformation'
        groupList:
          type: array
          description: |
            A list of the group information for groups to add the user to.
            Use [UserGroups::listGroups](https://developers.docusign.com/docs/esign-rest-api/reference/UserGroups/Groups/list) to get information about groups.

            When setting a user's group, only the `groupId` is required.
          items:
            $ref: '#/components/schemas/group'
        hasRemoteNotary:
          type: boolean
          description: ""
        homeAddress:
          $ref: '#/components/schemas/addressInformation'
        initialsImageUri:
          type: string
          description: The URI for retrieving the image of the user's initials.
        isAdmin:
          type: string
          description: Determines if the feature set is actively set as part of the
            plan.
        isNAREnabled:
          type: string
          description: When set to **true**, National Association of Realtors (NAR)
            signature logos are enabled for the user.
        lastLogin:
          type: string
          description: The date and time when the user last logged in to the system.
        lastName:
          type: string
          description: "The user's last name. \nMaximum Length: 50 characters."
        loginStatus:
          type: string
          description: "Shows the current status of the user's password. Possible\
            \ values are: \n\n* password_reset\n* password_active\n* password_expired\n\
            * password_locked\n* password_reset_failed \n"
        middleName:
          type: string
          description: "The user's middle name. \nLimit: 50 characters."
        password:
          type: string
          description: The user's password.
        passwordExpiration:
          type: string
          description: If password expiration is enabled, the date-time when the user's
            password expires.
        permissionProfileId:
          type: string
          description: The id of the permission profile associated with the user.
        permissionProfileName:
          type: string
          description: The name of the permission profile associated with the user.
        profileImageUri:
          type: string
          description: The URL for retrieving the user's profile image.
        sendActivationEmail:
          type: string
          description: When set to **true**, specifies that an activation email will
            be sent to the user.
        sendActivationOnInvalidLogin:
          type: string
          description: When set to **true**, specifies that an additional activation
            email be sent if user's log on fails before the account is activated.
        signatureImageUri:
          type: string
          description: An endpoint URI that you can use to retrieve the user's signature
            image.
        subscribe:
          type: string
          description: ""
        suffixName:
          type: string
          description: "The suffix for the user's name, such as Jr, IV, PhD, etc.\n\
            \nLimit: 50 characters. "
        title:
          type: string
          description: |-
            The salutation for the user, such as Ms, Dr, Capt., etc.

            Limit: 10 characters.
        uri:
          type: string
          description: A URI containing the user ID.
        userAddedToAccountDateTime:
          type: string
          description: The date and time that the user was added to the account.
        userId:
          type: string
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
        userName:
          type: string
          description: |-
            The user's full name.
            <!--
            `title` + `firstName` + `middleName` + `lastName` + `suffixName`
            -->
        userProfileLastModifiedDate:
          type: string
          description: The date and time that the user's profile was last modified.
        userSettings:
          $ref: '#/components/schemas/userSettingsInformation'
        userStatus:
          type: string
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
        userType:
          type: string
          description: The type of user, for example `CompanyUser`.
        workAddress:
          $ref: '#/components/schemas/addressInformation'
      description: The Users resource enables you to create and manage account users.
      x-ds-definition-name: userInformation
      x-ds-category: Users
      x-ds-order: "10"
      x-ms-summary: The Users resource enables you to create and manage account users.
    UserSignatures:
      type: object
      properties:
        adoptedDateTime:
          type: string
          description: The date and time the user adopted their signature.
        createdDateTime:
          type: string
          description: The UTC date and time when the user created the signature.
        customField:
          type: string
          description: Serialized information about any custom [eHanko stamps](https://support.docusign.com/en/articles/Sending-and-Signing-with-eHanko)
            that have been ordered from an eHanko provider, including the order status,
            purchase order id, time created, and time modified.
        dateStampProperties:
          $ref: '#/components/schemas/dateStampProperties'
        disallowUserResizeStamp:
          type: string
          description: When set to **true**, users may not resize the stamp.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        externalID:
          type: string
          description: |-
            An external ID for the signature or stamp.

            **Note**: If a recipient uses a stamp instead of a signature, this is the stamp vendor's serial number for the stamp.
        imageBase64:
          type: string
          description: A Base64-encoded representation of the signature image.
        imageType:
          type: string
          description: |-
            The format of the signature image, such as:

            - `GIF`
            - `PNG`
            - `JPG`
            - `PDF`
            - `BMP`
        initials150ImageId:
          type: string
          description: The ID of the user's initials image.
        initialsImageUri:
          type: string
          description: The URI for retrieving the image of the user's initials.
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        lastModifiedDateTime:
          type: string
          description: The UTC date and time when the signature was last modified.
        nrdsId:
          type: string
          description: The National Association of Realtors (NAR) membership ID for
            a user who is a realtor.
        nrdsLastName:
          type: string
          description: The realtor's last name.
        nrdsStatus:
          type: string
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
        phoneticName:
          type: string
          description: The phonetic spelling of the `signatureName`.
        signature150ImageId:
          type: string
          description: The ID of the user's signature image.
        signatureFont:
          type: string
          description: |
            The font type for the signature, if the signature is not drawn. The supported font types are:

            "7_DocuSign", "1_DocuSign", "6_DocuSign", "8_DocuSign", "3_DocuSign", "Mistral", "4_DocuSign", "2_DocuSign", "5_DocuSign", "Rage Italic"
        signatureId:
          type: string
          description: |-
            The ID associated with the signature name. You can use this property in the URI in place of the signature name. This enables the use of special characters (such as "&", "<", and ">") in a signature name.

            **Note**: When you update a signature, its signature ID might change. In that case you need to use `signatureName` to get the new `signatureId`.
        signatureImageUri:
          type: string
          description: An endpoint URI that you can use to retrieve the user's signature
            image.
        signatureInitials:
          type: string
          description: ' The initials associated with the signature.'
        signatureName:
          type: string
          description: Specifies the user's signature name.
        signatureRights:
          type: string
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
        signatureType:
          type: string
          description: |-
            Specifies the type of signature. Possible values include:

            - `RubberStamp`: A DocuSign pre-formatted signature style. This is the default value.
            - `Imported`: A signature image that the user uploaded.
            - `Drawn`: A freehand drawing of the user's signature and initials.
        stampFormat:
          type: string
          description: "The format of a stamp. Valid values are:\n\n- `NameHanko`:\
            \ The stamp represents only the signer's name.\n- `NameDateHanko`: The\
            \ stamp represents the signer's name and the date. "
        stampImageUri:
          type: string
          description: The URI for retrieving the image of the user's stamp.
        stampSizeMM:
          type: string
          description: The physical height of the stamp image (in millimeters) that
            the stamp vendor recommends for displaying the image in PDF documents.
        stampType:
          type: string
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
      description: Users' signatures
      x-ds-definition-name: userSignature
      x-ds-category: Users
      x-ds-order: "40"
      x-ms-summary: Users' signatures
    Contacts:
      type: object
      properties:
        cloudProvider:
          type: string
          description: |-
            The cloud service that provided the contact. Valid values are:

            - `rooms`
            - `docusignCore` (default)

            <!-- Future:

            - `Box`
            - `GoogleDrive`
            - `Dropbox`
            - `SalesForce`
            - `SkyDrive`

            -->
        cloudProviderContainerId:
          type: string
          description: The id of the container at the cloud provider. For example,
            this might be the room id for a DocuSign Transaction Room.
        contactId:
          type: string
          description: The id of a contact person in the account's address book.
        contactPhoneNumbers:
          type: array
          description: |-
            A list of the contact's phone numbers.

            **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:

            - Sending an envelope by using SMS
            - Using phone authentication

            You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
          items:
            $ref: '#/components/schemas/contactPhoneNumber'
        contactUri:
          type: string
          description: The URI for retrieving information about the contact.
        emails:
          type: array
          description: The email address or addresses associated with the contact.
          items:
            type: string
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        isOwner:
          type: boolean
          description: When **true**, the current user is the owner of the contact.
        name:
          type: string
          description: The name of the contact.
        organization:
          type: string
          description: The name of the contact's organization.
        shared:
          type: string
          description: |-
            When set to **true**, the contact is shared. For more information, see [Shared Contacts](https://support.docusign.com/guides/ndse-user-guide-manage-contacts).

            **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:

            - Sending an envelope by using SMS
            - Using phone authentication

            You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
        signingGroup:
          type: string
          description: If the contact belongs to a signing group, this property contains
            the `signingGroupId`.
        signingGroupName:
          type: string
          description: The name of the signing group that the contact belongs to.
      description: The `Contacts` resource enables you to manage the contact in an
        account's address book.
      x-ds-definition-name: contact
      x-ds-category: Users
      x-ds-order: "50"
      x-ms-summary: The `Contacts` resource enables you to manage the contact in an
        account's address book.
    EnvelopeAttachments:
      type: object
      properties:
        accessControl:
          type: string
          description: Valid values are `sender` and `senderAndAllRecipients`.
        attachmentId:
          type: string
          description: The unique identifier for the attachment.
        attachmentType:
          type: string
          description: |-
            Specifies the type of the attachment for the recipient. Possible values are:

            - `.htm`
            - `.xml`
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        label:
          type: string
          description: "A label for the attachment. Potential values include: \n\n\
            - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms)\
            \ provide a step-by-step, mobile-ready experience to help signers easily\
            \ complete long or complex forms.\n- `eventNotifications`: A list of envelope-level\
            \ event statuses that trigger Connect to send updates to the endpoint\
            \ specified in the `url` property. "
        name:
          type: string
          description: The name of the attachment.
      description: ""
      x-ds-definition-name: envelopeAttachment
      x-ds-category: Envelopes
      x-ds-order: "60"
      x-ms-summary: ""
    AccountPermissionProfiles:
      type: object
      properties:
        modifiedByUsername:
          type: string
          description: The username of the user who last modified the permission profile.
        modifiedDateTime:
          type: string
          description: The date and time when the permission profile was last modified.
        permissionProfileId:
          type: string
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
        permissionProfileName:
          type: string
          description: "The name of the account permission profile. \n\nExample: `Account\
            \ Administrator`"
        settings:
          $ref: '#/components/schemas/accountRoleSettings'
        userCount:
          type: string
          description: The total number of users in the group associated with the
            account permission profile.
        users:
          type: array
          description: A list of user objects containing information about the users
            who are associated with the account permission profile.
          items:
            $ref: '#/components/schemas/userInformation'
      description: The AccountPermissionProfiles resource provides methods that allow
        you to manage permission profiles for groups of account users.
      x-ds-definition-name: permissionProfile
      x-ds-category: Accounts
      x-ds-order: "70"
      x-ms-summary: The AccountPermissionProfiles resource provides methods that allow
        you to manage permission profiles for groups of account users.
    PowerForms:
      type: object
      properties:
        createdBy:
          type: string
          description: The id of the user who created the PowerForm. This property
            is returned in a response only when you set the `include_created_by` query
            parameter to **true**.
        createdDateTime:
          type: string
          description: The date and time that the PowerForm was created.
        emailBody:
          type: string
          description: |-
            For a PowerForm that is sent by email, this is the body of the email message sent to the recipients.

            Maximum length: 10000 characters.
        emailSubject:
          type: string
          description: |
            Sets the envelope name for the envelopes that the PowerForm generates. One option is to make this property the same as the subject from the template.

            You can customize the subject line to include a recipient's name or email address by using merge fields. For information about adding merge fields to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templates/create/).
        envelopes:
          type: array
          description: An array of envelope objects that contain information about
            the envelopes that are associated with the PowerForm.
          items:
            $ref: '#/components/schemas/envelope'
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        instructions:
          type: string
          description: The instructions that display on the landing page for the first
            recipient. These instructions are important if the recipient accesses
            the PowerForm by a method other than email. When you include instructions,
            they display as an introduction after the recipient accesses the PowerForm.
        isActive:
          type: string
          description: "When **true**, indicates that the PowerForm is active and\
            \ can be sent to recipients. This is the default value.\n\n\nWhen **false**,\
            \ the PowerForm cannot be emailed or accessed by a recipient, even if\
            \ they arrive at the PowerForm URL. \n\nIf a recipient attempts to sign\
            \ an inactive PowerForm, an error message informs the recipient that the\
            \ document is not active and suggests that they contact the sender."
        lastUsed:
          type: string
          description: The date and time that the PowerForm was last used.
        limitUseInterval:
          type: string
          description: The length of time before the same recipient can sign the same
            PowerForm again. This property is used in combination with the `limitUseIntervalUnits`
            property.
        limitUseIntervalEnabled:
          type: string
          description: When **true**, the `limitUseInterval` is enabled.
        limitUseIntervalUnits:
          type: string
          description: |
            The units associated with the `limitUseInterval`. Valid values are:

            - `minutes`
            - `hours`
            - `days`
            - `weeks`
            - `months`

            For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.
        maxUseEnabled:
          type: string
          description: When set to **true**, you can set a maximum number of uses
            for the PowerForm.
        name:
          type: string
          description: The name of the PowerForm.
        powerFormId:
          type: string
          description: The id of the PowerForm.
        powerFormUrl:
          type: string
          description: The URL for the PowerForm.
        recipients:
          type: array
          description: |-
            An array of `powerFormRecipient` objects.

            **Note**: For self-service documents where you do not know who the recipients are in advance, you can enter generic information for the `role` property and leave other details (such as `name` and `email`) blank.
          items:
            $ref: '#/components/schemas/powerFormRecipient'
        senderName:
          type: string
          description: "The name of the sender. \n\n**Note**: The default sender for\
            \ a PowerForm is the PowerForm Administrator who created it."
        senderUserId:
          type: string
          description: The id of the sender.
        signingMode:
          type: string
          description: |-
            The signing method to use. Valid values are:

            - `email`: This mode verifies the recipient's identity by using email authentication before the recipient can sign a document.

            - `direct`: This mode does not require any verification. We recommend that you use this signing method only when another form of authentication is in use.

            **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.

            For more information about signing modes, see the [overview of the Create method](https://developers.docusign.com/docs/esign-rest-api/reference/PowerForms/PowerForms/create).
        templateId:
          type: string
          description: The id of the template used to create the PowerForm.
        templateName:
          type: string
          description: The name of the template used to create the PowerForm.
        timesUsed:
          type: string
          description: 'The number of times the PowerForm has been used. '
        uri:
          type: string
          description: The URI for the PowerForm.
        usesRemaining:
          type: string
          description: 'The number of times that the PowerForm can still be used.
            If no use limit is set, the value is `Unlimited`. '
      description: The PowerForms resource enables you to create fillable forms that
        you can email or make available for self service on the web.
      x-ds-definition-name: powerForm
      x-ds-category: PowerForms
      x-ds-order: "80"
      x-ms-summary: The PowerForms resource enables you to create fillable forms that
        you can email or make available for self service on the web.
    PowerFormData:
      type: object
      properties:
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        recipients:
          type: array
          description: An array of powerform recipients.
          items:
            $ref: '#/components/schemas/powerFormFormDataRecipient'
      description: Data that recipients have entered in PowerForm fields.
      x-ds-definition-name: powerFormFormDataEnvelope
      x-ds-category: PowerForms
      x-ds-order: "90"
      x-ms-summary: Data that recipients have entered in PowerForm fields.
    AccountTabSettings:
      type: object
      properties:
        allowTabOrder:
          type: string
          description: |-
            When set to **true**, account users can set a tab order for the signing process.

            **Note**: Only Admin users can change this setting.
        allowTabOrderMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        approveDeclineTabsEnabled:
          type: string
          description: When **true**, approve and decline tabs are enabled.
        approveDeclineTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        calculatedFieldsEnabled:
          type: string
          description: When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields)
            are enabled for tabs.
        calculatedFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        checkboxTabsEnabled:
          type: string
          description: When **true**, checkbox tabs are enabled.
        checkBoxTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dataFieldRegexEnabled:
          type: string
          description: When **true**, regular expressions are enabled for tabs that
            contain data fields.
        dataFieldRegexMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dataFieldSizeEnabled:
          type: string
          description: When **true**, setting character limits for input fields is
            enabled.
        dataFieldSizeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        drawTabsEnabled:
          type: string
          description: ""
        drawTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        firstLastEmailTabsEnabled:
          type: string
          description: Reserved for DocuSign.
        firstLastEmailTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        listTabsEnabled:
          type: string
          description: When **true**, list tabs are enabled.
        listTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        noteTabsEnabled:
          type: string
          description: When **true**, note tabs are enabled.
        noteTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        prefillTabsEnabled:
          type: string
          description: ""
        prefillTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        radioTabsEnabled:
          type: string
          description: When **true**, radio button tabs are enabled.
        radioTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        savingCustomTabsEnabled:
          type: string
          description: When **true**, saving custom tabs is enabled.
        savingCustomTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        senderToChangeTabAssignmentsEnabled:
          type: string
          description: Reserved for DocuSign.
        senderToChangeTabAssignmentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sharedCustomTabsEnabled:
          type: string
          description: When **true**, shared custom tabs are enabled.
        sharedCustomTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabDataLabelEnabled:
          type: string
          description: |
            When set to **true**, [data
            labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.

            **Note**: Only Admin users can change this setting.
        tabDataLabelMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabLocationEnabled:
          type: string
          description: Reserved for DocuSign.
        tabLocationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabLockingEnabled:
          type: string
          description: |
            When set to **true**, tab locking is enabled.

            **Note**: Only Admin users can change this setting.
        tabLockingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabScaleEnabled:
          type: string
          description: Reserved for DocuSign.
        tabScaleMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabTextFormattingEnabled:
          type: string
          description: |
            When set to **true**, text formatting (such as font type, font size,
            font color, bold, italic, and underline) is enabled for tabs that
            support formatting.

            **Note**: Only Admin users can change this setting.
        tabTextFormattingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        textTabsEnabled:
          type: string
          description: When **true**, text tabs are enabled.
        textTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: Tab settings determine the tab types and tab functionality that
        are enabled for an account.
      x-ds-definition-name: tabAccountSettings
      x-ds-category: Accounts
      x-ds-order: "100"
      x-ms-summary: Tab settings determine the tab types and tab functionality that
        are enabled for an account.
    ENoteConfigurations:
      type: object
      properties:
        apiKey:
          type: string
          description: ""
        connectConfigured:
          type: string
          description: ""
        eNoteConfigured:
          type: string
          description: ""
        organization:
          type: string
          description: ""
        password:
          type: string
          description: The user's encrypted password hash.
        userName:
          type: string
          description: The name of the user.
      description: ""
      x-ds-definition-name: eNoteConfiguration
      x-ds-category: Accounts
      x-ds-order: "110"
      x-ms-summary: ""
    WorkspaceItems:
      type: object
      properties:
        callerAuthorization:
          $ref: '#/components/schemas/workspaceUserAuthorization'
        contentType:
          type: string
          description: If the item is a file, this property specifies the content
            type of the file.
        created:
          type: string
          description: The UTC DateTime when the workspace item was created.
        createdById:
          type: string
          description: The id of the user who created the workspace item.
        createdByInformation:
          $ref: '#/components/schemas/workspaceUser'
        extension:
          type: string
          description: The file extension of a file item.
        fileSize:
          type: string
          description: The size of the file in bytes.
        fileUri:
          type: string
          description: The URI for retrieving the file.
        id:
          type: string
          description: The id of the workspace item.
        isPublic:
          type: string
          description: ' When **true**, the item is public.'
        lastModified:
          type: string
          description: The UTC DateTime that the item was last modified.
        lastModifiedById:
          type: string
          description: The id of the user who last modified the item.
        lastModifiedByInformation:
          $ref: '#/components/schemas/workspaceUser'
        name:
          type: string
          description: The name of the file or folder.
        pageCount:
          type: string
          description: The number of pages in a file.
        parentFolderId:
          type: string
          description: The id of the parent folder, or the special value `root` for
            the root folder.
        parentFolderUri:
          type: string
          description: The URI of the parent folder.
        sha256:
          type: string
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that
            the caller computes across the entirety of the original content of a file.
            DocuSign compares this value to its own computation. If the two values
            are not equal, the original content and received content are not the same
            and the upload is refused.
        thumbHeight:
          type: string
          description: The height of the thumbnail image.
        thumbnail:
          $ref: '#/components/schemas/page'
        thumbWidth:
          type: string
          description: The width of the thumbnail image.
        type:
          type: string
          description: |-
            The type of workspace item. Valid values are:

            - `file`
            - `folder`
        uri:
          type: string
          description: A URI containing the user ID.
        userAuthorization:
          $ref: '#/components/schemas/workspaceUserAuthorization'
      description: This object contains information about a file or folder in a workspace.
      x-ds-definition-name: workspaceItem
      x-ds-category: Workspaces
      x-ds-order: "130"
      x-ms-summary: This object contains information about a file or folder in a workspace.
    Workspaces:
      type: object
      properties:
        billableAccountId:
          type: string
          description: The id of the account to bill.
        callerInformation:
          $ref: '#/components/schemas/workspaceUser'
        created:
          type: string
          description: The UTC DateTime when the workspace user authorization was
            created.
        createdByInformation:
          $ref: '#/components/schemas/workspaceUser'
        lastModified:
          type: string
          description: Utc date and time the comment was last updated (can only be
            done by creator.)
        lastModifiedByInformation:
          $ref: '#/components/schemas/workspaceUser'
        settings:
          $ref: '#/components/schemas/workspaceSettings'
        status:
          type: string
          description: |-
            The status of the workspace. Valid values are:

            - `active`
            - `closed`
        workspaceBaseUrl:
          type: string
          description: The relative URL for accessing the workspace.
        workspaceDescription:
          type: string
          description: Text describing the purpose of the workspace.
        workspaceId:
          type: string
          description: The id of the workspace, always populated.
        workspaceName:
          type: string
          description: The name of the workspace.
        workspaceUri:
          type: string
          description: The relative URI for accessing the workspace.
      description: A DocuSign workspace is a collaboration area for sharing files
        and data.
      x-ds-definition-name: workspace
      x-ds-category: Workspaces
      x-ds-order: "140"
      x-ms-summary: A DocuSign workspace is a collaboration area for sharing files
        and data.
    ChunkedUploads:
      type: object
      properties:
        checksum:
          type: string
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that
            the caller computes across the entirety of the original content that has
            been uploaded to the chunked upload. DocuSign compares this value to its
            own computation. If the two values are not equal, the original content
            and received content are not the same and the commit action is refused.
        chunkedUploadId:
          type: string
          description: 'The id of the chunked upload. '
        chunkedUploadParts:
          type: array
          description: A list of the parts that compose the chunked upload, including
            their byte sizes. The list must be contiguous before you can commit the
            chunked upload.
          items:
            $ref: '#/components/schemas/chunkedUploadPart'
        chunkedUploadUri:
          type: string
          description: 'The URI that you use to reference the chunked upload in other
            API requests, such as envelope document and envelope attachment requests. '
        committed:
          type: string
          description: 'When **true**, the chunked upload has been committed. A committed
            chunked upload can no longer receive any additional parts and is ready
            for use within other API requests. '
        expirationDateTime:
          type: string
          description: "The UTC time at which the chunked upload expires and is no\
            \ longer addressable. \n\n**Note**: The length of time before expiration\
            \ is configurable, and begins when you initiate the chunked upload. You\
            \ must fully upload and use a chunked upload within this time. The default\
            \ value for this duration is 20 minutes."
        maxChunkedUploadParts:
          type: string
          description: "The maximum number of parts allowed for a chunked upload.\
            \ This value is configurable per DocuSign environment, account, or integrator.\
            \ The default value is 128. The maximum possible value is 256.  \n"
        maxTotalSize:
          type: string
          description: The maximum total size allowed for a chunked upload. This value
            is configured per DocuSign environment, account, or integrator. The default
            value is 50 MB.
        totalSize:
          type: string
          description: |-
            The total size of the parts of the chunked upload.

            **Note**: When a chunked upload is used as an envelope document, it is subject to the PDF size limit (25 MB) and page count limit that apply to all envelope documents.
      description: The ChunkedUploads resource provides methods to complete integrity
        checks, and to add, commit, retrieve, initiate and delete chunked uploads.
      x-ds-definition-name: chunkedUploadResponse
      x-ds-category: Envelopes
      x-ds-order: "150"
      x-ms-summary: The ChunkedUploads resource provides methods to complete integrity
        checks, and to add, commit, retrieve, initiate and delete chunked uploads.
    EnvelopeFormData:
      type: object
      properties:
        emailSubject:
          type: string
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
        envelopeId:
          type: string
          description: The id of the envelope.
        formData:
          type: array
          description: An array of form data objects.
          items:
            $ref: '#/components/schemas/formDataItem'
        prefillFormData:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/formDataItem'
        recipientFormData:
          type: array
          description: An array of form data objects that are associated with specific
            recipients.
          items:
            $ref: '#/components/schemas/recipientFormData'
        sentDateTime:
          type: string
          description: The UTC DateTime when the envelope was sent. Read only.
        status:
          type: string
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
      description: This object contains the data that recipients have entered into
        the form fields associated with an envelope.
      x-ds-definition-name: envelopeFormData
      x-ds-category: Envelopes
      x-ds-order: "160"
      x-ms-summary: This object contains the data that recipients have entered into
        the form fields associated with an envelope.
    EnvelopeDocumentVisibility:
      type: object
      properties:
        documentVisibility:
          type: array
          description: An array of `documentVisibility` objects that specifies which
            documents are visible to which recipients.
          items:
            $ref: '#/components/schemas/documentVisibility'
      description: "Document Visibility enables senders to control the visibility\
        \ of the documents in an envelope at the recipient level. For example, if\
        \ the parties associated with a legal proceeding should have access to different\
        \ documents, the Document Visibility feature enables you to keep all of the\
        \ documents in the same envelope and set view permissions for the documents\
        \ by recipient. This functionality is enabled for envelopes and templates.\
        \ It is not available for PowerForms.\n\n**Note**: Before you use Document\
        \ Visibility, you should be aware of the following information:\n\n- Document\
        \ Visibility must be enabled for your account by your DocuSign administrator.\
        \ \n- A document cannot be hidden from a recipient if the recipient has tabs\
        \ assigned to them on the document. \n- When the Document Visibility setting\
        \ hides a document from a recipient, the document also does not appear in\
        \ the recipient's list of envelopes, documents, or page images.\n- Carbon\
        \ Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can\
        \ always see all of the documents associated with the envelope or template.\n\
        \nThe Document Visibility feature has multiple settings that specify the options\
        \ that senders have when sending documents. For more information, see [Use\
        \ Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility)."
      x-ds-definition-name: documentVisibilityList
      x-ds-category: Envelopes
      x-ds-order: "170"
      x-ms-summary: "Document Visibility enables senders to control the visibility\
        \ of the documents in an envelope at the recipient level. For example, if\
        \ the parties associated with a legal proceeding should have access to different\
        \ documents, the Document Visibility feature enables you to keep all of the\
        \ documents in the same envelope and set view permissions for the documents\
        \ by recipient. This functionality is enabled for envelopes and templates.\
        \ It is not available for PowerForms.\n\n**Note**: Before you use Document\
        \ Visibility, you should be aware of the following information:\n\n- Document\
        \ Visibility must be enabled for your account by your DocuSign administrator.\
        \ \n- A document cannot be hidden from a recipient if the recipient has tabs\
        \ assigned to them on the document. \n- When the Document Visibility setting\
        \ hides a document from a recipient, the document also does not appear in\
        \ the recipient's list of envelopes, documents, or page images.\n- Carbon\
        \ Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can\
        \ always see all of the documents associated with the envelope or template.\n\
        \nThe Document Visibility feature has multiple settings that specify the options\
        \ that senders have when sending documents. For more information, see [Use\
        \ Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility)."
    TemplateDocumentVisibility:
      type: object
      properties:
        documentVisibility:
          type: array
          description: An array of `documentVisibility` objects that specifies which
            documents are visible to which recipients.
          items:
            $ref: '#/components/schemas/documentVisibility'
      description: "Document Visibility enables senders to control the visibility\
        \ of the documents in an envelope at the recipient level. For example, if\
        \ the parties associated with a legal proceeding should have access to different\
        \ documents, the Document Visibility feature enables you to keep all of the\
        \ documents in the same envelope and set view permissions for the documents\
        \ by recipient. This functionality is enabled for envelopes and templates.\
        \ It is not available for PowerForms.\n\n**Note**: Before you use Document\
        \ Visibility, you should be aware of the following information:\n\n- Document\
        \ Visibility must be enabled for your account by your DocuSign administrator.\
        \ \n- A document cannot be hidden from a recipient if the recipient has tabs\
        \ assigned to them on the document. \n- When the Document Visibility setting\
        \ hides a document from a recipient, the document also does not appear in\
        \ the recipient's list of envelopes, documents, or page images.\n- Carbon\
        \ Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can\
        \ always see all of the documents associated with the envelope or template.\n\
        \nThe Document Visibility feature has multiple settings that specify the options\
        \ that senders have when sending documents. For more information, see [Use\
        \ Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility)."
      x-ds-definition-name: templateDocumentVisibilityList
      x-ds-category: Templates
      x-ds-order: "180"
      x-ms-summary: "Document Visibility enables senders to control the visibility\
        \ of the documents in an envelope at the recipient level. For example, if\
        \ the parties associated with a legal proceeding should have access to different\
        \ documents, the Document Visibility feature enables you to keep all of the\
        \ documents in the same envelope and set view permissions for the documents\
        \ by recipient. This functionality is enabled for envelopes and templates.\
        \ It is not available for PowerForms.\n\n**Note**: Before you use Document\
        \ Visibility, you should be aware of the following information:\n\n- Document\
        \ Visibility must be enabled for your account by your DocuSign administrator.\
        \ \n- A document cannot be hidden from a recipient if the recipient has tabs\
        \ assigned to them on the document. \n- When the Document Visibility setting\
        \ hides a document from a recipient, the document also does not appear in\
        \ the recipient's list of envelopes, documents, or page images.\n- Carbon\
        \ Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can\
        \ always see all of the documents associated with the envelope or template.\n\
        \nThe Document Visibility feature has multiple settings that specify the options\
        \ that senders have when sending documents. For more information, see [Use\
        \ Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility)."
    AccountPasswordRules:
      type: object
      properties:
        expirePassword:
          type: string
          description: When set to **true**, passwords expire. The default value is
            `false`.
        expirePasswordDays:
          type: string
          description: The number of days before passwords expire. To use this property,
            the `expirePassword` property must be set to **true**.
        expirePasswordDaysMetadata:
          $ref: '#/components/schemas/accountPasswordExpirePasswordDays'
        lockoutDurationMinutes:
          type: string
          description: The number of minutes a user is locked out of the system after
            three (?) failed login attempts. The default value is `2`.
        lockoutDurationMinutesMetadata:
          $ref: '#/components/schemas/accountPasswordLockoutDurationMinutes'
        lockoutDurationType:
          type: string
          description: |-
            The interval associated with the user lockout after a failed login attempt.

            Possible values are: (?????)

            - `minutes` (default)
            - `hours`
            - `days`
        lockoutDurationTypeMetadata:
          $ref: '#/components/schemas/accountPasswordLockoutDurationType'
        minimumPasswordAgeDays:
          type: string
          description: The minimum number of days after a password is set before it
            can be changed. This value can be `0` or more days. The default value
            is `0`.
        minimumPasswordAgeDaysMetadata:
          $ref: '#/components/schemas/accountPasswordMinimumPasswordAgeDays'
        minimumPasswordLength:
          type: string
          description: The minimum number of characters in the password. This value
            must be a number between `6` and `15`. The default value is `6`.
        minimumPasswordLengthMetadata:
          $ref: '#/components/schemas/accountMinimumPasswordLength'
        passwordIncludeDigit:
          type: string
          description: When set to **true**, passwords must include a digit. The default
            value is `false`.
        passwordIncludeDigitOrSpecialCharacter:
          type: string
          description: |-
            When set to **true**, passwords must include either a digit or a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
        passwordIncludeLowerCase:
          type: string
          description: When set to **true**, passwords must include a lowercase letter.
            The default value is `false`.
        passwordIncludeSpecialCharacter:
          type: string
          description: |-
            When set to **true**, passwords must include a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
        passwordIncludeUpperCase:
          type: string
          description: When set to **true**, passwords must include an uppercase letter.
            The default value is `false`.
        passwordStrengthType:
          type: string
          description: |-
            The type of password strength. Possible values are:

            - `basic`: The minimum password length is 6 characters with no other password requirements.
            - `medium`: The minimum password length is 7 characters. Passwords must also have one uppercase letter, one lowercase letter, and one number or special character.
            - `strong`: The minimum password length is 9 characters. Passwords must also have one uppercase letter, one lowercase letter, one number, and one special character.
            - `custom`: This option enables you to customize password requirements, including the following properties:

               - `minimumPasswordLength`
               - `minimumPasswordAgeDays`
               - `passwordIncludeDigit`
               - `passwordIncludeDigitOrSpecialCharacter`
               - `passwordIncludeLowerCase`
               - `passwordIncludeSpecialCharacter`
               - `passwordIncludeUpperCase`
               - `questionsRequired`
        passwordStrengthTypeMetadata:
          $ref: '#/components/schemas/accountPasswordStrengthType'
        questionsRequired:
          type: string
          description: The number of security questions required to confirm the user’s
            identity before the user can reset their password. The default value is
            `0`.
        questionsRequiredMetadata:
          $ref: '#/components/schemas/accountPasswordQuestionsRequired'
      description: Contains details about the password rules for an account.
      x-ds-definition-name: accountPasswordRules
      x-ds-category: Accounts
      x-ds-order: "190"
      x-ms-summary: Contains details about the password rules for an account.
    AccountWatermarks:
      type: object
      properties:
        displayAngle:
          type: string
          description: ""
        enabled:
          type: string
          description: ""
        font:
          type: string
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
        fontColor:
          type: string
          description: "The font color to use for the information in the tab. Possible\
            \ values are: \n\n- Black\n- BrightBlue\n- BrightRed\n- DarkGreen\n- DarkRed\n\
            - Gold\n- Green\n- NavyBlue\n- Purple\n- White\n"
        fontSize:
          type: string
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
        id:
          type: string
          description: A unique ID for the Salesforce object.
        imageBase64:
          type: string
          description: ""
        transparency:
          type: string
          description: ""
        watermarkText:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: watermark
      x-ds-category: Accounts
      x-ds-order: "200"
      x-ms-summary: ""
    PaymentGatewayAccounts:
      type: object
      properties:
        allowCustomMetadata:
          type: boolean
          description: "When **true**, the sender can pass custom metadata about the\
            \ payment to the payment gateway. You pass in this metadata on an EnvelopeRecipientTab,\
            \ in the `customMetadata` property under `paymentDetails`. \n\nFor example,\
            \ this property is set to **true** for the Authorize.net gateway by default.\
            \ As a result, the extra metadata that you send displays for the Authorize.net\
            \ transaction in the merchant gateway portal under **Description**.\n\n\
            **Note**: This property is read only and cannot be changed."
        config:
          $ref: '#/components/schemas/paymentGatewayAccountSetting'
        displayName:
          type: string
          description: |-
            A user-defined name for a connected gateway account.

            This name is used in the Admin panel in the list of connected accounts and in Tagger in the payment gateway selector.

            The human-readable version of `paymentGatewayAccountId`.
        isEnabled:
          type: string
          description: When **true**, the payment gateway account is enabled.
        isLegacy:
          type: string
          description: Reserved for DocuSign.
        lastModified:
          type: string
          description: The UTC DateTime that the payment gateway account was last
            updated.
        paymentGateway:
          type: string
          description: |-
            Payment gateway used by the connected gateway account.
            This is the name used by the API.
            For a human-readable version use `paymentGatewayDisplayName`.

            Possible values are:

            * `Stripe`
            * `Braintree`
            * `AuthorizeDotNet`
        paymentGatewayAccountId:
          type: string
          description: A GUID that identifies the payment gateway account. For a human-readable
            version use `displayName`.
        paymentGatewayDisplayName:
          type: string
          description: |-
            The display name of the payment gateway that the connected gateway account uses.
            This is the human-readable version of `paymentGateway`.

            Possible values are:

            * Stripe
            * Braintree
            * Authorize.Net
        payPalLegacySettings:
          $ref: '#/components/schemas/payPalLegacySettings'
        supportedCurrencies:
          type: array
          description: "A list of ISO 4217 currency codes for the currencies that\
            \ the payment gateway account supports.\n\nExamples: \n\n- `USD`\n- `CAD`\n\
            - `EUR`\n- `HKD`"
          items:
            type: string
        supportedPaymentMethods:
          type: array
          description: An array of paymentMethodWithOptions objects that specify the
            payment methods that are available for the gateway.
          items:
            type: string
        supportedPaymentMethodsWithOptions:
          type: array
          description: An array of `paymentMethodWithOptions` objects that specify
            the payment methods that are available for the gateway, as well as the
            payment options that are compatible with each payment method.
          items:
            $ref: '#/components/schemas/paymentMethodWithOptions'
        zeroDecimalCurrencies:
          type: array
          description: ""
          items:
            type: string
      description: Information about a connected payment gateway account.
      x-ds-definition-name: paymentGatewayAccount
      x-ds-category: Payments
      x-ds-order: "210"
      x-ms-summary: Information about a connected payment gateway account.
    NotaryJournals:
      type: object
      properties:
        createdDate:
          type: string
          description: The creation date of the account in UTC timedate format.
        documentName:
          type: string
          description: ""
        jurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        notaryJournalId:
          type: string
          description: ""
        notaryJournalMetaData:
          $ref: '#/components/schemas/notaryJournalMetaData'
        signerName:
          type: string
          description: |
            The in-person signer's full legal name.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
      description: ""
      x-ds-definition-name: notaryJournal
      x-ds-category: Envelopes
      x-ds-order: "220"
      x-ms-summary: ""
    IdentityVerifications:
      type: object
      properties:
        identityVerification:
          type: array
          description: " \n"
          items:
            $ref: '#/components/schemas/accountIdentityVerificationWorkflow'
      description: Identity Verification enables you to verify a signer's identity
        before they can access a document. The `IdentityVerifications` resource provides
        a method that enables you to list the workflows that are available to an account.
      x-ds-definition-name: accountIdentityVerificationResponse
      x-ds-category: Accounts
      x-ds-order: "30"
      x-ms-summary: Identity Verification enables you to verify a signer's identity
        before they can access a document. The `IdentityVerifications` resource provides
        a method that enables you to list the workflows that are available to an account.
    EnvelopeDocumentHtmlDefinitions:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            $ref: '#/components/schemas/documentHtmlDefinitionOriginal'
      description: ""
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-category: Envelopes
      x-ds-order: "220"
      x-ms-summary: ""
    DocumentResponsiveHtmlPreview:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            type: string
      description: This resource is used to create a responsive preview of a specific
        document.
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-category: Envelopes
      x-ds-order: "230"
      x-ms-summary: This resource is used to create a responsive preview of a specific
        document.
    EnvelopeHtmlDefinitions:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            $ref: '#/components/schemas/documentHtmlDefinitionOriginal'
      description: ""
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-category: Envelopes
      x-ds-order: "240"
      x-ms-summary: ""
    ResponsiveHtmlPreview:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            type: string
      description: This resource is used to create a responsive preview of all of
        the documents in an envelope.
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-category: Envelopes
      x-ds-order: "250"
      x-ms-summary: This resource is used to create a responsive preview of all of
        the documents in an envelope.
    TemplateDocumentResponsiveHtmlPreview:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            type: string
      description: This resource is used to create a responsive preview of a specific
        template document.
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-category: Templates
      x-ds-order: "280"
      x-ms-summary: This resource is used to create a responsive preview of a specific
        template document.
    TemplateResponsiveHtmlPreview:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            type: string
      description: This resource is used to create a responsive preview of all of
        the documents associated with a template.
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-category: Templates
      x-ds-order: "290"
      x-ms-summary: This resource is used to create a responsive preview of all of
        the documents associated with a template.
    TemplateDocumentHtmlDefinitions:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            $ref: '#/components/schemas/documentHtmlDefinitionOriginal'
      description: ""
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-category: Templates
      x-ds-order: "300"
      x-ms-summary: ""
    TemplateHtmlDefinitions:
      type: object
      properties:
        htmlDefinitions:
          type: array
          description: Holds the properties that define how to generate the responsive-formatted
            HTML for the document.
          items:
            $ref: '#/components/schemas/documentHtmlDefinitionOriginal'
      description: ""
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-category: Templates
      x-ds-order: "310"
      x-ms-summary: ""
    EnvelopeTransferRules:
      type: object
      properties:
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        envelopeTransferRules:
          type: array
          description: Contains information about a specific envelope transfer rule.
          items:
            $ref: '#/components/schemas/envelopeTransferRule'
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: This resource provides methods that enable account administrators
        to create and manage envelope transfer rules.
      x-ds-definition-name: envelopeTransferRuleInformation
      x-ds-category: Envelopes
      x-ds-order: "120"
      x-ms-summary: This resource provides methods that enable account administrators
        to create and manage envelope transfer rules.
    NotificationDefaults:
      type: object
      properties:
        apiEmailNotifications:
          $ref: '#/components/schemas/notificationDefaultSettings'
        emailNotifications:
          $ref: '#/components/schemas/notificationDefaultSettings'
      description: The `NotificationDefaults` resource provides methods that enable
        you to manage the default notifications for envelopes.
      x-ds-definition-name: notificationDefaults
      x-ds-category: Accounts
      x-ds-order: "120"
      x-ms-summary: The `NotificationDefaults` resource provides methods that enable
        you to manage the default notifications for envelopes.
    BulkSend:
      type: object
      properties:
        bulkCopies:
          type: array
          description: An array of `bulkCopy` objects. Each object represents an instance
            or copy of an envelope and contains details such as the recipient, custom
            fields, tabs, and other information.
          items:
            $ref: '#/components/schemas/bulkSendingCopy'
        listId:
          type: string
          description: The GUID of the bulk send list. This property is created after
            you post a new bulk send list.
        name:
          type: string
          description: The name of the bulk send list.
      description: "The bulk send list resource provides methods that enable you to\
        \ create and manage bulk sending lists, which you can use to send multiple\
        \ copies of an envelope in a single batch. \n\n**Note**: The Bulk Send feature\
        \ is only available on Business Pro plans that are using EasySign."
      x-ds-definition-name: bulkSendingList
      x-ds-category: BulkEnvelopes
      x-ds-order: "120"
      x-ms-summary: "The bulk send list resource provides methods that enable you\
        \ to create and manage bulk sending lists, which you can use to send multiple\
        \ copies of an envelope in a single batch. \n\n**Note**: The Bulk Send feature\
        \ is only available on Business Pro plans that are using EasySign."
    BCCEmailArchive:
      type: object
      properties:
        bccEmailArchiveHistory:
          type: array
          description: A list of changes to the BCC email archive configuration.
          items:
            $ref: '#/components/schemas/bccEmailArchiveHistory'
        endPosition:
          type: string
          description: 'The last index position in the result set. '
        nextUri:
          type: string
          description: 'The URI for the next chunk of records based on the search
            request. It is `null` if this is the last set of results for the search. '
        previousUri:
          type: string
          description: 'The URI for the prior chunk of records based on the search
            request. It is `null` if this is the first set of results for the search. '
        resultSetSize:
          type: string
          description: The number of results in this response. Because you can filter
            which entries are included in the response, this value is always less
            than or equal to the `totalSetSize`.
        startPosition:
          type: string
          description: The starting index position of the current result set.
        totalSetSize:
          type: string
          description: The total number of items in the result set. This value is
            always greater than or equal to the value of `resultSetSize`.
      description: |
        The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
      x-ds-definition-name: bccEmailArchiveHistoryList
      x-ds-category: EmailArchive
      x-ds-order: "120"
      x-ms-summary: |
        The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
    TabsBlob:
      type: object
      properties:
        allowTabOrder:
          type: string
          description: |-
            When set to **true**, account users can set a tab order for the signing process.

            **Note**: Only Admin users can change this setting.
        allowTabOrderMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        approveDeclineTabsEnabled:
          type: string
          description: When **true**, approve and decline tabs are enabled.
        approveDeclineTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        calculatedFieldsEnabled:
          type: string
          description: When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields)
            are enabled for tabs.
        calculatedFieldsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        checkboxTabsEnabled:
          type: string
          description: When **true**, checkbox tabs are enabled.
        checkBoxTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dataFieldRegexEnabled:
          type: string
          description: When **true**, regular expressions are enabled for tabs that
            contain data fields.
        dataFieldRegexMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        dataFieldSizeEnabled:
          type: string
          description: When **true**, setting character limits for input fields is
            enabled.
        dataFieldSizeMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        drawTabsEnabled:
          type: string
          description: ""
        drawTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        firstLastEmailTabsEnabled:
          type: string
          description: Reserved for DocuSign.
        firstLastEmailTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        listTabsEnabled:
          type: string
          description: When **true**, list tabs are enabled.
        listTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        noteTabsEnabled:
          type: string
          description: When **true**, note tabs are enabled.
        noteTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        prefillTabsEnabled:
          type: string
          description: ""
        prefillTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        radioTabsEnabled:
          type: string
          description: When **true**, radio button tabs are enabled.
        radioTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        savingCustomTabsEnabled:
          type: string
          description: When **true**, saving custom tabs is enabled.
        savingCustomTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        senderToChangeTabAssignmentsEnabled:
          type: string
          description: Reserved for DocuSign.
        senderToChangeTabAssignmentsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        sharedCustomTabsEnabled:
          type: string
          description: When **true**, shared custom tabs are enabled.
        sharedCustomTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabDataLabelEnabled:
          type: string
          description: |
            When set to **true**, [data
            labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.

            **Note**: Only Admin users can change this setting.
        tabDataLabelMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabLocationEnabled:
          type: string
          description: Reserved for DocuSign.
        tabLocationMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabLockingEnabled:
          type: string
          description: |
            When set to **true**, tab locking is enabled.

            **Note**: Only Admin users can change this setting.
        tabLockingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabScaleEnabled:
          type: string
          description: Reserved for DocuSign.
        tabScaleMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        tabTextFormattingEnabled:
          type: string
          description: |
            When set to **true**, text formatting (such as font type, font size,
            font color, bold, italic, and underline) is enabled for tabs that
            support formatting.

            **Note**: Only Admin users can change this setting.
        tabTextFormattingMetadata:
          $ref: '#/components/schemas/settingsMetadata'
        textTabsEnabled:
          type: string
          description: When **true**, text tabs are enabled.
        textTabsMetadata:
          $ref: '#/components/schemas/settingsMetadata'
      description: ""
      x-ds-definition-name: tabAccountSettings
      x-ds-category: Envelopes
      x-ds-order: "120"
      x-ms-summary: ""
    Comments:
      type: object
      properties:
        envelopeId:
          type: string
          description: The envelope ID of the envelope status that failed to post.
        hmac:
          type: string
          description: Reserved for DocuSign.
        id:
          type: string
          description: A unique ID for the Salesforce object.
        mentions:
          type: array
          description: An array of userIds that are mentioned directly in the body
            of a comment.
          items:
            type: string
        read:
          type: boolean
          description: Indicates if the comment has been read by the target recipient
            of the comment.
        sentByEmail:
          type: string
          description: ""
        sentByFullName:
          type: string
          description: ""
        sentByImageId:
          type: string
          description: Reserved for DocuSign.
        sentByInitials:
          type: string
          description: ""
        sentByRecipientId:
          type: string
          description: ""
        sentByUserId:
          type: string
          description: ""
        signingGroupId:
          type: string
          description: When set to **true** and the feature is enabled in the sender's
            account, the signing recipient is required to draw signatures and initials
            at each signature/initial tab ( instead of adopting a signature/initial
            style or only drawing a signature/initial once).
        signingGroupName:
          type: string
          description: "Optional. The name of the signing group. \n\nMaximum Length:\
            \ 100 characters. "
        subject:
          type: string
          description: ""
        tabId:
          type: string
          description: The unique identifier for the tab.
        text:
          type: string
          description: 'Specifies the text that is shown in the dropdown list. '
        threadId:
          type: string
          description: The unique identifier for the comment thread.
        threadOriginatorId:
          type: string
          description: The userId of the user who created the thread.
        timestamp:
          type: string
          description: ""
        timeStampFormatted:
          type: string
          description: ""
        visibleTo:
          type: array
          description: ""
          items:
            type: string
      description: Details about envelope comments.
      x-ds-definition-name: comment
      x-ds-category: Envelopes
      x-ds-order: "160"
      x-ms-summary: Details about envelope comments.
    FavoriteTemplates:
      type: object
      properties:
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        favoriteTemplates:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/favoriteTemplatesContentItem'
        templatesUpdatedCount:
          type: integer
          description: ""
          format: int32
      description: ""
      x-ds-definition-name: favoriteTemplatesInfo
      x-ds-category: Accounts
      x-ds-order: "270"
      x-ms-summary: ""
    Notary:
      type: object
      properties:
        createdDate:
          type: string
          description: The creation date of the account in UTC timedate format.
        enabled:
          type: string
          description: ""
        searchable:
          type: string
          description: ""
        userInfo:
          $ref: '#/components/schemas/userInformation'
      description: |
        Use DocuSign eNotary to notarize documents digitally.
        Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
        to see which jurisdictions are supported.
      x-ds-definition-name: notary
      x-ds-category: Notary
      x-ds-order: "280"
      x-ms-summary: |
        Use DocuSign eNotary to notarize documents digitally.
        Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
        to see which jurisdictions are supported.
    NotaryJurisdiction:
      type: object
      properties:
        commissionExpiration:
          type: string
          description: ""
        commissionId:
          type: string
          description: ""
        county:
          type: string
          description: ""
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        jurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        registeredName:
          type: string
          description: ""
        sealType:
          type: string
          description: ""
      description: Creating, updating, and deleting notary jurisdiction objects.
      x-ds-definition-name: notaryJurisdiction
      x-ds-category: Notary
      x-ds-order: "290"
      x-ms-summary: Creating, updating, and deleting notary jurisdiction objects.
    EnvelopeWorkflowDefinition:
      type: object
      properties:
        currentWorkflowStepId:
          type: string
          description: ""
        workflowStatus:
          type: string
          description: ""
        workflowSteps:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/workflowStep'
      description: ""
      x-ds-definition-name: workflow
      x-ds-category: Envelopes
      x-ds-order: "300"
      x-ms-summary: ""
    Reports:
      type: object
      properties:
        reports:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/reportInProductListItem'
      description: ""
      x-ds-definition-name: reportInProductList
      x-ds-category: Accounts
      x-ds-order: "301"
      x-ms-summary: ""
    AccountSignatures:
      type: object
      properties:
        adoptedDateTime:
          type: string
          description: The UTC date and time when the user adopted the signature.
        createdDateTime:
          type: string
          description: The UTC DateTime when the item was created.
        customField:
          type: string
          description: ""
        dateStampProperties:
          $ref: '#/components/schemas/dateStampProperties'
        disallowUserResizeStamp:
          type: string
          description: When set to **true**, users may not resize the stamp.
        errorDetails:
          $ref: '#/components/schemas/errorDetails'
        externalID:
          type: string
          description: Optionally specify an external identifier for the user's signature.
        imageBase64:
          type: string
          description: ""
        imageType:
          type: string
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
        initials150ImageId:
          type: string
          description: The ID of the user's initials image.
        initialsImageUri:
          type: string
          description: The URI for retrieving the image of the user's initials.
        isDefault:
          type: string
          description: Boolean that specifies whether the signature is the default
            signature for the user.
        lastModifiedDateTime:
          type: string
          description: The date and time that the item was last modified.
        nrdsId:
          type: string
          description: The National Association of Realtors (NAR) membership ID for
            a user who is a realtor.
        nrdsLastName:
          type: string
          description: The realtor's last name.
        nrdsStatus:
          type: string
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
        phoneticName:
          type: string
          description: The phonetic spelling of the `signatureName`.
        signature150ImageId:
          type: string
          description: The ID of the user's signature image.
        signatureFont:
          type: string
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
        signatureGroups:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/signatureGroup'
        signatureId:
          type: string
          description: Specifies the signature ID associated with the signature name.
            You can use the signature ID in the URI in place of the signature name,
            and the value stored in the `signatureName` property in the body is used.
            This allows the use of special characters (such as "&", "<", ">") in a
            the signature name. Note that with each update to signatures, the returned
            signature ID might change, so the caller will need to trigger off the
            signature name to get the new signature ID.
        signatureImageUri:
          type: string
          description: An endpoint URI that you can use to retrieve the user's signature
            image.
        signatureInitials:
          type: string
          description: Specifies the user's signature in initials format.
        signatureName:
          type: string
          description: Specifies the user's signature name.
        signatureRights:
          type: string
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
        signatureType:
          type: string
          description: Specifies the type of signature.
        signatureUsers:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/signatureUser'
        stampFormat:
          type: string
          description: "The format of a stamp. Valid values are:\n\n- `NameHanko`:\
            \ The stamp represents only the signer's name.\n- `NameDateHanko`: The\
            \ stamp represents the signer's name and the date. "
        stampImageUri:
          type: string
          description: The URI for retrieving the image of the user's stamp.
        stampSizeMM:
          type: string
          description: The physical height of the stamp image (in millimeters) that
            the stamp vendor recommends for displaying the image in PDF documents.
        stampType:
          type: string
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
        status:
          type: string
          description: "Indicates the envelope status. Valid values are:\n\n* sent\
            \ - The envelope is sent to the recipients. \n* created - The envelope\
            \ is saved as a draft and can be modified and sent later."
      description: ""
      x-ds-definition-name: accountSignature
      x-ds-category: Accounts
      x-ds-order: "40"
      x-ms-summary: ""
    ApplianceInfo:
      type: object
      description: ""
      x-ds-definition-name: displayApplianceInfo
      x-ds-category: Envelopes
      x-ds-order: "50"
      x-ms-summary: ""
    ConnectSecret:
      type: object
      properties:
        failures:
          type: array
          description: A list of Connect failure logs.
          items:
            $ref: '#/components/schemas/connectLog'
        logs:
          type: array
          description: A list of Connect general logs.
          items:
            $ref: '#/components/schemas/connectLog'
        totalRecords:
          type: string
          description: The count of records in the log list.
        type:
          type: string
          description: ""
      description: ""
      x-ds-definition-name: connectLogs
      x-ds-category: Connect
      x-ds-order: "50"
      x-ms-summary: ""
x-ds-allow-editing: false
x-ds-categories:
  - name: Envelopes
    summary: This section shows you how to create and send envelopes.
    description: |
      The eSignature API Envelope category includes the resources and methods for sending and managing envelopes and envelope data.

      Envelopes are the key objects in the DocuSign platform. As a result, they are complex data structures with few required fields. See the [How-to guides](https://developers.docusign.com/docs/esign-rest-api/how-to/) for examples and solutions.

      To learn more about envelopes, see [Envelopes](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/).
  - name: Connect
    summary: "DocuSign Connect is the DocuSign platform notification service. The service\
    \ uses webhooks to proactively notify your application when an event occurs that\
    \ your application wants to know about. DocuSign recommends that all applications\
    \ use Connect instead of polling the DocuSign Signature Service. This section\
    \ provides information about Connect configuration and logging. \n\nFor more information\
    \ about Connect, see [DocuSign Connect](https://developers.docusign.com/esign-rest-api/guides/connect)\
    \ and [Custom Connect Configuration](https://support.docusign.com/guides/ndse-admin-guide-custom-connect-configuration-htm)."
    description: "The Connect service enables your application to be called via HTTPS\
    \ when an event of interest occurs.\n\nUse the Connect service to \"end the polling\
    \ madness.\" With Connect, there is no need for your application to poll DocuSign\
    \ every 15 minutes to learn the latest about your envelopes.\n\nInstead, you register\
    \ your interest in one or more types of envelope or recipient events. Then, when\
    \ an interesting event occurs, the DocuSign platform will contact your application\
    \ with the event's details and data. You can register interest in envelopes sent\
    \ by particular users in your account, or for envelopes sent by any user.\n\n\
    Connect can empower your organization to manage document actions as they occur,\
    \ and allows you to track their changes within your own systems. Upon completion,\
    \ envelope information, including document content, can be stored in your own\
    \ databases or CMS systems, and these events can be triggered via webhooks delivering\
    \ messages to your application.\n\n## Incoming Connect Calls\n\nTo use the Connect\
    \ service, your application needs to provide an HTTPS URL that can be called from\
    \ the public Internet. If your application runs on a server behind your organization's\
    \ firewall, then you will need to create a \"pinhole\" in the firewall to allow\
    \ the incoming Connect calls from DocuSign to reach your application. You can\
    \ also use other techniques such as proxy servers and DMZ networking for receiving\
    \ the incoming calls.\n\nConnect delivers events over HTTP requests in the form\
    \ of XML. DocuSign sends an XML object to the secure URL entered on the configuration\
    \ page for every event and user selected. \n\nIf your application is not configured\
    \ to accept post messages, DocuSign will NOT return an additional post error response\
    \ to your listener application. If you've enabled logging on your configuration,\
    \ it will be logged in Admin under the configuration failure log.\n\n## Per-envelope\
    \ Connect Configuration\nInstead of registering a general Connect configuration\
    \ and listener, an individual envelope can have its own Connect configuration.\
    \ See the `eventNotification` field for envelopes.\n\n## Categories\nUse the Connect\
    \ category for:\n\n* Programmatically creating Connect configurations. Connect\
    \ configurations can be created manually by using the DocuSign web service, or\
    \ programmatically via the API. Configurations created via the API can be seen\
    \ and updated from the web service.\n* Retrieving and managing the event log for\
    \ your Connect configurations. \n* Requesting that an event be re-published to\
    \ the listener."
  - name: Templates
    summary: Template creation and management
    description: |-
      Use the Templates category to manage your account's templates.

      This section shows you how to perform the following tasks:

      * Create, list, get, update, and delete templates.
      * Manage the notification and group sharing settings for templates.
      * Fetch and rotate pages from a document used by a template.

      You can create templates either programmatically or through the DocuSign web interface and then used by your application.
  - name: SigningGroups
    summary: Send a signing request to a group of potential signers.
    description: |-
      Use the Signing Group category to manage signing groups that allow anyone in the group to sign a document. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.

      This category shows account administrators how to create a signing group and manage the users in the group.

      **Note**: To create and manage signing groups, you must be an account administrator.

      For more information about this topic, see [Signing Groups](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
  - name: Folders
    summary: Folders for completed envelopes
    description: "Use the Folders category to manage envelopes in your folders. \n\n\
    You can list the folder contents and move envelopes between folders."
  - name: CustomTabs
    summary: Custom tabs
    description: "Custom Tabs enable accounts to have one or more pre-configured (custom)\
    \ tabs. Custom tabs save time when users are tagging documents since the users\
    \ don't have to manually set the tabs' parameters.\n\nThis category enables custom\
    \ tabs to be managed programmatically, including creation, deletion, etc. \n"
  - name: CloudStorage
    summary: This section shows you how to manage your cloud storage providers and users.
    description: |-
      Use the Cloud Storage category to list the user's cloud storage document contents.

      It is also used to manage the user's authentication/accounts with cloud storage service providers.
  - name: Users
    summary: User management
    description: |-
      Use the Users category to manage the users in your accounts.

      You can:

      * Set custom user settings.
      * Manage a users profile.
      * Add delete users.
      * Add and delete the intials and signature images for a user.
  - name: UserGroups
    summary: Group users for common permissions and branding
    description: |-
      Use the User Groups category to manage your permissions groups.

      You can:

      * Create and delete groups.
      * Add users to, and delete users from, your groups.
      * Manage the brand information associated with a group.
  - name: BulkEnvelopes
    summary: Bulk envelopes
    description: Use the BulkEnvelopes category to manage the sending of envelopes to
      multiple recipients.
  - name: Accounts
    summary: Account management
    description: |+
      Use the Account category for various account management tasks including:

      * Programmatically creating and deleting accounts.
      * Getting information about an account and its capabilities.
      * Branding the account with custom colors, message text, and more.
      * Account charges.

      The Accounts category also includes end points for listing the recipient names associated with an email address that was used by the account. For example, a single email address is often shared by multiple members of a family.


  - name: Billing
    summary: Invoices
    description: |-
      Use the Billing category to manage the following billing related tasks:

      * Retrieve and update billing plan information.
      * Retrieve invoices.
      * Retrieve and update payment information.
  - name: Diagnostics
    summary: Diagnostics and request logging
    description: |-
      The Diagnostics category provides miscellaneous end points.

      They include:
      * Requesting and managing the API call-logging feature. (Perfect for debugging your app!)
      * Getting information on the API's resources and versions.
  - name: PowerForms
    summary: The PowerForms category provides methods that enable you to create and
      manage fillable forms.
    description: The PowerForms category enables you to create and manage PowerForms
      that you can use for self service and email forms.
  - name: Workspaces
    summary: A DocuSign workspace is a collaboration area for sharing files and data.
    description: "A workspace is a collaborative space for sharing documents and managing\
    \ workflows. A workspace has a single owner who must be a DocuSign user. The owner\
    \ can invite others to the workspace as collaborators. Individuals who are not\
    \ DocuSign users must create a DocuSign account to join a workspace as a collaborator.\n\
    \ \nYou can create an envelope directly from a workspace.\n\nWorkspaces store\
    \ the following information:\n\n- **Files**: Files uploaded to a workspace for\
    \ storage or reuse.\n- **Documents**: A document is a component of a transaction,\
    \ template, or workspace. When a file is added to a transaction, template, or\
    \ workspace, it is copied as a document. Each document in a workspace has a single\
    \ owner.\n- **Templates**: A set of documents that you can use to create a transaction\
    \ or a workspace.\n- **Transactions**: A transaction is a series of workflow events\
    \ related to one or more documents. These events route the documents to one or\
    \ more individuals for the purposes of doing business. Each transaction has a\
    \ single owner (the sender).\n\n**Note**: Documents in a template are not individually\
    \ listed as files."
  - name: Payments
    summary: Manage Payments
    description: This category includes resources for managing payment gateways. Payment
      information is added to envelopes via methods in the Envelopes category.
  - name: EmailArchive
    summary: This section shows you how to set and manage the BCC email addresses that
      you want to use to archive the emails that DocSign sends.
    description: |-
      Email archives enable DocuSign partners and other multi-account customers to easily archive emails sent through DocuSign. The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.

      For more information, see [Email Archive Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-email-archive-configuration).

      **Note**: This feature is only available for certain account plans and must be enabled by DocuSign.
  - name: Notary
    summary: |
      DocuSign eNotary makes the notarization process fully digital
      for senders, signers, and notaries.
      It enables a notary public to act as an in-person witness
      to electronic signing of documents.
    description: |
      DocuSign eNotary makes the notarization process fully digital
      for senders, signers, and notaries.
      It enables a notary public to act as an in-person witness
      to electronic signing of documents.

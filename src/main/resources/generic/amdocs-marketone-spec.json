{
  "openapi": "3.0.1",
  "info": {
    "title": "MarketONE APIs",
    "license": {
      "name": "Amdocs Inc.",
      "url": "http://www.amdocs.com"
    },
    "version": "2021.02.Released"
  },
  "servers": [
    {
      "url": "https://int-prodtest.m1amdocs.io/",
      "description": "Sandbox server (uses test data)"
    },
    {
      "url": "https://int.m1amdocs.com/",
      "description": "Production server (uses live data)"
    }
  ],
  "paths": {
    "/submgmt/v2/subscriptions": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Get Subscriptions",
        "description": "Retrieves a list of Subscriptions. This can be used to get a cross-account list of subscriptions, or for a given account using the “account” query parameter.",
        "operationId": "getSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Limit the subscription list to a specified account id or vid - if specified, all Subscriptions associated with that Account.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_children",
            "in": "query",
            "description": "Indicates whether or not to return any existing child accounts’ subscriptions for a given returned Subscription/account combination.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Limit the Subscription list to those associated with a specific email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "query",
            "description": "Limit the Subscription list to those that have a specified product id or vid as a SubscriptionItem.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "description": "Integer count of the number of items in the returned list."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Subscription"
                      }
                    },
                    "url": {
                      "type": "string",
                      "description": "The query string provided in the request"
                    },
                    "next": {
                      "type": "string",
                      "description": "The route (partial URL) to the next Subscription object (string to select the “next”); included id should match that of the last object returned here"
                    },
                    "previous": {
                      "type": "string",
                      "description": "The route (partial URL) to the previous Subscriptions object (string to select the “previous”); included id should match that of the first object returned here"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Create Subscription",
        "description": "Create Subscription",
        "operationId": "createSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "dryrun",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Indicates whether to commit changes or return results without execution."
          }
        ],
        "requestBody": {
          "description": "A Request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "invalid-plm-product",
                        "invalid-partner-agreement",
                        "invalid-request"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "validationErrors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    },
                    "debugTrace": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The Error object contains information about the error. invalid-plm-product - The PLM product referenced by the product defined in the SLM cannot be found. invalid-partner-agreement - Unable to find agreement for the partner product referenced by the SLM product  in the create subscription operation. invalid-request - generic error code used for other validation errors."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/submgmt/v2/subscriptions/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Get Subscription",
        "description": "Retrieves a specific Subscription.",
        "operationId": "fetch",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Subscription to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Update Subscription",
        "description": "Update, amend, or modify a Subscription. See MarketONE Knowledgebase regarding various modify scenarios and additional approaches. \n\nMost common modifications are **Billing Plan Change**, **Add** or **Remove** a Subscription Item. \n\n**Replace an existing Subscription Item** with a new one. This request supports the same arguments as 'create’ (a full Subscription object) excepting the behavior of the ids; providing an id or vid in the URL indicates to MarketONE that this is an update, not a create – as such, id and vid cannot be updated. Certain changes will modify the subscribed service:\n\n**Billing Plan Change**: Providing a new Billing Plan will change the billing plan/schedule for the subscription as of the effective_date. Replace an existing/active Item with a new Item: Include a new `SubscriptionItem` populating the “replaces” parameter with the id of the existing item being replaced. Add a new Item: Include a new `SubscriptionItem` (leaving undefined the “replaced_by” and “replaces” parameters). \n\n**Remove an existing Item**: Include a new but empty/undefined `SubscriptionItem` populating **ONLY** the “replaces” parameter with the id of the existing item being removed. All changes will take effect as of the effective_date provided; Proration calculations, when required, will use the period between the last scheduled billing and the effective_date (calculated to whole days).\n",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Subscription to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bill_prorated_period",
            "in": "query",
            "description": "Indicates whether to prorate for unused service portions.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "description": "Billing date at which changes take effect; today or next_billing",
            "schema": {
              "type": "string",
              "default": "today"
            }
          },
          {
            "name": "new_billing_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Indicates whether to commit changes or return results without execution",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "A Request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription_Update_Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/submgmt/v2/subscriptions/{id}/actions/cancel": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Cancel Subscription",
        "description": "Cancel a subscription, with options to select immediate disentitlement versus registering the cancel now to take affect at the end of the current period; to select whether any pre-paid services should get a prorated refund; and to select whether or not an existing minimum commitment should be honored. The reason for the cancellation can also be tracked using Cancel Reason codes (which can use pre-defined codes or codes you’ve designed yourself in advance).",
        "operationId": "cancelSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Subscription to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disentitle",
            "in": "query",
            "required": true,
            "description": "Indicates whether or not to dis-entitle immediately or leave service in effect until the end of the current billing period.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Indicates whether to ignore unsatisfied minimum commitments",
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "name": "settle",
            "in": "query",
            "required": true,
            "description": "Indicates whether to issue a prorated refund for any pre-paid unconsumed services and to rate unbilled usage.",
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "name": "send_cancellation_notice",
            "in": "query",
            "description": "Indicates whether to send a special cancellation notice to the customer",
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "$ref": "#/components/parameters/reasonCode"
          },
          {
            "name": "dryrun",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/submgmt/v2/subscriptions/{id}/actions/reactivate": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Reactivate Subscription",
        "description": "Reactivating a subscription makes a Subscription in Pending Cancel status Active again.",
        "operationId": "reactivateSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Subscription to reactivate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/intgw/v2/subscriptions": {
      "get": {
        "deprecated": true,
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Get Subscriptions",
        "description": "Retrieves a list of Subscriptions. This can be used to get a cross-account list of subscriptions, or for a given account using the “account” query parameter.",
        "operationId": "getSubscriptionDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Limit the subscription list to a specified account id or vid - if specified, all Subscriptions associated with that Account.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_children",
            "in": "query",
            "description": "Indicates whether or not to return any existing child accounts’ subscriptions for a given returned Subscription/account combination.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Limit the Subscription list to those associated with a specific email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "query",
            "description": "Limit the Subscription list to those that have a specified product id or vid as a SubscriptionItem.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "description": "Integer count of the number of items in the returned list."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Subscription"
                      }
                    },
                    "url": {
                      "type": "string",
                      "description": "The query string provided in the request"
                    },
                    "next": {
                      "type": "string",
                      "description": "The route (partial URL) to the next Subscription object (string to select the “next”); included id should match that of the last object returned here"
                    },
                    "previous": {
                      "type": "string",
                      "description": "The route (partial URL) to the previous Subscriptions object (string to select the “previous”); included id should match that of the first object returned here"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      },
      "post": {
        "deprecated": true,
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Create Subscription",
        "description": "Create Subscription",
        "operationId": "createSubscriptionDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "dryrun",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Indicates whether to commit changes or return results without execution."
          }
        ],
        "requestBody": {
          "description": "A Request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "invalid-plm-product",
                        "invalid-partner-agreement",
                        "invalid-request"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "validationErrors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    },
                    "debugTrace": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The Error object contains information about the error. invalid-plm-product - The PLM product referenced by the product defined in the SLM cannot be found. invalid-partner-agreement - Unable to find agreement for the partner product referenced by the SLM product  in the create subscription operation. invalid-request - generic error code used for other validation errors."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/intgw/v2/subscriptions/{id}": {
      "get": {
        "deprecated": true,
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Get Subscription",
        "description": "Retrieves a specific Subscription.",
        "operationId": "fetchDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Subscription to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      },
      "post": {
        "deprecated": true,
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Update Subscription",
        "description": "Update, amend, or modify a Subscription. See MarketONE Knowledgebase regarding various modify scenarios and additional approaches. \n\nMost common modifications are **Billing Plan Change**, **Add** or **Remove** a Subscription Item. \n\n**Replace an existing Subscription Item** with a new one. This request supports the same arguments as 'create’ (a full Subscription object) excepting the behavior of the ids; providing an id or vid in the URL indicates to MarketONE that this is an update, not a create – as such, id and vid cannot be updated. Certain changes will modify the subscribed service:\n\n**Billing Plan Change**: Providing a new Billing Plan will change the billing plan/schedule for the subscription as of the effective_date. Replace an existing/active Item with a new Item: Include a new `SubscriptionItem` populating the “replaces” parameter with the id of the existing item being replaced. Add a new Item: Include a new `SubscriptionItem` (leaving undefined the “replaced_by” and “replaces” parameters). \n\n**Remove an existing Item**: Include a new but empty/undefined `SubscriptionItem` populating **ONLY** the “replaces” parameter with the id of the existing item being removed. All changes will take effect as of the effective_date provided; Proration calculations, when required, will use the period between the last scheduled billing and the effective_date (calculated to whole days).\n",
        "operationId": "updateSubscriptionDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Subscription to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bill_prorated_period",
            "in": "query",
            "description": "Indicates whether to prorate for unused service portions.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "description": "Billing date at which changes take effect; today or next_billing",
            "schema": {
              "type": "string",
              "default": "today"
            }
          },
          {
            "name": "new_billing_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Indicates whether to commit changes or return results without execution",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "A Request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription_Update_Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/intgw/v2/subscriptions/{id}/actions/cancel": {
      "post": {
        "deprecated": true,
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Cancel Subscription",
        "description": "Cancel a subscription, with options to select immediate disentitlement versus registering the cancel now to take affect at the end of the current period; to select whether any pre-paid services should get a prorated refund; and to select whether or not an existing minimum commitment should be honored. The reason for the cancellation can also be tracked using Cancel Reason codes (which can use pre-defined codes or codes you’ve designed yourself in advance).",
        "operationId": "cancelSubscriptionDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Subscription to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disentitle",
            "in": "query",
            "required": true,
            "description": "Indicates whether or not to dis-entitle immediately or leave service in effect until the end of the current billing period.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Indicates whether to ignore unsatisfied minimum commitments",
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "name": "settle",
            "in": "query",
            "required": true,
            "description": "Indicates whether to issue a prorated refund for any pre-paid unconsumed services and to rate unbilled usage.",
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "name": "send_cancellation_notice",
            "in": "query",
            "description": "Indicates whether to send a special cancellation notice to the customer",
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "$ref": "#/components/parameters/reasonCode"
          },
          {
            "name": "dryrun",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/intgw/v2/subscriptions/{id}/actions/reactivate": {
      "post": {
        "deprecated": true,
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Reactivate Subscription",
        "description": "Reactivating a subscription makes a Subscription in Pending Cancel status Active again.",
        "operationId": "reactivateSubscriptionDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Subscription to reactivate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/slmgw/v1/accounts": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Create Account",
        "description": "Create Subscription",
        "operationId": "createAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "requestBody": {
          "description": "An account object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/slmgw/v1/accounts/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Get Account",
        "description": "Get a specific account.",
        "operationId": "getAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Account to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Update Account",
        "description": "Update a specific Account. Any parameters provided will be updated, leaving other parameters unchanged.",
        "operationId": "updateAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the vid of the Account to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "update_behavior",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "Validate",
                "CatchUp",
                "CatchUpOrValidate"
              ]
            }
          },
          {
            "name": "replace_on_all_subscriptions",
            "in": "query",
            "description": "If false, then the a Payment Method will not be applied to any subscriptions. If it is true, it will be applied to all.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignore_avs",
            "in": "query",
            "description": "Overrides any custom or default avs policy.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignore_cvn",
            "in": "query",
            "description": "Overrides any custom or default cvn policy.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "An account object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/partnersub/v3/partnerSubscription": {
      "get": {
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Retrieve Billing Partner Relationships",
        "description": "Retrieve all partner subscriptions for a CSP.",
        "operationId": "getPartnerSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Aggregator-Code"
          },
          {
            "$ref": "#/components/parameters/aggregatorCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscriptions"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorPS"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404ErrorAccount"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/partnersub/v3/partnerSubscription/{id}": {
      "get": {
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Retrieve Partner Subscription details for a specific id.",
        "description": "Retrieve Partner Subscription details for a specific id.",
        "operationId": "getPartnerSubscriptionDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id parameter is the partner subscription ID entity.",
            "required": true,
            "schema": {
              "maxLength": 36
            }
          },
          {
            "$ref": "#/components/parameters/X-Aggregator-Code"
          },
          {
            "$ref": "#/components/parameters/aggregatorCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscription"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorBasic"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404ErrorPS"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Update PartnerSubscription\"s Status",
        "description": "Update a specific PartnerSubscription\"s status. This API is only available for partners.",
        "operationId": "updatePartnerSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Aggregator-Code"
          },
          {
            "$ref": "#/components/parameters/aggregatorCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The partner subscription id (partnerSubscriptionId) value sent in \"AddSubscription\" callback payload which is M1 provided ID of the object to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A Request object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serviceStatus": {
                    "type": "string",
                    "description": "ACTIVE indicates that the service entitlement has been sucesfully provisioned, and a partner service user claimed it.",
                    "enum": [
                      "ACTIVE"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request; possible error codes returned: invalid-request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/409Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/501Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/partnersub/v2/partnerSubscription": {
      "post": {
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Create a Billing Partner Relationship",
        "description": "Initiates the creation of a Billing Partner Subscription relationship.",
        "operationId": "createPartnerSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Aggregator-Code"
          },
          {
            "$ref": "#/components/parameters/aggregatorCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "skipConfirmation",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Optional partner code to be used in case of custom implementations like Netflix and Google",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPartnerSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscriptionCreation"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorPS"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404ErrorAccount"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/partnersub/v2/partnerSubscription/{id}/reprovision": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Re-provision the Partner Subscription",
        "description": "Triggers a new partner provisioning sequence. This API is only available to CSPs. Calling this API will trigger the \"AddSubscription\" partner serivce callback.",
        "operationId": "reprovisionPartnerSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the partner subscription record to be reprovisioned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "description": "The content-type of response body.",
                "schema": {
                  "maxLength": 56,
                  "minLength": 32,
                  "pattern": ".*$",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/409Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/501Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/partnersub/v2/partnerSubscription/{id}/resend": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Re-send the partner subscription authorization request.",
        "description": "Triggers the re-sending of the partner subscription reationship authorization request (for example an one-time password). This API is only available for partners.",
        "operationId": "resendOtp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id parameter is the partner subscription ID entity.",
            "required": true,
            "schema": {
              "maxLength": 36
            }
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscriptionCreation"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorBasic"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404ErrorPS"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/partnersub/v2/partnerSubscription/{id}/validate": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Validates the partner subscription relationship",
        "description": "Submits the auhtorization value received (for example an OTP) to validate the partner subscription relationship. This API is only available for partners.",
        "operationId": "validatePartnerSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id parameter is the partner subscription ID entity.",
            "required": true,
            "schema": {
              "maxLength": 36
            }
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pin": {
                    "type": "string",
                    "maxLength": 32
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscriptionValidation"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePinErrorResponse400"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404ErrorPS"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/partnersub/v2/partnerSubscription/{id}/confirm": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Confirms the Billing partner subscription",
        "description": "Activation confirmation for the Billing partner subscription relationship. This API is only available for partners.",
        "operationId": "confirmPartnerSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id parameter is the partner subscription ID entity.",
            "required": true,
            "schema": {
              "maxLength": 36
            }
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscriptionConfirmation"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorBasic"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404ErrorPS"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/partnersub/v2/partnerSubscription/{id}/cancel": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription"
        ],
        "summary": "Cancel an active Billing partner subscription",
        "description": "Request to cancel an active Billing partner subscription relationship.",
        "operationId": "cancelBillingPartnerSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id parameter is the partner subscription ID entity.",
            "required": true,
            "schema": {
              "maxLength": 36
            }
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerSubscriptionCancellation"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorBasic"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404ErrorPS"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/partnersub/v2/transaction/{id}/refund": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription",
          "transaction"
        ],
        "summary": "Create a new refund transaction",
        "operationId": "postRefund",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id parameter is the transaction ID on which the original transaction was processed.",
            "required": true,
            "schema": {
              "maxLength": 36,
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "requestBody": {
          "description": "A new Refund; required attributes are id, refund items, product  code passed in as \"code\" for transaction item. Original transaction id is passed as a request parameter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTTRefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created Refund Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTTTransactionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "429": {
            "$ref": "#/components/responses/error429"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/partnersub/v2/transaction": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription",
          "transaction"
        ],
        "summary": "Create a new payment transaction",
        "operationId": "postTransaction",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "requestBody": {
          "description": "A new Transaction; required attributes are id, account vid, transaction items for amount and tax as appropriate, product code passed in as \"code\" for transaction item, code value as 'TOTAL_TAX' for tax trasanction item.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/OTTV2TransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTTTransactionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "403": {
            "$ref": "#/components/responses/error403"
          },
          "409": {
            "$ref": "#/components/responses/error409"
          },
          "429": {
            "$ref": "#/components/responses/error429"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/partnersub/v2/transaction/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription",
          "transaction"
        ],
        "operationId": "getTransactionStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The extTransactionID parameter is the transaction ID on which the original transaction was processed.",
            "required": true,
            "schema": {
              "maxLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "*OK* - Transaction Status successfully retrieved\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTTTransactionResponseWithoutAccount"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorBasic"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GETTransactionErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/partnersub/v2/transaction/{transactionId}/refund/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "partnerSubscription",
          "transaction"
        ],
        "operationId": "getRefund",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "The extTransactionID parameter is the transaction ID on which the original transaction was processed.",
            "required": true,
            "schema": {
              "maxLength": 36,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The extTransactionID parameter is the transaction ID on which the original refund was processed.",
            "required": true,
            "schema": {
              "maxLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "*OK* - Refund details successfully retrieved\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTTRefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400ErrorBasic"
                }
              }
            }
          },
          "401": {
            "description": "authorization failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401Error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GETRefundErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/slmgw/v1/transactions": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "list Transactions",
        "operationId": "searchAllTransaction",
        "description": "Retrieves all transactions. This API is only available to aggregators (for example CSPs).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/starting_after"
          },
          {
            "$ref": "#/components/parameters/ending_before"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order the List of Transactions in either asc, ascending, or desc, descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc"
            }
          },
          {
            "in": "query",
            "name": "account",
            "description": "Limit the transaction list to a specified account id or vid - if specified, all Transactions associated with that Account. Either Account or subscription required",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "subscription",
            "description": "Limit the transaction list to a specified subscription id or vid - if specified, all Transactions associated with that subscription.Either Account or subscription required",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include_children",
            "description": "Indicates whether or not to return any existing child accounts’ transactions for a given returned Subscription/account combination.",
            "required": false,
            "schema": {
              "type": "string",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "campaign",
            "description": "Limit the transaction list to a specified campaign id or vid - if specified, all Transactions associated with that campaign.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "coupon",
            "description": "Limit the transaction list to a specified campaign coupon - if specified, all Transactions associated with that campaign coupon.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "starts",
            "description": "Limit the transaction list to a specified campaign start datetime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ends",
            "description": "Limit the transaction list to a specified campaign end datetime.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "source_payment_method",
            "description": "Limit the transaction list to a specified PaymentMethod type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/transactionsList"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/slmgw/v1/cancel_reasons": {
      "get": {
        "tags": [
          "cancel reasons",
          "marketplace"
        ],
        "summary": "Returns cancel reasons",
        "security": [],
        "operationId": "retrieveCancelReason",
        "description": "Retrieves list of cancel reasons.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/cancelReasonList"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/slmgw/v1/products": {
      "get": {
        "tags": [
          "products",
          "marketplace"
        ],
        "summary": "list Products",
        "operationId": "searchAllProducts",
        "security": [],
        "description": "Retrieves all Product objects.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/starting_after"
          },
          {
            "$ref": "#/components/parameters/ending_before"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "in": "query",
            "name": "account",
            "description": "Filters list of Products by Account id or vid that have Purchased that Product.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include_children",
            "description": "If filtering by Account this also returns Children Accounts.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/slmgw/v1/products/{id}": {
      "get": {
        "tags": [
          "products",
          "marketplace"
        ],
        "summary": "fetch specific product",
        "operationId": "searchSpecificAProduct",
        "security": [],
        "description": "Retrieves a specific Product.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/starting_after"
          },
          {
            "$ref": "#/components/parameters/ending_before"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id or the vid of the Product to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error"
          },
          "401": {
            "$ref": "#/components/responses/error"
          },
          "404": {
            "$ref": "#/components/responses/error"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/slmgw/v1/campaigns": {
      "get": {
        "tags": [
          "campaigns",
          "marketplace"
        ],
        "summary": "list campaigns",
        "operationId": "searchAllCampaigns",
        "security": [],
        "description": "Retrieves list of campaigns.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          },
          {
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Canceled",
                "Complete",
                "Inactive",
                "MatchAnyState",
                "Pending",
                "Undefined"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/campaignsList"
          },
          "400": {
            "$ref": "#/components/responses/error"
          },
          "401": {
            "$ref": "#/components/responses/error"
          },
          "404": {
            "$ref": "#/components/responses/error"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/slmgw/v1/campaigns/{campaign}": {
      "get": {
        "tags": [
          "campaigns",
          "marketplace"
        ],
        "summary": "fetch specific campaigns",
        "operationId": "searchSpecificampaigns",
        "security": [],
        "description": "Retrieves a specific campaigns.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "$ref": "#/components/parameters/campaign"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/campaigns"
          },
          "400": {
            "$ref": "#/components/responses/error"
          },
          "401": {
            "$ref": "#/components/responses/error"
          },
          "404": {
            "$ref": "#/components/responses/error"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/slmgw/v1/billing_plans": {
      "get": {
        "tags": [
          "billing plans",
          "marketplace"
        ],
        "summary": "Retrieves all Billing Plans.",
        "operationId": "searchAllBillingPlan",
        "security": [],
        "description": "Retrieves filtered list of recorded Billing Plan.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          },
          {
            "$ref": "#/components/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/billingPlanList"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/slmgw/v1/billing_plans/{id}": {
      "get": {
        "tags": [
          "billing plans",
          "marketplace"
        ],
        "summary": "Retrieves a specific Billing Plan.",
        "operationId": "getBillingPlan",
        "security": [],
        "description": "Retrieves a specific product.",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id or the vid of the Product to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/billingPlan"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/slmgw/v1/catalog": {
      "get": {
        "tags": [
          "catalog",
          "marketplace"
        ],
        "summary": "Available Product-Billing Option combinations",
        "security": [],
        "operationId": "getCatalog",
        "description": "Available Products with allowed billing options (billing plans, campaigns).",
        "parameters": [
          {
            "$ref": "#/components/parameters/M1-Organization-Code"
          },
          {
            "$ref": "#/components/parameters/organizationCode"
          },
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Offer"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/eventmgr/v1/event/runtime": {
      "post": {
        "tags": [
          "event"
        ],
        "summary": "Post external runtime entity events",
        "operationId": "runtimeEvent",
        "description": "API to notify MarketONE of significant runtime (devices) lifecycle events occured outside MarketONE.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuntimeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    },
    "/eventmgr/v1/event/account": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "event"
        ],
        "summary": "Post external entity events",
        "operationId": "accountEvent",
        "description": "API to notify MarketONE of significant account lifecycle events occured outside MarketONE.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-B3-TraceId"
          },
          {
            "$ref": "#/components/parameters/X-B3-SpanId"
          },
          {
            "$ref": "#/components/parameters/X-B3-ParentSpanId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY",
        "description": "The authorization key obtained from MarketONE."
      }
    },
    "responses": {
      "paymentMethod": {
        "description": "JSON A full PaymentMethod object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        }
      },
      "paymentMethodList": {
        "description": "JSON A list array with a data property that contains an array of up to limit PaymentMethod, starting after the specified starting_after Chargeback (or ending before the specified ending_before Chargeback). Each entry in the array is a full Chargeback object. If no more Chargebacks are available, the resulting array will be empty. This request should never throw an error.\nA list of PaymentMethod objects matching the query. Also:\n\ntotal_count: Integer count of the number of PaymentMethod in the returned list.\n\nurl: The query string provided in the request\n\nnext: The route (partial URL) to the next PaymentMethod object (string to select the “next”); included vid should match that of the last object returned here\n\nprevious: The route (partial URL) to the previous PaymentMethod object (string to select the “previous”); included vid should match that of the first object returned here",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentMethodList"
            }
          }
        }
      },
      "campaigns": {
        "description": "JSON A full Campaigns object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Campaigns"
            }
          }
        }
      },
      "transactionsList": {
        "description": "JSON A list array with a data property that contains an array of up to limit Transactions, starting after the specified starting_after Transaction (or ending before the specified ending_before Transaction). Each entry in the array is a full Transaction object. If no more Transactions are available, the resulting array will be empty. This request should never throw an error.\nA list of Transaction objects matching the query. Also:\ntotal_count: Integer count of the number of Transaction objects in the returned list.\nurl: The query string provided in the request\nnext: The route (partial URL) to the next Transaction object (string to select the “next”); included id should match that of the last object returned here\nprevious: The route (partial URL) to the previous Transaction object (string to select the “previous”); included id should match that of the first object returned here",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TransactionList"
              }
            }
          }
        }
      },
      "entitlement": {
        "description": "JSON A full Entitlement object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Entitlement"
            }
          }
        }
      },
      "entitlementList": {
        "description": "JSON A list array of Entitlements filtered by the given Query Parameters. Each entry in the array is a full Entitlement object. If no more objects are available, the resulting array will be empty. This request should never throw an error.\nA list of Entitlement objects matching the query. Also:\ntotal_count: Integer count of the number of Entitlement objects in the returned list.\nurl: The query string provided in the request\nnext: The route (partial URL) to the next Entitlement object (string to select the “next”); included id should match that of the last object returned here\nprevious: The route (partial URL) to the previous Entitlement object (string to select the “previous”); included id should match that of the first object returned here",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntitlementList"
              }
            }
          }
        }
      },
      "error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "error400": {
        "description": "Invalid Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/400Error"
            }
          }
        }
      },
      "error401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/401Error"
            }
          }
        }
      },
      "error403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/403Error"
            }
          }
        }
      },
      "error404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/404Error"
            }
          }
        }
      },
      "error409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/409Error"
            }
          }
        }
      },
      "error429": {
        "description": "Too Many Requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/429Error"
            }
          }
        }
      },
      "error500": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/500Error"
            }
          }
        }
      }
    },
    "schemas": {
      "GoogleToken": {
        "type": "object",
        "required": [
          "accessToken",
          "refreshToken"
        ],
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "accessToken"
          },
          "refreshToken": {
            "type": "string",
            "description": "refreshToken"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "required": [
          "object",
          "id",
          "account",
          "status",
          "items"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Subscription”.",
            "enum": [
              "Subscription"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "created": {
            "type": "string",
            "description": "The date/time at which the subscription was requested."
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "billing_plan": {
            "$ref": "#/components/schemas/BillingPlan"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "currency": {
            "type": "string",
            "description": "An [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code. A subscription’s charges must be in a single currency.description  string  An optional customer-facing identifier or descriptive name for the subscription"
          },
          "status": {
            "type": "string",
            "description": "The status of the subscription from a service and entitlement perspective.",
            "enum": [
              "Pending Activation",
              "Active",
              "Pending Cancel",
              "Cancelled",
              "Expired",
              "Processing",
              "Deleted",
              "Dryrun",
              "Unknown",
              "Upgraded",
              "Legacy Suspended",
              "Bogus AutoBill Status"
            ]
          },
          "billing_state": {
            "type": "string",
            "description": "The financial state of the subscription.",
            "enum": [
              "Free/Trial",
              "Billing Completed",
              "Failed To Collect",
              "Free Period",
              "Bogus BillingState"
            ]
          },
          "starts": {
            "type": "string",
            "description": "The date/time the subscription starts service.",
            "format": "datetime"
          },
          "ends": {
            "type": "string",
            "description": "The date/time the subscription ends service.",
            "format": "datetime"
          },
          "entitled_through": {
            "type": "string",
            "description": "The date/time to which the subscription will entitle service if no further payments are made – a “paid thru” date based on billing schedule and grace period.",
            "format": "datetime"
          },
          "items": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "Must be \"List\"",
                "enum": [
                  "List"
                ]
              },
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubscriptionItem"
                }
              }
            },
            "description": "The product-based line items for the subscription."
          },
          "source_ip": {
            "type": "string",
            "description": "Optional source IP Address at sign-up."
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the payment processor for transactions from this subscription."
          },
          "billing_day": {
            "type": "integer",
            "description": "The day of the month on which the subscription is (typically) billed. Often called an “anniversary date.”"
          },
          "minimum_commitment": {
            "type": "integer",
            "description": "Number of billing cycles customer is obligated to maintain the subscription. Cancelling before this time requires aggregator to “force” cancellation."
          },
          "affiliate": {
            "type": "string",
            "description": "Affiliate or channel identifier, if any, under which the subscription was submitted."
          },
          "sub_affiliate": {
            "type": "string",
            "description": "A more granular or subordinate affiliate identifier."
          },
          "notify_on_transition": {
            "type": "boolean",
            "description": "Indicates whether to send an expiration or trial-end email notification using the days-in-advance configuration in the Billing Plan."
          },
          "most_recent_billing": {
            "$ref": "#/components/schemas/Transaction"
          },
          "most_recent_refunds": {
            "type": "array",
            "description": "A list of any refunds associated with the Transaction in most_recent_billing.",
            "items": {
              "$ref": "#/components/schemas/Refund"
            }
          },
          "next_billing": {
            "$ref": "#/components/schemas/Transaction"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. Subscription metadata will be inherited by resulting transactions."
          },
          "credit": {
            "$ref": "#/components/schemas/Credit"
          },
          "statement_format": {
            "type": "string",
            "description": "Instructions for if/how to include the invoice statement for this subscription. Values can be Attachment, DoNotSend,Inline",
            "enum": [
              "Attachment",
              "DoNotSend",
              "Inline"
            ]
          },
          "invoice_terms": {
            "type": "integer",
            "description": "Net Terms (in days); after this many days from a billing, the invoice will be considered delinquent."
          },
          "statement_offset": {
            "type": "integer",
            "description": "Days before scheduled billing to deliver the statement."
          },
          "statement_template": {
            "type": "string",
            "description": "Template to use for statement generation."
          },
          "billing_plan_campaign_code": {
            "type": "string",
            "description": "The Campaign code redeemed on this AutoBill against the price of the Billing Plan. To apply a Campaign, use this field to pass in a valid Coupon or Promotion code. Note This data member will not be returned."
          },
          "billing_plan_campaign_id": {
            "type": "string",
            "description": "The unique identifier for a Campaign applied to this AutoBill’s BillingPlan. This is a read-only field returned by MarketONE for informational purposes. Values sent in with a SOAP call will be ignored. Read only."
          },
          "unkonwn_starts": {
            "type": "boolean",
            "description": "Used to create a Subscription Pending Activation."
          },
          "balance": {
            "type": "number"
          },
          "mandate": {
            "$ref": "#/components/schemas/Mandate"
          },
          "cancel_reason": {
            "$ref": "#/components/schemas/CancelReason"
          },
          "policy": {
            "type": "array",
            "description": "The policy object governing Subscription behavior.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Subscriptions allow you to bill an Account over time and/or on a recurring basis. A subscription ties an Account to a particular billing plan and set of purchased products (subscription items) you’ve created. The API allows you to create, update and amend/modify your subscriptions."
      },
      "Subscription_Create_Request": {
        "type": "object",
        "required": [
          "id",
          "account",
          "billing_plan",
          "payment_method",
          "items"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "account": {
            "$ref": "#/components/schemas/SCR_Account"
          },
          "billing_plan": {
            "$ref": "#/components/schemas/SCR_BillingPlan"
          },
          "payment_method": {
            "$ref": "#/components/schemas/SCR_PaymentMethod"
          },
          "currency": {
            "type": "string",
            "description": "An [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code. A subscription’s charges must be in a single currency.description  string  An optional customer-facing identifier or descriptive name for the subscription"
          },
          "items": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SCR_SubscriptionItem"
                }
              }
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. Subscription metadata will be inherited by resulting transactions. For merchant accepted payments these fields will be used to identify payment-processing-information  \"payment_processor_payment_id\", \"payment_procesor_name\", \"payment_amount\", \"payment_date\""
          }
        }
      },
      "Subscription_Update_Request": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SUR_SubscriptionItem"
                }
              }
            }
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. Subscription metadata will be inherited by resulting transactions. For merchant accepted payments these fields will be used to identify payment-processing-information  \"payment_processor_payment_id\", \"payment_procesor_name\", \"payment_amount\", \"payment_date\""
          }
        }
      },
      "SubscriptionUpdateRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SUR_SubscriptionItem"
                }
              }
            }
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodRef"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. Subscription metadata will be inherited by resulting transactions. For merchant accepted payments these fields will be used to identify payment-processing-information  \"payment_processor_payment_id\", \"payment_procesor_name\", \"payment_amount\", \"payment_date\""
          }
        }
      },
      "SubscriptionList": {
        "type": "object",
        "description": "A list of Subscriptions.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Subscription object (string to select the “next”); included id should match that of the last object returned here"
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Subscriptions object (string to select the “previous”); included id should match that of the first object returned here"
          }
        }
      },
      "Account": {
        "type": "object",
        "required": [
          "object",
          "id",
          "name"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Account”",
            "enum": [
              "Account"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "external_id": {
            "type": "string",
            "description": "An additional aggregator-specified unique identifier for when you have two external (non-MarketONE) systems using two different identification schemes for the same customer. It can be used in place of vid or id"
          },
          "created": {
            "type": "string",
            "description": "The date/time the Account was created.",
            "format": "datetime"
          },
          "parent": {
            "$ref": "#/components/schemas/AccountRef"
          },
          "default_currency": {
            "type": "string",
            "description": "The currency used on subscriptions and transactions belonging to this Account when not explicitly specified. An [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code."
          },
          "email": {
            "type": "string",
            "description": "The email address associated with this Account."
          },
          "email_type": {
            "type": "string",
            "description": "The email format type preferred by this customer.",
            "enum": [
              "html",
              "multipart",
              "plaintext"
            ]
          },
          "language": {
            "type": "string",
            "description": "The language (code) preferred for communications."
          },
          "notify_before_billing": {
            "type": "boolean",
            "description": "Whether or not to send this customer pre-billing notification (emails)."
          },
          "company": {
            "type": "string",
            "description": "The company name of the customer if a business Account."
          },
          "name": {
            "type": "string",
            "description": "The name of the person primarily associated with this Account."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          },
          "payment_methods": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "Must be \"List\"",
                "enum": [
                  "List"
                ]
              },
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            },
            "description": "The payment methods on file for this Account."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "tax_exemptions": {
            "type": "array",
            "description": "Tax Exemptions registered for this Account.",
            "items": {
              "$ref": "#/components/schemas/TaxExemption"
            }
          },
          "tokens": {
            "type": "array",
            "description": "The token balances for this Account.",
            "items": {
              "$ref": "#/components/schemas/TokenAmount"
            }
          },
          "credit": {
            "type": "array",
            "description": "The account-level credit balances for this Account.",
            "items": {
              "$ref": "#/components/schemas/Credit"
            }
          },
          "entitlements": {
            "type": "array",
            "description": "The account-level entitlements for this Account.",
            "items": {
              "$ref": "#/components/schemas/BareEntitlement"
            }
          },
          "tax_use_code": {
            "type": "string",
            "description": "Special Tax Handling rules defined with aggregator’s tax service."
          }
        },
        "description": "The Account represents an aggregator’s customer. As such it can contain as much or as little information as you collect about the customers (people or organizations) to which you offer billing and subscriptions. Subscriptions and Transactions must belong to an Account - as such, Accounts will be required in MarketONE for billing. Read More in our User Guide An Account can have any number of children accounts and may have up to one parent account. Read more in our User Guide. An Account owns the “on file” payment methods to be used by it in billing. Payment Methods can be created at the same time as an Account is created or updated, but when updating an existing Payment Method the Payment Method Endpoint must be used."
      },
      "SCR_Account": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "external_id": {
            "type": "string",
            "description": "An additional aggregator-specified unique identifier for when you have two external (non-MarketONE) systems using two different identification schemes for the same customer. It can be used in place of vid or id"
          },
          "default_currency": {
            "type": "string",
            "description": "The currency used on subscriptions and transactions belonging to this Account when not explicitly specified. An [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code."
          },
          "parent": {
            "$ref": "#/components/schemas/SCR_Account"
          }
        },
        "description": "The Account represents an aggregator’s customer. As such it can contain as much or as little information as you collect about the customers (people or organizations) to which you offer billing and subscriptions. Subscriptions and Transactions must belong to an Account - as such, Accounts will be required in MarketONE for billing. Read More in our User Guide An Account can have any number of children accounts and may have up to one parent account. Read more in our User Guide. An Account owns the “on file” payment methods to be used by it in billing. Payment Methods can be created at the same time as an Account is created or updated, but when updating an existing Payment Method the Payment Method Endpoint must be used."
      },
      "AccountList": {
        "type": "object",
        "description": "A list of Accounts.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Subscription object (string to select the “next”); included id should match that of the last object returned here."
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Subscriptions object (string to select the “previous”); included id should match that of the first object returned here."
          }
        }
      },
      "BillingPlan": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "object": {
            "type": "string",
            "enum": [
              "BillingPlan"
            ],
            "description": "Value is “BillingPlan”"
          },
          "created": {
            "type": "string",
            "format": "datetime",
            "description": "The date and time the plan was created."
          },
          "description": {
            "type": "string",
            "description": "An aggregator-specified description of this offering."
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Suspended"
            ],
            "description": "aggregators may define whether they want to declare a plan as available to offer. Values can be Active,Suspended"
          },
          "tax_classification": {
            "type": "string",
            "description": "The tax classification or code to be used with any plan-level charges."
          },
          "br_tax_category": {
            "type": "string",
            "description": "enum(Category)"
          },
          "trial": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingPlanPeriod"
              }
            ],
            "description": "Optionally declares an initial trial period for this plan."
          },
          "periods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingPlanPeriod"
            },
            "description": "Defines the sequential billing periods in the plan, each with its own billing schedule and terms."
          },
          "billing_notification_days": {
            "type": "integer",
            "description": "Number of days prior to schedule billing at which CashBox will send email notification."
          },
          "trial_end_notification_days": {
            "type": "integer",
            "description": "For the trial period, this replaces billing_notification_days, indicating the number of days prior to end of a trial to send the trial end email."
          },
          "skip_initial_billing_notification": {
            "type": "boolean",
            "description": "Determines whether to send a billing notification for the initial period."
          },
          "end_of_life": {
            "type": "string",
            "format": "datetime",
            "description": "The date after which the plan should not be offered."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BareEntitlement"
            },
            "description": "Entitlements granted by active subscriptions on this plan."
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the payment processor for transactions associated with a subscription using this billing plan."
          },
          "times_to_run": {
            "type": "string",
            "description": "The number of times the sequence of Billing Periods should be repeated. Valid input includes positive integers (Default is null)."
          },
          "entitlements_valid_for": {
            "type": "string",
            "description": "The length of time for which Entitlements are valid after the last Billing date (Default is null)."
          },
          "repeat_every": {
            "type": "string",
            "description": "If a Billing Period set repeats, this value defines the length of time after the first billing that the set should repeat."
          },
          "season_set": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SeasonSet"
              }
            ],
            "description": "The SeasonSet to which the Billing Plan applies. (May be null.)"
          },
          "days_before_season_to_bill": {
            "type": "integer",
            "description": "Optional setting when using a season set to control the integer number of days before a season starts to bill."
          },
          "days_entitled_before_season": {
            "type": "integer",
            "description": "Optional setting when using a season set to control the integer number of days customer is entitled before a season starts"
          },
          "days_entitled_after_season": {
            "type": "integer",
            "description": "Optional setting when using a season set to control the integer number of days after a season ends a customer remains entitled."
          },
          "entitled_off_season": {
            "type": "boolean",
            "description": "Optional setting when using a season set to continue entitling customer between seasons."
          },
          "used_on_subscriptions": {
            "type": "boolean",
            "description": "Signifies if Billing Plan has been used on an Active Subscription"
          },
          "grace_period_override": {
            "type": "integer",
            "description": "Number of days after the billing date when, if payment is not received, the Subscription is stopped and the customer is disentitled; overrides the global aggregator default setting, if both are set."
          }
        }
      },
      "SCR_BillingPlan": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        }
      },
      "SeasonSet": {
        "type": "object",
        "description": "The SeasonSet object defines an array of seasons, with an identifier.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "object": {
            "type": "string",
            "enum": [
              "SeasonSet"
            ],
            "description": "Value is “SeasonSet”"
          },
          "created": {
            "type": "string",
            "format": "datetime",
            "description": "The date and time the plan was created."
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Season"
            },
            "description": "An array of Seasons that make up the SeasonSet."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        }
      },
      "Season": {
        "type": "object",
        "description": "Season objects represent an aggregator-defined calendar-based “season” indicating when a particular service offering is provided. Often indicates a sporting or entertainment industry season. In CashBox, most simply stored as a date range with a description; and grouped into Season Sets as needed (to allow for sequential season-based entitlement and billing, from one season to the next where the dates for a given season change each year).",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "Season"
            ],
            "description": "Value is “Season”"
          },
          "description": {
            "type": "string",
            "description": "Free-form description of the season, <= 2048 characters."
          },
          "starts": {
            "type": "string",
            "format": "datetime",
            "description": "The date/time at which the Season begins."
          },
          "ends": {
            "type": "string",
            "format": "datetime",
            "description": "The date/Time at which the Season ends."
          }
        }
      },
      "BillingPlanPeriod": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "BillingPlanPeriod"
            ],
            "description": "Value is “BillingPlanPeriod”"
          },
          "type": {
            "type": "string",
            "enum": [
              "Day",
              "Week",
              "Month",
              "Year"
            ],
            "description": "Unit of time a period describes. Values can be Day,Week,Month,Year"
          },
          "quantity": {
            "type": "integer"
          },
          "cycles": {
            "type": "integer"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingPlanPrice"
            },
            "description": "A price for each defined currency for each period. Optional - Billing Plans do not require pricing (can be priced at the item/product level)."
          }
        }
      },
      "BillingPlanPrice": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “BillingPlanPrice”"
          },
          "amount": {
            "type": "number",
            "description": "price"
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of price."
          },
          "price_list_name": {
            "type": "string",
            "description": "Name of price list containing this price. This is free-form string of 255 characters or less"
          },
          "token_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenAmount"
              }
            ],
            "description": "The number of tokens required to purchase (if token-priced)."
          }
        }
      },
      "PaymentMethodReference": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "CreditCardDto": {
        "type": "object",
        "properties": {
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "object": {
            "type": "string",
            "enum": [
              "CreditCard"
            ]
          },
          "last_digits": {
            "type": "string",
            "description": "The last 4 digits of the PAN (Bank Identifier Number)."
          },
          "account_length": {
            "type": "integer",
            "description": "The number of digits in the PAN (Bank Identifier Number)."
          },
          "hash_type": {
            "type": "string",
            "enum": [
              "sha1",
              "md5"
            ],
            "description": "The algorithm used for hashing the account number. If this value is not provided we assume SHA1."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date of the credit card, formatted as YYYYMM. For example, July, 2028 represented as 202807."
          },
          "extended_card_attributes": {
            "type": "object",
            "description": "Additional credit card details returned from Payment Provider"
          },
          "cvn": {
            "type": "string",
            "description": "CVV (Card Verification Value) or CVN (Card Verification Number) printed on the card."
          },
          "last_au_request_date": {
            "type": "string",
            "format": "datetime",
            "description": "Timestamp of the most recent Account Updater request."
          },
          "last_update_date": {
            "type": "string",
            "format": "datetime",
            "description": "Timestamp of the most recent credit card update."
          },
          "au_response_code": {
            "type": "string",
            "description": "Response code from the payment provider for the most recent Account Updater request."
          },
          "au_response_message": {
            "type": "string",
            "description": "Reply from the payment provider for the most recent Account Updater request."
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "object": {
            "type": "string",
            "enum": [
              "PaymentMethod"
            ],
            "description": "Value is “PaymentMethod”."
          },
          "created": {
            "type": "string",
            "format": "datetime",
            "description": "The date/time the object was created."
          },
          "type": {
            "type": "string",
            "enum": [
              "Amazon",
              "ApplePay",
              "CreditCard",
              "DirectDebit",
              "ExternalBilling",
              "GooglePay",
              "MerchantAcceptedPayment",
              "PayPal"
            ]
          },
          "credit_card": {
            "$ref": "#/components/schemas/CreditCardDto"
          },
          "direct_debit": {
            "type": "object"
          },
          "paypal": {
            "type": "object"
          },
          "amazon": {
            "type": "object"
          },
          "merchant_accepted_payment": {
            "$ref": "#/components/schemas/MerchantAcceptedPayment"
          },
          "external_billing": {
            "$ref": "#/components/schemas/ExternalBilling"
          },
          "apple_pay": {
            "type": "object"
          },
          "google_pay": {
            "type": "object"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "account_holder": {
            "type": "string",
            "description": "Name of the account holder."
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "customer_specified_type": {
            "type": "string",
            "description": "Optional aggregator or customer specified type description."
          },
          "customer_description": {
            "type": "string",
            "description": "Optional aggregator or customer specified card (method) description."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code."
          },
          "primary": {
            "type": "boolean",
            "description": "Primary/default payment method for the account."
          },
          "active": {
            "type": "boolean",
            "description": "Active and available for use."
          },
          "validation_status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "policy": {
            "type": "object",
            "description": "The policy object governing Payment Method behavior."
          }
        }
      },
      "PaymentMethodRef": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "PaymentMethodList": {
        "type": "object",
        "description": "A list of PaymentMethod.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next PaymentMethod object (string to select the “next”); included id should match that of the last object returned here."
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous PaymentMethod object (string to select the “previous”); included id should match that of the first object returned here."
          }
        }
      },
      "PaymentMethods": {
        "type": "array",
        "description": "A list of PaymentMethod objects.",
        "items": {
          "$ref": "#/components/schemas/PaymentMethod"
        }
      },
      "CSPPaymentMethod": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ExternalBilling",
              "MerchantAcceptedPayment"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "external_billing": {
            "$ref": "#/components/schemas/SCR_ExternalBilling"
          },
          "merchant_accepted_payment": {
            "$ref": "#/components/schemas/SCR_MerchantAcceptedPayment"
          },
          "active": {
            "type": "boolean",
            "description": "Active and available for use."
          },
          "primary": {
            "type": "boolean",
            "description": "Primary/default payment method for the account."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        }
      },
      "SCR_PaymentMethod": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ExternalBilling",
              "MerchantAcceptedPayment"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "external_billing": {
            "$ref": "#/components/schemas/SCR_ExternalBilling"
          },
          "merchant_accepted_payment": {
            "$ref": "#/components/schemas/SCR_MerchantAcceptedPayment"
          }
        }
      },
      "ExternalBilling": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "ExternalBilling"
            ]
          },
          "bill_receiver": {
            "type": "string",
            "description": "The payment provider. In this case the payment provider is another billing system implemented in the integration."
          },
          "payment_channel": {
            "type": "string",
            "description": "The customer paymentChannelId in the billing system. Best practice is to set this the same as the Payment Method id."
          },
          "financial_account": {
            "type": "string",
            "description": "The customer financial account ID in the billing system."
          }
        }
      },
      "MerchantAcceptedPayment": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "MerchantAcceptedPayment"
            ]
          },
          "amount": {
            "type": "number",
            "description": "Returns the payment amount for the payment method. Will be defaulted to zero when not provided."
          },
          "currency": {
            "type": "string",
            "description": "Currency for the payment method."
          },
          "created": {
            "type": "string",
            "description": "Created date and time."
          },
          "payment_type": {
            "type": "string",
            "description": "The identifier of the payment processor."
          },
          "account": {
            "type": "string",
            "description": "If applicable the account identifier of the customer that will be used for payment."
          },
          "last_digits": {
            "type": "string",
            "description": "Last 3 digits of the given account with obfuscation."
          }
        }
      },
      "SCR_MerchantAcceptedPayment": {
        "type": "object",
        "properties": {
          "payment_type": {
            "type": "string",
            "description": "The identifier of the payment processor."
          },
          "account": {
            "type": "string",
            "description": "If applicable the account identifier of the customer that will be used for payment."
          }
        }
      },
      "SCR_ExternalBilling": {
        "type": "object",
        "properties": {
          "bill_receiver": {
            "type": "string",
            "description": "The payment provider. In this case the payment provider is another billing system implemented in the integration."
          },
          "payment_channel": {
            "type": "string",
            "description": "The customer paymentChannelId in the billing system. Best practice is to set this the same as the Payment Method id."
          },
          "financial_account": {
            "type": "string",
            "description": "The customer financial account ID in the billing system."
          }
        }
      },
      "SubscriptionItem": {
        "type": "object",
        "required": [
          "object",
          "id",
          "product"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “SubscriptionItem”",
            "enum": [
              "SubscriptionItem"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/SubItemID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "index": {
            "type": "integer",
            "description": "Sequential index of all items on the subscription."
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "campaign_id": {
            "type": "string",
            "description": "The campaign code for the discount on the subscription. This field will not be returned for subscriptions that has no discount."
          },
          "amount": {
            "type": "number",
            "description": "The unit price of the item."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this item."
          },
          "rate_plan": {
            "$ref": "#/components/schemas/RatePlan"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "quantity": {
            "type": "number",
            "description": "The unit quantity for the item; for license-based products this is the license/seat quantity."
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "cycles": {
            "type": "integer",
            "description": "The number of billing cycles for which this item should bill (0 = life of the Subscription)"
          },
          "cycles_remaining": {
            "type": "integer",
            "description": "If a billing cycle limit is defined, this is the number of billing cycles left to bill."
          },
          "created": {
            "type": "string",
            "description": "The datetime this item was added to the subscription.",
            "format": "datetime"
          },
          "ends": {
            "type": "string",
            "description": "The datetime this item was removed from the subscription (end of service).",
            "format": "datetime"
          },
          "starts": {
            "type": "string",
            "description": "The datetime this item was effective/started on the subscription (start of service).",
            "format": "datetime"
          },
          "discount_tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTicket"
            }
          },
          "replaces": {
            "$ref": "#/components/schemas/SubscriptionItem"
          },
          "replaced_by": {
            "$ref": "#/components/schemas/SubscriptionItem"
          }
        }
      },
      "SCR_SubscriptionItem": {
        "type": "object",
        "required": [
          "product"
        ],
        "properties": {
          "product": {
            "$ref": "#/components/schemas/SCR_Product"
          },
          "campaign_code": {
            "type": "string",
            "description": "The campaign code to be given for the discount"
          }
        }
      },
      "SUR_SubscriptionItem": {
        "type": "object",
        "required": [
          "product"
        ],
        "properties": {
          "product": {
            "$ref": "#/components/schemas/SCR_Product"
          },
          "campaign_code": {
            "type": "string",
            "description": "The campaign code to be given for the discount. This key will not be sent if discount will be removed from the Subscription."
          },
          "replaces": {
            "type": "string",
            "description": "Replaced subscription Item id"
          }
        }
      },
      "SubscriptionItemLite": {
        "type": "object",
        "required": [
          "object",
          "id",
          "product"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “SubscriptionItem”",
            "enum": [
              "SubscriptionItem"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "index": {
            "type": "integer",
            "description": "Sequential index of all items on the subscription."
          },
          "product": {
            "$ref": "#/components/schemas/ProductLite"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "created": {
            "type": "string",
            "description": "The datetime this item was added to the subscription.",
            "format": "datetime"
          },
          "ends": {
            "type": "string",
            "description": "The datetime this item was removed from the subscription (end of service).",
            "format": "datetime"
          },
          "starts": {
            "type": "string",
            "description": "The datetime this item was effective/started on the subscription (start of service).",
            "format": "datetime"
          }
        }
      },
      "TransactionRef": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "Transaction"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Transaction”",
            "enum": [
              "Transaction"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "created": {
            "type": "string",
            "description": "The time this transaction was initiated.",
            "format": "datetime"
          },
          "amount": {
            "type": "number",
            "description": "The net amount of the charge presented by this transaction, as a decimal. Must be positive (zero allowed)."
          },
          "original_amount": {
            "type": "number",
            "description": "Used with a partial payment; this read-only field reflects the original amount of the transaction, as a decimal."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction"
          },
          "division_number": {
            "type": "string",
            "description": "The aggregator’s division, reporting or processing group as defined with their payment processor."
          },
          "previous_id": {
            "type": "string",
            "description": "The identifier of a previous version of this transaction."
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "source_payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "dest_payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "ecp_transaction_type": {
            "type": "string",
            "description": "For ECP/ACH-specific types.",
            "enum": [
              "All",
              "Inbound",
              "InboundOutbound",
              "NA",
              "Outbound",
              "Transfer"
            ]
          },
          "status_log": {
            "$ref": "#/components/schemas/TransactionStatusLog"
          },
          "payment_processor": {
            "type": "string",
            "description": "The payment processor used for processing this transaction."
          },
          "payment_processor_transaction_id": {
            "type": "string",
            "description": "The identifier assigned to the Transaction by the Payment Processor."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. For transactions resulting from a subscription, the metadata is also inherited from the subscription."
          },
          "items": {
            "type": "array",
            "description": "The array of Transaction Items belonging to this transaction. Items correspond to the charges, discounts, credits, and taxes.",
            "items": {
              "$ref": "#/components/schemas/TransactionItem"
            }
          },
          "affiliate": {
            "type": "string",
            "description": "aggregator’s ID for the channel or affiliate associated with this transaction, if any. This is a free-form string of 128 characters or less."
          },
          "sub_affiliate": {
            "type": "string",
            "description": "Affiliate ID for a more granular channel component (see aggregator_affiliate_id)."
          },
          "user_agent": {
            "type": "string",
            "description": "Information on the source of the transaction, such as the Customer’s user-agent string, as presented by the browser."
          },
          "preferred_notification_language": {
            "type": "string",
            "description": "ISO language code string. Transaction value will override any language setting on the account."
          },
          "source_mac_address": {
            "type": "string",
            "description": "MAC address of the customer (primarily intended for ISP usage), may be left blank if unavailable or inappropriate."
          },
          "source_ip": {
            "type": "string",
            "description": "End-customer’s source IP associated with this transaction."
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the payment processor for this transaction."
          },
          "sales_tax_address": {
            "$ref": "#/components/schemas/Address"
          },
          "verification_code": {
            "type": "string",
            "description": "External verification response (e.g. Verified by Visa, MasterCard SecureCode)."
          },
          "subscription_sequence": {
            "type": "integer",
            "description": "The subscription’s billing cycle for which this transaction collects funds. As a zero-based index, this indicates the renewal number."
          },
          "billing_plan_sequence": {
            "type": "integer",
            "description": "The billing cycle for which this transaction collects funds - as counted as a zero-based index from the last billing plan change for the associated subscription."
          },
          "mandate": {
            "$ref": "#/components/schemas/Mandate"
          },
          "original_billing_date": {
            "type": "string",
            "description": "The original scheduled billing date associated with the billing for which this transaction collects funds. For an initial attempt, this is the same as the transaction date; for a retry transaction this is the original attempt date.",
            "format": "datetime"
          },
          "billing_attempt": {
            "type": "integer",
            "description": "The zero-based index counting the number of transaction attempts this particular transaction represents in collecting for given subscription billing cycle."
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          },
          "score": {
            "type": "integer",
            "description": "The chargeback and fraud risk score generated by MarketONE."
          },
          "score_calculated": {
            "type": "string",
            "description": "The datetime the score was calculated.",
            "format": "datetime"
          },
          "score_calculated_orig": {
            "type": "string",
            "description": "The datetime the score was originally calculated.",
            "format": "datetime"
          },
          "score_codes": {
            "type": "array",
            "description": "The reason codes justifying the risk score.",
            "items": {
              "$ref": "#/components/schemas/ScoreCode"
            }
          },
          "distance_ip_ba": {
            "type": "number",
            "description": "The distance from the IP Address to the Billing Address."
          },
          "avs_code": {
            "type": "string",
            "description": "AVS Code"
          },
          "cvn_code": {
            "type": "string",
            "description": "CVN Code."
          },
          "cvn_checked": {
            "type": "boolean",
            "description": "Shows if the CVN was checked for this transaction."
          },
          "policy": {
            "type": "array",
            "description": "The policy object governing Transaction behavior.",
            "items": {
              "type": "string"
            }
          },
          "to_be_captured": {
            "type": "boolean",
            "description": "Indicator of whether the transaction is currently pending capture."
          }
        },
        "description": "The Transaction object provides a way to charge a customer. You can create one-time transactions, retrieve individual transactions, fetch individual transactions, and list all Transactions for a given account or subscription. Posting with a new Transaction creates a new one-time Transaction object. If “to_be_captured” is false, the request will trigger an authorization attempt (based on the provided payment method’s authorization process). If successfully authorized, a subsequent post to the transaction’s actions/capture endpoint will capture the authorized transaction. If you post a new transaction with “to_be_captured” true, it will authorize and immediately capture the transaction if successful. To refund transactions, use the refunds endpoint."
      },
      "TransactionList": {
        "type": "object",
        "description": "A list of Transaction.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Transaction object (string to select the “next”); included id should match that of the last object returned here."
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Transaction object (string to select the “previous”); included id should match that of the first object returned here."
          }
        }
      },
      "TransactionStatus": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “TransactionStatus”",
            "enum": [
              "TransactionStatus"
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the Transaction.",
            "enum": [
              "New",
              "AuthorizationPending",
              "AuthorizedPending",
              "Authorized",
              "AuthorizedForValidation",
              "Cancelled",
              "Captured",
              "Settled",
              "Refunded",
              "Pending"
            ]
          },
          "created": {
            "type": "string",
            "description": "The effective datetime of this status",
            "format": "datetime"
          },
          "payment_method_type": {
            "type": "string",
            "description": "Type of Payment Method (clarifies status).",
            "enum": [
              "CreditCard",
              "PayPal",
              "ECP",
              "DirectDebit",
              "Token",
              "HostedPage",
              "Boleto",
              "aggregatorAcceptedPayment",
              "CarrierBilling",
              "Amazon",
              "Skrill",
              "ApplePay"
            ]
          },
          "vin_avs": {
            "type": "string",
            "description": "AVS result.",
            "enum": [
              "FullMatch",
              "PartialMatch",
              "NoMatch",
              "IssuerError",
              "NoOpinion",
              "NotSupported"
            ]
          },
          "funding_source_balance": {
            "type": "number"
          }
        }
      },
      "TransactionStatusLog": {
        "type": "object",
        "description": "A log of various TransactionStatus entries associated with a transaction.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionStatus"
            }
          }
        }
      },
      "TransactionItem": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “TransactionItem”",
            "enum": [
              "TransactionItem"
            ]
          },
          "sku": {
            "type": "string",
            "description": "The SKU or unique identifier of the product purchased with this item (for one-time transactions this is an ad-hoc value."
          },
          "index_number": {
            "type": "integer",
            "description": "Sequential index of all items on the transaction."
          },
          "item_type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "aggregator-provided name or inherited description of the product purchased"
          },
          "subscription_item": {
            "$ref": "#/components/schemas/SubscriptionItem"
          },
          "price": {
            "type": "number",
            "description": "unit price of this item"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "quantity": {
            "type": "number",
            "description": "The unit quantity for the item; for license-based products this is the license/seat quantity."
          },
          "tax_classification": {
            "type": "string",
            "description": "The tax code or classification applicable to this item."
          },
          "tokens": {
            "type": "array",
            "description": "Tokens granted to the account on this transaction for purchasing this item",
            "items": {
              "$ref": "#/components/schemas/TokenAmount"
            }
          },
          "campaign_code": {
            "type": "string",
            "description": "Campaign code redeemed on this TransactionItem."
          },
          "campaign_id": {
            "type": "string",
            "description": "The unique identifier for a campaign applied to this item."
          },
          "campaign_description": {
            "type": "string",
            "description": "Detailed description of the campaign for the discount on this item, if there is one."
          },
          "service_period_starts": {
            "type": "string",
            "description": "The start date for the period the charge on this item covers.",
            "format": "datetime"
          },
          "service_period_ends": {
            "type": "string",
            "description": "The end date for the period the charge on this item covers.",
            "format": "datetime"
          },
          "tax_type": {
            "type": "string",
            "description": "Fixed Tax definition (read only)."
          },
          "tax": {
            "type": "array",
            "description": "array to list the individual tax items associated with the corresponding transactionItem.",
            "items": {
              "$ref": "#/components/schemas/TaxItem"
            }
          },
          "related_transactions": {
            "type": "array",
            "description": "List of aggregatorTransactionIds for all Transactions related to this item. e.g. For a credit resulting from the removal of an SubscriptionItem, this will contain the list of all Transactions that originally billed for the item within the time frame covered by the credit.",
            "items": {
              "type": "string"
            }
          },
          "item_refunds": {
            "type": "array",
            "description": "Detail on item-level refunds applied to this item.",
            "items": {
              "$ref": "#/components/schemas/TransactionItemRefundSummary"
            }
          },
          "discount": {
            "type": "number",
            "description": "The total discount amount applied to this item."
          },
          "subtotal": {
            "type": "number",
            "description": "The pre-tax (post-discount) subtotal."
          },
          "total": {
            "type": "number",
            "description": "The grand total of this item"
          }
        }
      },
      "TransactionItemRefundSummary": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "datetime"
          },
          "amount": {
            "type": "string",
            "format": "decimal"
          },
          "tax": {
            "type": "number"
          },
          "tax_only": {
            "type": "boolean"
          },
          "refund": {
            "$ref": "#/components/schemas/Refund"
          }
        }
      },
      "ScoreCode": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “ScoreCode”",
            "enum": [
              "ScoreCode"
            ]
          },
          "id": {
            "type": "string",
            "description": "A MarketONE-specified unique ID."
          },
          "description": {
            "type": "string",
            "description": "String description of the rule, e.g. “PRIOR_CB_IN_VERTICAL”"
          }
        }
      },
      "Refund": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Refund”",
            "enum": [
              "Refund"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "created": {
            "type": "string",
            "description": "The date/time at which the refund was requested.",
            "format": "datetime"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "refund_items": {
            "type": "array",
            "description": "For item-level refunds, specifies the transaction items to refund with details.",
            "items": {
              "$ref": "#/components/schemas/RefundItem"
            }
          },
          "refund_distribution_strategy": {
            "type": "string",
            "description": "Defines strategy for distributing refund amount across the original TransactionItems. Default is None.",
            "enum": [
              "None",
              "SpecifiedItems",
              "RemainingBalance"
            ]
          },
          "amount": {
            "type": "number",
            "description": "Amount of the refund. Must be positive (non-zero) and less than or equal to the as-yet-un-refunded balance of the specified transaction. Ignored if refundItems are specified."
          },
          "amount_includes_tax": {
            "type": "boolean",
            "description": "whether the amount is tax-inclusive or -exclusive"
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction; defaults to USD."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "reference_string": {
            "type": "string",
            "description": "Read-only. Information provided by payment processor."
          },
          "note": {
            "type": "string",
            "description": "Free-form aggregator-specified notes about refund."
          },
          "token_action": {
            "type": "string",
            "description": "Action to take with any Tokens paid on transaction. Default None.",
            "enum": [
              "CancelNegativeBalance",
              "CancelZeroBalance",
              "None"
            ]
          },
          "credit": {
            "$ref": "#/components/schemas/Credit"
          },
          "status": {
            "type": "string",
            "description": "Processing status of refund.",
            "enum": [
              "Complete",
              "Failed",
              "Processing",
              "Reported"
            ]
          }
        },
        "description": "The Refund object provides a way to reverse a charge, refunding money to the customer. You can create, and retrieve individual Refunds; as well as list all existing Refunds. Refunds require a transaction – a refund can only be executed against an existing, successfully captured transaction. Refunds can be issued for any valid amount (in the currency of the original transaction) up to the as-yet un-refunded balance of the original transaction. You can issue any number of refunds on a given transaction (until it has been fully refunded)."
      },
      "RefundItem": {
        "type": "object",
        "properties": {
          "transaction_item_index_number": {
            "type": "number",
            "description": "Sequence number assigned upon creation to a TransactionItem by MarketONE. Either the transactionItemIndexNumber, or the sku, must be specified for each RefundItem."
          },
          "sku": {
            "type": "string",
            "description": "SKU on the original transaction line item (sku need not be passed in if the transactionItemIndexNumber is passed in). If the sku is passed in, and can be used to uniquely identify the transaction item, it will be used, otherwise an error will be returned."
          },
          "description": {
            "type": "string",
            "description": "Output only. A description of the TransactionItem, which will be filled in by MarketONE from line item description on the original Transaction."
          },
          "amount": {
            "type": "number",
            "description": "Amount of the requested refund for this item, in the currency of the overall transaction. This amount must not exceed the original TransactionItem amount, minus any discounts and minus the sum of all prior refunds against this item. This field may be left blank if the taxOnly field is set to true."
          },
          "tax_only": {
            "type": "boolean",
            "description": "If this is true, the amount parameter is ignored and the refund amount will be the total of the as-yet unrefunded taxes for this item."
          },
          "taxes": {
            "type": "array",
            "description": "Read-only array to list the taxes from the original TransactionItem that are being refunded.",
            "items": {
              "$ref": "#/components/schemas/TaxItem"
            }
          }
        }
      },
      "Credit": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Credit”",
            "enum": [
              "Credit"
            ]
          },
          "token_amounts": {
            "type": "array",
            "description": "Tokens granted",
            "items": {
              "$ref": "#/components/schemas/TokenAmount"
            }
          },
          "currency_amounts": {
            "type": "array",
            "description": "Currency credits granted",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmount"
            }
          }
        },
        "description": "The Credit object represents a service credit granted to an account or subscription, taking the form of either currency, token, or time amounts."
      },
      "TaxItem": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “TaxItem”"
          },
          "jurisdiction": {
            "type": "string",
            "description": "Tax jurisdiction"
          },
          "name": {
            "type": "string",
            "description": "Tax description"
          },
          "amount": {
            "type": "number",
            "description": "Currency amount of assessed tax"
          },
          "external_tax_name": {
            "type": "string"
          },
          "external_tax_category": {
            "type": "string"
          },
          "external_jurisdiction_name": {
            "type": "string"
          },
          "tax_rate": {
            "type": "number"
          }
        },
        "description": "And individual tax assessed for a specified jurisdiction."
      },
      "Mandate": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Mandate”",
            "enum": [
              "Mandate"
            ]
          },
          "created": {
            "type": "string",
            "description": "The date/time at which the mandate was recorded into MarketONE.",
            "format": "datetime"
          },
          "identifier": {
            "type": "string",
            "description": "Externally provided unique identifier for the Mandate (agreement)."
          },
          "status": {
            "type": "string",
            "description": "Current Mandate status.",
            "enum": [
              "Active",
              "Cancelled",
              "Expired",
              "Failed",
              "Pending"
            ]
          }
        },
        "description": "The mandates object represents the end-custom approval for a one-time or recurring billing using their provided bank account details. A common requirement for UK and SEPA direct debit payment methods."
      },
      "CancelReason": {
        "type": "object",
        "properties": {
          "reason_code": {
            "type": "string",
            "description": "The reason code assigned for the cancellation. Can be 15 characters or fewer."
          },
          "description": {
            "type": "string",
            "description": "A description of the reason for the cancellation. Can be up to 255 characters."
          }
        }
      },
      "TokenAmount": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "TokenAmount"
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "amount": {
            "type": "integer",
            "description": "The balance of tokens in the grant."
          },
          "source": {
            "type": "string"
          }
        },
        "description": "The TokenAmount object represents the token-based credit detail associated with a particular grant of token credits."
      },
      "Token": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Token”",
            "enum": [
              "Token"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "description": {
            "type": "string",
            "description": "Text describing the token type"
          }
        },
        "description": "The token object provides a way to offer virtual currencies or track the balance of a consumable service item."
      },
      "CurrencyAmount": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “CurrencyAmount”",
            "enum": [
              "CurrencyAmount"
            ]
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "currency": {
            "type": "string",
            "description": "An [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code."
          },
          "amount": {
            "type": "number",
            "description": "The currency amount of the credit."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "sort_value": {
            "type": "integer",
            "description": "Order of precedence value."
          },
          "description": {
            "type": "string",
            "description": "Text provided upon credit grant."
          },
          "reason": {
            "type": "string",
            "description": "Text provided upon credit grant."
          },
          "granted_by_cashbox": {
            "type": "boolean"
          },
          "granted": {
            "type": "string",
            "description": "The date and time the credit was originally granted.",
            "format": "datetime"
          },
          "account": {
            "$ref": "#/components/schemas/AccountRef"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionRef"
          }
        },
        "description": "The CurrencyAmount object represents the currency credit detail associated with a particular grant of currency credits."
      },
      "EntitlementList": {
        "type": "object",
        "description": "A list of entitlements.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entitlement"
            }
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Credit object (string to select the \"next\"); included id should match that of the last object returned here."
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Credit object (string to select the \"previous\"); included id should match that of the first object"
          }
        }
      },
      "Entitlement": {
        "type": "object",
        "required": [
          "id",
          "account"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "Entitlement"
            ]
          },
          "id": {
            "type": "string",
            "description": "An aggregator-specified unique identifier."
          },
          "description": {
            "type": "string",
            "description": "The aggregator-specified description of the entitled service."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether this Entitlement is currently active."
          },
          "starts": {
            "type": "string",
            "description": "The date/time at which entitlement did or will begin.",
            "format": "datetime"
          },
          "ends": {
            "type": "string",
            "description": "The date/time at which entitlement did or will end.",
            "format": "datetime"
          },
          "account": {
            "$ref": "#/components/schemas/AccountRef"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionRef"
          },
          "subscription_item": {
            "$ref": "#/components/schemas/SubscriptionItemRef"
          },
          "product": {
            "$ref": "#/components/schemas/ProductRef"
          },
          "billing_plan": {
            "$ref": "#/components/schemas/BillingPlanRef"
          }
        },
        "description": "The entitlement object represents the services to which a customer is entitled. Entitlement can reside at the Account (granted directly to the Customer) or the Subscription level (granted due to purchase or presence of an active subscription)."
      },
      "BareEntitlement": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "Entitlement"
            ]
          },
          "id": {
            "type": "string",
            "description": "An aggregator-specified unique identifier."
          },
          "description": {
            "type": "string",
            "description": "The aggregator-specified description of the entitled service."
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Address”",
            "enum": [
              "Address"
            ]
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "name": {
            "type": "string",
            "description": "The name of the person or contact associated with this address."
          },
          "line1": {
            "type": "string",
            "description": "Address Line 1"
          },
          "line2": {
            "type": "string",
            "description": "Address Line 2"
          },
          "line3": {
            "type": "string",
            "description": "Address Line 3"
          },
          "city": {
            "type": "string"
          },
          "county": {
            "type": "string"
          },
          "district": {
            "type": "string",
            "description": "State, Province, or District"
          },
          "postal_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          }
        },
        "description": "The Address object represents a physical or mailing address."
      },
      "TaxExemption": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “TaxExemption”",
            "enum": [
              "TaxExemption"
            ]
          },
          "region": {
            "type": "string",
            "description": "Exempt geography or jurisdiction"
          },
          "exemption_id": {
            "type": "string",
            "description": "Exemption ID or certificate number filed with tax authority."
          },
          "active": {
            "type": "boolean",
            "description": "Required."
          }
        },
        "description": "A certificate or other recorded tax exemption on file for a customer (account) or specific subscription or transaction."
      },
      "Product": {
        "type": "object",
        "required": [
          "object",
          "id",
          "status",
          "descriptions"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Product”",
            "enum": [
              "Product"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "created": {
            "type": "string",
            "description": "The date/time the object was created.",
            "format": "datetime"
          },
          "descriptions": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "Must be \"List\"",
                "enum": [
                  "List"
                ]
              },
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductDescription"
                }
              }
            },
            "description": "Language-specific product/service descriptions"
          },
          "status": {
            "type": "string",
            "description": "aggregators may define whether they want to declare a product as available to offer.",
            "enum": [
              "Active",
              "Suspended"
            ]
          },
          "tax_classification": {
            "type": "string",
            "description": "The tax classification or code for this product."
          },
          "br_tax_category": {
            "type": "string",
            "enum": [
              "Goods",
              "Services"
            ]
          },
          "default_billing_plan": {
            "$ref": "#/components/schemas/BillingPlan"
          },
          "default_rate_plan": {
            "$ref": "#/components/schemas/RatePlan"
          },
          "end_of_life": {
            "type": "string",
            "description": "The date/time after which this product should be treated as out-of-service.",
            "format": "datetime"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "entitlements": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "Must be \"List\"",
                "enum": [
                  "List"
                ]
              },
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BareEntitlement"
                }
              }
            },
            "description": "Entitlements granted by active subscriptions using this product on one or more subscription items."
          },
          "inherited_entitlements": {
            "description": "If a Product has other products bundled with it, the Entitlements for the Products in the bundle will be returned",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "Must be \"List\"",
                "enum": [
                  "List"
                ]
              },
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BareEntitlement"
                }
              }
            }
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the payment processor for transactions associated with a subscription using this product."
          },
          "credit_granted": {
            "$ref": "#/components/schemas/Credit"
          },
          "prices": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "Must be \"List\"",
                "enum": [
                  "List"
                ]
              },
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              }
            },
            "description": "Default (i.e. “List”) prices for the product; one price per currency code. Prices can be overridden at purchase or with modification."
          },
          "bundled_products": {
            "type": "array",
            "description": "Other Products considered “bundled” under this one; purchase of this product’s SKU under a single price, grants the entitlements associated with it and with all bundled products (as of the time of creation).",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "description": "The Product object represents a unique aggregator product, with its own pricing, description and entitlement assignments. The API allows you to create, fetch, and update products. You can retrieve individual Product objects, as well as a list of all."
      },
      "SCR_Product": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "description": "The Product object represents a unique aggregator product, with its own pricing, description and entitlement assignments. The API allows you to create, fetch, and update products. You can retrieve individual Product objects, as well as a list of all."
      },
      "ProductList": {
        "type": "object",
        "description": "A list of Product.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Product object (string to select the “next”); included id should match that of the last object returned here."
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Product object (string to select the “previous”); included id should match that of the first object returned here."
          }
        }
      },
      "ProductLite": {
        "type": "object",
        "required": [
          "object",
          "id",
          "status",
          "descriptions"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Product”",
            "enum": [
              "Product"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "descriptions": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "Must be \"List\"",
                "enum": [
                  "List"
                ]
              },
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductDescription"
                }
              }
            },
            "description": "Language-specific product/service descriptions"
          },
          "status": {
            "type": "string",
            "description": "aggregators may define whether they want to declare a product as available to offer.",
            "enum": [
              "Active",
              "Suspended"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        }
      },
      "RatePlan": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “RatePlan”",
            "enum": [
              "RatePlan"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        },
        "description": "Rate Plans represents a pre-defined rating schedule - tier-based pricing for rated products (e.g. usage). Both pre-paid (aka License-based) and post-paid (metered, aka usage-based) services use pre-defined tiers to rate recorded events. Rate Plans support flat and per-unit pricing, volume discounts, standard consumption-based prices, included units with overage, and maximum/minimum charge limits."
      },
      "DiscountTicket": {
        "type": "object"
      },
      "ProductPrice": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “ProductPrice”",
            "enum": [
              "ProductPrice"
            ]
          },
          "amount": {
            "type": "number",
            "description": "Value of the currency amount."
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 currency code to be used for this ProductPrice Amount. Defaults to USD. Note that this is Mutually Exclusive of token"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          }
        }
      },
      "ProductDescription": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “ProductDescription”",
            "enum": [
              "ProductDescription"
            ]
          },
          "language": {
            "type": "string",
            "description": "The 2 character ISO language code in which the product description is written."
          },
          "description": {
            "type": "string",
            "description": "A description of this product written in language. A free-form string of less than 256 characters.",
            "maxLength": 256
          }
        }
      },
      "FlatDiscount": {
        "properties": {
          "currency": {
            "type": "string",
            "description": "ISO 4217 Currency Code of Discount."
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of Discount."
          }
        }
      },
      "Coupons": {
        "properties": {
          "object": {
            "type": "object",
            "description": "Value is “Coupon”"
          },
          "id": {
            "type": "string",
            "description": "A merchant-specified unique identifier."
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "max_redemptions": {
            "type": "integer",
            "format": "int32"
          },
          "codes_requested": {
            "type": "integer",
            "format": "int32"
          },
          "codes_generated": {
            "type": "integer",
            "format": "int32"
          },
          "coupon_prefix": {
            "type": "string"
          },
          "coupon_code_separator": {
            "type": "string"
          },
          "requires_activation_before_use": {
            "type": "boolean"
          },
          "on_demand_codes_allowed": {
            "type": "boolean"
          }
        }
      },
      "Campaigns": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Campaign”"
          },
          "id": {
            "type": "string",
            "description": "An aggregator-specified unique identifier. If not specified, this object can be identified by its vid"
          },
          "vid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VID"
              }
            ],
            "description": "A Globally Unique Identifier (GUID) for this object. Assigned by CashBox"
          },
          "name": {
            "type": "string",
            "description": "Name of campaign."
          },
          "description": {
            "type": "string",
            "description": "Description of campaign."
          },
          "state": {
            "type": "string",
            "description": "Can be Active, Canceled, Complete, Inactive, MatchAnyState, Pending, Undefined",
            "enum": [
              "Active",
              "Canceled",
              "Complete",
              "Inactive",
              "MatchAnyState",
              "Undefined",
              "Pending"
            ]
          },
          "offer_start_date": {
            "type": "string",
            "format": "date-time",
            "description": "The first date on which the offers may be redeemed."
          },
          "offer_end_date": {
            "type": "string",
            "format": "date-time",
            "description": "The last date on which the offers may be redeemed."
          },
          "campaign_discount_method": {
            "type": "string",
            "description": "Not implemented specifies the discounting method either Compounded or Direct"
          },
          "type": {
            "type": "string",
            "description": "specifies what type of campaign this is Coupon, Promotion, Voucher (Not implemented), Undefined. Campaign is Active."
          },
          "percentage_discount": {
            "type": "string",
            "format": "float",
            "description": "Defines the discount as a percentage of the original Product price. Note:- flat_amount_discounts and percentage_discount are mutually exclusive. It can be either or but not both"
          },
          "apply_discount_per_item": {
            "type": "string",
            "description": "Not implemented If true, discounts on items will be multiplied by the item quantity."
          },
          "account_level_eligible": {
            "type": "string",
            "description": "Not implemented Campaign can be applied to customer Accounts."
          },
          "purchase_level_eligible": {
            "type": "string",
            "description": "Not implemented Campaign can be applied to all items (i.e. subtotal) on a Transaction."
          },
          "eligible_products": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ],
            "description": "Zero or more eligible Products eligible for this Campaign"
          },
          "eligible_billing_plans": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingPlan"
              }
            ],
            "description": "Zero or more eligible BillingPlans eligible for this Campaign"
          },
          "restrict_to_new_subscription": {
            "type": "boolean",
            "description": "If true, Campaign offer only applies to new subscriptions, not existing ones"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date of a “Fixed” Campaign. “Rolling” Campaigns should leave this blank"
          },
          "number_of_periods": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times the promotion repeats, e.g. if you want to discount 3 cycles of a biweekly subscription, this would be 3"
          },
          "period_length": {
            "type": "string",
            "description": "Can be Day, Week, Month, Year, Hour, BillingCycle",
            "enum": [
              "Day",
              "week",
              "Mopnth",
              "year",
              "Hour",
              "BillingCycle"
            ]
          },
          "promotion_code": {
            "type": "string",
            "description": "The redemption code associated with the Promotion"
          },
          "promotion_code_aliases": {
            "type": "string",
            "description": "An array of alternative redemption codes for the Promotion. Note:- Setting this array will replace any existing list of aliases; it will not add new values to an existing list."
          },
          "flat_amount_discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlatDiscount"
            }
          },
          "voucher_credit": {
            "$ref": "#/components/schemas/Credit"
          },
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coupons"
            }
          },
          "item_display_text": {
            "type": "string",
            "description": "Name to be placed on ItemDiscounts generated for this Campaign."
          },
          "max_redemptions_per_customer": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Campaign redemptions for any given customer account."
          },
          "max_redemptions_per_autobill": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Campaign redemptions for any given subscription"
          },
          "apply_voucher_pre_transaction": {
            "type": "boolean",
            "description": "Voucher credits should be applied before the initial Transaction is processed"
          }
        }
      },
      "CampaignsList": {
        "type": "object",
        "description": "A list of cancel fee policies.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "List"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Campaigns"
            }
          },
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Campaigns object (string to select the \"next\"); included id should match that of the last object returned here."
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Campaigns object (string to select the \"previous\"); included id should match that of the first object returned here."
          }
        }
      },
      "PartnerSubscription": {
        "type": "object",
        "required": [
          "partnerSubscriptionId",
          "organizationId",
          "accountId",
          "subscriptionId",
          "subscriptionItemId",
          "externalPartnerSubscriptionId",
          "partnerCode",
          "productCode",
          "createdDate",
          "serviceStatus"
        ],
        "properties": {
          "partnerSubscriptionId": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the aggregator organization in MarketONE for which this record was created.",
            "maxLength": 50
          },
          "accountId": {
            "type": "string",
            "description": "The ID of the MarketONE account associated with this partner service record. This ID is not returned when the API is called with a partner API key. This will be returned withwhen the API is called with an aggregator API key.",
            "maxLength": 128
          },
          "accountVid": {
            "type": "string",
            "description": "The id of the SLM subscription associated with this partner service given by SLM in its response.",
            "maxLength": 128
          },
          "subscriptionId": {
            "type": "string",
            "description": "The id of the SLM subscription associated with this partner service.",
            "maxLength": 128
          },
          "subscriptionVid": {
            "type": "string",
            "description": "The id of the SLM subscription associated with this partner service given by SLM in its response.",
            "maxLength": 128
          },
          "subscriptionItemId": {
            "type": "string",
            "description": "The id of the SLM subscription Item associated with this partner service.",
            "maxLength": 128
          },
          "externalPartnerSubscriptionId": {
            "type": "string",
            "description": "The identifier returned by the partner from the \"AddSubscription\" callback.",
            "maxLength": 256
          },
          "registrationString": {
            "type": "string",
            "description": "Information that was sent to the partner as part of the \"AddSubscription\" callback; e.g. registration code",
            "maxLength": 256
          },
          "partnerUrl": {
            "type": "string",
            "description": "The optional response value that identifies the Url where user will be directed to for entering the registration code and completing the registration",
            "maxLength": 2048
          },
          "partnerCode": {
            "type": "string",
            "description": "The partner code as set by the partner admin in MarketONE.",
            "maxLength": 15
          },
          "productCode": {
            "type": "string",
            "description": "The product code defined by the partner identified by partner code.",
            "maxLength": 15
          },
          "createdDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "updatedDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "startServiceDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "endServiceDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "serviceStatus": {
            "type": "string",
            "description": "Status of the partner service MarketONE information. UNPROVISIONED indicates that the record was created by the callback response was not received. INACTIVE indicates the provisioning callback was sucesfully received by the partner service, but it has not been claimed by any service user yet. ACTIVE indicates that the service entitlement has been sucesfully provisioned, and a partner service user has claimed it. CANCELLATION-IN-PROGRESS indicates that the a  de-provisioning request is pending. CANCELLED indicates that the de-provisioning request confirmation has been received.",
            "maxLength": 50,
            "enum": [
              "UNPROVISIONED",
              "INACTIVE",
              "ACTIVE",
              "CANCELLATION-IN-PROGRESS",
              "CANCELLED"
            ]
          },
          "state": {
            "type": "string",
            "description": "Current state of the calls in regards to Create, Cancel and Reprovision Subscriptions. Used for state machine orchestration for MarketONE managed subscriptions.",
            "maxLength": 50,
            "enum": [
              "PROVISION_PENDING",
              "PROVISION_FAILED",
              "PROVISION_COMPLETE",
              "CANCELLATION_PENDING",
              "CANCELLATION_FAILED",
              "CANCELLATION_COMPLETE",
              "CANCELLATION_FAILED_PROVISION",
              "UPDATE_PENDING",
              "UPDATE_FAILED",
              "UPDATE_COMPLETE"
            ]
          },
          "billingStatus": {
            "type": "string",
            "description": "The status of the OTT billing partner subscription. PENDING-VALIDATION - the BILLING partner subscription creation was requested by the OTT partner and it requires validation, MarketONE triggered the OTP notification, aggregator sends the OTP to the consumer. The customer aggregator account details have not yet been validated as being correct. E.g. a MSISDN was provided, but we have not yet verified it belongs to the user. PENDING-CONFIRMATION - MarketONE successfully validated the BILLING partner subscription. All the BILLING partner subscription details are validated at this point, MarketONE awaiting confirmation from the customer via the OTT partner that they wish this partner subscription to be active for billing. ACTIVE - the BILLING partner subscription is available for billing CANCELLED - the BILLING partner subscription was canceled and can no longer be used for charges, but may be used for refunds if it had previously been active.",
            "maxLength": 50,
            "enum": [
              "PENDING-VALIDATION",
              "PENDING-CONFIRMATION",
              "ACTIVE",
              "CANCELLED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "ENTITLEMENT",
              "BILLING"
            ],
            "description": "the type of the partner subscription record; ENTITLEMENT - is when the partner subscription is represeting a entitlement relationship; BILLING - when the partner subscription is representing a billing relationship."
          },
          "billingPaymentMethod": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "description": "The information managed in MarketONE about partner service provisioning."
      },
      "PartnerSubscriptionWithReason": {
        "type": "object",
        "required": [
          "partnerSubscriptionId",
          "organizationId",
          "accountId",
          "subscriptionId",
          "subscriptionItemId",
          "externalPartnerSubscriptionId",
          "partnerCode",
          "productCode",
          "createdDate",
          "serviceStatus"
        ],
        "properties": {
          "partnerSubscriptionId": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the aggregator organization in MarketONE for which this record was created.",
            "maxLength": 50
          },
          "accountId": {
            "type": "string",
            "description": "The ID of the MarketONE account associated with this partner service record. This ID is not returned when the API is called with a partner API key. This will be returned withwhen the API is called with an aggregator API key.",
            "maxLength": 128
          },
          "accountVid": {
            "type": "string",
            "description": "The id of the SLM subscription associated with this partner service given by SLM in its response.",
            "maxLength": 128
          },
          "subscriptionId": {
            "type": "string",
            "description": "The id of the SLM subscription associated with this partner service.",
            "maxLength": 128
          },
          "subscriptionVid": {
            "type": "string",
            "description": "The id of the SLM subscription associated with this partner service given by SLM in its response.",
            "maxLength": 128
          },
          "subscriptionItemId": {
            "type": "string",
            "description": "The id of the SLM subscription Item associated with this partner service.",
            "maxLength": 128
          },
          "externalPartnerSubscriptionId": {
            "type": "string",
            "description": "The identifier returned by the partner from the \"AddSubscription\" callback.",
            "maxLength": 256
          },
          "registrationString": {
            "type": "string",
            "description": "Information that was sent to the partner as part of the \"AddSubscription\" callback; e.g. registration code",
            "maxLength": 256
          },
          "partnerUrl": {
            "type": "string",
            "description": "The optional response value that identifies the Url where user will be directed to for entering the registration code and completing the registration",
            "maxLength": 2048
          },
          "partnerCode": {
            "type": "string",
            "description": "The partner code as set by the partner admin in MarketONE.",
            "maxLength": 15
          },
          "productCode": {
            "type": "string",
            "description": "The product code defined by the partner identified by partner code.",
            "maxLength": 15
          },
          "createdDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "updatedDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "startServiceDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "endServiceDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "serviceStatus": {
            "type": "string",
            "description": "Status of the partner service MarketONE information. UNPROVISIONED indicates that the record was created by the callback response was not received. INACTIVE indicates the provisioning callback was sucesfully received by the partner service, but it has not been claimed by any service user yet. ACTIVE indicates that the service entitlement has been sucesfully provisioned, and a partner service user has claimed it. CANCELLATION-IN-PROGRESS indicates that the a  de-provisioning request is pending. CANCELLED indicates that the de-provisioning request confirmation has been received.",
            "maxLength": 50,
            "enum": [
              "UNPROVISIONED",
              "INACTIVE",
              "ACTIVE",
              "CANCELLATION-IN-PROGRESS",
              "CANCELLED"
            ]
          },
          "state": {
            "type": "string",
            "description": "Current state of the calls in regards to Create, Cancel and Reprovision Subscriptions. Used for state machine orchestration for MarketONE managed subscriptions.",
            "maxLength": 50,
            "enum": [
              "PROVISION_PENDING",
              "PROVISION_FAILED",
              "PROVISION_COMPLETE",
              "CANCELLATION_PENDING",
              "CANCELLATION_FAILED",
              "CANCELLATION_COMPLETE",
              "CANCELLATION_FAILED_PROVISION",
              "UPDATE_PENDING",
              "UPDATE_FAILED",
              "UPDATE_COMPLETE"
            ]
          },
          "billingStatus": {
            "type": "string",
            "description": "The status of the OTT billing partner subscription. PENDING-VALIDATION - the BILLING partner subscription creation was requested by the OTT partner and it requires validation, MarketONE triggered the OTP notification, aggregator sends the OTP to the consumer. The customer aggregator account details have not yet been validated as being correct. E.g. a MSISDN was provided, but we have not yet verified it belongs to the user. PENDING-CONFIRMATION - MarketONE successfully validated the BILLING partner subscription. All the BILLING partner subscription details are validated at this point, MarketONE awaiting confirmation from the customer via the OTT partner that they wish this partner subscription to be active for billing. ACTIVE - the BILLING partner subscription is available for billing CANCELLED - the BILLING partner subscription was canceled and can no longer be used for charges, but may be used for refunds if it had previously been active.",
            "maxLength": 50,
            "enum": [
              "PENDING-VALIDATION",
              "PENDING-CONFIRMATION",
              "ACTIVE",
              "CANCELLED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "ENTITLEMENT",
              "BILLING"
            ],
            "description": "the type of the partner subscription record; ENTITLEMENT - is when the partner subscription is represeting a entitlement relationship; BILLING - when the partner subscription is representing a billing relationship."
          },
          "billingPaymentMethod": {
            "$ref": "#/components/schemas/ID"
          },
          "reasonCode": {
            "type": "string"
          },
          "reasonDescription": {
            "type": "string"
          }
        },
        "description": "The information managed in MarketONE about partner service provisioning."
      },
      "PartnerSubscriptions": {
        "type": "array",
        "description": "A list of PartnerSubscription objects.",
        "items": {
          "$ref": "#/components/schemas/PartnerSubscription"
        }
      },
      "ValidateAccountRequest": {
        "required": [
          "identifier",
          "identifierType",
          "partnerCode"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "$ref": "#/components/schemas/AccountIdentifierType"
          },
          "identifier": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "partnerCode": {
            "type": "string",
            "maxLength": 16,
            "description": "Identifies the OTT service requesting the account validation. If this parameter is missing, the request is being triggered by internal MarketONE processes."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "An account is the end customer account which is referenced in the billing system. The Account holds the terms of a relationship for the partner services that has been entitled to a Customer.",
        "example": {
          "identifierType": "msisdn",
          "identifier": "4351234567",
          "partnerCode": "ABCDE"
        }
      },
      "NotificationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "minLength": 5,
            "pattern": "^[\\S]*$",
            "type": "string",
            "description": "Notification Action Type, used to identify the type of notification, and required action",
            "example": "msisdnVerificationRequired",
            "enum": [
              "msisdnVerificationRequired",
              "accountVerificationRequired",
              "partnerSubscriptionAdded",
              "partnerSubscriptionUpdated",
              "partnerSubscriptionCancelled",
              "accountAssociated"
            ]
          },
          "parameters": {
            "type": "array",
            "description": "Object array with key-value pairs to pass notification parameters.",
            "items": {
              "$ref": "#/components/schemas/MessageParameter"
            }
          }
        },
        "description": "Notification Request Request"
      },
      "MessageParameter": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "description": "Message parameter key",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[\\S]*$",
            "type": "string",
            "enum": [
              "accountId",
              "msisdn",
              "email",
              "subscriptionId",
              "redemptionCode",
              "redemptionUrl",
              "partnerSubscriptionId",
              "actionTokenUrl",
              "actionTokenCode"
            ]
          },
          "value": {
            "description": "Message parameter key value",
            "maxLength": 1000,
            "minLength": 1,
            "pattern": "^[\\S]*$",
            "type": "string"
          }
        },
        "example": {
          "key": "redemptionUrl",
          "value": "http://www.acme.com/redeem"
        }
      },
      "GenericNotificationRequest": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "maxLength": 50,
            "minLength": 5,
            "pattern": "^[\\S]*$",
            "type": "string",
            "description": "Notification Action Type, used to identify the type of notification, and required action",
            "example": "partnerSubscriptionAdded",
            "enum": [
              "partnerSubscriptionAdded",
              "partnerSubscriptionUpdated",
              "partnerSubscriptionCancelled",
              "accountAssociated",
              "msisdnVerificationRequired",
              "pinVerificationRequired",
              "accountVerificationRequired",
              "partnerSubscriptionActivationReminder",
              "validationSuspendedNonPayment",
              "validationSuspendedLostStolen",
              "validationEligibilityFailed",
              "validationServerError",
              "transactionSuspendedNonPayment",
              "transactionSuspendedLostStolen",
              "transactionInsufficientBalance",
              "transactionExceedsDailyLimit",
              "transactionExceedsMonthlyLimit",
              "transactionServerError",
              "transactionSuccess",
              "refundSuccess",
              "oneTimePinRequest",
              "userNotification"
            ]
          },
          "parameters": {
            "type": "array",
            "description": "Object array with key-value pairs to pass notification parameters.",
            "items": {
              "$ref": "#/components/schemas/GenericMessageParameter"
            }
          }
        },
        "description": "Notification Request Request"
      },
      "GenericMessageParameter": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "description": "Message parameter key",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[\\S]*$",
            "type": "string"
          },
          "value": {
            "description": "Message parameter key value",
            "maxLength": 1000,
            "minLength": 1,
            "pattern": "^[\\S]*$",
            "type": "string"
          }
        },
        "example": {
          "key": "redemptionUrl",
          "value": "http://www.acme.com/redeem"
        }
      },
      "aggregatorTransactionResponse": {
        "required": [
          "status",
          "confirmationId"
        ],
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 32,
            "type": "string",
            "enum": [
              "success",
              "failure"
            ],
            "description": "Indicates if the request was processed succesfully or not."
          },
          "confirmationId": {
            "maxLength": 256,
            "type": "string",
            "description": "An aggregator generated identifier to keep track of the confirmation received."
          }
        }
      },
      "NetflixGetAccountInfoResponse": {
        "type": "object",
        "required": [
          "PAI",
          "PartnerChargeCountry"
        ],
        "properties": {
          "PAI": {
            "type": "string",
            "description": "Partner Account Identifier (PAI) corresponding to partner\"s customer account."
          },
          "PartnerChargeCountry": {
            "type": "string",
            "description": "Two letter country codes, such as US, that conform to ISO 3166-1."
          },
          "ValidityDurationInSeconds": {
            "type": "integer",
            "description": "The cache expiration time. A value lower than 30 minutes is truncated to 30 minutes, while a value higher than 24 hours is truncated to 24 hours.."
          },
          "ServiceProvider": {
            "type": "string",
            "description": "Leveraging the ServiceProvider field allows you to build one integration with Netflix that can be used across multiple companies within your organization. If your platform supports multiple service providers, you can specify which one the customer is associated with.."
          },
          "PromotionID": {
            "type": "string",
            "description": "A non-null value when present should match the PromotionID agreed upon with Netflix. (This only applies to prepaid promotion integrations.)."
          },
          "Capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Capabilities"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/NetflixErrorObject"
          }
        },
        "description": "The Account represents an aggregator’s customer. As such it can contain as much or as little information as you collect about the customers (people or organizations) to which you offer billing and subscriptions. Subscriptions and Transactions must belong to an Account - as such, Accounts will be required in MarketONE for billing. Read More in our User Guide An Account can have any number of children accounts and may have up to one parent account. Read more in our User Guide. An Account owns the “on file” payment methods to be used by it in billing. Payment Methods can be created at the same time as an Account is created or updated, but when updating an existing Payment Method the Payment Method Endpoint must be used."
      },
      "NetflixGetMobileAccountInfoResponse": {
        "type": "object",
        "required": [
          "PartnerChargeCountry"
        ],
        "properties": {
          "PAI": {
            "type": "string",
            "description": "Partner Account Identifier (PAI) corresponding to partner\"s customer account."
          },
          "PartnerChargeCountry": {
            "type": "string",
            "description": "Two letter country codes, such as US, that conform to ISO 3166-1."
          },
          "ValidityDurationInSeconds": {
            "type": "integer",
            "description": "The cache expiration time. A value lower than 30 minutes is truncated to 30 minutes, while a value higher than 24 hours is truncated to 24 hours.."
          },
          "ServiceProvider": {
            "type": "string",
            "description": "Leveraging the ServiceProvider field allows you to build one integration with Netflix that can be used across multiple companies within your organization. If your platform supports multiple service providers, you can specify which one the customer is associated with.."
          },
          "PromotionID": {
            "type": "string",
            "description": "A non-null value when present should match the PromotionID agreed upon with Netflix. (This only applies to prepaid promotion integrations.)."
          },
          "isPrepaidPlan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Capabilities"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/NetflixErrorObject"
          }
        }
      },
      "Capabilities": {
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the capability.",
            "enum": [
              "SSI",
              "MOP",
              "PINVerification"
            ]
          },
          "value": {
            "type": "string",
            "description": "If true, the corresponding capability is available. If false, the corresponding capability is not available."
          }
        }
      },
      "NetflixErrorObject": {
        "type": "object",
        "required": [
          "ErrorCode",
          "HttpStatusCode",
          "ErrorDescription"
        ],
        "properties": {
          "HttpStatusCode": {
            "type": "integer",
            "description": "A value matching an Error Code in Errors.",
            "enum": [
              201,
              400,
              401,
              403,
              500,
              503
            ]
          },
          "ErrorCode": {
            "type": "string",
            "description": "A value matching an HTTP status code in Errors. The HTTP status of the response also should match this attribute.",
            "enum": [
              "MissingNetflixPDI",
              "BadAuthorization",
              "AllCapabilitiesRefused",
              "ServerError",
              "ServiceUnavailable"
            ]
          },
          "ErrorDescription": {
            "type": "string",
            "description": "A message describing the problem to aid debugging."
          }
        }
      },
      "NetflixPadiToken": {
        "type": "object",
        "required": [
          "object",
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "maxLength": 256,
            "description": "Token returned by Netflix as part of authentication of purchase in Android STB"
          }
        },
        "description": "Token object returned by Netflix as part of authentication of purchase in Android STB."
      },
      "V2ValidateAccountRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "$ref": "#/components/schemas/AccountIdentifierType"
          },
          "identifier": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "pinToken": {
            "description": "Token returned as part of PIN validation. Mandatory in case PIN validation is enabled for an aggregator.",
            "type": "string",
            "format": "string",
            "maxLength": 256
          }
        },
        "description": "An account is the end customer account which is referenced in the aggregator BSS system. The Account holds the terms of the relationship to services that have been entitled to a Customer.",
        "example": {
          "identifierType": "msisdn",
          "identifier": "4351234567"
        }
      },
      "OTTTransactionItem": {
        "type": "object",
        "required": [
          "code",
          "price"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The SKU or unique identifier of the product purchased with this item. This value must match one of the OTT service product codes defined in MarketONE or a tax code value (TOTAL_TAX)."
          },
          "name": {
            "type": "string",
            "description": "Name of the product purchased."
          },
          "price": {
            "type": "number",
            "description": "unit price of this item"
          },
          "quantity": {
            "type": "number",
            "description": "The unit quantity for the item."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "tax_classification": {
            "type": "string",
            "description": "The tax code or classification applicable to this item. Should default to \"NonTaxable\" for OTT managed subscriptions."
          },
          "total": {
            "type": "number",
            "description": "The grand total of this item"
          }
        }
      },
      "PartnerSubscriptionReference": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Account represents an aggregator’s customer."
      },
      "AccountReference": {
        "type": "object",
        "required": [
          "vid"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Account represents an aggregator’s customer."
      },
      "V2ValidatePinRequest": {
        "required": [
          "identifier",
          "identifierType",
          "pin"
        ],
        "type": "object",
        "properties": {
          "pin": {
            "maxLength": 8,
            "type": "string",
            "description": "the pin entered by the user."
          },
          "identifier": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "identifierType": {
            "$ref": "#/components/schemas/AccountIdentifierType"
          }
        },
        "example": {
          "identifier": "6477625320",
          "identifierType": "sms",
          "pin": "1234"
        }
      },
      "V2ValidatePinResponse": {
        "required": [
          "identifier",
          "identifierType",
          "pinToken"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "identifierType": {
            "$ref": "#/components/schemas/AccountIdentifierType"
          },
          "pinToken": {
            "type": "string",
            "maxLength": 256,
            "description": "A token which can be used for requests requiring PIN validation such as account validation. Note that PIN validation required is optional based on aggregator specific configuration."
          }
        },
        "example": {
          "identifier": "6477625320",
          "identifierType": "sms"
        }
      },
      "V2CreatePINRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "identifierType": {
            "$ref": "#/components/schemas/AccountIdentifierType"
          }
        }
      },
      "OTTV2TransactionRequest": {
        "type": "object",
        "required": [
          "id",
          "amount",
          "account",
          "items"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Transaction”",
            "enum": [
              "Transaction"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The time this transaction was initiated.",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "The net amount of the charge presented by this transaction, as a decimal. Must be positive (zero allowed)."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction"
          },
          "partnersubscription": {
            "$ref": "#/components/schemas/PartnerSubscriptionReference"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. For transactions resulting from a subscription, the metadata is also inherited from the subscription."
          },
          "items": {
            "type": "array",
            "description": "The array of Transaction Items belonging to this transaction. Items correspond to the charges.There will be 2 separate items - One for the actual amount and other for tax amount.",
            "items": {
              "$ref": "#/components/schemas/OTTTransactionItem"
            }
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the aggregator for this transaction."
          },
          "original_billing_date": {
            "type": "string",
            "description": "The original scheduled billing date associated with the billing for which this transaction collects funds. For an initial attempt, this is the same as the transaction date; for a retry transaction this is the original attempt date.",
            "format": "date-time"
          }
        },
        "description": "The Transaction object provides a way to charge a customer."
      },
      "OTTTransactionRequest": {
        "type": "object",
        "required": [
          "id",
          "amount",
          "account",
          "items"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Transaction”",
            "enum": [
              "Transaction"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The time this transaction was initiated.",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "The net amount of the charge presented by this transaction, as a decimal. Must be positive (zero allowed)."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction"
          },
          "account": {
            "$ref": "#/components/schemas/AccountReference"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. For transactions resulting from a subscription, the metadata is also inherited from the subscription."
          },
          "items": {
            "type": "array",
            "description": "The array of Transaction Items belonging to this transaction. Items correspond to the charges.There will be 2 separate items - One for the actual amount and other for tax amount.",
            "items": {
              "$ref": "#/components/schemas/OTTTransactionItem"
            }
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the aggregator for this transaction."
          },
          "original_billing_date": {
            "type": "string",
            "description": "The original scheduled billing date associated with the billing for which this transaction collects funds. For an initial attempt, this is the same as the transaction date; for a retry transaction this is the original attempt date.",
            "format": "date-time"
          }
        },
        "description": "The Transaction object provides a way to charge a customer."
      },
      "OTTTransactionResponseWithoutAccount": {
        "type": "object",
        "required": [
          "id",
          "amount",
          "items"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Value is “Transaction”",
            "enum": [
              "Transaction"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The time this transaction was initiated.",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "The net amount of the charge presented by this transaction, as a decimal. Must be positive (zero allowed)."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. For transactions resulting from a subscription, the metadata is also inherited from the subscription."
          },
          "items": {
            "type": "array",
            "description": "The array of Transaction Items belonging to this transaction. Items correspond to the charges.There will be 2 separate items - One for the actual amount and other for tax amount.",
            "items": {
              "$ref": "#/components/schemas/OTTTransactionItem"
            }
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the aggregator for this transaction."
          },
          "original_billing_date": {
            "type": "string",
            "description": "The original scheduled billing date associated with the billing for which this transaction collects funds. For an initial attempt, this is the same as the transaction date; for a retry transaction this is the original attempt date.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction."
          },
          "statusCode": {
            "type": "string",
            "description": "In case of failed transaction, the error code"
          }
        },
        "description": "The Transaction object provides a way to charge a customer."
      },
      "OTTTransactionResponse": {
        "title": "OTTTransactionResponse",
        "required": [
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "extConfirmationId": {
            "maxLength": 36,
            "type": "string",
            "description": "Transaction identifier"
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction once processed (mandatory on the response)"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The transaction response entity relates to the payment request that can be initiated either by the digital partner in the case of direct carrier billing (BILLING), or the backend billing system of the service provider at the end of every billing cycle."
      },
      "OTTRefundRequest": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The date/time at which the refund was requested.",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Amount of the refund. Must be positive (non-zero) and less than or equal to the as-yet-un-refunded balance of the specified transaction. Ignored if refundItems are specified."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction; defaults to USD."
          },
          "note": {
            "type": "string",
            "description": "Free-form specified note about refund."
          },
          "reasonCode": {
            "type": "string",
            "description": "Reason code for refund.",
            "enum": [
              "fraud",
              "purchase-not-approved",
              "entitlement-error",
              "billing-error",
              "account-cancelled",
              "general-error"
            ]
          },
          "partnerSubscriptionId": {
            "$ref": "#/components/schemas/ID"
          },
          "refund_distribution_strategy": {
            "type": "string",
            "description": "Defines strategy for distributing refund amount across the original TransactionItems. Default is None.",
            "enum": [
              "SpecifiedItems",
              "None"
            ]
          },
          "refund_items": {
            "type": "array",
            "description": "For item-level refunds, specifies the transaction items to refund with details.",
            "items": {
              "$ref": "#/components/schemas/OTTRefundItem"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Refund object provides a way to reverse a charge, refunding money to the customer. You can create, and retrieve individual Refunds; as well as list all existing Refunds. Refunds require a transaction – a refund can only be executed against an existing, successfully captured transaction. Refunds can be issued for any valid amount (in the currency of the original transaction) up to the as-yet un-refunded balance of the original transaction. You can issue any number of refunds on a given transaction (until it has been fully refunded)."
      },
      "OTTRefundResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The date/time at which the refund was requested.",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Amount of the refund. Must be positive (non-zero) and less than or equal to the as-yet-un-refunded balance of the specified transaction. Ignored if refundItems are specified."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction; defaults to USD."
          },
          "note": {
            "type": "string",
            "description": "Free-form specified note about refund."
          },
          "refund_distribution_strategy": {
            "type": "string",
            "description": "Defines strategy for distributing refund amount across the original TransactionItems. Default is None.",
            "enum": [
              "SpecifiedItems",
              "None"
            ]
          },
          "refund_items": {
            "type": "array",
            "description": "For item-level refunds, specifies the transaction items to refund with details.",
            "items": {
              "$ref": "#/components/schemas/OTTRefundItem"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Refund object provides a way to reverse a charge, refunding money to the customer. You can create, and retrieve individual Refunds; as well as list all existing Refunds. Refunds require a transaction – a refund can only be executed against an existing, successfully captured transaction. Refunds can be issued for any valid amount (in the currency of the original transaction) up to the as-yet un-refunded balance of the original transaction. You can issue any number of refunds on a given transaction (until it has been fully refunded)."
      },
      "OTTRefundItem": {
        "required": [
          "code",
          "amount"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code on the original transaction line item. If the code is passed in, and can be used to uniquely identify the transaction item, it will be used, otherwise an error will be returned. Code must be TOTAL_TAX for tax refund items."
          },
          "amount": {
            "type": "number",
            "description": "Amount of the requested refund for this item, in the currency of the overall transaction. This amount must not exceed the original TransactionItem amount, minus any discounts and minus the sum of all prior refunds against this item."
          }
        }
      },
      "METADATA": {
        "type": "object",
        "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information.",
        "additionalProperties": {
          "type": "string",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        }
      },
      "METADATA1": {
        "$ref": "#/components/schemas/METADATA"
      },
      "ID": {
        "type": "string",
        "description": "A unique identifier.",
        "maxLength": 128
      },
      "SubItemID": {
        "type": "string",
        "description": "A unique identifier. This field will be auto generated and returned by MarketONE.",
        "maxLength": 128
      },
      "VID": {
        "type": "string",
        "description": "A Globally Unique Identifier (GUID) for this object. This value is generated by MarketONE.",
        "maxLength": 128
      },
      "ExtID": {
        "type": "string",
        "description": "An aggregator-specified unique identifier. Optionally, this object can be identified by its mid. Using a unique custom identifier is strongly encouraged.",
        "maxLength": 128
      },
      "esn": {
        "type": "string",
        "description": "Electronic Serial Number - Uniquely identifies a set top box",
        "maxLength": 64
      },
      "MID": {
        "type": "integer",
        "description": "An internal ID for this object. This value is generated by MarketONE."
      },
      "AccountIdentifierType": {
        "type": "string",
        "maxLength": 20,
        "enum": [
          "ban",
          "msisdn",
          "email",
          "stb"
        ],
        "description": "The type of a customer account identifier."
      },
      "AccountIdentifier": {
        "pattern": "^[0-9]{10}$",
        "type": "string",
        "maxLength": 256,
        "description": "An identifier that can be used to locate an aggregator customer account."
      },
      "PLMCode": {
        "type": "string",
        "maxLength": 36,
        "description": "The code used by a Partner to define a product"
      },
      "aggregatorUser": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ExtID"
          },
          "mid": {
            "$ref": "#/components/schemas/MID"
          },
          "activatedDate": {
            "type": "string",
            "description": "The entity’s activation date and time, expressed in UNIX Epoch time",
            "format": "date-time"
          },
          "attributes": {
            "type": "array",
            "description": "A list of custom data fields that help to define the ULM entity.",
            "items": {
              "$ref": "#/components/schemas/aggregatorAttribute"
            }
          },
          "avatarUrl": {
            "type": "string",
            "description": "The URL of the user’s avatar",
            "example": "http://myavatar/johnsmith"
          },
          "createdDate": {
            "type": "string",
            "description": "The entity’s creation date and time in UNIX Epoch time",
            "format": "date-time"
          },
          "credential": {
            "type": "string",
            "description": "The user’s password. ULM receives the exact password as input, however the password is hashed as output from ULM. The hash may not be present in all output contexts.",
            "example": "2eb8bbd99fd71e726461d8b6512515c4b87"
          },
          "credentialSet": {
            "type": "boolean",
            "description": "Whether or not the user currently has a password set. This field exists because the \"credential\" field is normally omitted in user-facing responses; this field allows UIs to provide some information about the password",
            "example": true
          },
          "deactivatedDate": {
            "type": "string",
            "description": "The entity’s deactivation date and time, expressed in UNIX Epoch time",
            "format": "date-time"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the entity",
            "example": "Entity display name"
          },
          "emailAddress": {
            "type": "string",
            "description": "The user’s email address",
            "example": "john@example.com"
          },
          "status": {
            "type": "string",
            "description": "The current ULM status of the user",
            "enum": [
              "pending",
              "activated",
              "suspended",
              "terminated"
            ],
            "example": "activated"
          },
          "suspendedDate": {
            "type": "string",
            "description": "The entity’s suspension date and time, expressed in UNIX Epoch time",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "For instance, group users might be differentiated as user.PrimaryUser, user.RegularUser, user.AdminUser.",
            "enum": [
              "user.PrimaryUser",
              "user.RegularUser",
              "user.AdminUser"
            ],
            "example": "user.RegularUser"
          },
          "updatedDate": {
            "type": "string",
            "description": "The most recent date and time that the entity was updated, expressed in UNIX Epoch time",
            "format": "datetime"
          },
          "usernames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Username"
            }
          }
        },
        "description": "The data model that contains user properties and attributes. Some properties come on a ULM entity by default. Service providers can create and add their own additional properties in order to extend the ULM platform."
      },
      "Username": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "A list of custom data fields that help to define the ULM entity.",
            "items": {
              "$ref": "#/components/schemas/aggregatorAttribute"
            }
          },
          "createdDate": {
            "type": "string",
            "description": "The entity’s creation date and time in UNIX Epoch time",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "description": "The unique ID number of the MarketONE entity.",
            "format": "int64",
            "example": 1
          },
          "mid": {
            "$ref": "#/components/schemas/MID"
          },
          "name": {
            "type": "string",
            "description": "ULM username based on the user’s email address",
            "example": "new_joe@example.com"
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is the primary username of the user",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "The status of the entity. Possible values include:\n• activating - The entity has been provisioned, but is not yet ready to be used or consumed.\n• activated - The entity is active, and the functionality to which it is tied is enabled.\n• suspended - The entity is temporarily deactivated, but can be reactivated in the future.\n• deactivated - The entity is permanently deactivated, and may be deleted from the system in the near future.\n• pending - The entity has been added but is not yet verified for use.  It may be linked to an existing entity in order to eventually replace the original entity.\n• unknown - This is a generic, catch all state for specific entities.\n\nNote: This  field is the current status in GET calls, and the desired status in PUT and POST calls.",
            "example": "activated"
          },
          "type": {
            "type": "string",
            "description": "A particular type of a given entity. \n\nCertain entities can have more than one type, and this depends on the client-specific implementation of ULM. For instance, family users might be differentiated as user.PrimaryUser, user.RegularUser, user.AdminUser, and so on. Mobile billing accounts might be differentiated as account.PrePaidAccount or account.PostPaidAccount, and so forth. ",
            "example": "com.uxpsystems.ulm.entity.RegularEntityType"
          },
          "updatedDate": {
            "type": "string",
            "description": "The most recent date and time that the entity was updated, expressed in UNIX Epoch time",
            "format": "date-time"
          }
        },
        "description": "Data model that contains the properties and attributes which define a ULM username."
      },
      "aggregatorAttribute": {
        "title": "Attribute",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the attribute",
            "example": "operationsSupportSystemNumber"
          },
          "scope": {
            "type": "string",
            "description": "One of four possible scope settings that define the visibility and persistence of the attribute. Possible values include: \n\n• Transient - The attribute is temporary metadata sent along with an API call. It used once in the context of an individual request, but it is not saved in the database. Therefore, transient attributes are not returned in GET calls or echoed back in POST calls. \n\n• Provider - This is a secret attribute set by a service provider. It is saved in the database, but is not returned in GET calls or echoed back in POST calls. \n\n• Service - The is common, visible attributes that persists in the database and is visible in the API call. \n\n• All - This scope setting is identical to the Service scope setting.",
            "example": "service",
            "enum": [
              "all",
              "provider",
              "service",
              "transient"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value of the attribute",
            "example": "abc123"
          }
        },
        "description": "Data fields used in an attribute. Not all fields may be present in a GET response. \n\nSome attributes may come with a ULM entity by default. Service providers can create and add their own additional attributes in order to extend the ULM platform. Attributes must be whitelisted before they can be added and used."
      },
      "LoginRequestDto": {
        "title": "LoginRequestDto",
        "required": [
          "authnIdentifier",
          "credential"
        ],
        "type": "object",
        "properties": {
          "authnIdentifier": {
            "type": "string",
            "description": "Authentication identifier",
            "example": "john@example.com"
          },
          "credential": {
            "type": "string",
            "description": "The password, PIN, or other login credential supplied by the user",
            "example": "changeme"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "description": "The object contains information about the error."
      },
      "400ValError": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "400ErrorBasic": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "invalid-request"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ValidatePinErrorResponse400": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "a code that identifies error",
            "enum": [
              "invalid-request",
              "invalid-pin"
            ]
          },
          "message": {
            "type": "string",
            "description": "A message which describes the error in details",
            "enum": [
              "Invalid request.",
              "Invalid PIN."
            ]
          }
        }
      },
      "400Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "invalid-request"
            ]
          },
          "message": {
            "type": "string"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/400ValError"
            }
          }
        }
      },
      "400ErrorPS": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "invalid-request",
              "blacklisted-service-csp",
              "blacklisted-service-user",
              "eligibility-failed-csp",
              "insufficient-balance",
              "server-error",
              "suspended-long-term",
              "suspended-lost-stolen",
              "suspended-non-payment",
              "suspended-short-term"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Invalid request.",
              "You are not allowed to make this purchase because you are blacklisted by the aggregator.",
              "You are not allowed to make this purchase based on your user preferences.",
              "You are not eligible to subscribe to this service based on the rules set by your aggregator.",
              "Insufficient funds (prepaid).",
              "Server error.",
              "Voluntarily long-term account suspended on user request.",
              "The account is suspended because of a lost or stolen phone.",
              "The account is suspended because of non-payment or other billing issue.",
              "Voluntarily temporary account suspended on user request."
            ]
          }
        }
      },
      "400ErrorTransaction": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "invalid-request",
              "eligibility-failed-csp",
              "exceeds-daily-limit",
              "exceeds-daily-limit",
              "insufficient-balance",
              "server-error",
              "suspended-long-term",
              "suspended-lost-stolen",
              "suspended-non-payment",
              "suspended-short-term",
              "invalid-partner-product"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Invalid request.",
              "You are not eligible to subscribe to this service based on the rules set by your aggregator.",
              "Insufficient funds (prepaid).",
              "Server error.",
              "Voluntarily long-term account suspended on user request.",
              "The account is suspended because of a lost or stolen phone.",
              "The account is suspended because of non-payment or other billing issue.",
              "Voluntarily temporary account suspended on user request.",
              "Partner product not defined in PLM."
            ]
          }
        }
      },
      "401Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "authentication-required",
              "invalid-api-key",
              "api-key-not-found"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "403Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "forbidden",
              "access-denied"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "404Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "not-found"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GETTransactionErrorResponse404": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "a code that identifies error",
            "enum": [
              "transaction-not-found"
            ]
          },
          "message": {
            "type": "string",
            "description": "A message which describes the error in details",
            "enum": [
              "transaction not found"
            ]
          }
        }
      },
      "GETRefundErrorResponse404": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "a code that identifies error",
            "enum": [
              "refund-transaction-not-found"
            ]
          },
          "message": {
            "type": "string",
            "description": "A message which describes the error in details",
            "enum": [
              "refund transaction not found"
            ]
          }
        }
      },
      "404ErrorAccount": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "account-not-found"
          },
          "message": {
            "type": "string",
            "example": "account not found"
          }
        }
      },
      "404ErrorPS": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "partner-subscription-not-found"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "409Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "input-conflict"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "429Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "500Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "server-error"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "501Error": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "server-feature-not-implemented"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "BillingOption": {
        "type": "object",
        "required": [
          "billingPlanId"
        ],
        "properties": {
          "billingPlanId": {
            "$ref": "#/components/schemas/ID"
          },
          "campaignId": {
            "$ref": "#/components/schemas/ID"
          }
        }
      },
      "Offer": {
        "type": "object",
        "required": [
          "productId"
        ],
        "properties": {
          "productId": {
            "$ref": "#/components/schemas/ID"
          },
          "billingOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingOption"
            }
          }
        }
      },
      "RuntimeEvent": {
        "type": "object",
        "required": [
          "type",
          "runtime"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "description": "the event id provided by application generating the event."
          },
          "applicationName": {
            "type": "string",
            "maxLength": 128,
            "description": "the name of the application sending this event",
            "example": "BSS"
          },
          "type": {
            "type": "string",
            "enum": [
              "deleted",
              "updated"
            ]
          },
          "runtime": {
            "$ref": "#/components/schemas/Runtime"
          }
        }
      },
      "AccountEvent": {
        "type": "object",
        "required": [
          "type",
          "account"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "description": "the event id provided by application generating the event."
          },
          "applicationName": {
            "type": "string",
            "maxLength": 128,
            "description": "the name of the application sending this event",
            "example": "BSS"
          },
          "type": {
            "type": "string",
            "enum": [
              "terminated",
              "updated",
              "suspended",
              "resumed"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/CSPAccountResponse"
          },
          "replaces": {
            "$ref": "#/components/schemas/ReplacesAccount"
          }
        }
      },
      "SubscriptionEvent": {
        "type": "object",
        "required": [
          "eventClass",
          "eventType",
          "eventDatetime",
          "contents"
        ],
        "properties": {
          "eventClass": {
            "type": "string",
            "maxLength": 36,
            "description": "the event id provided by application generating the event.",
            "enum": [
              "Subscription"
            ]
          },
          "eventType": {
            "type": "string",
            "maxLength": 128,
            "description": "the name of the application sending this event",
            "enum": [
              "SubscriptionCreated",
              "SubscriptionStarted",
              "SubscriptionModified",
              "SubscriptionCancelled",
              "SubscriptionStopped",
              "SubscriptionPaused",
              "SubscriptionResumed"
            ]
          },
          "eventDatetime": {
            "type": "string"
          },
          "contents": {
            "$ref": "#/components/schemas/Subscription"
          }
        }
      },
      "PartnerSubscriptionEvent": {
        "type": "object",
        "required": [
          "eventClass",
          "eventType",
          "eventDatetime",
          "contents"
        ],
        "properties": {
          "eventClass": {
            "type": "string",
            "maxLength": 36,
            "description": "the event id provided by application generating the event.",
            "enum": [
              "PartnerSubscription"
            ]
          },
          "eventType": {
            "type": "string",
            "maxLength": 128,
            "description": "the name of the application sending this event",
            "enum": [
              "PartnerSubscriptionCreated",
              "PartnerSubscriptionModified",
              "PartnerSubscriptionValidated",
              "PartnerSubscriptionConfirmed",
              "PartnerSubscriptionCancelled"
            ]
          },
          "eventDatetime": {
            "type": "string"
          },
          "contents": {
            "$ref": "#/components/schemas/PartnerSubscriptionWithReason"
          }
        }
      },
      "PartnerSubscriptionV2": {
        "type": "object",
        "required": [
          "id",
          "type",
          "organizationId",
          "partnerCode",
          "createdDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the aggregator organization in MarketONE for which this record was created.",
            "maxLength": 50
          },
          "accountId": {
            "type": "string",
            "description": "The ID of the MarketONE account associated with this partner service record. This ID is not returned when the API is called with a partner API key. This will be returned withwhen the API is called with an aggregator API key.",
            "maxLength": 128
          },
          "subscriptionId": {
            "type": "string",
            "description": "The id of the SLM subscription associated with this partner service status.",
            "maxLength": 128
          },
          "partnerSubscriptionId": {
            "type": "string",
            "description": "The identifier returned by the partner from the \"AddSubscription\" callback.",
            "maxLength": 256
          },
          "registrationString": {
            "type": "string",
            "description": "Information that was sent to the partner as part of the \"AddSubscription\" callback; e.g. registration code",
            "maxLength": 256
          },
          "partnerUrl": {
            "type": "string",
            "description": "The optional response value that identifies the Url where user will be directed to for entering the registration code and completing the registration",
            "maxLength": 2048
          },
          "partnerCode": {
            "type": "string",
            "description": "The partner code as set by the partner admin in MarketONE.",
            "maxLength": 15
          },
          "productCode": {
            "type": "string",
            "description": "The product code defined by the partner identified by partner code.",
            "maxLength": 15
          },
          "createdDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "updatedDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "serviceStatus": {
            "type": "string",
            "description": "Status of the partner service MarketONE information. UNPROVISIONED indicates that the record was created by the callback response was not received. INACTIVE indicates the provisioning callback was sucesfully received by the partner service, but it has not been claimed by any service user yet. ACTIVE indicates that the service entitlement has been sucesfully provisioned, and a partner service user has claimed it. CANCELLATION-IN-PROGRESS indicates that the a  de-provisioning request is pending. CANCELLED indicates that the de-provisioning request confirmation has been received.",
            "maxLength": 50,
            "enum": [
              "UNPROVISIONED",
              "INACTIVE",
              "ACTIVE",
              "CANCELLATION-IN-PROGRESS",
              "CANCELLED"
            ]
          },
          "billingStatus": {
            "type": "string",
            "description": "The status of the OTT billing partner subscription. PENDING-VALIDATION - the BILLING partner subscription creation was requested by the OTT partner and it requires validation. PENDING-CONFIRMATION - MarketONE successfully validated the BILLING partner subscription. All the BILLING partner subscription details are validated at this point, MarketONE awaiting confirmation from the customer via the OTT partner that they wish this partner subscription to be active for billing. ACTIVE - the BILLING partner subscription is available for billing. CANCELLED - the BILLING partner subscription was canceled and can no longer be used for charges, but may be used for refunds if it had previously been active.",
            "maxLength": 50,
            "enum": [
              "PENDING-VALIDATION",
              "PENDING-CONFIRMATION",
              "ACTIVE",
              "CANCELLED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "ENTITLEMENT",
              "BILLING"
            ],
            "description": "the type of the partner subscription record; ENTITLEMENT - is when the partner subscription is represeting a entitlement relationship; BILLING - when the partner subscription is representing a billing relationship."
          },
          "billingPaymentMethod": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "description": "The information managed in MarketONE about an OTT relationship."
      },
      "PartnerSubscriptionCreation": {
        "type": "object",
        "required": [
          "id",
          "type",
          "organizationId",
          "partnerCode",
          "createdDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the aggregator organization in MarketONE for which this record was created.",
            "maxLength": 50
          },
          "partnerCode": {
            "type": "string",
            "description": "The partner code as set by the partner admin in MarketONE.",
            "maxLength": 15
          },
          "createdDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "updatedDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "billingStatus": {
            "type": "string",
            "description": "The status of the OTT billing partner subscription. PENDING-VALIDATION - the BILLING partner subscription creation was requested by the OTT partner and it requires validation.  PENDING-CONFIRMATION - MarketONE successfully validated the BILLING partner subscription. ACTIVE - the BILLING partner subscription is available for billing.",
            "maxLength": 50,
            "enum": [
              "PENDING-VALIDATION",
              "PENDING-CONFIRMATION",
              "ACTIVE"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "BILLING",
              "ENTITLEMENT"
            ],
            "description": "the type of the partner subscription record; ENTITLEMENT - is when the partner subscription is represeting a entitlement relationship; BILLING - when the partner subscription is representing a billing relationship."
          },
          "account": {
            "$ref": "#/components/schemas/CSPAccountRef"
          }
        },
        "description": "The information managed in MarketONE about OTT relationship."
      },
      "PartnerSubscriptionValidation": {
        "type": "object",
        "required": [
          "id",
          "type",
          "organizationId",
          "partnerCode",
          "createdDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the aggregator organization in MarketONE for which this record was created.",
            "maxLength": 50
          },
          "partnerCode": {
            "type": "string",
            "description": "The partner code as set by the partner admin in MarketONE.",
            "maxLength": 15
          },
          "createdDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "updatedDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "billingStatus": {
            "type": "string",
            "description": "The status of the OTT billing partner subscription. PENDING-CONFIRMATION - MarketONE successfully validated the BILLING partner subscription. ACTIVE - the BILLING partner subscription is available for billing.",
            "maxLength": 50,
            "enum": [
              "PENDING-CONFIRMATION",
              "ACTIVE"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "BILLING",
              "ENTITLEMENT"
            ],
            "description": "the type of the partner subscription record; ENTITLEMENT - is when the partner subscription is represeting a entitlement relationship; BILLING - when the partner subscription is representing a billing relationship."
          },
          "account": {
            "$ref": "#/components/schemas/CSPAccountRef"
          }
        }
      },
      "PartnerSubscriptionConfirmation": {
        "type": "object",
        "required": [
          "id",
          "type",
          "organizationId",
          "partnerCode",
          "createdDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the aggregator organization in MarketONE for which this record was created.",
            "maxLength": 50
          },
          "partnerCode": {
            "type": "string",
            "description": "The partner code as set by the partner admin in MarketONE.",
            "maxLength": 15
          },
          "createdDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "updatedDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "billingStatus": {
            "type": "string",
            "description": "ACTIVE - the BILLING partner subscription is available for billing.",
            "maxLength": 50,
            "enum": [
              "ACTIVE"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "BILLING",
              "ENTITLEMENT"
            ],
            "description": "the type of the partner subscription record; ENTITLEMENT - is when the partner subscription is represeting a entitlement relationship; BILLING - when the partner subscription is representing a billing relationship."
          },
          "account": {
            "$ref": "#/components/schemas/CSPAccountRef"
          }
        }
      },
      "PartnerSubscriptionCancellation": {
        "type": "object",
        "required": [
          "id",
          "type",
          "organizationId",
          "partnerCode",
          "createdDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "MarketONE partner service provisioning record identifier.",
            "maxLength": 50
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the aggregator organization in MarketONE for which this record was created.",
            "maxLength": 50
          },
          "partnerCode": {
            "type": "string",
            "description": "The partner code as set by the partner admin in MarketONE.",
            "maxLength": 15
          },
          "createdDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was created.",
            "format": "datetime"
          },
          "updatedDate": {
            "type": "string",
            "description": "The timestamp (ISO 8601 format) when the partner service provisioning information record was updated.",
            "format": "datetime"
          },
          "billingStatus": {
            "type": "string",
            "description": "The status of the OTT billing partner subscription.",
            "maxLength": 50,
            "enum": [
              "CANCELLED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "BILLING",
              "ENTITLEMENT"
            ],
            "description": "the type of the partner subscription record; ENTITLEMENT - is when the partner subscription is represeting a entitlement relationship; BILLING - when the partner subscription is representing a billing relationship."
          }
        }
      },
      "PostPartnerSubscriptionRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "$ref": "#/components/schemas/AccountIdentifierType"
          },
          "identifier": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "plmCode": {
            "$ref": "#/components/schemas/PLMCode"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "An account is the end customer account which is referenced in the aggregator BSS system. The Account holds the terms of the relationship to services that have been entitled to a Customer.",
        "example": {
          "identifierType": "msisdn",
          "identifier": "4351234567",
          "plmCode": "GOOG"
        }
      },
      "AccountRef": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "Account"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "CSPAccountRef": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "SubscriptionRef": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "Subscription"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "SubscriptionItemRef": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "SubscriptionItem"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "ProductRef": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "Product"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "BillingPlanRef": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "BillingPlan"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          }
        }
      },
      "CSPAccountList": {
        "type": "object",
        "description": "A list of Aggregator Accounts.",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSPAccountResponse"
            }
          },
          "url": {
            "type": "string",
            "description": "The query string provided in the request"
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Subscription object (string to select the “next”); included id should match that of the last object returned here."
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Subscriptions object (string to select the “previous”); included id should match that of the first object returned here."
          }
        }
      },
      "ReplacesAccount": {
        "type": "object",
        "required": [
          "account"
        ],
        "properties": {
          "account": {
            "$ref": "#/components/schemas/CSPAccountResponse"
          }
        }
      },
      "CSPAccountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "external_id": {
            "type": "string",
            "description": "An additional Aggregator-specified unique identifier for when you have two external (non-MarketONE) systems using two different identification schemes for the same customer. It can be used in place of vid or id"
          },
          "type": {
            "type": "string",
            "description": "Account type"
          },
          "status": {
            "type": "string",
            "description": "Account status"
          },
          "email": {
            "type": "string",
            "description": "The email address associated with this Account."
          },
          "language": {
            "type": "string",
            "description": "The language (code) preferred for communications."
          },
          "name": {
            "type": "string",
            "description": "The name of the customer primarily associated with this Account."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/CSPAddress"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSPPaymentMethod"
            },
            "description": "The payment methods for this Account."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Account represents a billing relationship with a customer. As such it can contain as much or as little information as you collect about customers (people or organizations) to which you offer billing and subscriptions. Subscriptions and Transactions must belong to an Account - as such, Accounts will be required in MarketONE for billing. An Account can have any number of children accounts and may have up to one parent account. An Account owns the “on file” payment methods to be used for billing. Payment Methods can be created at the same time as an Account being created or updated, but when updating an existing Payment Method the Payment Method Endpoint must be used."
      },
      "AccountValidateResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "vid": {
            "$ref": "#/components/schemas/VID"
          },
          "external_id": {
            "type": "string",
            "description": "An additional Aggregator-specified unique identifier for when you have two external (non-MarketONE) systems using two different identification schemes for the same customer. It can be used in place of vid or id"
          },
          "type": {
            "type": "string",
            "description": "Account type"
          },
          "status": {
            "type": "string",
            "description": "Account status"
          },
          "email": {
            "type": "string",
            "description": "The email address associated with this Account."
          },
          "language": {
            "type": "string",
            "description": "The language (code) preferred for communications."
          },
          "name": {
            "type": "string",
            "description": "The name of the customer primarily associated with this Account."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/CSPAddress"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSPPaymentMethod"
            },
            "description": "The payment methods for this Account."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "eligibilityData": {
            "$ref": "#/components/schemas/EligibilityData"
          }
        },
        "description": "The Account represents a billing relationship with a customer. As such it can contain as much or as little information as you collect about customers (people or organizations) to which you offer billing and subscriptions. Subscriptions and Transactions must belong to an Account - as such, Accounts will be required in MarketONE for billing. An Account can have any number of children accounts and may have up to one parent account. An Account owns the “on file” payment methods to be used for billing. Payment Methods can be created at the same time as an Account being created or updated, but when updating an existing Payment Method the Payment Method Endpoint must be used."
      },
      "EligibilityData": {
        "type": "object",
        "description": "This contains a list of eligible payment method IDs for payment methods that can be used for purchases referencing that a specific PLM code. Note that currently the PLM is a PLM product code. This PLM code is also used in the metadata of products defined in SLM as PLM-CODE.",
        "properties": {
          "plmCode": {
            "type": "string"
          },
          "eligiblePaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID"
            }
          }
        }
      },
      "CSPParentAccount": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "external_id": {
            "type": "string",
            "description": "An additional Aggregator-specified unique identifier for when two systems using two different identification schemes for the same customer are used. It can be used in place of vid or id"
          },
          "email": {
            "type": "string",
            "description": "The email address associated with this Account."
          },
          "language": {
            "type": "string",
            "description": "The language (code) preferred for communications."
          },
          "name": {
            "type": "string",
            "description": "The name of the person primarily associated with this Account."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/CSPAddress"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSPPaymentMethod"
            },
            "description": "The payment methods for this Account."
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Account represents a billing relationship with a customer. As such it can contain as much or as little information as you collect about customers (people or organizations) to which you offer billing and subscriptions. Subscriptions and Transactions must belong to an Account - as such, Accounts will be required in MarketONE for billing.An Account can have any number of children accounts and may have up to one parent account. An Account owns the “on file” payment methods to be used by it in billing. Payment Methods can be created at the same time as an Account is created or updated, but when updating an existing Payment Method the Payment Method Endpoint must be used."
      },
      "CSPAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the person or contact associated with this address."
          },
          "line1": {
            "type": "string",
            "description": "Address Line 1"
          },
          "line2": {
            "type": "string",
            "description": "Address Line 2"
          },
          "line3": {
            "type": "string",
            "description": "Address Line 3"
          },
          "city": {
            "type": "string"
          },
          "county": {
            "type": "string"
          },
          "district": {
            "type": "string",
            "description": "State, Province, or District"
          },
          "postal_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          }
        },
        "description": "The Address object represents a physical or mailing address."
      },
      "CSPSubscriptionList": {
        "type": "object",
        "description": "A list of Subscriptions.",
        "required": [
          "total_count",
          "data"
        ],
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "Integer count of the number of items in the returned list."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSPSubscription"
            }
          },
          "next": {
            "type": "string",
            "description": "The route (partial URL) to the next Subscription object (string to select the “next”); included id should match that of the last object returned here"
          },
          "previous": {
            "type": "string",
            "description": "The route (partial URL) to the previous Subscriptions object (string to select the “previous”); included id should match that of the first object returned here."
          }
        }
      },
      "CSPSubscription": {
        "type": "object",
        "required": [
          "object",
          "id",
          "account",
          "status",
          "items"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The date/time at which the subscription was requested."
          },
          "account": {
            "$ref": "#/components/schemas/CSPAccountReference"
          },
          "status": {
            "type": "string",
            "description": "The status of the subscription from a service and entitlement perspective.",
            "enum": [
              "Pending Activation",
              "Active",
              "Pending Cancel",
              "Cancelled",
              "Expired",
              "Processing",
              "Deleted",
              "Unknown",
              "Paused"
            ]
          },
          "starts": {
            "type": "string",
            "description": "The date/time the subscription starts service.",
            "format": "datetime"
          },
          "ends": {
            "type": "string",
            "description": "The date/time the subscription ends service.",
            "format": "datetime"
          },
          "entitled_through": {
            "type": "string",
            "description": "The date/time to which the subscription will entitle service if no further payments are made – a “paid thru” date based on billing schedule and grace period.",
            "format": "datetime"
          },
          "items": {
            "type": "object",
            "properties": {
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CSPSubscriptionItem"
                }
              }
            },
            "description": "The product-based line items for the subscription."
          },
          "billing_day": {
            "type": "integer",
            "description": "The day of the month on which the subscription is (typically) billed. Often called an “anniversary date.”"
          },
          "affiliate": {
            "type": "string",
            "description": "Affiliate or channel identifier, if any, under which the subscription was submitted."
          },
          "sub_affiliate": {
            "type": "string",
            "description": "A more granular or subordinate affiliate identifier."
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. Subscription metadata will be inherited by resulting transactions."
          }
        }
      },
      "CSPSubscriptionItem": {
        "type": "object",
        "required": [
          "object",
          "id",
          "product"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "index": {
            "type": "integer",
            "description": "Sequential index of all items on the subscription."
          },
          "product": {
            "$ref": "#/components/schemas/CSPProduct"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          },
          "created": {
            "type": "string",
            "description": "The datetime this item was added to the subscription.",
            "format": "datetime"
          },
          "ends": {
            "type": "string",
            "description": "The datetime this item was removed from the subscription (end of service).",
            "format": "datetime"
          },
          "starts": {
            "type": "string",
            "description": "The datetime this item was effective/started on the subscription (start of service).",
            "format": "datetime"
          }
        }
      },
      "CSPProduct": {
        "type": "object",
        "required": [
          "id",
          "status",
          "descriptions"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "descriptions": {
            "type": "object",
            "properties": {
              "total_count": {
                "type": "integer",
                "description": "Integer count of the number of items in the returned list."
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductDescription"
                }
              }
            },
            "description": "Language-specific product/service descriptions"
          },
          "status": {
            "type": "string",
            "description": "CSPs may define whether they want to declare a product as available to offer.",
            "enum": [
              "Active",
              "Suspended"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        }
      },
      "CSPAccountReference": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Account represents an Aggregator’s customer."
      },
      "CSPRefundRequest": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The date/time at which the refund was requested.",
            "format": "date-time"
          },
          "partnerCode": {
            "type": "string",
            "description": "A unique code representing the OTT submitting the refund."
          },
          "amount": {
            "type": "number",
            "description": "Amount of the refund. Must be positive (non-zero) and less than or equal to the as-yet-un-refunded balance of the specified transaction. Ignored if refundItems are specified."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction; defaults to USD."
          },
          "accountId": {
            "$ref": "#/components/schemas/ID"
          },
          "note": {
            "type": "string",
            "description": "Free-form specified note about refund."
          },
          "reasonCode": {
            "type": "string",
            "description": "Reason code for refund.",
            "enum": [
              "fraud",
              "purchase-not-approved",
              "entitlement-error",
              "billing-error",
              "account-cancelled",
              "general-error"
            ]
          },
          "refund_items": {
            "type": "array",
            "description": "For item-level refunds, specifies the transaction items to refund with details.",
            "items": {
              "$ref": "#/components/schemas/OTTRefundItem"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/METADATA"
          }
        },
        "description": "The Refund object provides a way to reverse a charge, refunding money to the customer. You can create, and retrieve individual Refunds; as well as list all existing Refunds. Refunds require a transaction – a refund can only be executed against an existing, successfully captured transaction. Refunds can be issued for any valid amount (in the currency of the original transaction) up to the as-yet un-refunded balance of the original transaction. You can issue any number of refunds on a given transaction (until it has been fully refunded)."
      },
      "CSPTransactionRequest": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "created": {
            "type": "string",
            "description": "The time this transaction was initiated.",
            "format": "date-time"
          },
          "partnerCode": {
            "type": "string",
            "description": "A unique code representing the OTT submitting the transaction."
          },
          "amount": {
            "type": "number",
            "description": "The net amount of the charge presented by this transaction, as a decimal. Must be positive (zero allowed)."
          },
          "currency": {
            "type": "string",
            "description": "The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) Currency Code of this transaction"
          },
          "account": {
            "$ref": "#/components/schemas/CSPAccountReference"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodRef"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/METADATA"
              }
            ],
            "description": "A set of key/value pairs that you can attach to an object. Useful for storing additional information. For transactions resulting from a subscription, the metadata is also inherited from the subscription."
          },
          "items": {
            "type": "array",
            "description": "The array of Transaction Items belonging to this transaction. Items correspond to the charges.",
            "items": {
              "$ref": "#/components/schemas/OTTTransactionItem"
            }
          },
          "billing_descriptor": {
            "type": "string",
            "description": "Optional “soft descriptor” to send to the Aggregator for this transaction."
          },
          "original_billing_date": {
            "type": "string",
            "description": "The original scheduled billing date associated with the billing for which this transaction collects funds. For an initial attempt, this is the same as the transaction date; for a retry transaction this is the original attempt date.",
            "format": "date-time"
          }
        },
        "description": "The Transaction object provides a way to charge a customer."
      },
      "CSPTransactionResponse": {
        "required": [
          "status",
          "confirmationId"
        ],
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 32,
            "type": "string",
            "enum": [
              "success",
              "failure"
            ],
            "description": "Indicates if the request was processed succesfully or not."
          },
          "confirmationId": {
            "maxLength": 256,
            "type": "string",
            "description": "An aggregator generated identifier to keep track of the confirmation received."
          }
        }
      }
    },
    "parameters": {
      "filter": {
        "in": "query",
        "name": "filter",
        "schema": {
          "type": "string"
        },
        "description": "The filtering conditions: property names or property paths using filtering operators and values.\n\nThe supported operators are:\n\n| Operator | Description |\n| ------- | --------|\n| eq | Equal  |\n| ne  | Not equal  \n| gt  | Greater than\n| ge  | Greater than or equal  \n| lt  | Less than  \n| le  | Less than or equal\n| sw  | Start with\n| ew  | End with\n| co  | Contains\n| and  | Logical and  \n| or  | Logical or\n| not  | Logical negation\n| ( )  | Precedence grouping\n"
      },
      "limitParam": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "description": "A limit on the number of objects to be returned, between 1 and 100."
      },
      "offsetParam": {
        "name": "offset",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0
        },
        "description": "The number of items to skip before returning the results"
      },
      "page": {
        "name": "page",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "description": "The results page number."
      },
      "size": {
        "in": "query",
        "name": "size",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "description": "The number of items to be returned."
      },
      "key": {
        "in": "query",
        "name": "key",
        "schema": {
          "type": "string"
        },
        "description": "The name of the object property.\n"
      },
      "include": {
        "in": "query",
        "name": "include",
        "schema": {
          "type": "string"
        },
        "description": "The include data specification: A string composed of comma separated property names. Property paths are supported, property paths use periods as separators. If properties have a large number of items, a page number and size can be provided, following the property name in squeare brackets (e.g.: bookmarks[1|20]).\n"
      },
      "filterNoGrouping": {
        "in": "query",
        "name": "filter",
        "schema": {
          "type": "string"
        },
        "description": "The filtering conditions: property names or property paths using filtering operators and values.\n\nThe supported operators are:\n\n| Operator | Description |\n| ------- | --------|\n| eq | Equal  |\n| ne  | Not equal  \n| gt  | Greater than\n| ge  | Greater than or equal  \n| lt  | Less than  \n| le  | Less than or equal\n| sw  | Start with\n| ew  | End with\n| co  | Contains\n| and  | Logical and  \n| or  | Logical or\n| not  | Logical negation\n\nPrecedence order for logical operators: not, and, or.\n"
      },
      "orderBy": {
        "in": "query",
        "name": "orderBy",
        "schema": {
          "type": "string"
        },
        "description": "This contains a comma-separated list of expressions used to sort the items.\n\nThe expression MAY include the prefix \"+\" for ascending or \"-\" for descending. If \"+\" or \"-\" is not specified, ascending order is used.\n\nNULL values are sorted as \"less than\" non-NULL values.\n\nItems are sorted by the result values of the first expression, and then items with the same value for the first expression are sorted by the result value of the second expression, and so on. The sort order is the inherent order for the type of the property.\n"
      },
      "starting_after": {
        "in": "query",
        "name": "starting_after",
        "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
        "schema": {
          "type": "integer"
        }
      },
      "ending_before": {
        "in": "query",
        "name": "ending_before",
        "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
        "schema": {
          "type": "integer"
        }
      },
      "paymentMethodPath": {
        "in": "path",
        "name": "payment_method",
        "required": true,
        "description": "A payment method identifier.",
        "schema": {
          "$ref": "#/components/schemas/ID"
        }
      },
      "campaign": {
        "in": "path",
        "name": "campaign",
        "description": "The id or the vid of the campaigns to retrieve.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "code": {
        "in": "path",
        "name": "code",
        "description": "The id or the vid of the campaigns to retrieve.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "account": {
        "in": "query",
        "name": "account",
        "description": "The Account id or vid to filter Events by.",
        "schema": {
          "$ref": "#/components/schemas/ID"
        }
      },
      "entitlement": {
        "in": "query",
        "name": "entitlement",
        "description": "The id of the entitlement.",
        "schema": {
          "$ref": "#/components/schemas/ID"
        }
      },
      "includeChildren": {
        "in": "query",
        "name": "include_children",
        "description": "Indicates whether or not to return any existing child accounts’ entitlements when an account is specified.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "showAll": {
        "in": "query",
        "name": "show_all",
        "description": "true displays all entitlements, regardless of time or state. false displays entitlements that are currently active, and entitlements that become active in the future",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "X-B3-TraceId": {
        "in": "header",
        "name": "X-B3-TraceId",
        "schema": {
          "type": "string"
        },
        "description": "The TraceId indicates the overall ID of the trace. Every span in a trace shares this ID. The X-B3-TraceId header is encoded as 32 or 16 lower-hex characters. For example, a 128-bit TraceId header might look like 463ac35c9f6413ad48485a3953bb6124."
      },
      "X-B3-SpanId": {
        "in": "header",
        "name": "X-B3-SpanId",
        "schema": {
          "type": "string"
        },
        "description": "The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted; it may or may not be derived from the value of the TraceId. The X-B3-SpanId header is encoded as 16 lower-hex characters. For example, a SpanId header might look like a2fb4a1d1a96d312. Unless propagating only the Sampling State, the X-B3-SpanId header is required."
      },
      "X-B3-ParentSpanId": {
        "in": "header",
        "name": "X-B3-ParentSpanId",
        "schema": {
          "type": "string"
        },
        "description": "The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, there is no ParentSpanId. The X-B3-ParentSpanId header may be present on a child span and must be absent on the root span. It is encoded as 16 lower-hex characters. For example, a ParentSpanId header might look like 0020000000000001."
      },
      "X-Aggregator-Code": {
        "in": "header",
        "name": "X-Aggregator-Code",
        "schema": {
          "type": "string",
          "maxLength": 16
        },
        "description": "The aggregator organization code. Organization code must be provided either via HTTP header or query parameter. If both are provided, HTTP header will be used.",
        "required": false
      },
      "aggregatorCode": {
        "in": "query",
        "name": "aggregatorCode",
        "schema": {
          "type": "string",
          "maxLength": 16
        },
        "description": "The aggregator organization code. Organization code must be provided either via HTTP header or query parameter. If both are provided, HTTP header will be used.",
        "required": false
      },
      "M1-Organization-Code": {
        "in": "header",
        "name": "M1-Organization-Code",
        "schema": {
          "type": "string",
          "maxLength": 16
        },
        "description": "The aggregator organization code. Organization code must be provided either via HTTP header or query parameter. If both are provided, HTTP header will be used.",
        "required": false
      },
      "organizationCode": {
        "in": "query",
        "name": "organizationCode",
        "schema": {
          "type": "string",
          "maxLength": 16
        },
        "description": "The aggregator organization code. Organization code must be provided either via HTTP header or query parameter. If both are provided, HTTP header will be used.",
        "required": false
      },
      "reasonCode": {
        "in": "query",
        "name": "reason_code",
        "description": "The id or the vid of the predefined CancelReason.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "Content-Type": {
        "description": "The content-type of request body.",
        "required": true,
        "schema": {
          "maxLength": 56,
          "minLength": 32,
          "pattern": ".*$",
          "type": "string"
        },
        "example": "application/json; charset=UTF-8"
      }
    },
    "requestBodies": {
      "creditRequest": {
        "description": "JSON A (new) Credit sub-resource. This represent a brand new “grant” of a particular type of credit to be issued and maintained for the specified Account",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Credit"
            }
          }
        },
        "required": true
      },
      "accountRequest": {
        "description": "JSON A full Account object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        },
        "required": true
      },
      "currencyAmountRequest": {
        "description": "JSON A full Currency Amount object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CurrencyAmount"
            }
          }
        }
      },
      "tokenAmountRequest": {
        "description": "JSON A full Token Amount object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TokenAmount"
            }
          }
        }
      },
      "entitlementRequest": {
        "description": "JSON A full Entitlement object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Entitlement"
            }
          }
        }
      },
      "entitlementEvent": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "eventType",
                "entitlement"
              ],
              "properties": {
                "eventType": {
                  "type": "string",
                  "enum": [
                    "entitlementStarted",
                    "entitlementStopped"
                  ]
                },
                "entitlement": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          }
        }
      },
      "productRequest": {
        "description": "JSON A full product object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "ratePlanRequest": {
        "description": "JSON A full rate plan object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RatePlan"
            }
          }
        }
      },
      "tokenRequest": {
        "description": "JSON A full token object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        }
      },
      "seasonSetRequest": {
        "description": "JSON A full SeasonSet object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SeasonSet"
            }
          }
        }
      },
      "transactionRequest": {
        "description": "JSON A full transaction object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "refundRequest": {
        "description": "JSON A full refund object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Refund"
            }
          }
        }
      },
      "billingplanRequest": {
        "description": "JSON A full Time Interval object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BillingPlan"
            }
          }
        }
      },
      "campaignsRequest": {
        "description": "JSON A full Campaigns object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Campaigns"
            }
          }
        }
      },
      "subscriptionRequest": {
        "description": "JSON A full Subscription object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        },
        "required": true
      },
      "paymentMethodRequest": {
        "description": "JSON A full payment method object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        }
      },
      "googleTokenRequest": {
        "description": "Token JSON",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GoogleToken"
            }
          }
        }
      }
    }
  }
}
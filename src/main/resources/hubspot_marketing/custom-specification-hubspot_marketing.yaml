{
  "openapi": "3.0.3",
  "info": {
    "title": "Marketing Events Extension",
    "description": "These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to:\n* Create, Read or update Marketing Event information in HubSpot\n* Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event.\n* Specify a URL that can be called to get the details of a Marketing Event.\n",
    "version": "v3"
  },
  "servers": [
    {
      "url": "https://api.hubapi.com/"
    }
  ],
  "tags": [
    {
      "name": "Settings",
      "description": "Operations to interact with URL settings for an external application."
    },
    {
      "name": "Basic",
      "description": "Endpoints that allow you to create or modify the state of an individual Marketing Event in HubSpot."
    },
    {
      "name": "Batch",
      "description": "Endpoints that allow you to create or modify the state of multiple Marketing Events in HubSpot."
    },
    {
      "name": "Search",
      "description": "Endpoints that allow you to search for Marketing Events in HubSpot."
    },
    {
      "name": "Subscriber State Changes",
      "description": "Operations to mark HubSpot contacts as registered, attended or cancelled a registration to a Marketing Event."
    },
    {
      "name": "Single_Send"
    },
    {
      "name": "Public_Smtp_Tokens"
    }
  ],
  "paths": {
    "/marketing/v3/marketing-events/events": {
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Create a marketing event",
        "description": "Creates a new marketing event in HubSpot",
        "operationId": "post-/marketing/v3/marketing-events/events_create",
        "requestBody": {
          "description": "The details of the marketing event to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketingEventCreateRequestParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingEventDefaultResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/events/delete": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Delete multiple marketing events",
        "description": "Bulk delete a number of marketing events in HubSpot",
        "operationId": "post-/marketing/v3/marketing-events/events/delete_archive",
        "requestBody": {
          "description": "The details of the marketing events to delete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputMarketingEventExternalUniqueIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/events/search": {
      "get": {
        "tags": [
            "Search"
        ],
        "summary": "Search for marketing events",
        "description": "Search for marketing events that have an event id that starts with the query string",
        "operationId": "get-/marketing/v3/marketing-events/events/search_doSearch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The partial event id to search for",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.read"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/events/upsert": {
      "post": {
        "tags": [
            "Batch"
        ],
        "summary": "Create or update multiple marketing events",
        "description": "Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.",
        "operationId": "post-/marketing/v3/marketing-events/events/upsert_doUpsert",
        "requestBody": {
          "description": "The details of the marketing events to upsert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputMarketingEventCreateRequestParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseMarketingEventPublicDefaultResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/events/{externalEventId}": {
      "get": {
        "tags": [
            "Basic"
        ],
        "summary": "Get a marketing event",
        "description": "Returns the details of the Marketing Event with the specified id, if one exists.",
        "operationId": "get-/marketing/v3/marketing-events/events/{externalEventId}_getById",
        "parameters": [
          {
            "name": "externalEventId",
            "in": "path",
            "description": "The id of the marketing event to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "in": "query",
            "description": "The account id associated with the marketing event",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingEventPublicReadResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
            "Basic"
        ],
        "summary": "Create or update a marketing event",
        "description": "Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.",
        "operationId": "put-/marketing/v3/marketing-events/events/{externalEventId}_replace",
        "parameters": [
          {
            "name": "externalEventId",
            "in": "path",
            "description": "The id of the marketing event to upsert",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the marketing event to upsert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketingEventCreateRequestParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingEventPublicDefaultResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Basic"
        ],
        "summary": "Delete a marketing event",
        "description": "Deletes an existing Marketing Event with the specified id, if one exists.",
        "operationId": "delete-/marketing/v3/marketing-events/events/{externalEventId}_archive",
        "parameters": [
          {
            "name": "externalEventId",
            "in": "path",
            "description": "The id of the marketing event to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "in": "query",
            "description": "The account id associated with the marketing event",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
            "Basic"
        ],
        "summary": "Update a marketing event",
        "description": "Updates an existing Marketing Event with the specified id, if one exists.",
        "operationId": "patch-/marketing/v3/marketing-events/events/{externalEventId}_update",
        "parameters": [
          {
            "name": "externalEventId",
            "in": "path",
            "description": "The id of the marketing event to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "in": "query",
            "description": "The account id associated with the marketing event",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the marketing event to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketingEventUpdateRequestParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingEventPublicDefaultResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/events/{externalEventId}/cancel": {
      "post": {
        "tags": [
            "Basic"
        ],
        "summary": "Mark a marketing event as cancelled",
        "description": "Mark a marketing event as cancelled.",
        "operationId": "post-/marketing/v3/marketing-events/events/{externalEventId}/cancel_doCancel",
        "parameters": [
          {
            "name": "externalEventId",
            "in": "path",
            "description": "The id of the marketing event to mark as cancelled",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "in": "query",
            "description": "The account id associated with the marketing event",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingEventDefaultResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert": {
      "post": {
        "tags": [
            "Subscriber State Changes"
        ],
        "summary": "Record",
        "description": "Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses.",
        "operationId": "post-/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert_doEmailUpsertById",
        "parameters": [
          {
            "name": "externalEventId",
            "in": "path",
            "description": "The id of the marketing event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberState",
            "in": "path",
            "description": "The new subscriber state for the HubSpot contacts and the specified marketing event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "in": "query",
            "description": "The account id associated with the marketing event",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the contacts to subscribe to the event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputMarketingEventEmailSubscriber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert": {
      "post": {
        "tags": [
            "Subscriber State Changes"
        ],
        "summary": "Record",
        "description": "Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.",
        "operationId": "post-/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert_doUpsertById",
        "parameters": [
          {
            "name": "externalEventId",
            "in": "path",
            "description": "The id of the marketing event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberState",
            "in": "path",
            "description": "The new subscriber state for the HubSpot contacts and the specified marketing event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "in": "query",
            "description": "The account id associated with the marketing event",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the contacts to subscribe to the event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInputMarketingEventSubscriber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "crm.objects.marketing_events.write"
            ]
          }
        ]
      }
    },
    "/marketing/v3/marketing-events/{appId}/settings": {
      "get": {
        "tags": [
            "Settings"
        ],
        "summary": "Retrieve the application settings",
        "description": "Retrieve the current settings for the application.",
        "operationId": "get-/marketing/v3/marketing-events/{appId}/settings_getAll",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The id of the application to retrieve the settings for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetailSettings"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      },
      "post": {
        "tags": [
            "Settings"
        ],
        "summary": "Update the application settings",
        "description": "Create or update the current settings for the application.",
        "operationId": "post-/marketing/v3/marketing-events/{appId}/settings_create",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The id of the application to update the settings for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new application settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDetailSettingsUrl"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetailSettings"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "developer_hapikey": []
          }
        ]
      }
    },
    "/marketing/v3/transactional/single-email/send": {
      "post": {
        "tags": [
            "Single_Send"
        ],
        "summary": "Send a single transactional email asynchronously.",
        "description": "Asynchronously send a transactional email. Returns the status of the email send with a statusId that can be used to continuously query for the status using the Email Send Status API.",
        "operationId": "post-/marketing/v3/transactional/single-email/send_sendEmail",
        "requestBody": {
          "description": "A request object describing the email to send.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicSingleSendRequestEgg"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSendStatusView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "transactional-email"
            ]
          }
        ],
        "x-hubspot-rate-limit-exemptions": [
            "daily",
            "ten-secondly"
        ]
      }
    },
    "/marketing/v3/transactional/smtp-tokens": {
      "get": {
        "tags": [
            "Public_Smtp_Tokens"
        ],
        "summary": "Query SMTP API tokens by campaign name or an emailCampaignId.",
        "description": "Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.",
        "operationId": "get-/marketing/v3/transactional/smtp-tokens_getTokensPage",
        "parameters": [
          {
            "name": "campaignName",
            "in": "query",
            "description": "A name for the campaign tied to the SMTP API token.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailCampaignId",
            "in": "query",
            "description": "Identifier assigned to the campaign provided during the token creation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Starting point to get the next set of results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of tokens to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponseSmtpApiTokenViewForwardPaging"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "transactional-email"
            ]
          }
        ]
      },
      "post": {
        "tags": [
            "Public_Smtp_Tokens"
        ],
        "summary": "Create a SMTP API token.",
        "description": "Create a SMTP API token.",
        "operationId": "post-/marketing/v3/transactional/smtp-tokens_createToken",
        "requestBody": {
          "description": "A request object that includes the campaign name tied to the token and whether contacts should be created for email recipients.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmtpApiTokenRequestEgg"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpApiTokenView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "transactional-email"
            ]
          }
        ]
      }
    },
    "/marketing/v3/transactional/smtp-tokens/{tokenId}": {
      "get": {
        "tags": [
            "Public_Smtp_Tokens"
        ],
        "summary": "Query a single token by ID.",
        "description": "Query a single token by ID.",
        "operationId": "get-/marketing/v3/transactional/smtp-tokens/{tokenId}_getTokenById",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "Identifier generated when a token is created.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpApiTokenView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "transactional-email"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
            "Public_Smtp_Tokens"
        ],
        "summary": "Delete a single token by ID.",
        "description": "Delete a single token by ID.",
        "operationId": "delete-/marketing/v3/transactional/smtp-tokens/{tokenId}_archiveToken",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "Identifier generated when a token is created.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "transactional-email"
            ]
          }
        ]
      }
    },
    "/marketing/v3/transactional/smtp-tokens/{tokenId}/password-reset": {
      "post": {
        "tags": [
            "Public_Smtp_Tokens"
        ],
        "summary": "Reset the password of an existing token.",
        "description": "Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.",
        "operationId": "post-/marketing/v3/transactional/smtp-tokens/{tokenId}/password-reset_resetPassword",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "Identifier generated when a token is created.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpApiTokenView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "oauth2_legacy": [
                "transactional-email"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BatchInputMarketingEventCreateRequestParams": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingEventCreateRequestParams"
            }
          }
        }
      },
      "BatchInputMarketingEventEmailSubscriber": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "description": "List of marketing event details to create or update",
            "items": {
              "$ref": "#/components/schemas/MarketingEventEmailSubscriber"
            }
          }
        },
        "description": "List of marketing event details to create or update"
      },
      "BatchInputMarketingEventExternalUniqueIdentifier": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingEventExternalUniqueIdentifier"
            }
          }
        }
      },
      "BatchInputMarketingEventSubscriber": {
        "required": [
            "inputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "description": "List of HubSpot contacts to subscribe to the marketing event",
            "items": {
              "$ref": "#/components/schemas/MarketingEventSubscriber"
            }
          }
        },
        "description": "List of HubSpot contacts to subscribe to the marketing event"
      },
      "BatchResponseMarketingEventPublicDefaultResponse": {
        "required": [
            "completedAt",
            "results",
            "startedAt",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingEventPublicDefaultResponse"
            }
          },
          "numErrors": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardError"
            }
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingEventExternalUniqueIdentifier"
            }
          }
        }
      },
      "Error": {
        "required": [
            "category",
            "correlationId",
            "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human readable message describing the error along with remediation steps where appropriate",
            "example": "An error occurred"
          },
          "correlationId": {
            "type": "string",
            "description": "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format": "uuid",
            "example": "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "category": {
            "type": "string",
            "description": "The error category"
          },
          "subCategory": {
            "type": "string",
            "description": "A specific category that contains more specific detail about the error"
          },
          "errors": {
            "type": "array",
            "description": "further information about the error",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Context about the error condition",
            "example": {
              "invalidPropertyName": [
                  "propertyValue"
              ],
              "missingScopes": [
                  "scope1",
                  "scope2"
              ]
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of link names to associated URIs containing documentation about the error or recommended remediation steps"
          }
        },
        "example": {
          "message": "Invalid input (details will vary based on the error)",
          "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category": "VALIDATION_ERROR",
          "links": {
            "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "ErrorCategory": {
        "required": [
            "httpStatus",
            "name"
        ],
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "string",
            "enum": [
                "CONTINUE",
                "SWITCHING_PROTOCOLS",
                "PROCESSING",
                "OK",
                "CREATED",
                "ACCEPTED",
                "NON_AUTHORITATIVE_INFORMATION",
                "NO_CONTENT",
                "RESET_CONTENT",
                "PARTIAL_CONTENT",
                "MULTI_STATUS",
                "ALREADY_REPORTED",
                "IM_USED",
                "MULTIPLE_CHOICES",
                "MOVED_PERMANENTLY",
                "FOUND",
                "SEE_OTHER",
                "NOT_MODIFIED",
                "USE_PROXY",
                "TEMPORARY_REDIRECT",
                "PERMANENT_REDIRECT",
                "BAD_REQUEST",
                "UNAUTHORIZED",
                "PAYMENT_REQUIRED",
                "FORBIDDEN",
                "NOT_FOUND",
                "METHOD_NOT_ALLOWED",
                "NOT_ACCEPTABLE",
                "PROXY_AUTHENTICATION_REQUIRED",
                "REQUEST_TIMEOUT",
                "CONFLICT",
                "GONE",
                "LENGTH_REQUIRED",
                "PRECONDITION_FAILED",
                "REQUEST_ENTITY_TOO_LARGE",
                "REQUEST_URI_TOO_LONG",
                "UNSUPPORTED_MEDIA_TYPE",
                "REQUESTED_RANGE_NOT_SATISFIABLE",
                "EXPECTATION_FAILED",
                "IM_A_TEAPOT",
                "MISDIRECTED_REQUEST",
                "UNPROCESSABLE_ENTITY",
                "LOCKED",
                "FAILED_DEPENDENCY",
                "UPGRADE_REQUIRED",
                "PRECONDITION_REQUIRED",
                "TOO_MANY_REQUESTS",
                "REQUEST_HEADERS_FIELDS_TOO_LARGE",
                "INTERNAL_STALE_SERVICE_DISCOVERY",
                "UNAVAILABLE_FOR_LEGAL_REASONS",
                "INTERNAL_SERVER_ERROR",
                "NOT_IMPLEMENTED",
                "BAD_GATEWAY",
                "SERVICE_UNAVAILABLE",
                "GATEWAY_TIMEOUT",
                "HTTP_VERSION_NOT_SUPPORTED",
                "VARIANT_ALSO_NEGOTIATES",
                "INSUFFICIENT_STORAGE",
                "LOOP_DETECTED",
                "NOT_EXTENDED",
                "NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ErrorDetail": {
        "required": [
            "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human readable message describing the error along with remediation steps where appropriate"
          },
          "in": {
            "type": "string",
            "description": "The name of the field or parameter in which the error was found."
          },
          "code": {
            "type": "string",
            "description": "The status code associated with the error detail"
          },
          "subCategory": {
            "type": "string",
            "description": "A specific category that contains more specific detail about the error"
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Context about the error condition",
            "example": {
              "missingScopes": [
                  "scope1",
                  "scope2"
              ]
            }
          }
        }
      },
      "EventDetailSettings": {
        "required": [
            "appId",
            "eventDetailsUrl"
        ],
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer",
            "description": "The id of the application the settings are for",
            "format": "int32"
          },
          "eventDetailsUrl": {
            "type": "string",
            "description": "The url that will be used to fetch marketing event details by id"
          }
        }
      },
      "EventDetailSettingsUrl": {
        "required": [
            "eventDetailsUrl"
        ],
        "type": "object",
        "properties": {
          "eventDetailsUrl": {
            "type": "string",
            "description": "The url that will be used to fetch marketing event details by id. Must contain a `%s` character sequence that will be substituted with the event id. For example: `https://my.event.app/events/%s`"
          }
        }
      },
      "MarketingEventCreateRequestParams": {
        "required": [
            "eventName",
            "eventOrganizer",
            "externalAccountId",
            "externalEventId"
        ],
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string",
            "description": "The name of the marketing event."
          },
          "eventType": {
            "type": "string",
            "description": "Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`"
          },
          "startDateTime": {
            "type": "string",
            "description": "The start date and time of the marketing event.",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "description": "The end date and time of the marketing event.",
            "format": "date-time"
          },
          "eventOrganizer": {
            "type": "string",
            "description": "The name of the organizer of the marketing event."
          },
          "eventDescription": {
            "type": "string",
            "description": "The description of the marketing event."
          },
          "eventUrl": {
            "type": "string",
            "description": "A URL in the external event application where the marketing event can be managed."
          },
          "eventCancelled": {
            "type": "boolean",
            "description": "Indicates if the marketing event has been cancelled.  Defaults to `false`"
          },
          "customProperties": {
            "type": "array",
            "description": "A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.\nIn order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.\n",
            "items": {
              "$ref": "#/components/schemas/PropertyValue"
            }
          },
          "externalAccountId": {
            "type": "string",
            "description": "The accountId that is associated with this marketing event in the external event application."
          },
          "externalEventId": {
            "type": "string",
            "description": "The id of the marketing event in the external event application."
          }
        }
      },
      "MarketingEventDefaultResponse": {
        "required": [
            "eventName",
            "eventOrganizer"
        ],
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string",
            "description": "The name of the marketing event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the marketing event."
          },
          "startDateTime": {
            "type": "string",
            "description": "The start date and time of the marketing event.",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "description": "The end date and time of the marketing event.",
            "format": "date-time"
          },
          "eventOrganizer": {
            "type": "string",
            "description": "The name of the organizer of the marketing event."
          },
          "eventDescription": {
            "type": "string",
            "description": "The description of the marketing event."
          },
          "eventUrl": {
            "type": "string",
            "description": "The URL in the external event application where the marketing event can be managed."
          },
          "eventCancelled": {
            "type": "boolean",
            "description": "Indicates if the marketing event has been cancelled."
          },
          "customProperties": {
            "type": "array",
            "description": "A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.\nIn order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.\n",
            "items": {
              "$ref": "#/components/schemas/PropertyValue"
            }
          }
        }
      },
      "MarketingEventEmailSubscriber": {
        "required": [
            "email",
            "interactionDateTime"
        ],
        "type": "object",
        "properties": {
          "interactionDateTime": {
            "type": "integer",
            "description": "The date and time at which the contact subscribed to the event.",
            "format": "int64"
          },
          "email": {
            "type": "string",
            "description": "The email address of the contact in HubSpot to associate with the event. Note that the contact must already exist in HubSpot; a contact will not be created."
          }
        }
      },
      "MarketingEventExternalUniqueIdentifier": {
        "required": [
            "appId",
            "externalAccountId",
            "externalEventId"
        ],
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer",
            "description": "The id of the application that created the marketing event in HubSpot.",
            "format": "int32"
          },
          "externalAccountId": {
            "type": "string",
            "description": "The accountId that is associated with this marketing event in the external event application."
          },
          "externalEventId": {
            "type": "string",
            "description": "The id of the marketing event in the external event application."
          }
        }
      },
      "MarketingEventPublicDefaultResponse": {
        "required": [
            "createdAt",
            "eventName",
            "eventOrganizer",
            "id",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string",
            "description": "The name of the marketing event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the marketing event."
          },
          "startDateTime": {
            "type": "string",
            "description": "The start date and time of the marketing event.",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "description": "The end date and time of the marketing event.",
            "format": "date-time"
          },
          "eventOrganizer": {
            "type": "string",
            "description": "The name of the organizer of the marketing event."
          },
          "eventDescription": {
            "type": "string",
            "description": "The description of the marketing event."
          },
          "eventUrl": {
            "type": "string",
            "description": "A URL in the external event application where the marketing event can be managed."
          },
          "eventCancelled": {
            "type": "boolean",
            "description": "Indicates if the marketing event has been cancelled."
          },
          "customProperties": {
            "type": "array",
            "description": "A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.\nIn order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.\n",
            "items": {
              "$ref": "#/components/schemas/PropertyValue"
            }
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MarketingEventPublicReadResponse": {
        "required": [
            "attendees",
            "cancellations",
            "createdAt",
            "eventName",
            "eventOrganizer",
            "externalEventId",
            "id",
            "noShows",
            "registrants",
            "updatedAt"
        ],
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string",
            "description": "The name of the marketing event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the marketing event."
          },
          "startDateTime": {
            "type": "string",
            "description": "The start date and time of the marketing event.",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "description": "The end date and time of the marketing event.",
            "format": "date-time"
          },
          "eventOrganizer": {
            "type": "string",
            "description": "The name of the organizer of the marketing event."
          },
          "eventDescription": {
            "type": "string",
            "description": "The description of the marketing event."
          },
          "eventUrl": {
            "type": "string",
            "description": "A URL in the external event application where the marketing event can be managed."
          },
          "eventCancelled": {
            "type": "boolean",
            "description": "Indicates if the marketing event has been cancelled."
          },
          "customProperties": {
            "type": "array",
            "description": "A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.\nIn order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.\n",
            "items": {
              "$ref": "#/components/schemas/PropertyValue"
            }
          },
          "externalEventId": {
            "type": "string",
            "description": "The id of the marketing event in the external event application."
          },
          "registrants": {
            "type": "integer",
            "description": "The number of HubSpot contacts that registered for this marketing event.",
            "format": "int32"
          },
          "attendees": {
            "type": "integer",
            "description": "The number of HubSpot contacts that attended this marketing event.",
            "format": "int32"
          },
          "cancellations": {
            "type": "integer",
            "description": "The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.",
            "format": "int32"
          },
          "noShows": {
            "type": "integer",
            "description": "The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "MarketingEventSubscriber": {
        "required": [
            "interactionDateTime"
        ],
        "type": "object",
        "properties": {
          "interactionDateTime": {
            "type": "integer",
            "description": "The date and time at which the contact subscribed to the event.",
            "format": "int64"
          },
          "vid": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MarketingEventUpdateRequestParams": {
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string",
            "description": "The name of the marketing event."
          },
          "eventType": {
            "type": "string",
            "description": "Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`"
          },
          "startDateTime": {
            "type": "string",
            "description": "The start date and time of the marketing event.",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "description": "The end date and time of the marketing event.",
            "format": "date-time"
          },
          "eventOrganizer": {
            "type": "string",
            "description": "The name of the organizer of the marketing event."
          },
          "eventDescription": {
            "type": "string",
            "description": "The description of the marketing event."
          },
          "eventUrl": {
            "type": "string",
            "description": "A URL in the external event application where the marketing event can be managed."
          },
          "eventCancelled": {
            "type": "boolean",
            "description": "Indicates if the marketing event has been cancelled. Defaults to `false`"
          },
          "customProperties": {
            "type": "array",
            "description": "A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.\nIn order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.\n",
            "items": {
              "$ref": "#/components/schemas/PropertyValue"
            }
          }
        }
      },
      "PropertyValue": {
        "required": [
            "name",
            "requestId",
            "selectedByUser",
            "selectedByUserTimestamp",
            "source",
            "sourceId",
            "sourceLabel",
            "sourceMetadata",
            "sourceVid",
            "timestamp",
            "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "sourceId": {
            "type": "string"
          },
          "sourceLabel": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
                "IMPORT",
                "API",
                "FORM",
                "ANALYTICS",
                "MIGRATION",
                "SALESFORCE",
                "INTEGRATION",
                "CONTACTS_WEB",
                "WAL_INCREMENTAL",
                "TASK",
                "EMAIL",
                "WORKFLOWS",
                "CALCULATED",
                "SOCIAL",
                "BATCH_UPDATE",
                "SIGNALS",
                "BIDEN",
                "DEFAULT",
                "COMPANIES",
                "DEALS",
                "ASSISTS",
                "PRESENTATIONS",
                "TALLY",
                "SIDEKICK",
                "CRM_UI",
                "MERGE_CONTACTS",
                "PORTAL_USER_ASSOCIATOR",
                "INTEGRATIONS_PLATFORM",
                "BCC_TO_CRM",
                "FORWARD_TO_CRM",
                "ENGAGEMENTS",
                "SALES",
                "HEISENBERG",
                "LEADIN",
                "GMAIL_INTEGRATION",
                "ACADEMY",
                "SALES_MESSAGES",
                "AVATARS_SERVICE",
                "MERGE_COMPANIES",
                "SEQUENCES",
                "COMPANY_FAMILIES",
                "MOBILE_IOS",
                "MOBILE_ANDROID",
                "CONTACTS",
                "ASSOCIATIONS",
                "EXTENSION",
                "SUCCESS",
                "BOT",
                "INTEGRATIONS_SYNC",
                "AUTOMATION_PLATFORM",
                "CONVERSATIONS",
                "EMAIL_INTEGRATION",
                "CONTENT_MEMBERSHIP",
                "QUOTES",
                "BET_ASSIGNMENT",
                "QUOTAS",
                "BET_CRM_CONNECTOR",
                "MEETINGS",
                "MERGE_OBJECTS",
                "RECYCLING_BIN",
                "ADS",
                "AI_GROUP",
                "COMMUNICATOR",
                "SETTINGS",
                "PROPERTY_SETTINGS",
                "PIPELINE_SETTINGS",
                "COMPANY_INSIGHTS",
                "BEHAVIORAL_EVENTS",
                "PAYMENTS",
                "GOALS",
                "PORTAL_OBJECT_SYNC",
                "APPROVALS"
            ]
          },
          "selectedByUser": {
            "type": "boolean"
          },
          "selectedByUserTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "sourceVid": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "sourceMetadata": {
            "type": "string",
            "description": "Source metadata encoded as a base64 string. For example: `ZXhhbXBsZSBzdHJpbmc=`"
          },
          "requestId": {
            "type": "string"
          },
          "updatedByUserId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StandardError": {
        "required": [
            "category",
            "context",
            "errors",
            "links",
            "message",
            "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ErrorCategory"
          },
          "subCategory": {
            "type": "object",
            "properties": {}
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CollectionResponseSmtpApiTokenViewForwardPaging": {
        "required": [
            "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmtpApiTokenView"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/ForwardPaging"
          }
        }
      },
      "EmailSendStatusView": {
        "required": [
            "status",
            "statusId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "type": "string",
            "description": "Identifier used to query the status of the send."
          },
          "sendResult": {
            "type": "string",
            "description": "Result of the send.",
            "enum": [
                "SENT",
                "IDEMPOTENT_IGNORE",
                "QUEUED",
                "IDEMPOTENT_FAIL",
                "THROTTLED",
                "EMAIL_DISABLED",
                "PORTAL_SUSPENDED",
                "INVALID_TO_ADDRESS",
                "BLOCKED_DOMAIN",
                "PREVIOUSLY_BOUNCED",
                "EMAIL_UNCONFIRMED",
                "PREVIOUS_SPAM",
                "PREVIOUSLY_UNSUBSCRIBED_MESSAGE",
                "PREVIOUSLY_UNSUBSCRIBED_PORTAL",
                "INVALID_FROM_ADDRESS",
                "CAMPAIGN_CANCELLED",
                "VALIDATION_FAILED",
                "MTA_IGNORE",
                "BLOCKED_ADDRESS",
                "PORTAL_OVER_LIMIT",
                "PORTAL_EXPIRED",
                "PORTAL_MISSING_MARKETING_SCOPE",
                "MISSING_TEMPLATE_PROPERTIES",
                "MISSING_REQUIRED_PARAMETER",
                "PORTAL_AUTHENTICATION_FAILURE",
                "MISSING_CONTENT",
                "CORRUPT_INPUT",
                "TEMPLATE_RENDER_EXCEPTION",
                "GRAYMAIL_SUPPRESSED",
                "UNCONFIGURED_SENDING_DOMAIN",
                "UNDELIVERABLE",
                "CANCELLED_ABUSE",
                "QUARANTINED_ADDRESS",
                "ADDRESS_ONLY_ACCEPTED_ON_PROD",
                "PORTAL_NOT_AUTHORIZED_FOR_APPLICATION",
                "ADDRESS_LIST_BOMBED",
                "ADDRESS_OPTED_OUT",
                "RECIPIENT_FATIGUE_SUPPRESSED",
                "TOO_MANY_RECIPIENTS",
                "PREVIOUSLY_UNSUBSCRIBED_BRAND",
                "NON_MARKETABLE_CONTACT",
                "PREVIOUSLY_UNSUBSCRIBED_BUSINESS_UNIT"
            ]
          },
          "requestedAt": {
            "type": "string",
            "description": "Time when the send was requested.",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "description": "Time when the send began processing.",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "description": "Time when the send was completed.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Status of the send request.",
            "enum": [
                "PENDING",
                "PROCESSING",
                "CANCELED",
                "COMPLETE"
            ]
          },
          "eventId": {
            "$ref": "#/components/schemas/EventIdView"
          }
        },
        "description": "Describes the status of an email send request."
      },
      "EventIdView": {
        "required": [
            "created",
            "id"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "Time of event creation.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Identifier of event.",
            "format": "uuid"
          }
        },
        "description": "The ID of a send event."
      },
      "ForwardPaging": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NextPage"
          }
        }
      },
      "NextPage": {
        "required": [
            "after"
        ],
        "type": "object",
        "properties": {
          "after": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "PublicSingleSendEmail": {
        "required": [
            "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The From header for the email."
          },
          "to": {
            "type": "string",
            "description": "The recipient of the email."
          },
          "sendId": {
            "type": "string",
            "description": "ID for a particular send. No more than one email will be sent per sendId."
          },
          "replyTo": {
            "type": "array",
            "description": "List of Reply-To header values for the email.",
            "items": {
              "type": "string"
            }
          },
          "cc": {
            "type": "array",
            "description": "List of email addresses to send as Cc.",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "description": "List of email addresses to send as Bcc.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "A JSON object containing anything you want to override."
      },
      "PublicSingleSendRequestEgg": {
        "required": [
            "emailId",
            "message"
        ],
        "type": "object",
        "properties": {
          "emailId": {
            "type": "integer",
            "description": "The content ID for the transactional email, which can be found in email tool UI.",
            "format": "int32"
          },
          "message": {
            "$ref": "#/components/schemas/PublicSingleSendEmail"
          },
          "contactProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The contactProperties field is a map of contact property values. Each contact property value contains a name and value property. Each property will get set on the contact record and will be visible in the template under {{ contact.NAME }}. Use these properties when you want to set a contact property while you’re sending the email. For example, when sending a reciept you may want to set a last_paid_date property, as the sending of the receipt will have information about the last payment."
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            },
            "description": "The customProperties field is a map of property values. Each property value contains a name and value property. Each property will be visible in the template under {{ custom.NAME }}.\nNote: Custom properties do not currently support arrays. To provide a listing in an email, one workaround is to build an HTML list (either with tables or ul) and specify it as a custom property."
          }
        },
        "description": "A request to send a single transactional email asynchronously."
      },
      "SmtpApiTokenRequestEgg": {
        "required": [
            "campaignName",
            "createContact"
        ],
        "type": "object",
        "properties": {
          "createContact": {
            "type": "boolean",
            "description": "Indicates whether a contact should be created for email recipients."
          },
          "campaignName": {
            "type": "string",
            "description": "A name for the campaign tied to the SMTP API token."
          }
        },
        "description": "A request object to create a SMTP API token"
      },
      "SmtpApiTokenView": {
        "required": [
            "campaignName",
            "createContact",
            "createdAt",
            "createdBy",
            "emailCampaignId",
            "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User name to log into the HubSpot SMTP server."
          },
          "createdBy": {
            "type": "string",
            "description": "Email address of the user that sent the token creation request."
          },
          "password": {
            "type": "string",
            "description": "Password used to log into the HubSpot SMTP server."
          },
          "emailCampaignId": {
            "type": "string",
            "description": "Identifier assigned to the campaign provided in the token creation request."
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp generated when a token is created.",
            "format": "date-time"
          },
          "createContact": {
            "type": "boolean",
            "description": "Indicates whether a contact should be created for email recipients."
          },
          "campaignName": {
            "type": "string",
            "description": "A name for the campaign tied to the token."
          }
        },
        "description": "A SMTP API token provides both an ID and password that can be used to send email through the HubSpot SMTP API."
      }
    },
    "responses": {
      "Error": {
        "description": "An error occurred.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oauth2_legacy": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://app.hubspot.com/oauth/authorize",
            "tokenUrl": "https://api.hubapi.com/oauth/v1/token",
            "scopes": {
              "crm.objects.marketing_events.write": "Write marketing events",
              "crm.objects.marketing_events.read": "Read marketing events"
            }
          }
        }
      },
      "developer_hapikey": {
        "type": "apiKey",
        "name": "hapikey",
        "in": "query"
      }
    }
  },
  "x-hubspot-available-client-libraries": [
      "Node"
  ]
}